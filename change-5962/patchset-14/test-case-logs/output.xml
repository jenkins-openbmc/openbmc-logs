<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170824 16:37:42.604" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite name="Tests" source="/tmp/fspcibld/70/obmc-robot/tests" id="s1">
<kw type="setup" name="System Driver Data">
<doc>System driver information.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170824 16:37:43.217" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170824 16:37:43.217" status="FAIL" starttime="20170824 16:37:43.216"></status>
</kw>
<msg timestamp="20170824 16:37:43.217" level="INFO">${has_host} = False</msg>
<status endtime="20170824 16:37:43.217" status="PASS" starttime="20170824 16:37:43.216"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170824 16:37:43.218" status="PASS" starttime="20170824 16:37:43.218"></status>
</kw>
<status endtime="20170824 16:37:43.218" status="PASS" starttime="20170824 16:37:43.217"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170824 16:37:43.220" level="INFO">${port_num} = 22</msg>
<status endtime="20170824 16:37:43.220" status="PASS" starttime="20170824 16:37:43.219"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170824 16:37:43.220" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170824 16:37:43.220" status="PASS" starttime="20170824 16:37:43.220"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170824 16:37:43.221" level="INFO">${https_num} = 443</msg>
<status endtime="20170824 16:37:43.221" status="PASS" starttime="20170824 16:37:43.220"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170824 16:37:43.221" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170824 16:37:43.222" status="PASS" starttime="20170824 16:37:43.221"></status>
</kw>
<status endtime="20170824 16:37:43.222" status="PASS" starttime="20170824 16:37:43.219"></status>
</kw>
<status endtime="20170824 16:37:43.222" status="PASS" starttime="20170824 16:37:43.218"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170824 16:37:43.223" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170824 16:37:43.223" status="FAIL" starttime="20170824 16:37:43.222"></status>
</kw>
<msg timestamp="20170824 16:37:43.223" level="INFO">${has_port} = False</msg>
<status endtime="20170824 16:37:43.223" status="PASS" starttime="20170824 16:37:43.222"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170824 16:37:43.225" status="PASS" starttime="20170824 16:37:43.224"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170824 16:37:43.225" status="PASS" starttime="20170824 16:37:43.225"></status>
</kw>
<status endtime="20170824 16:37:43.225" status="PASS" starttime="20170824 16:37:43.224"></status>
</kw>
<status endtime="20170824 16:37:43.225" status="PASS" starttime="20170824 16:37:43.223"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170824 16:37:43.226" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170824 16:37:44.937" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170824 16:37:44.937" status="PASS" starttime="20170824 16:37:43.226"></status>
</kw>
<status endtime="20170824 16:37:44.938" status="PASS" starttime="20170824 16:37:43.215"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170824 16:37:44.939" level="INFO">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg timestamp="20170824 16:37:45.016" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170824 16:37:45.016" level="INFO">${output} = VERSION_ID="v1.99.8-259-g68f4dc1"</msg>
<msg timestamp="20170824 16:37:45.016" level="INFO">${stderr} = </msg>
<status endtime="20170824 16:37:45.016" status="PASS" starttime="20170824 16:37:44.939"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170824 16:37:45.017" level="INFO">Length is 0</msg>
<status endtime="20170824 16:37:45.017" status="PASS" starttime="20170824 16:37:45.017"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20170824 16:37:45.017" level="INFO">VERSION_ID="v1.99.8-259-g68f4dc1"</msg>
<status endtime="20170824 16:37:45.017" status="PASS" starttime="20170824 16:37:45.017"></status>
</kw>
<status endtime="20170824 16:37:45.018" status="PASS" starttime="20170824 16:37:44.938"></status>
</kw>
<status endtime="20170824 16:37:45.018" status="PASS" starttime="20170824 16:37:44.938"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170824 16:37:45.019" level="INFO">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg timestamp="20170824 16:37:45.098" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170824 16:37:45.099" level="INFO">${stdout} = </msg>
<msg timestamp="20170824 16:37:45.099" level="INFO">${stderr} = sh: /usr/sbin/pflash: No such file or directory
cat: can't open '/tmp/out.txt': No such file or directory</msg>
<status endtime="20170824 16:37:45.099" status="PASS" starttime="20170824 16:37:45.019"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170824 16:37:45.099" level="INFO">Length is 105</msg>
<msg timestamp="20170824 16:37:45.099" level="FAIL">'sh: /usr/sbin/pflash: No such file or directory
cat: can't open '/tmp/out.txt': No such file or directory' should be empty.</msg>
<status endtime="20170824 16:37:45.099" status="FAIL" starttime="20170824 16:37:45.099"></status>
</kw>
<status endtime="20170824 16:37:45.100" status="FAIL" starttime="20170824 16:37:45.018"></status>
</kw>
<status endtime="20170824 16:37:45.100" status="FAIL" starttime="20170824 16:37:45.018"></status>
</kw>
<status endtime="20170824 16:37:45.100" status="PASS" starttime="20170824 16:37:45.018"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170824 16:37:45.467" level="INFO">host=9.3.86.161
width=80
timeout=25 seconds
encoding=UTF-8
path_separator=/
alias=bmc_connection
port=22
index=1
term_type=vt100
prompt=# 
newline=

height=24</msg>
<msg timestamp="20170824 16:37:45.468" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170824 16:37:46.239" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170824 16:37:46.239" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170824 16:37:46.317" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170824 16:37:46.327" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170824 16:37:46.327" level="INFO">${stderr} = </msg>
<msg timestamp="20170824 16:37:46.327" level="INFO">${rc} = 0</msg>
<status endtime="20170824 16:37:46.327" status="PASS" starttime="20170824 16:37:45.101"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170824 16:37:46.328" level="INFO">Length is 0</msg>
<status endtime="20170824 16:37:46.328" status="PASS" starttime="20170824 16:37:46.328"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170824 16:37:46.329" level="INFO">Length is 11</msg>
<status endtime="20170824 16:37:46.329" status="PASS" starttime="20170824 16:37:46.329"></status>
</kw>
<msg timestamp="20170824 16:37:46.329" level="INFO">${bmc_model} = Witherspoon</msg>
<status endtime="20170824 16:37:46.329" status="PASS" starttime="20170824 16:37:45.100"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg timestamp="20170824 16:37:46.330" level="INFO">BMC Model=Witherspoon</msg>
<status endtime="20170824 16:37:46.330" status="PASS" starttime="20170824 16:37:46.329"></status>
</kw>
<status endtime="20170824 16:37:46.330" status="PASS" starttime="20170824 16:37:45.100"></status>
</kw>
<status endtime="20170824 16:37:46.330" status="PASS" starttime="20170824 16:37:45.100"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw library="utils" name="Enable Core Dump On BMC">
<doc>Enable core dump collection.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170824 16:37:46.333" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170824 16:37:46.333" status="FAIL" starttime="20170824 16:37:46.332"></status>
</kw>
<msg timestamp="20170824 16:37:46.333" level="INFO">${has_host} = False</msg>
<status endtime="20170824 16:37:46.333" status="PASS" starttime="20170824 16:37:46.332"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170824 16:37:46.334" status="PASS" starttime="20170824 16:37:46.334"></status>
</kw>
<status endtime="20170824 16:37:46.334" status="PASS" starttime="20170824 16:37:46.333"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170824 16:37:46.336" level="INFO">${port_num} = 22</msg>
<status endtime="20170824 16:37:46.336" status="PASS" starttime="20170824 16:37:46.336"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170824 16:37:46.337" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170824 16:37:46.337" status="PASS" starttime="20170824 16:37:46.336"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170824 16:37:46.337" level="INFO">${https_num} = 443</msg>
<status endtime="20170824 16:37:46.337" status="PASS" starttime="20170824 16:37:46.337"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170824 16:37:46.338" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170824 16:37:46.338" status="PASS" starttime="20170824 16:37:46.337"></status>
</kw>
<status endtime="20170824 16:37:46.338" status="PASS" starttime="20170824 16:37:46.335"></status>
</kw>
<status endtime="20170824 16:37:46.338" status="PASS" starttime="20170824 16:37:46.335"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170824 16:37:46.339" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170824 16:37:46.339" status="FAIL" starttime="20170824 16:37:46.339"></status>
</kw>
<msg timestamp="20170824 16:37:46.339" level="INFO">${has_port} = False</msg>
<status endtime="20170824 16:37:46.339" status="PASS" starttime="20170824 16:37:46.338"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170824 16:37:46.342" status="PASS" starttime="20170824 16:37:46.341"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170824 16:37:46.342" status="PASS" starttime="20170824 16:37:46.342"></status>
</kw>
<status endtime="20170824 16:37:46.342" status="PASS" starttime="20170824 16:37:46.341"></status>
</kw>
<status endtime="20170824 16:37:46.342" status="PASS" starttime="20170824 16:37:46.339"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170824 16:37:46.343" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170824 16:37:48.024" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170824 16:37:48.025" status="PASS" starttime="20170824 16:37:46.342"></status>
</kw>
<status endtime="20170824 16:37:48.025" status="PASS" starttime="20170824 16:37:46.331"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170824 16:37:48.026" level="INFO">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg timestamp="20170824 16:37:48.115" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170824 16:37:48.115" level="INFO">${stdout} = /tmp/core_%e.%p</msg>
<msg timestamp="20170824 16:37:48.115" level="INFO">${stderr} = </msg>
<status endtime="20170824 16:37:48.115" status="PASS" starttime="20170824 16:37:48.026"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170824 16:37:48.116" level="INFO">Length is 0</msg>
<status endtime="20170824 16:37:48.116" status="PASS" starttime="20170824 16:37:48.115"></status>
</kw>
<msg timestamp="20170824 16:37:48.116" level="INFO">${core_pattern} = /tmp/core_%e.%p</msg>
<status endtime="20170824 16:37:48.116" status="PASS" starttime="20170824 16:37:48.025"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status endtime="20170824 16:37:48.117" status="PASS" starttime="20170824 16:37:48.116"></status>
</kw>
<status endtime="20170824 16:37:48.117" status="PASS" starttime="20170824 16:37:46.331"></status>
</kw>
<status endtime="20170824 16:37:48.117" status="PASS" starttime="20170824 16:37:46.330"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status endtime="20170824 16:37:48.117" status="PASS" starttime="20170824 16:37:48.117"></status>
</kw>
<status endtime="20170824 16:37:48.118" status="PASS" starttime="20170824 16:37:43.215"></status>
</kw>
<suite name="Security" source="/tmp/fspcibld/70/obmc-robot/tests/security" id="s1-s1">
<suite name="Test Ssl" source="/tmp/fspcibld/70/obmc-robot/tests/security/test_ssl.robot" id="s1-s1-s1">
<test name="Test SSL Connection" id="s1-s1-s1-t1">
<kw library="rest_client" name="Initialize OpenBMC">
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:37:48.207" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:37:48.208" status="PASS" starttime="20170824 16:37:48.207"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:37:48.209" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:37:48.209" status="PASS" starttime="20170824 16:37:48.208"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:37:48.210" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:37:48.210" status="PASS" starttime="20170824 16:37:48.210"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:37:48.211" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:37:48.211" status="PASS" starttime="20170824 16:37:48.210"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:37:48.439" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:37:48.439" status="PASS" starttime="20170824 16:37:48.212"></status>
</kw>
<msg timestamp="20170824 16:37:48.439" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:37:48.439" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:37:48.439" status="PASS" starttime="20170824 16:37:48.211"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:37:48.440" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:37:48.440" status="PASS" starttime="20170824 16:37:48.440"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:37:48.441" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:37:48.441" status="PASS" starttime="20170824 16:37:48.440"></status>
</kw>
<status endtime="20170824 16:37:48.441" status="PASS" starttime="20170824 16:37:48.207"></status>
</kw>
<status endtime="20170824 16:37:48.441" status="PASS" starttime="20170824 16:37:48.206"></status>
</kw>
<status endtime="20170824 16:37:48.441" status="PASS" starttime="20170824 16:37:48.206"></status>
</kw>
<kw library="openbmc_ffdc" type="teardown" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:37:48.447" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:37:48.448" status="PASS" starttime="20170824 16:37:48.447"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:37:48.448" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:37:48.448" status="PASS" starttime="20170824 16:37:48.448"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:37:48.449" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:37:48.449" status="PASS" starttime="20170824 16:37:48.449"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:37:48.450" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:37:48.450" status="PASS" starttime="20170824 16:37:48.449"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:37:48.637" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:37:48.637" status="PASS" starttime="20170824 16:37:48.450"></status>
</kw>
<msg timestamp="20170824 16:37:48.637" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:37:48.637" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:37:48.637" status="PASS" starttime="20170824 16:37:48.450"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:37:48.638" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:37:48.638" status="PASS" starttime="20170824 16:37:48.637"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:37:48.638" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:37:48.639" status="PASS" starttime="20170824 16:37:48.638"></status>
</kw>
<status endtime="20170824 16:37:48.639" status="PASS" starttime="20170824 16:37:48.446"></status>
</kw>
<status endtime="20170824 16:37:48.639" status="PASS" starttime="20170824 16:37:48.446"></status>
</kw>
<status endtime="20170824 16:37:48.639" status="PASS" starttime="20170824 16:37:48.445"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:37:48.639" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:37:48.640" status="PASS" starttime="20170824 16:37:48.639"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:37:48.642" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:37:48.642" status="PASS" starttime="20170824 16:37:48.641"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:37:48.643" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:37:48.643" status="PASS" starttime="20170824 16:37:48.643"></status>
</kw>
<status endtime="20170824 16:37:48.643" status="PASS" starttime="20170824 16:37:48.642"></status>
</kw>
<status endtime="20170824 16:37:48.643" status="PASS" starttime="20170824 16:37:48.640"></status>
</kw>
<status endtime="20170824 16:37:48.643" status="PASS" starttime="20170824 16:37:48.640"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:37:48.749" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:37:48.749" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:37:48.749" status="PASS" starttime="20170824 16:37:48.643"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:37:48.751" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:37:48.751" status="PASS" starttime="20170824 16:37:48.750"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:37:48.752" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:37:48.752" status="PASS" starttime="20170824 16:37:48.752"></status>
</kw>
<status endtime="20170824 16:37:48.752" status="PASS" starttime="20170824 16:37:48.751"></status>
</kw>
<status endtime="20170824 16:37:48.752" status="PASS" starttime="20170824 16:37:48.750"></status>
</kw>
<status endtime="20170824 16:37:48.752" status="PASS" starttime="20170824 16:37:48.749"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:37:48.753" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:37:48.753" status="PASS" starttime="20170824 16:37:48.753"></status>
</kw>
<msg timestamp="20170824 16:37:48.753" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:37:48.753" status="PASS" starttime="20170824 16:37:48.445"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:37:48.754" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:37:48.754" status="PASS" starttime="20170824 16:37:48.754"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:37:48.755" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:37:48.755" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:37:48.755" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status endtime="20170824 16:37:48.755" status="PASS" starttime="20170824 16:37:48.754"></status>
</kw>
<msg timestamp="20170824 16:37:48.755" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170824 16:37:48.755" status="PASS" starttime="20170824 16:37:48.444"></status>
</kw>
<msg timestamp="20170824 16:37:48.755" level="INFO">${host_state} = Off</msg>
<status endtime="20170824 16:37:48.756" status="PASS" starttime="20170824 16:37:48.442"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170824 16:37:48.757" level="FAIL">Off != Quiesced</msg>
<status endtime="20170824 16:37:48.757" status="FAIL" starttime="20170824 16:37:48.756"></status>
</kw>
<msg timestamp="20170824 16:37:48.757" level="INFO">${status} = False</msg>
<status endtime="20170824 16:37:48.757" status="PASS" starttime="20170824 16:37:48.756"></status>
</kw>
<msg timestamp="20170824 16:37:48.757" level="INFO">${status} = False</msg>
<status endtime="20170824 16:37:48.757" status="PASS" starttime="20170824 16:37:48.442"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20170824 16:37:48.758" status="PASS" starttime="20170824 16:37:48.757"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170824 16:37:48.758" status="PASS" starttime="20170824 16:37:48.758"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170824 16:37:48.768" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170824 16:37:48.768" status="PASS" starttime="20170824 16:37:48.759"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170824 16:37:48.778" level="INFO">${FFDC_DIR_PATH} = </msg>
<status endtime="20170824 16:37:48.778" status="PASS" starttime="20170824 16:37:48.769"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw library="openbmc_ffdc" name="Set Ffdc Defaults">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170824 16:37:48.780" level="INFO">${cur_time} = 2017-08-24 16:37:48:779485</msg>
<status endtime="20170824 16:37:48.780" status="PASS" starttime="20170824 16:37:48.779"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170824 16:37:48.780" level="INFO">${cur_time} = 20170824163748779485</msg>
<status endtime="20170824 16:37:48.780" status="PASS" starttime="20170824 16:37:48.780"></status>
</kw>
<status endtime="20170824 16:37:48.781" status="PASS" starttime="20170824 16:37:48.779"></status>
</kw>
<msg timestamp="20170824 16:37:48.785" level="INFO">${FFDC_TIME} = 20170824163748779485</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170824 16:37:48.786" level="INFO">${suite_name} = TestsSecurityTestSsl</msg>
<status endtime="20170824 16:37:48.786" status="PASS" starttime="20170824 16:37:48.786"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170824 16:37:48.787" level="INFO">${suite_name} = 20170824163748779485_TestsSecurityTestSsl</msg>
<status endtime="20170824 16:37:48.787" status="PASS" starttime="20170824 16:37:48.786"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170824 16:37:48.787" level="INFO">${test_name} = TestSSLConnection</msg>
<status endtime="20170824 16:37:48.787" status="PASS" starttime="20170824 16:37:48.787"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170824 16:37:48.788" level="INFO">${test_name} = 20170824163748779485_TestSSLConnection</msg>
<status endtime="20170824 16:37:48.788" status="PASS" starttime="20170824 16:37:48.788"></status>
</kw>
<status endtime="20170824 16:37:48.788" status="PASS" starttime="20170824 16:37:48.785"></status>
</kw>
<msg timestamp="20170824 16:37:48.789" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/70/obmc-robot/logs/20170824163748779485_TestsSecurityTestSsl/20170824163748779485_TestSSLConnection/</msg>
<msg timestamp="20170824 16:37:48.793" level="INFO">${FFDC_PREFIX} = 20170824163748779485_</msg>
<status endtime="20170824 16:37:48.793" status="PASS" starttime="20170824 16:37:48.779"></status>
</kw>
<status endtime="20170824 16:37:48.793" status="PASS" starttime="20170824 16:37:48.778"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170824 16:37:48.794" status="PASS" starttime="20170824 16:37:48.794"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:37:48.795" level="INFO">Created directory '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs"&gt;/tmp/fspcibld/70/obmc-robot/logs&lt;/a&gt;'.</msg>
<status endtime="20170824 16:37:48.795" status="PASS" starttime="20170824 16:37:48.794"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170824 16:37:48.796" level="FAIL">File '/tmp/fspcibld/70/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status endtime="20170824 16:37:48.796" status="FAIL" starttime="20170824 16:37:48.796"></status>
</kw>
<msg timestamp="20170824 16:37:48.796" level="INFO">${exist} = False</msg>
<status endtime="20170824 16:37:48.796" status="PASS" starttime="20170824 16:37:48.795"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:37:48.797" level="INFO">Created file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:37:48.798" status="PASS" starttime="20170824 16:37:48.797"></status>
</kw>
<status endtime="20170824 16:37:48.798" status="PASS" starttime="20170824 16:37:48.797"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170824 16:37:48.798" status="PASS" starttime="20170824 16:37:48.798"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170824 16:37:48.799" level="INFO">${cur_time} = 2017-08-24 16:37:48:798986</msg>
<status endtime="20170824 16:37:48.800" status="PASS" starttime="20170824 16:37:48.799"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170824 16:37:48.800" level="INFO">${cur_time} = 20170824163748798986</msg>
<status endtime="20170824 16:37:48.800" status="PASS" starttime="20170824 16:37:48.800"></status>
</kw>
<msg timestamp="20170824 16:37:48.800" level="INFO">${cur_time} = 20170824163748798986</msg>
<status endtime="20170824 16:37:48.800" status="PASS" starttime="20170824 16:37:48.798"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:37:48.801" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:37:48.801" status="PASS" starttime="20170824 16:37:48.801"></status>
</kw>
<status endtime="20170824 16:37:48.801" status="PASS" starttime="20170824 16:37:48.758"></status>
</kw>
<status endtime="20170824 16:37:48.801" status="PASS" starttime="20170824 16:37:48.441"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status endtime="20170824 16:37:48.802" status="PASS" starttime="20170824 16:37:48.205" critical="yes"></status>
</test>
<kw library="RequestsLibrary.RequestsKeywords" type="teardown" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:37:48.802" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:37:48.802" status="PASS" starttime="20170824 16:37:48.802"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status endtime="20170824 16:37:48.802" status="PASS" starttime="20170824 16:37:48.120"></status>
</suite>
<status endtime="20170824 16:37:48.804" status="PASS" starttime="20170824 16:37:48.118"></status>
</suite>
<suite name="Test Basic Poweron" source="/tmp/fspcibld/70/obmc-robot/tests/test_basic_poweron.robot" id="s1-s2">
<test name="Power On Test" id="s1-s2-t1">
<kw library="utils" type="setup" name="Start SOL Console Logging">
<doc>Start system console log to file.</doc>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170824 16:37:48.845" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170824 16:37:48.845" status="PASS" starttime="20170824 16:37:48.845"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170824 16:37:48.846" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170824 16:37:48.846" status="PASS" starttime="20170824 16:37:48.846"></status>
</kw>
<msg timestamp="20170824 16:37:48.846" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170824 16:37:48.846" status="PASS" starttime="20170824 16:37:48.844"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170824 16:37:48.848" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170824 16:37:48.848" status="PASS" starttime="20170824 16:37:48.848"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170824 16:37:48.849" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170824 16:37:48.849" status="PASS" starttime="20170824 16:37:48.849"></status>
</kw>
<msg timestamp="20170824 16:37:48.849" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170824 16:37:48.849" status="PASS" starttime="20170824 16:37:48.847"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170824 16:37:48.850" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170824 16:37:48.850" status="PASS" starttime="20170824 16:37:48.850"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170824 16:37:48.851" status="PASS" starttime="20170824 16:37:48.851"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170824 16:37:48.856" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170824 16:37:48.859" level="INFO">${rc} = 0</msg>
<msg timestamp="20170824 16:37:48.859" level="INFO">${output} = /tmp/fspcibld/70/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170824 16:37:48.859" status="PASS" starttime="20170824 16:37:48.851"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170824 16:37:48.862" status="PASS" starttime="20170824 16:37:48.861"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170824 16:37:48.862" status="PASS" starttime="20170824 16:37:48.862"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170824 16:37:48.863" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170824 16:37:48.863" status="PASS" starttime="20170824 16:37:48.863"></status>
</kw>
<msg timestamp="20170824 16:37:48.864" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170824 16:37:48.864" status="PASS" starttime="20170824 16:37:48.849"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170824 16:37:48.864" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170824 16:37:48.864" status="PASS" starttime="20170824 16:37:48.864"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170824 16:37:48.865" status="PASS" starttime="20170824 16:37:48.865"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170824 16:37:48.868" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170824 16:37:48.886" level="INFO">${rc} = 0</msg>
<msg timestamp="20170824 16:37:48.886" level="INFO">${os_con_pid} = </msg>
<status endtime="20170824 16:37:48.887" status="PASS" starttime="20170824 16:37:48.865"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170824 16:37:48.889" status="PASS" starttime="20170824 16:37:48.889"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170824 16:37:48.890" level="INFO">${cmd_buf} = kill -9 </msg>
<status endtime="20170824 16:37:48.890" status="PASS" starttime="20170824 16:37:48.890"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170824 16:37:48.891" status="PASS" starttime="20170824 16:37:48.891"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170824 16:37:48.892" level="INFO">${rc} = None</msg>
<msg timestamp="20170824 16:37:48.892" level="INFO">${output} = None</msg>
<status endtime="20170824 16:37:48.892" status="PASS" starttime="20170824 16:37:48.891"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170824 16:37:48.893" status="PASS" starttime="20170824 16:37:48.892"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg timestamp="20170824 16:37:48.896" level="FAIL">Source file '/tmp/9.3.86.161_os_console' does not exist.</msg>
<status endtime="20170824 16:37:48.896" status="FAIL" starttime="20170824 16:37:48.895"></status>
</kw>
<status endtime="20170824 16:37:48.896" status="PASS" starttime="20170824 16:37:48.894"></status>
</kw>
<status endtime="20170824 16:37:48.896" status="PASS" starttime="20170824 16:37:48.893"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170824 16:37:48.896" level="INFO">${output} = </msg>
<status endtime="20170824 16:37:48.897" status="PASS" starttime="20170824 16:37:48.896"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170824 16:37:48.897" level="INFO">${loc_quiet} = 1</msg>
<status endtime="20170824 16:37:48.897" status="PASS" starttime="20170824 16:37:48.897"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170824 16:37:48.972" status="PASS" starttime="20170824 16:37:48.898"></status>
</kw>
<msg timestamp="20170824 16:37:48.973" level="INFO">${rc} = 1</msg>
<msg timestamp="20170824 16:37:48.973" level="INFO">${output} = cat: /tmp/9.3.86.161_os_console: No such file or directory
</msg>
<status endtime="20170824 16:37:48.973" status="PASS" starttime="20170824 16:37:48.897"></status>
</kw>
<msg timestamp="20170824 16:37:48.974" level="INFO">${log_output} = cat: /tmp/9.3.86.161_os_console: No such file or directory
</msg>
<status endtime="20170824 16:37:48.974" status="PASS" starttime="20170824 16:37:48.846"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:37:48.977" level="INFO">Created file '&lt;a href="file:///tmp/9.3.86.161_os_console"&gt;/tmp/9.3.86.161_os_console&lt;/a&gt;'.</msg>
<status endtime="20170824 16:37:48.977" status="PASS" starttime="20170824 16:37:48.976"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170824 16:37:48.978" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170824 16:37:48.978" status="PASS" starttime="20170824 16:37:48.978"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170824 16:37:48.979" status="PASS" starttime="20170824 16:37:48.978"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170824 16:37:48.982" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170824 16:37:48.985" level="INFO">${rc} = 0</msg>
<msg timestamp="20170824 16:37:48.985" level="INFO">${output} = /tmp/fspcibld/70/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170824 16:37:48.985" status="PASS" starttime="20170824 16:37:48.979"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170824 16:37:48.988" status="PASS" starttime="20170824 16:37:48.987"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170824 16:37:48.989" status="PASS" starttime="20170824 16:37:48.988"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170824 16:37:48.990" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170824 16:37:48.990" status="PASS" starttime="20170824 16:37:48.989"></status>
</kw>
<msg timestamp="20170824 16:37:48.990" level="INFO">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170824 16:37:48.990" status="PASS" starttime="20170824 16:37:48.977"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170824 16:37:48.991" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;</msg>
<status endtime="20170824 16:37:48.991" status="PASS" starttime="20170824 16:37:48.990"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170824 16:37:48.991" status="PASS" starttime="20170824 16:37:48.991"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170824 16:37:48.996" level="INFO">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg timestamp="20170824 16:37:48.999" level="INFO">${rc} = 0</msg>
<msg timestamp="20170824 16:37:48.999" level="INFO">${output} = </msg>
<status endtime="20170824 16:37:48.999" status="PASS" starttime="20170824 16:37:48.992"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170824 16:37:49.003" status="PASS" starttime="20170824 16:37:49.001"></status>
</kw>
<status endtime="20170824 16:37:49.003" status="PASS" starttime="20170824 16:37:48.844"></status>
</kw>
<kw library="BuiltIn" name="Repeat Keyword">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg timestamp="20170824 16:37:49.004" level="INFO">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170824 16:37:49.008" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status endtime="20170824 16:37:49.008" status="PASS" starttime="20170824 16:37:49.007"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:37:49.009" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170824 16:37:49.010" status="PASS" starttime="20170824 16:37:49.009"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:37:49.013" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:37:49.014" status="PASS" starttime="20170824 16:37:49.013"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:37:49.015" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:37:49.015" status="PASS" starttime="20170824 16:37:49.015"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:37:49.016" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:37:49.016" status="PASS" starttime="20170824 16:37:49.016"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:37:49.017" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:37:49.017" status="PASS" starttime="20170824 16:37:49.017"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:37:49.523" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:37:49.524" status="PASS" starttime="20170824 16:37:49.019"></status>
</kw>
<msg timestamp="20170824 16:37:49.524" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:37:49.524" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:37:49.524" status="PASS" starttime="20170824 16:37:49.018"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:37:49.524" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:37:49.525" status="PASS" starttime="20170824 16:37:49.524"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:37:49.525" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:37:49.525" status="PASS" starttime="20170824 16:37:49.525"></status>
</kw>
<status endtime="20170824 16:37:49.526" status="PASS" starttime="20170824 16:37:49.012"></status>
</kw>
<status endtime="20170824 16:37:49.526" status="PASS" starttime="20170824 16:37:49.012"></status>
</kw>
<status endtime="20170824 16:37:49.526" status="PASS" starttime="20170824 16:37:49.011"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:37:49.526" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170824 16:37:49.526" status="PASS" starttime="20170824 16:37:49.526"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:37:49.527" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:37:49.527" status="PASS" starttime="20170824 16:37:49.527"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170824 16:37:49.527" status="PASS" starttime="20170824 16:37:49.527"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:37:49.529" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status endtime="20170824 16:37:49.529" status="PASS" starttime="20170824 16:37:49.528"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:37:49.530" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170824 16:37:49.530" status="PASS" starttime="20170824 16:37:49.530"></status>
</kw>
<status endtime="20170824 16:37:49.530" status="PASS" starttime="20170824 16:37:49.529"></status>
</kw>
<status endtime="20170824 16:37:49.530" status="PASS" starttime="20170824 16:37:49.528"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:37:50.265" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170824 16:37:50.266" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:37:50.266" status="PASS" starttime="20170824 16:37:49.531"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:37:50.267" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:37:50.267" status="PASS" starttime="20170824 16:37:50.267"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:37:50.268" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:37:50.268" status="PASS" starttime="20170824 16:37:50.268"></status>
</kw>
<status endtime="20170824 16:37:50.268" status="PASS" starttime="20170824 16:37:50.267"></status>
</kw>
<status endtime="20170824 16:37:50.268" status="PASS" starttime="20170824 16:37:50.266"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:37:50.269" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:37:50.269" status="PASS" starttime="20170824 16:37:50.269"></status>
</kw>
<msg timestamp="20170824 16:37:50.269" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:37:50.269" status="PASS" starttime="20170824 16:37:49.010"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:37:50.270" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:37:50.270" status="PASS" starttime="20170824 16:37:50.270"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170824 16:37:50.270" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:37:50.271" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:37:50.271" level="INFO">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': None}</msg>
<status endtime="20170824 16:37:50.271" status="PASS" starttime="20170824 16:37:50.270"></status>
</kw>
<status endtime="20170824 16:37:50.271" status="PASS" starttime="20170824 16:37:49.008"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170824 16:37:50.271" status="PASS" starttime="20170824 16:37:50.271"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Wait For PowerOff</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Wait For PowerOff">
<doc>Wait for power off state.</doc>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:37:50.277" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:37:50.278" status="PASS" starttime="20170824 16:37:50.277"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:37:50.278" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:37:50.278" status="PASS" starttime="20170824 16:37:50.278"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:37:50.279" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:37:50.279" status="PASS" starttime="20170824 16:37:50.279"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:37:50.280" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:37:50.280" status="PASS" starttime="20170824 16:37:50.279"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:37:51.778" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:37:51.778" status="PASS" starttime="20170824 16:37:50.280"></status>
</kw>
<msg timestamp="20170824 16:37:51.779" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:37:51.779" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:37:51.779" status="PASS" starttime="20170824 16:37:50.280"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:37:51.779" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:37:51.779" status="PASS" starttime="20170824 16:37:51.779"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:37:51.780" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:37:51.780" status="PASS" starttime="20170824 16:37:51.780"></status>
</kw>
<status endtime="20170824 16:37:51.780" status="PASS" starttime="20170824 16:37:50.276"></status>
</kw>
<status endtime="20170824 16:37:51.780" status="PASS" starttime="20170824 16:37:50.276"></status>
</kw>
<status endtime="20170824 16:37:51.781" status="PASS" starttime="20170824 16:37:50.275"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:37:51.781" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:37:51.781" status="PASS" starttime="20170824 16:37:51.781"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:37:51.783" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:37:51.783" status="PASS" starttime="20170824 16:37:51.782"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:37:51.784" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:37:51.784" status="PASS" starttime="20170824 16:37:51.784"></status>
</kw>
<status endtime="20170824 16:37:51.784" status="PASS" starttime="20170824 16:37:51.783"></status>
</kw>
<status endtime="20170824 16:37:51.784" status="PASS" starttime="20170824 16:37:51.782"></status>
</kw>
<status endtime="20170824 16:37:51.785" status="PASS" starttime="20170824 16:37:51.781"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:37:55.543" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:37:55.543" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:37:55.543" status="PASS" starttime="20170824 16:37:51.785"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:37:55.545" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:37:55.545" status="PASS" starttime="20170824 16:37:55.544"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:37:55.546" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:37:55.546" status="PASS" starttime="20170824 16:37:55.546"></status>
</kw>
<status endtime="20170824 16:37:55.546" status="PASS" starttime="20170824 16:37:55.545"></status>
</kw>
<status endtime="20170824 16:37:55.546" status="PASS" starttime="20170824 16:37:55.544"></status>
</kw>
<status endtime="20170824 16:37:55.546" status="PASS" starttime="20170824 16:37:55.543"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:37:55.547" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:37:55.547" status="PASS" starttime="20170824 16:37:55.546"></status>
</kw>
<msg timestamp="20170824 16:37:55.547" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:37:55.547" status="PASS" starttime="20170824 16:37:50.274"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:37:55.547" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:37:55.548" status="PASS" starttime="20170824 16:37:55.547"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:37:55.548" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:37:55.548" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:37:55.548" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170824 16:37:55.548" status="PASS" starttime="20170824 16:37:55.548"></status>
</kw>
<msg timestamp="20170824 16:37:55.549" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170824 16:37:55.549" status="PASS" starttime="20170824 16:37:50.274"></status>
</kw>
<msg timestamp="20170824 16:37:55.549" level="INFO">${power_state} = Off</msg>
<status endtime="20170824 16:37:55.549" status="PASS" starttime="20170824 16:37:50.273"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:37:55.550" status="PASS" starttime="20170824 16:37:55.549"></status>
</kw>
<status endtime="20170824 16:37:55.550" status="PASS" starttime="20170824 16:37:50.273"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:37:55.553" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:37:55.554" status="PASS" starttime="20170824 16:37:55.553"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:37:55.554" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:37:55.554" status="PASS" starttime="20170824 16:37:55.554"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:37:55.555" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:37:55.555" status="PASS" starttime="20170824 16:37:55.555"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:37:55.556" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:37:55.556" status="PASS" starttime="20170824 16:37:55.555"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:37:55.956" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:37:55.956" status="PASS" starttime="20170824 16:37:55.556"></status>
</kw>
<msg timestamp="20170824 16:37:55.956" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:37:55.956" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:37:55.956" status="PASS" starttime="20170824 16:37:55.556"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:37:55.957" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:37:55.957" status="PASS" starttime="20170824 16:37:55.957"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:37:55.958" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:37:55.958" status="PASS" starttime="20170824 16:37:55.957"></status>
</kw>
<status endtime="20170824 16:37:55.958" status="PASS" starttime="20170824 16:37:55.553"></status>
</kw>
<status endtime="20170824 16:37:55.958" status="PASS" starttime="20170824 16:37:55.552"></status>
</kw>
<status endtime="20170824 16:37:55.958" status="PASS" starttime="20170824 16:37:55.552"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:37:55.959" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:37:55.959" status="PASS" starttime="20170824 16:37:55.958"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:37:55.961" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:37:55.961" status="PASS" starttime="20170824 16:37:55.960"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:37:55.962" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:37:55.962" status="PASS" starttime="20170824 16:37:55.961"></status>
</kw>
<status endtime="20170824 16:37:55.962" status="PASS" starttime="20170824 16:37:55.961"></status>
</kw>
<status endtime="20170824 16:37:55.962" status="PASS" starttime="20170824 16:37:55.959"></status>
</kw>
<status endtime="20170824 16:37:55.962" status="PASS" starttime="20170824 16:37:55.959"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:37:56.338" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:37:56.338" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:37:56.338" status="PASS" starttime="20170824 16:37:55.962"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:37:56.345" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:37:56.345" status="PASS" starttime="20170824 16:37:56.345"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:37:56.347" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:37:56.347" status="PASS" starttime="20170824 16:37:56.346"></status>
</kw>
<status endtime="20170824 16:37:56.347" status="PASS" starttime="20170824 16:37:56.346"></status>
</kw>
<status endtime="20170824 16:37:56.347" status="PASS" starttime="20170824 16:37:56.339"></status>
</kw>
<status endtime="20170824 16:37:56.347" status="PASS" starttime="20170824 16:37:56.338"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:37:56.348" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:37:56.348" status="PASS" starttime="20170824 16:37:56.347"></status>
</kw>
<msg timestamp="20170824 16:37:56.348" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:37:56.348" status="PASS" starttime="20170824 16:37:55.551"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:37:56.348" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:37:56.349" status="PASS" starttime="20170824 16:37:56.348"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:37:56.349" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:37:56.349" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:37:56.349" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status endtime="20170824 16:37:56.349" status="PASS" starttime="20170824 16:37:56.349"></status>
</kw>
<msg timestamp="20170824 16:37:56.350" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170824 16:37:56.350" status="PASS" starttime="20170824 16:37:55.550"></status>
</kw>
<msg timestamp="20170824 16:37:56.350" level="INFO">${host_state} = Off</msg>
<status endtime="20170824 16:37:56.350" status="PASS" starttime="20170824 16:37:55.550"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170824 16:37:56.350" status="PASS" starttime="20170824 16:37:56.350"></status>
</kw>
<status endtime="20170824 16:37:56.351" status="PASS" starttime="20170824 16:37:50.273"></status>
</kw>
<status endtime="20170824 16:37:56.351" status="PASS" starttime="20170824 16:37:50.272"></status>
</kw>
<status endtime="20170824 16:37:56.351" status="PASS" starttime="20170824 16:37:50.272"></status>
</kw>
<msg timestamp="20170824 16:37:56.351" level="INFO">${status} = True</msg>
<status endtime="20170824 16:37:56.351" status="PASS" starttime="20170824 16:37:50.272"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Hard Power Off</arg>
</arguments>
<status endtime="20170824 16:37:56.351" status="PASS" starttime="20170824 16:37:56.351"></status>
</kw>
<status endtime="20170824 16:37:56.352" status="PASS" starttime="20170824 16:37:49.005"></status>
</kw>
<kw library="state_manager" name="Initiate Host Boot">
<doc>Initiate host power on.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170824 16:37:56.353" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status endtime="20170824 16:37:56.353" status="PASS" starttime="20170824 16:37:56.352"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:37:56.355" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170824 16:37:56.355" status="PASS" starttime="20170824 16:37:56.353"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:37:56.358" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:37:56.358" status="PASS" starttime="20170824 16:37:56.358"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:37:56.359" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:37:56.359" status="PASS" starttime="20170824 16:37:56.359"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:37:56.360" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:37:56.360" status="PASS" starttime="20170824 16:37:56.359"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:37:56.360" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:37:56.360" status="PASS" starttime="20170824 16:37:56.360"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:37:56.754" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:37:56.754" status="PASS" starttime="20170824 16:37:56.361"></status>
</kw>
<msg timestamp="20170824 16:37:56.755" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:37:56.755" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:37:56.755" status="PASS" starttime="20170824 16:37:56.361"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:37:56.756" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:37:56.756" status="PASS" starttime="20170824 16:37:56.756"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:37:56.757" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:37:56.757" status="PASS" starttime="20170824 16:37:56.756"></status>
</kw>
<status endtime="20170824 16:37:56.757" status="PASS" starttime="20170824 16:37:56.357"></status>
</kw>
<status endtime="20170824 16:37:56.757" status="PASS" starttime="20170824 16:37:56.357"></status>
</kw>
<status endtime="20170824 16:37:56.757" status="PASS" starttime="20170824 16:37:56.356"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:37:56.758" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170824 16:37:56.758" status="PASS" starttime="20170824 16:37:56.757"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:37:56.758" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:37:56.758" status="PASS" starttime="20170824 16:37:56.758"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170824 16:37:56.759" status="PASS" starttime="20170824 16:37:56.758"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:37:56.761" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-T...</msg>
<status endtime="20170824 16:37:56.761" status="PASS" starttime="20170824 16:37:56.760"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:37:56.761" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170824 16:37:56.762" status="PASS" starttime="20170824 16:37:56.761"></status>
</kw>
<status endtime="20170824 16:37:56.762" status="PASS" starttime="20170824 16:37:56.761"></status>
</kw>
<status endtime="20170824 16:37:56.762" status="PASS" starttime="20170824 16:37:56.759"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:37:57.197" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170824 16:37:57.197" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:37:57.197" status="PASS" starttime="20170824 16:37:56.762"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:37:57.198" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:37:57.198" status="PASS" starttime="20170824 16:37:57.198"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:37:57.199" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:37:57.199" status="PASS" starttime="20170824 16:37:57.199"></status>
</kw>
<status endtime="20170824 16:37:57.200" status="PASS" starttime="20170824 16:37:57.199"></status>
</kw>
<status endtime="20170824 16:37:57.200" status="PASS" starttime="20170824 16:37:57.197"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:37:57.200" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:37:57.200" status="PASS" starttime="20170824 16:37:57.200"></status>
</kw>
<msg timestamp="20170824 16:37:57.200" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:37:57.200" status="PASS" starttime="20170824 16:37:56.355"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:37:57.201" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:37:57.201" status="PASS" starttime="20170824 16:37:57.201"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170824 16:37:57.202" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:37:57.202" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:37:57.202" level="INFO">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': None}</msg>
<status endtime="20170824 16:37:57.202" status="PASS" starttime="20170824 16:37:57.201"></status>
</kw>
<status endtime="20170824 16:37:57.202" status="PASS" starttime="20170824 16:37:56.353"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170824 16:37:57.203" status="PASS" starttime="20170824 16:37:57.202"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:37:57.207" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:37:57.208" status="PASS" starttime="20170824 16:37:57.207"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:37:57.209" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:37:57.209" status="PASS" starttime="20170824 16:37:57.208"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:37:57.209" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:37:57.209" status="PASS" starttime="20170824 16:37:57.209"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:37:57.210" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:37:57.210" status="PASS" starttime="20170824 16:37:57.209"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:37:57.968" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:37:57.968" status="PASS" starttime="20170824 16:37:57.211"></status>
</kw>
<msg timestamp="20170824 16:37:57.968" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:37:57.968" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:37:57.968" status="PASS" starttime="20170824 16:37:57.210"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:37:57.969" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:37:57.969" status="PASS" starttime="20170824 16:37:57.969"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:37:57.970" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:37:57.970" status="PASS" starttime="20170824 16:37:57.969"></status>
</kw>
<status endtime="20170824 16:37:57.970" status="PASS" starttime="20170824 16:37:57.206"></status>
</kw>
<status endtime="20170824 16:37:57.970" status="PASS" starttime="20170824 16:37:57.206"></status>
</kw>
<status endtime="20170824 16:37:57.970" status="PASS" starttime="20170824 16:37:57.205"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:37:57.971" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:37:57.971" status="PASS" starttime="20170824 16:37:57.970"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:37:57.973" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:37:57.973" status="PASS" starttime="20170824 16:37:57.972"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:37:57.974" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:37:57.974" status="PASS" starttime="20170824 16:37:57.974"></status>
</kw>
<status endtime="20170824 16:37:57.974" status="PASS" starttime="20170824 16:37:57.973"></status>
</kw>
<status endtime="20170824 16:37:57.974" status="PASS" starttime="20170824 16:37:57.971"></status>
</kw>
<status endtime="20170824 16:37:57.974" status="PASS" starttime="20170824 16:37:57.971"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:37:58.554" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:37:58.555" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:37:58.555" status="PASS" starttime="20170824 16:37:57.974"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:37:58.556" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:37:58.556" status="PASS" starttime="20170824 16:37:58.556"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:37:58.557" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:37:58.557" status="PASS" starttime="20170824 16:37:58.557"></status>
</kw>
<status endtime="20170824 16:37:58.558" status="PASS" starttime="20170824 16:37:58.557"></status>
</kw>
<status endtime="20170824 16:37:58.558" status="PASS" starttime="20170824 16:37:58.555"></status>
</kw>
<status endtime="20170824 16:37:58.558" status="PASS" starttime="20170824 16:37:58.555"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:37:58.558" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:37:58.558" status="PASS" starttime="20170824 16:37:58.558"></status>
</kw>
<msg timestamp="20170824 16:37:58.558" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:37:58.558" status="PASS" starttime="20170824 16:37:57.205"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:37:58.559" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:37:58.559" status="PASS" starttime="20170824 16:37:58.559"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:37:58.560" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:37:58.560" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:37:58.560" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170824 16:37:58.560" status="PASS" starttime="20170824 16:37:58.559"></status>
</kw>
<msg timestamp="20170824 16:37:58.560" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170824 16:37:58.560" status="PASS" starttime="20170824 16:37:57.204"></status>
</kw>
<msg timestamp="20170824 16:37:58.560" level="INFO">${power_state} = Off</msg>
<status endtime="20170824 16:37:58.560" status="PASS" starttime="20170824 16:37:57.204"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170824 16:37:58.561" level="FAIL">On != Off</msg>
<status endtime="20170824 16:37:58.561" status="FAIL" starttime="20170824 16:37:58.561"></status>
</kw>
<status endtime="20170824 16:37:58.561" status="FAIL" starttime="20170824 16:37:57.203"></status>
</kw>
<status endtime="20170824 16:37:58.562" status="FAIL" starttime="20170824 16:37:57.203"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:38:08.568" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:38:08.569" status="PASS" starttime="20170824 16:38:08.568"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:38:08.569" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:38:08.569" status="PASS" starttime="20170824 16:38:08.569"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:38:08.570" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:38:08.570" status="PASS" starttime="20170824 16:38:08.569"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:38:08.570" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:38:08.570" status="PASS" starttime="20170824 16:38:08.570"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:38:09.240" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:38:09.240" status="PASS" starttime="20170824 16:38:08.571"></status>
</kw>
<msg timestamp="20170824 16:38:09.241" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:38:09.241" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:38:09.241" status="PASS" starttime="20170824 16:38:08.571"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:38:09.241" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:38:09.241" status="PASS" starttime="20170824 16:38:09.241"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:38:09.242" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:38:09.242" status="PASS" starttime="20170824 16:38:09.242"></status>
</kw>
<status endtime="20170824 16:38:09.242" status="PASS" starttime="20170824 16:38:08.567"></status>
</kw>
<status endtime="20170824 16:38:09.242" status="PASS" starttime="20170824 16:38:08.567"></status>
</kw>
<status endtime="20170824 16:38:09.242" status="PASS" starttime="20170824 16:38:08.566"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:38:09.243" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:38:09.243" status="PASS" starttime="20170824 16:38:09.243"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:38:09.245" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:38:09.246" status="PASS" starttime="20170824 16:38:09.244"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:38:09.247" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:38:09.247" status="PASS" starttime="20170824 16:38:09.246"></status>
</kw>
<status endtime="20170824 16:38:09.247" status="PASS" starttime="20170824 16:38:09.246"></status>
</kw>
<status endtime="20170824 16:38:09.248" status="PASS" starttime="20170824 16:38:09.244"></status>
</kw>
<status endtime="20170824 16:38:09.248" status="PASS" starttime="20170824 16:38:09.243"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:38:14.218" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:38:14.219" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:38:14.219" status="PASS" starttime="20170824 16:38:09.248"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:38:14.221" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:38:14.221" status="PASS" starttime="20170824 16:38:14.220"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:38:14.222" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:38:14.222" status="PASS" starttime="20170824 16:38:14.221"></status>
</kw>
<status endtime="20170824 16:38:14.222" status="PASS" starttime="20170824 16:38:14.221"></status>
</kw>
<status endtime="20170824 16:38:14.222" status="PASS" starttime="20170824 16:38:14.220"></status>
</kw>
<status endtime="20170824 16:38:14.222" status="PASS" starttime="20170824 16:38:14.219"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:38:14.222" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:38:14.223" status="PASS" starttime="20170824 16:38:14.222"></status>
</kw>
<msg timestamp="20170824 16:38:14.223" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:38:14.223" status="PASS" starttime="20170824 16:38:08.565"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:38:14.223" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:38:14.223" status="PASS" starttime="20170824 16:38:14.223"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:38:14.224" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:38:14.224" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:38:14.224" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170824 16:38:14.224" status="PASS" starttime="20170824 16:38:14.224"></status>
</kw>
<msg timestamp="20170824 16:38:14.224" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170824 16:38:14.225" status="PASS" starttime="20170824 16:38:08.564"></status>
</kw>
<msg timestamp="20170824 16:38:14.225" level="INFO">${power_state} = Off</msg>
<status endtime="20170824 16:38:14.225" status="PASS" starttime="20170824 16:38:08.563"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170824 16:38:14.226" level="FAIL">On != Off</msg>
<status endtime="20170824 16:38:14.226" status="FAIL" starttime="20170824 16:38:14.225"></status>
</kw>
<status endtime="20170824 16:38:14.226" status="FAIL" starttime="20170824 16:38:08.563"></status>
</kw>
<status endtime="20170824 16:38:14.226" status="FAIL" starttime="20170824 16:38:08.562"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:38:24.231" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:38:24.231" status="PASS" starttime="20170824 16:38:24.231"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:38:24.232" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:38:24.232" status="PASS" starttime="20170824 16:38:24.232"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:38:24.233" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:38:24.233" status="PASS" starttime="20170824 16:38:24.232"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:38:24.233" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:38:24.233" status="PASS" starttime="20170824 16:38:24.233"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:38:24.829" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:38:24.829" status="PASS" starttime="20170824 16:38:24.234"></status>
</kw>
<msg timestamp="20170824 16:38:24.830" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:38:24.830" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:38:24.830" status="PASS" starttime="20170824 16:38:24.234"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:38:24.830" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:38:24.830" status="PASS" starttime="20170824 16:38:24.830"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:38:24.831" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:38:24.831" status="PASS" starttime="20170824 16:38:24.831"></status>
</kw>
<status endtime="20170824 16:38:24.831" status="PASS" starttime="20170824 16:38:24.230"></status>
</kw>
<status endtime="20170824 16:38:24.831" status="PASS" starttime="20170824 16:38:24.230"></status>
</kw>
<status endtime="20170824 16:38:24.831" status="PASS" starttime="20170824 16:38:24.229"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:38:24.832" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:38:24.832" status="PASS" starttime="20170824 16:38:24.832"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:38:24.834" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:38:24.834" status="PASS" starttime="20170824 16:38:24.833"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:38:24.835" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:38:24.835" status="PASS" starttime="20170824 16:38:24.835"></status>
</kw>
<status endtime="20170824 16:38:24.835" status="PASS" starttime="20170824 16:38:24.834"></status>
</kw>
<status endtime="20170824 16:38:24.836" status="PASS" starttime="20170824 16:38:24.833"></status>
</kw>
<status endtime="20170824 16:38:24.836" status="PASS" starttime="20170824 16:38:24.832"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:38:25.196" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:38:25.196" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:38:25.196" status="PASS" starttime="20170824 16:38:24.836"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:38:25.198" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:38:25.198" status="PASS" starttime="20170824 16:38:25.198"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:38:25.199" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:38:25.199" status="PASS" starttime="20170824 16:38:25.199"></status>
</kw>
<status endtime="20170824 16:38:25.199" status="PASS" starttime="20170824 16:38:25.198"></status>
</kw>
<status endtime="20170824 16:38:25.199" status="PASS" starttime="20170824 16:38:25.197"></status>
</kw>
<status endtime="20170824 16:38:25.199" status="PASS" starttime="20170824 16:38:25.197"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:38:25.200" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:38:25.200" status="PASS" starttime="20170824 16:38:25.200"></status>
</kw>
<msg timestamp="20170824 16:38:25.200" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:38:25.200" status="PASS" starttime="20170824 16:38:24.228"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:38:25.201" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:38:25.201" status="PASS" starttime="20170824 16:38:25.200"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:38:25.201" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:38:25.201" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:38:25.201" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170824 16:38:25.201" status="PASS" starttime="20170824 16:38:25.201"></status>
</kw>
<msg timestamp="20170824 16:38:25.202" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 16:38:25.202" status="PASS" starttime="20170824 16:38:24.228"></status>
</kw>
<msg timestamp="20170824 16:38:25.202" level="INFO">${power_state} = On</msg>
<status endtime="20170824 16:38:25.202" status="PASS" starttime="20170824 16:38:24.227"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:38:25.203" status="PASS" starttime="20170824 16:38:25.202"></status>
</kw>
<status endtime="20170824 16:38:25.203" status="PASS" starttime="20170824 16:38:24.227"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:38:25.207" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:38:25.207" status="PASS" starttime="20170824 16:38:25.207"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:38:25.208" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:38:25.208" status="PASS" starttime="20170824 16:38:25.207"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:38:25.208" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:38:25.208" status="PASS" starttime="20170824 16:38:25.208"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:38:25.209" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:38:25.209" status="PASS" starttime="20170824 16:38:25.209"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:38:25.590" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:38:25.590" status="PASS" starttime="20170824 16:38:25.210"></status>
</kw>
<msg timestamp="20170824 16:38:25.591" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:38:25.591" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:38:25.591" status="PASS" starttime="20170824 16:38:25.209"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:38:25.591" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:38:25.591" status="PASS" starttime="20170824 16:38:25.591"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:38:25.592" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:38:25.592" status="PASS" starttime="20170824 16:38:25.592"></status>
</kw>
<status endtime="20170824 16:38:25.592" status="PASS" starttime="20170824 16:38:25.205"></status>
</kw>
<status endtime="20170824 16:38:25.592" status="PASS" starttime="20170824 16:38:25.205"></status>
</kw>
<status endtime="20170824 16:38:25.592" status="PASS" starttime="20170824 16:38:25.204"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:38:25.593" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:38:25.593" status="PASS" starttime="20170824 16:38:25.593"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:38:25.595" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:38:25.595" status="PASS" starttime="20170824 16:38:25.594"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:38:25.596" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:38:25.596" status="PASS" starttime="20170824 16:38:25.596"></status>
</kw>
<status endtime="20170824 16:38:25.597" status="PASS" starttime="20170824 16:38:25.595"></status>
</kw>
<status endtime="20170824 16:38:25.597" status="PASS" starttime="20170824 16:38:25.594"></status>
</kw>
<status endtime="20170824 16:38:25.597" status="PASS" starttime="20170824 16:38:25.593"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:38:26.088" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:38:26.089" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:38:26.089" status="PASS" starttime="20170824 16:38:25.597"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:38:26.090" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:38:26.090" status="PASS" starttime="20170824 16:38:26.090"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:38:26.092" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:38:26.092" status="PASS" starttime="20170824 16:38:26.091"></status>
</kw>
<status endtime="20170824 16:38:26.092" status="PASS" starttime="20170824 16:38:26.091"></status>
</kw>
<status endtime="20170824 16:38:26.092" status="PASS" starttime="20170824 16:38:26.089"></status>
</kw>
<status endtime="20170824 16:38:26.092" status="PASS" starttime="20170824 16:38:26.089"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:38:26.092" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:38:26.092" status="PASS" starttime="20170824 16:38:26.092"></status>
</kw>
<msg timestamp="20170824 16:38:26.093" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:38:26.093" status="PASS" starttime="20170824 16:38:25.204"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:38:26.093" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:38:26.093" status="PASS" starttime="20170824 16:38:26.093"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:38:26.094" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:38:26.094" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:38:26.094" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170824 16:38:26.094" status="PASS" starttime="20170824 16:38:26.094"></status>
</kw>
<msg timestamp="20170824 16:38:26.094" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170824 16:38:26.094" status="PASS" starttime="20170824 16:38:25.203"></status>
</kw>
<msg timestamp="20170824 16:38:26.095" level="INFO">${host_state} = Running</msg>
<status endtime="20170824 16:38:26.095" status="PASS" starttime="20170824 16:38:25.203"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170824 16:38:26.095" status="PASS" starttime="20170824 16:38:26.095"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<doc>Get the boot progress and return it.</doc>
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="utils" name="Set Boot Progress Method">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170824 16:38:26.098" status="PASS" starttime="20170824 16:38:26.097"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>New Get Boot Progress</arg>
</arguments>
<assign>
<var>${new_status}</var>
<var>${new_value}</var>
</assign>
<kw library="utils" name="New Get Boot Progress">
<doc>Get the boot progress the new way (via xyz location).</doc>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:38:26.102" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:38:26.102" status="PASS" starttime="20170824 16:38:26.101"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:38:26.103" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:38:26.103" status="PASS" starttime="20170824 16:38:26.102"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:38:26.104" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:38:26.104" status="PASS" starttime="20170824 16:38:26.103"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:38:26.104" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:38:26.104" status="PASS" starttime="20170824 16:38:26.104"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:38:26.303" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:38:26.303" status="PASS" starttime="20170824 16:38:26.105"></status>
</kw>
<msg timestamp="20170824 16:38:26.303" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:38:26.304" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:38:26.304" status="PASS" starttime="20170824 16:38:26.104"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:38:26.304" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:38:26.304" status="PASS" starttime="20170824 16:38:26.304"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:38:26.305" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:38:26.305" status="PASS" starttime="20170824 16:38:26.305"></status>
</kw>
<status endtime="20170824 16:38:26.305" status="PASS" starttime="20170824 16:38:26.101"></status>
</kw>
<status endtime="20170824 16:38:26.305" status="PASS" starttime="20170824 16:38:26.100"></status>
</kw>
<status endtime="20170824 16:38:26.305" status="PASS" starttime="20170824 16:38:26.100"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:38:26.306" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170824 16:38:26.306" status="PASS" starttime="20170824 16:38:26.306"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:38:26.308" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:38:26.308" status="PASS" starttime="20170824 16:38:26.307"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:38:26.309" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:38:26.309" status="PASS" starttime="20170824 16:38:26.309"></status>
</kw>
<status endtime="20170824 16:38:26.309" status="PASS" starttime="20170824 16:38:26.308"></status>
</kw>
<status endtime="20170824 16:38:26.309" status="PASS" starttime="20170824 16:38:26.307"></status>
</kw>
<status endtime="20170824 16:38:26.309" status="PASS" starttime="20170824 16:38:26.306"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:38:26.409" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170824 16:38:26.409" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:38:26.409" status="PASS" starttime="20170824 16:38:26.310"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:38:26.411" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:38:26.411" status="PASS" starttime="20170824 16:38:26.411"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:38:26.412" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:38:26.412" status="PASS" starttime="20170824 16:38:26.412"></status>
</kw>
<status endtime="20170824 16:38:26.412" status="PASS" starttime="20170824 16:38:26.412"></status>
</kw>
<status endtime="20170824 16:38:26.413" status="PASS" starttime="20170824 16:38:26.410"></status>
</kw>
<status endtime="20170824 16:38:26.413" status="PASS" starttime="20170824 16:38:26.410"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:38:26.413" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:38:26.413" status="PASS" starttime="20170824 16:38:26.413"></status>
</kw>
<msg timestamp="20170824 16:38:26.413" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:38:26.413" status="PASS" starttime="20170824 16:38:26.099"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:38:26.414" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:38:26.414" status="PASS" starttime="20170824 16:38:26.414"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:38:26.415" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:38:26.415" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:38:26.415" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified'}</msg>
<status endtime="20170824 16:38:26.415" status="PASS" starttime="20170824 16:38:26.414"></status>
</kw>
<msg timestamp="20170824 16:38:26.415" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:38:26.415" status="PASS" starttime="20170824 16:38:26.099"></status>
</kw>
<status endtime="20170824 16:38:26.416" status="PASS" starttime="20170824 16:38:26.098"></status>
</kw>
<msg timestamp="20170824 16:38:26.416" level="INFO">${new_status} = PASS</msg>
<msg timestamp="20170824 16:38:26.416" level="INFO">${new_value} = Unspecified</msg>
<status endtime="20170824 16:38:26.416" status="PASS" starttime="20170824 16:38:26.098"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${new_status}' == 'PASS'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${boot_prog_method}</arg>
<arg>New</arg>
<arg>AND</arg>
<arg>Rqpvars</arg>
<arg>boot_prog_method</arg>
<arg>AND</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${boot_prog_method}</arg>
<arg>New</arg>
<arg>AND</arg>
<arg>Rqpvars</arg>
<arg>boot_prog_method</arg>
<arg>AND</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${boot_prog_method}</arg>
<arg>New</arg>
</arguments>
<msg timestamp="20170824 16:38:26.418" level="INFO">${boot_prog_method} = New</msg>
<status endtime="20170824 16:38:26.418" status="PASS" starttime="20170824 16:38:26.417"></status>
</kw>
<kw library="gen_robot_print" name="Rqpvars">
<arguments>
<arg>boot_prog_method</arg>
</arguments>
<status endtime="20170824 16:38:26.419" status="PASS" starttime="20170824 16:38:26.418"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20170824 16:38:26.419" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170824 16:38:26.419" status="PASS" starttime="20170824 16:38:26.419"></status>
</kw>
<status endtime="20170824 16:38:26.419" status="PASS" starttime="20170824 16:38:26.417"></status>
</kw>
<status endtime="20170824 16:38:26.419" status="PASS" starttime="20170824 16:38:26.416"></status>
</kw>
<status endtime="20170824 16:38:26.420" status="PASS" starttime="20170824 16:38:26.097"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="utils" name="New Get Boot Progress">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:38:26.424" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:38:26.424" status="PASS" starttime="20170824 16:38:26.423"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:38:26.425" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:38:26.425" status="PASS" starttime="20170824 16:38:26.424"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:38:26.425" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:38:26.425" status="PASS" starttime="20170824 16:38:26.425"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:38:26.426" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:38:26.426" status="PASS" starttime="20170824 16:38:26.426"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:38:26.636" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:38:26.636" status="PASS" starttime="20170824 16:38:26.427"></status>
</kw>
<msg timestamp="20170824 16:38:26.636" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:38:26.636" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:38:26.636" status="PASS" starttime="20170824 16:38:26.426"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:38:26.637" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:38:26.637" status="PASS" starttime="20170824 16:38:26.636"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:38:26.637" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:38:26.637" status="PASS" starttime="20170824 16:38:26.637"></status>
</kw>
<status endtime="20170824 16:38:26.638" status="PASS" starttime="20170824 16:38:26.423"></status>
</kw>
<status endtime="20170824 16:38:26.638" status="PASS" starttime="20170824 16:38:26.422"></status>
</kw>
<status endtime="20170824 16:38:26.638" status="PASS" starttime="20170824 16:38:26.422"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:38:26.638" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170824 16:38:26.638" status="PASS" starttime="20170824 16:38:26.638"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:38:26.641" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:38:26.641" status="PASS" starttime="20170824 16:38:26.640"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:38:26.642" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:38:26.642" status="PASS" starttime="20170824 16:38:26.641"></status>
</kw>
<status endtime="20170824 16:38:26.642" status="PASS" starttime="20170824 16:38:26.641"></status>
</kw>
<status endtime="20170824 16:38:26.642" status="PASS" starttime="20170824 16:38:26.639"></status>
</kw>
<status endtime="20170824 16:38:26.642" status="PASS" starttime="20170824 16:38:26.639"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:38:26.814" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170824 16:38:26.814" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:38:26.814" status="PASS" starttime="20170824 16:38:26.642"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:38:26.815" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:38:26.816" status="PASS" starttime="20170824 16:38:26.815"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:38:26.816" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:38:26.817" status="PASS" starttime="20170824 16:38:26.816"></status>
</kw>
<status endtime="20170824 16:38:26.817" status="PASS" starttime="20170824 16:38:26.816"></status>
</kw>
<status endtime="20170824 16:38:26.817" status="PASS" starttime="20170824 16:38:26.815"></status>
</kw>
<status endtime="20170824 16:38:26.817" status="PASS" starttime="20170824 16:38:26.814"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:38:26.817" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:38:26.817" status="PASS" starttime="20170824 16:38:26.817"></status>
</kw>
<msg timestamp="20170824 16:38:26.818" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:38:26.818" status="PASS" starttime="20170824 16:38:26.421"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:38:26.818" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:38:26.818" status="PASS" starttime="20170824 16:38:26.818"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:38:26.819" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:38:26.819" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:38:26.819" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified'}</msg>
<status endtime="20170824 16:38:26.819" status="PASS" starttime="20170824 16:38:26.818"></status>
</kw>
<msg timestamp="20170824 16:38:26.819" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:38:26.819" status="PASS" starttime="20170824 16:38:26.421"></status>
</kw>
<status endtime="20170824 16:38:26.820" status="PASS" starttime="20170824 16:38:26.420"></status>
</kw>
<msg timestamp="20170824 16:38:26.820" level="INFO">${state} = Unspecified</msg>
<status endtime="20170824 16:38:26.820" status="PASS" starttime="20170824 16:38:26.420"></status>
</kw>
<msg timestamp="20170824 16:38:26.820" level="INFO">${boot_progress} = Unspecified</msg>
<status endtime="20170824 16:38:26.820" status="PASS" starttime="20170824 16:38:26.097"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>OSStart</arg>
</arguments>
<msg timestamp="20170824 16:38:26.821" level="FAIL">Unspecified != OSStart</msg>
<status endtime="20170824 16:38:26.821" status="FAIL" starttime="20170824 16:38:26.820"></status>
</kw>
<status endtime="20170824 16:38:26.821" status="FAIL" starttime="20170824 16:38:26.096"></status>
</kw>
<msg timestamp="20170824 16:38:26.821" level="INFO">${status} = False</msg>
<status endtime="20170824 16:38:26.821" status="PASS" starttime="20170824 16:38:26.096"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170824 16:38:26.822" status="PASS" starttime="20170824 16:38:26.821"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:38:26.825" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:38:26.826" status="PASS" starttime="20170824 16:38:26.825"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:38:26.826" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:38:26.826" status="PASS" starttime="20170824 16:38:26.826"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:38:26.827" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:38:26.827" status="PASS" starttime="20170824 16:38:26.826"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:38:26.827" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:38:26.828" status="PASS" starttime="20170824 16:38:26.827"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:38:27.011" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:38:27.011" status="PASS" starttime="20170824 16:38:26.828"></status>
</kw>
<msg timestamp="20170824 16:38:27.011" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:38:27.011" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:38:27.011" status="PASS" starttime="20170824 16:38:26.828"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:38:27.012" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:38:27.012" status="PASS" starttime="20170824 16:38:27.012"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:38:27.013" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:38:27.013" status="PASS" starttime="20170824 16:38:27.012"></status>
</kw>
<status endtime="20170824 16:38:27.013" status="PASS" starttime="20170824 16:38:26.824"></status>
</kw>
<status endtime="20170824 16:38:27.013" status="PASS" starttime="20170824 16:38:26.824"></status>
</kw>
<status endtime="20170824 16:38:27.013" status="PASS" starttime="20170824 16:38:26.823"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:38:27.014" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170824 16:38:27.014" status="PASS" starttime="20170824 16:38:27.013"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:38:27.016" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:38:27.016" status="PASS" starttime="20170824 16:38:27.015"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:38:27.017" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:38:27.017" status="PASS" starttime="20170824 16:38:27.017"></status>
</kw>
<status endtime="20170824 16:38:27.017" status="PASS" starttime="20170824 16:38:27.016"></status>
</kw>
<status endtime="20170824 16:38:27.017" status="PASS" starttime="20170824 16:38:27.014"></status>
</kw>
<status endtime="20170824 16:38:27.017" status="PASS" starttime="20170824 16:38:27.014"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:38:27.107" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170824 16:38:27.107" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:38:27.107" status="PASS" starttime="20170824 16:38:27.018"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:38:27.109" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:38:27.109" status="PASS" starttime="20170824 16:38:27.109"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:38:27.110" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:38:27.110" status="PASS" starttime="20170824 16:38:27.110"></status>
</kw>
<status endtime="20170824 16:38:27.110" status="PASS" starttime="20170824 16:38:27.109"></status>
</kw>
<status endtime="20170824 16:38:27.110" status="PASS" starttime="20170824 16:38:27.108"></status>
</kw>
<status endtime="20170824 16:38:27.110" status="PASS" starttime="20170824 16:38:27.108"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:38:27.111" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:38:27.111" status="PASS" starttime="20170824 16:38:27.111"></status>
</kw>
<msg timestamp="20170824 16:38:27.111" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:38:27.111" status="PASS" starttime="20170824 16:38:26.823"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:38:27.112" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:38:27.112" status="PASS" starttime="20170824 16:38:27.112"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:38:27.113" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:38:27.113" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:38:27.113" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified'}</msg>
<status endtime="20170824 16:38:27.113" status="PASS" starttime="20170824 16:38:27.112"></status>
</kw>
<msg timestamp="20170824 16:38:27.113" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:38:27.113" status="PASS" starttime="20170824 16:38:26.822"></status>
</kw>
<msg timestamp="20170824 16:38:27.113" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:38:27.113" status="PASS" starttime="20170824 16:38:26.822"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170824 16:38:27.114" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170824 16:38:27.114" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:38:27.114" status="FAIL" starttime="20170824 16:38:27.114"></status>
</kw>
<status endtime="20170824 16:38:27.114" status="FAIL" starttime="20170824 16:38:26.095"></status>
</kw>
<status endtime="20170824 16:38:27.114" status="FAIL" starttime="20170824 16:38:24.226"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:38:37.124" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:38:37.124" status="PASS" starttime="20170824 16:38:37.123"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:38:37.125" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:38:37.125" status="PASS" starttime="20170824 16:38:37.125"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:38:37.126" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:38:37.126" status="PASS" starttime="20170824 16:38:37.125"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:38:37.126" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:38:37.126" status="PASS" starttime="20170824 16:38:37.126"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:38:37.331" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:38:37.331" status="PASS" starttime="20170824 16:38:37.127"></status>
</kw>
<msg timestamp="20170824 16:38:37.331" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:38:37.331" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:38:37.331" status="PASS" starttime="20170824 16:38:37.127"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:38:37.332" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:38:37.332" status="PASS" starttime="20170824 16:38:37.332"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:38:37.333" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:38:37.333" status="PASS" starttime="20170824 16:38:37.332"></status>
</kw>
<status endtime="20170824 16:38:37.333" status="PASS" starttime="20170824 16:38:37.119"></status>
</kw>
<status endtime="20170824 16:38:37.333" status="PASS" starttime="20170824 16:38:37.118"></status>
</kw>
<status endtime="20170824 16:38:37.333" status="PASS" starttime="20170824 16:38:37.118"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:38:37.334" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:38:37.334" status="PASS" starttime="20170824 16:38:37.333"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:38:37.336" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:38:37.336" status="PASS" starttime="20170824 16:38:37.335"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:38:37.337" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:38:37.337" status="PASS" starttime="20170824 16:38:37.337"></status>
</kw>
<status endtime="20170824 16:38:37.337" status="PASS" starttime="20170824 16:38:37.336"></status>
</kw>
<status endtime="20170824 16:38:37.337" status="PASS" starttime="20170824 16:38:37.335"></status>
</kw>
<status endtime="20170824 16:38:37.337" status="PASS" starttime="20170824 16:38:37.334"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:38:37.435" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:38:37.435" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:38:37.435" status="PASS" starttime="20170824 16:38:37.338"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:38:37.437" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:38:37.437" status="PASS" starttime="20170824 16:38:37.436"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:38:37.438" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:38:37.438" status="PASS" starttime="20170824 16:38:37.438"></status>
</kw>
<status endtime="20170824 16:38:37.438" status="PASS" starttime="20170824 16:38:37.437"></status>
</kw>
<status endtime="20170824 16:38:37.438" status="PASS" starttime="20170824 16:38:37.436"></status>
</kw>
<status endtime="20170824 16:38:37.439" status="PASS" starttime="20170824 16:38:37.435"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:38:37.439" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:38:37.439" status="PASS" starttime="20170824 16:38:37.439"></status>
</kw>
<msg timestamp="20170824 16:38:37.439" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:38:37.439" status="PASS" starttime="20170824 16:38:37.117"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:38:37.440" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:38:37.440" status="PASS" starttime="20170824 16:38:37.440"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:38:37.440" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:38:37.441" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:38:37.441" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170824 16:38:37.441" status="PASS" starttime="20170824 16:38:37.440"></status>
</kw>
<msg timestamp="20170824 16:38:37.441" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 16:38:37.441" status="PASS" starttime="20170824 16:38:37.116"></status>
</kw>
<msg timestamp="20170824 16:38:37.441" level="INFO">${power_state} = On</msg>
<status endtime="20170824 16:38:37.441" status="PASS" starttime="20170824 16:38:37.116"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:38:37.442" status="PASS" starttime="20170824 16:38:37.442"></status>
</kw>
<status endtime="20170824 16:38:37.442" status="PASS" starttime="20170824 16:38:37.115"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:38:37.445" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:38:37.446" status="PASS" starttime="20170824 16:38:37.445"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:38:37.446" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:38:37.446" status="PASS" starttime="20170824 16:38:37.446"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:38:37.447" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:38:37.447" status="PASS" starttime="20170824 16:38:37.447"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:38:37.448" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:38:37.448" status="PASS" starttime="20170824 16:38:37.447"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:38:37.651" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:38:37.651" status="PASS" starttime="20170824 16:38:37.448"></status>
</kw>
<msg timestamp="20170824 16:38:37.651" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:38:37.651" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:38:37.651" status="PASS" starttime="20170824 16:38:37.448"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:38:37.652" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:38:37.652" status="PASS" starttime="20170824 16:38:37.651"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:38:37.652" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:38:37.652" status="PASS" starttime="20170824 16:38:37.652"></status>
</kw>
<status endtime="20170824 16:38:37.653" status="PASS" starttime="20170824 16:38:37.445"></status>
</kw>
<status endtime="20170824 16:38:37.653" status="PASS" starttime="20170824 16:38:37.444"></status>
</kw>
<status endtime="20170824 16:38:37.653" status="PASS" starttime="20170824 16:38:37.444"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:38:37.653" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:38:37.653" status="PASS" starttime="20170824 16:38:37.653"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:38:37.656" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:38:37.656" status="PASS" starttime="20170824 16:38:37.655"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:38:37.657" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:38:37.657" status="PASS" starttime="20170824 16:38:37.657"></status>
</kw>
<status endtime="20170824 16:38:37.657" status="PASS" starttime="20170824 16:38:37.656"></status>
</kw>
<status endtime="20170824 16:38:37.657" status="PASS" starttime="20170824 16:38:37.654"></status>
</kw>
<status endtime="20170824 16:38:37.657" status="PASS" starttime="20170824 16:38:37.654"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:38:37.748" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:38:37.748" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:38:37.748" status="PASS" starttime="20170824 16:38:37.657"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:38:37.750" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:38:37.750" status="PASS" starttime="20170824 16:38:37.749"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:38:37.751" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:38:37.751" status="PASS" starttime="20170824 16:38:37.750"></status>
</kw>
<status endtime="20170824 16:38:37.751" status="PASS" starttime="20170824 16:38:37.750"></status>
</kw>
<status endtime="20170824 16:38:37.751" status="PASS" starttime="20170824 16:38:37.749"></status>
</kw>
<status endtime="20170824 16:38:37.751" status="PASS" starttime="20170824 16:38:37.748"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:38:37.751" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:38:37.751" status="PASS" starttime="20170824 16:38:37.751"></status>
</kw>
<msg timestamp="20170824 16:38:37.752" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:38:37.752" status="PASS" starttime="20170824 16:38:37.443"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:38:37.752" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:38:37.752" status="PASS" starttime="20170824 16:38:37.752"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:38:37.753" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:38:37.753" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:38:37.753" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170824 16:38:37.753" status="PASS" starttime="20170824 16:38:37.753"></status>
</kw>
<msg timestamp="20170824 16:38:37.753" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170824 16:38:37.753" status="PASS" starttime="20170824 16:38:37.442"></status>
</kw>
<msg timestamp="20170824 16:38:37.754" level="INFO">${host_state} = Running</msg>
<status endtime="20170824 16:38:37.754" status="PASS" starttime="20170824 16:38:37.442"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170824 16:38:37.754" status="PASS" starttime="20170824 16:38:37.754"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<doc>Get the boot progress and return it.</doc>
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="utils" name="Set Boot Progress Method">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw library="BuiltIn" name="Return From Keyword">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20170824 16:38:37.757" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170824 16:38:37.757" status="PASS" starttime="20170824 16:38:37.757"></status>
</kw>
<status endtime="20170824 16:38:37.757" status="PASS" starttime="20170824 16:38:37.756"></status>
</kw>
<status endtime="20170824 16:38:37.757" status="PASS" starttime="20170824 16:38:37.756"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="utils" name="New Get Boot Progress">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:38:37.762" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:38:37.762" status="PASS" starttime="20170824 16:38:37.761"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:38:37.763" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:38:37.763" status="PASS" starttime="20170824 16:38:37.762"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:38:37.763" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:38:37.763" status="PASS" starttime="20170824 16:38:37.763"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:38:37.764" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:38:37.764" status="PASS" starttime="20170824 16:38:37.763"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:38:37.944" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:38:37.944" status="PASS" starttime="20170824 16:38:37.765"></status>
</kw>
<msg timestamp="20170824 16:38:37.944" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:38:37.944" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:38:37.945" status="PASS" starttime="20170824 16:38:37.764"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:38:37.945" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:38:37.945" status="PASS" starttime="20170824 16:38:37.945"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:38:37.946" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:38:37.946" status="PASS" starttime="20170824 16:38:37.945"></status>
</kw>
<status endtime="20170824 16:38:37.946" status="PASS" starttime="20170824 16:38:37.761"></status>
</kw>
<status endtime="20170824 16:38:37.946" status="PASS" starttime="20170824 16:38:37.760"></status>
</kw>
<status endtime="20170824 16:38:37.946" status="PASS" starttime="20170824 16:38:37.759"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:38:37.947" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170824 16:38:37.947" status="PASS" starttime="20170824 16:38:37.947"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:38:37.949" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:38:37.949" status="PASS" starttime="20170824 16:38:37.948"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:38:37.950" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:38:37.950" status="PASS" starttime="20170824 16:38:37.950"></status>
</kw>
<status endtime="20170824 16:38:37.950" status="PASS" starttime="20170824 16:38:37.949"></status>
</kw>
<status endtime="20170824 16:38:37.950" status="PASS" starttime="20170824 16:38:37.948"></status>
</kw>
<status endtime="20170824 16:38:37.950" status="PASS" starttime="20170824 16:38:37.947"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:38:38.076" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170824 16:38:38.076" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:38:38.076" status="PASS" starttime="20170824 16:38:37.951"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:38:38.078" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:38:38.078" status="PASS" starttime="20170824 16:38:38.078"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:38:38.079" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:38:38.079" status="PASS" starttime="20170824 16:38:38.079"></status>
</kw>
<status endtime="20170824 16:38:38.080" status="PASS" starttime="20170824 16:38:38.078"></status>
</kw>
<status endtime="20170824 16:38:38.080" status="PASS" starttime="20170824 16:38:38.077"></status>
</kw>
<status endtime="20170824 16:38:38.080" status="PASS" starttime="20170824 16:38:38.077"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:38:38.080" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:38:38.080" status="PASS" starttime="20170824 16:38:38.080"></status>
</kw>
<msg timestamp="20170824 16:38:38.080" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:38:38.080" status="PASS" starttime="20170824 16:38:37.759"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:38:38.081" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:38:38.081" status="PASS" starttime="20170824 16:38:38.081"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:38:38.082" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:38:38.082" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:38:38.082" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified'}</msg>
<status endtime="20170824 16:38:38.082" status="PASS" starttime="20170824 16:38:38.081"></status>
</kw>
<msg timestamp="20170824 16:38:38.082" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:38:38.082" status="PASS" starttime="20170824 16:38:37.758"></status>
</kw>
<status endtime="20170824 16:38:38.082" status="PASS" starttime="20170824 16:38:37.758"></status>
</kw>
<msg timestamp="20170824 16:38:38.082" level="INFO">${state} = Unspecified</msg>
<status endtime="20170824 16:38:38.083" status="PASS" starttime="20170824 16:38:37.758"></status>
</kw>
<msg timestamp="20170824 16:38:38.083" level="INFO">${boot_progress} = Unspecified</msg>
<status endtime="20170824 16:38:38.083" status="PASS" starttime="20170824 16:38:37.755"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>OSStart</arg>
</arguments>
<msg timestamp="20170824 16:38:38.083" level="FAIL">Unspecified != OSStart</msg>
<status endtime="20170824 16:38:38.084" status="FAIL" starttime="20170824 16:38:38.083"></status>
</kw>
<status endtime="20170824 16:38:38.084" status="FAIL" starttime="20170824 16:38:37.755"></status>
</kw>
<msg timestamp="20170824 16:38:38.084" level="INFO">${status} = False</msg>
<status endtime="20170824 16:38:38.084" status="PASS" starttime="20170824 16:38:37.755"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170824 16:38:38.085" status="PASS" starttime="20170824 16:38:38.084"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:38:38.090" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:38:38.091" status="PASS" starttime="20170824 16:38:38.090"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:38:38.091" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:38:38.091" status="PASS" starttime="20170824 16:38:38.091"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:38:38.092" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:38:38.092" status="PASS" starttime="20170824 16:38:38.092"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:38:38.093" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:38:38.093" status="PASS" starttime="20170824 16:38:38.092"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:38:38.333" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:38:38.333" status="PASS" starttime="20170824 16:38:38.093"></status>
</kw>
<msg timestamp="20170824 16:38:38.333" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:38:38.333" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:38:38.333" status="PASS" starttime="20170824 16:38:38.093"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:38:38.334" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:38:38.334" status="PASS" starttime="20170824 16:38:38.334"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:38:38.335" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:38:38.335" status="PASS" starttime="20170824 16:38:38.334"></status>
</kw>
<status endtime="20170824 16:38:38.335" status="PASS" starttime="20170824 16:38:38.089"></status>
</kw>
<status endtime="20170824 16:38:38.335" status="PASS" starttime="20170824 16:38:38.088"></status>
</kw>
<status endtime="20170824 16:38:38.335" status="PASS" starttime="20170824 16:38:38.087"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:38:38.335" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170824 16:38:38.336" status="PASS" starttime="20170824 16:38:38.335"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:38:38.338" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:38:38.338" status="PASS" starttime="20170824 16:38:38.337"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:38:38.339" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:38:38.339" status="PASS" starttime="20170824 16:38:38.339"></status>
</kw>
<status endtime="20170824 16:38:38.339" status="PASS" starttime="20170824 16:38:38.338"></status>
</kw>
<status endtime="20170824 16:38:38.339" status="PASS" starttime="20170824 16:38:38.336"></status>
</kw>
<status endtime="20170824 16:38:38.339" status="PASS" starttime="20170824 16:38:38.336"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:38:38.441" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170824 16:38:38.441" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:38:38.441" status="PASS" starttime="20170824 16:38:38.340"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:38:38.443" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:38:38.443" status="PASS" starttime="20170824 16:38:38.443"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:38:38.444" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:38:38.444" status="PASS" starttime="20170824 16:38:38.444"></status>
</kw>
<status endtime="20170824 16:38:38.444" status="PASS" starttime="20170824 16:38:38.443"></status>
</kw>
<status endtime="20170824 16:38:38.444" status="PASS" starttime="20170824 16:38:38.442"></status>
</kw>
<status endtime="20170824 16:38:38.445" status="PASS" starttime="20170824 16:38:38.442"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:38:38.445" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:38:38.445" status="PASS" starttime="20170824 16:38:38.445"></status>
</kw>
<msg timestamp="20170824 16:38:38.445" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:38:38.445" status="PASS" starttime="20170824 16:38:38.087"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:38:38.446" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:38:38.446" status="PASS" starttime="20170824 16:38:38.446"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:38:38.447" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:38:38.447" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:38:38.447" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified'}</msg>
<status endtime="20170824 16:38:38.447" status="PASS" starttime="20170824 16:38:38.447"></status>
</kw>
<msg timestamp="20170824 16:38:38.447" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:38:38.447" status="PASS" starttime="20170824 16:38:38.086"></status>
</kw>
<msg timestamp="20170824 16:38:38.448" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:38:38.448" status="PASS" starttime="20170824 16:38:38.085"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170824 16:38:38.448" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170824 16:38:38.448" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:38:38.448" status="FAIL" starttime="20170824 16:38:38.448"></status>
</kw>
<status endtime="20170824 16:38:38.448" status="FAIL" starttime="20170824 16:38:37.754"></status>
</kw>
<status endtime="20170824 16:38:38.449" status="FAIL" starttime="20170824 16:38:37.115"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:38:48.454" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:38:48.454" status="PASS" starttime="20170824 16:38:48.453"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:38:48.455" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:38:48.455" status="PASS" starttime="20170824 16:38:48.454"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:38:48.455" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:38:48.455" status="PASS" starttime="20170824 16:38:48.455"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:38:48.456" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:38:48.456" status="PASS" starttime="20170824 16:38:48.455"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:38:48.647" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:38:48.647" status="PASS" starttime="20170824 16:38:48.457"></status>
</kw>
<msg timestamp="20170824 16:38:48.647" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:38:48.647" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:38:48.648" status="PASS" starttime="20170824 16:38:48.456"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:38:48.648" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:38:48.648" status="PASS" starttime="20170824 16:38:48.648"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:38:48.649" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:38:48.649" status="PASS" starttime="20170824 16:38:48.648"></status>
</kw>
<status endtime="20170824 16:38:48.649" status="PASS" starttime="20170824 16:38:48.453"></status>
</kw>
<status endtime="20170824 16:38:48.649" status="PASS" starttime="20170824 16:38:48.452"></status>
</kw>
<status endtime="20170824 16:38:48.650" status="PASS" starttime="20170824 16:38:48.452"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:38:48.650" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:38:48.650" status="PASS" starttime="20170824 16:38:48.650"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:38:48.652" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:38:48.652" status="PASS" starttime="20170824 16:38:48.652"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:38:48.653" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:38:48.653" status="PASS" starttime="20170824 16:38:48.653"></status>
</kw>
<status endtime="20170824 16:38:48.653" status="PASS" starttime="20170824 16:38:48.652"></status>
</kw>
<status endtime="20170824 16:38:48.653" status="PASS" starttime="20170824 16:38:48.651"></status>
</kw>
<status endtime="20170824 16:38:48.654" status="PASS" starttime="20170824 16:38:48.650"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:38:48.718" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:38:48.718" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:38:48.718" status="PASS" starttime="20170824 16:38:48.654"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:38:48.720" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:38:48.720" status="PASS" starttime="20170824 16:38:48.720"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:38:48.721" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:38:48.721" status="PASS" starttime="20170824 16:38:48.721"></status>
</kw>
<status endtime="20170824 16:38:48.721" status="PASS" starttime="20170824 16:38:48.720"></status>
</kw>
<status endtime="20170824 16:38:48.721" status="PASS" starttime="20170824 16:38:48.719"></status>
</kw>
<status endtime="20170824 16:38:48.721" status="PASS" starttime="20170824 16:38:48.719"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:38:48.722" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:38:48.722" status="PASS" starttime="20170824 16:38:48.722"></status>
</kw>
<msg timestamp="20170824 16:38:48.722" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:38:48.722" status="PASS" starttime="20170824 16:38:48.451"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:38:48.723" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:38:48.723" status="PASS" starttime="20170824 16:38:48.722"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:38:48.723" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:38:48.723" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:38:48.723" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170824 16:38:48.723" status="PASS" starttime="20170824 16:38:48.723"></status>
</kw>
<msg timestamp="20170824 16:38:48.724" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 16:38:48.724" status="PASS" starttime="20170824 16:38:48.451"></status>
</kw>
<msg timestamp="20170824 16:38:48.724" level="INFO">${power_state} = On</msg>
<status endtime="20170824 16:38:48.724" status="PASS" starttime="20170824 16:38:48.450"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:38:48.725" status="PASS" starttime="20170824 16:38:48.724"></status>
</kw>
<status endtime="20170824 16:38:48.725" status="PASS" starttime="20170824 16:38:48.450"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:38:48.729" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:38:48.729" status="PASS" starttime="20170824 16:38:48.728"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:38:48.730" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:38:48.730" status="PASS" starttime="20170824 16:38:48.729"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:38:48.730" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:38:48.730" status="PASS" starttime="20170824 16:38:48.730"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:38:48.731" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:38:48.731" status="PASS" starttime="20170824 16:38:48.731"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:38:48.990" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:38:48.990" status="PASS" starttime="20170824 16:38:48.732"></status>
</kw>
<msg timestamp="20170824 16:38:48.990" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:38:48.990" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:38:48.991" status="PASS" starttime="20170824 16:38:48.731"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:38:48.991" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:38:48.991" status="PASS" starttime="20170824 16:38:48.991"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:38:48.992" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:38:48.992" status="PASS" starttime="20170824 16:38:48.991"></status>
</kw>
<status endtime="20170824 16:38:48.992" status="PASS" starttime="20170824 16:38:48.728"></status>
</kw>
<status endtime="20170824 16:38:48.992" status="PASS" starttime="20170824 16:38:48.727"></status>
</kw>
<status endtime="20170824 16:38:48.992" status="PASS" starttime="20170824 16:38:48.727"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:38:48.993" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:38:48.993" status="PASS" starttime="20170824 16:38:48.992"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:38:48.995" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:38:48.995" status="PASS" starttime="20170824 16:38:48.994"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:38:48.996" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:38:48.996" status="PASS" starttime="20170824 16:38:48.996"></status>
</kw>
<status endtime="20170824 16:38:48.996" status="PASS" starttime="20170824 16:38:48.995"></status>
</kw>
<status endtime="20170824 16:38:48.996" status="PASS" starttime="20170824 16:38:48.994"></status>
</kw>
<status endtime="20170824 16:38:48.996" status="PASS" starttime="20170824 16:38:48.993"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:38:49.159" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:38:49.159" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:38:49.159" status="PASS" starttime="20170824 16:38:48.997"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:38:49.161" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:38:49.161" status="PASS" starttime="20170824 16:38:49.160"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:38:49.162" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:38:49.162" status="PASS" starttime="20170824 16:38:49.162"></status>
</kw>
<status endtime="20170824 16:38:49.162" status="PASS" starttime="20170824 16:38:49.161"></status>
</kw>
<status endtime="20170824 16:38:49.162" status="PASS" starttime="20170824 16:38:49.160"></status>
</kw>
<status endtime="20170824 16:38:49.162" status="PASS" starttime="20170824 16:38:49.159"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:38:49.163" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:38:49.163" status="PASS" starttime="20170824 16:38:49.162"></status>
</kw>
<msg timestamp="20170824 16:38:49.163" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:38:49.163" status="PASS" starttime="20170824 16:38:48.726"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:38:49.164" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:38:49.164" status="PASS" starttime="20170824 16:38:49.163"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:38:49.164" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:38:49.164" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:38:49.164" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170824 16:38:49.164" status="PASS" starttime="20170824 16:38:49.164"></status>
</kw>
<msg timestamp="20170824 16:38:49.165" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170824 16:38:49.165" status="PASS" starttime="20170824 16:38:48.725"></status>
</kw>
<msg timestamp="20170824 16:38:49.165" level="INFO">${host_state} = Running</msg>
<status endtime="20170824 16:38:49.165" status="PASS" starttime="20170824 16:38:48.725"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170824 16:38:49.165" status="PASS" starttime="20170824 16:38:49.165"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<doc>Get the boot progress and return it.</doc>
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="utils" name="Set Boot Progress Method">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw library="BuiltIn" name="Return From Keyword">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20170824 16:38:49.168" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170824 16:38:49.169" status="PASS" starttime="20170824 16:38:49.168"></status>
</kw>
<status endtime="20170824 16:38:49.169" status="PASS" starttime="20170824 16:38:49.168"></status>
</kw>
<status endtime="20170824 16:38:49.169" status="PASS" starttime="20170824 16:38:49.167"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="utils" name="New Get Boot Progress">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:38:49.173" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:38:49.173" status="PASS" starttime="20170824 16:38:49.173"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:38:49.174" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:38:49.174" status="PASS" starttime="20170824 16:38:49.174"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:38:49.175" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:38:49.175" status="PASS" starttime="20170824 16:38:49.174"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:38:49.175" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:38:49.175" status="PASS" starttime="20170824 16:38:49.175"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:38:49.356" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:38:49.356" status="PASS" starttime="20170824 16:38:49.176"></status>
</kw>
<msg timestamp="20170824 16:38:49.356" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:38:49.356" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:38:49.356" status="PASS" starttime="20170824 16:38:49.176"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:38:49.357" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:38:49.357" status="PASS" starttime="20170824 16:38:49.357"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:38:49.358" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:38:49.358" status="PASS" starttime="20170824 16:38:49.357"></status>
</kw>
<status endtime="20170824 16:38:49.358" status="PASS" starttime="20170824 16:38:49.172"></status>
</kw>
<status endtime="20170824 16:38:49.358" status="PASS" starttime="20170824 16:38:49.172"></status>
</kw>
<status endtime="20170824 16:38:49.358" status="PASS" starttime="20170824 16:38:49.171"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:38:49.359" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170824 16:38:49.359" status="PASS" starttime="20170824 16:38:49.358"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:38:49.361" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:38:49.361" status="PASS" starttime="20170824 16:38:49.360"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:38:49.362" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:38:49.362" status="PASS" starttime="20170824 16:38:49.361"></status>
</kw>
<status endtime="20170824 16:38:49.362" status="PASS" starttime="20170824 16:38:49.361"></status>
</kw>
<status endtime="20170824 16:38:49.362" status="PASS" starttime="20170824 16:38:49.359"></status>
</kw>
<status endtime="20170824 16:38:49.362" status="PASS" starttime="20170824 16:38:49.359"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:38:49.466" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170824 16:38:49.466" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:38:49.466" status="PASS" starttime="20170824 16:38:49.362"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:38:49.468" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:38:49.468" status="PASS" starttime="20170824 16:38:49.467"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:38:49.469" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:38:49.469" status="PASS" starttime="20170824 16:38:49.468"></status>
</kw>
<status endtime="20170824 16:38:49.469" status="PASS" starttime="20170824 16:38:49.468"></status>
</kw>
<status endtime="20170824 16:38:49.469" status="PASS" starttime="20170824 16:38:49.467"></status>
</kw>
<status endtime="20170824 16:38:49.469" status="PASS" starttime="20170824 16:38:49.466"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:38:49.469" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:38:49.470" status="PASS" starttime="20170824 16:38:49.469"></status>
</kw>
<msg timestamp="20170824 16:38:49.470" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:38:49.470" status="PASS" starttime="20170824 16:38:49.171"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:38:49.470" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:38:49.470" status="PASS" starttime="20170824 16:38:49.470"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:38:49.471" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:38:49.471" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:38:49.471" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified'}</msg>
<status endtime="20170824 16:38:49.471" status="PASS" starttime="20170824 16:38:49.471"></status>
</kw>
<msg timestamp="20170824 16:38:49.471" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:38:49.472" status="PASS" starttime="20170824 16:38:49.170"></status>
</kw>
<status endtime="20170824 16:38:49.472" status="PASS" starttime="20170824 16:38:49.170"></status>
</kw>
<msg timestamp="20170824 16:38:49.472" level="INFO">${state} = Unspecified</msg>
<status endtime="20170824 16:38:49.472" status="PASS" starttime="20170824 16:38:49.169"></status>
</kw>
<msg timestamp="20170824 16:38:49.472" level="INFO">${boot_progress} = Unspecified</msg>
<status endtime="20170824 16:38:49.472" status="PASS" starttime="20170824 16:38:49.167"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>OSStart</arg>
</arguments>
<msg timestamp="20170824 16:38:49.473" level="FAIL">Unspecified != OSStart</msg>
<status endtime="20170824 16:38:49.473" status="FAIL" starttime="20170824 16:38:49.472"></status>
</kw>
<status endtime="20170824 16:38:49.473" status="FAIL" starttime="20170824 16:38:49.167"></status>
</kw>
<msg timestamp="20170824 16:38:49.473" level="INFO">${status} = False</msg>
<status endtime="20170824 16:38:49.473" status="PASS" starttime="20170824 16:38:49.166"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170824 16:38:49.474" status="PASS" starttime="20170824 16:38:49.473"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:38:49.477" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:38:49.478" status="PASS" starttime="20170824 16:38:49.477"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:38:49.479" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:38:49.479" status="PASS" starttime="20170824 16:38:49.478"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:38:49.479" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:38:49.479" status="PASS" starttime="20170824 16:38:49.479"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:38:49.480" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:38:49.480" status="PASS" starttime="20170824 16:38:49.480"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:38:49.659" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:38:49.659" status="PASS" starttime="20170824 16:38:49.481"></status>
</kw>
<msg timestamp="20170824 16:38:49.659" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:38:49.659" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:38:49.659" status="PASS" starttime="20170824 16:38:49.480"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:38:49.659" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:38:49.660" status="PASS" starttime="20170824 16:38:49.659"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:38:49.660" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:38:49.660" status="PASS" starttime="20170824 16:38:49.660"></status>
</kw>
<status endtime="20170824 16:38:49.660" status="PASS" starttime="20170824 16:38:49.476"></status>
</kw>
<status endtime="20170824 16:38:49.661" status="PASS" starttime="20170824 16:38:49.476"></status>
</kw>
<status endtime="20170824 16:38:49.661" status="PASS" starttime="20170824 16:38:49.475"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:38:49.661" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170824 16:38:49.661" status="PASS" starttime="20170824 16:38:49.661"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:38:49.663" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:38:49.663" status="PASS" starttime="20170824 16:38:49.663"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:38:49.664" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:38:49.664" status="PASS" starttime="20170824 16:38:49.664"></status>
</kw>
<status endtime="20170824 16:38:49.664" status="PASS" starttime="20170824 16:38:49.664"></status>
</kw>
<status endtime="20170824 16:38:49.665" status="PASS" starttime="20170824 16:38:49.662"></status>
</kw>
<status endtime="20170824 16:38:49.665" status="PASS" starttime="20170824 16:38:49.662"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:38:49.792" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170824 16:38:49.793" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:38:49.793" status="PASS" starttime="20170824 16:38:49.665"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:38:49.794" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:38:49.794" status="PASS" starttime="20170824 16:38:49.794"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:38:49.795" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:38:49.795" status="PASS" starttime="20170824 16:38:49.795"></status>
</kw>
<status endtime="20170824 16:38:49.795" status="PASS" starttime="20170824 16:38:49.794"></status>
</kw>
<status endtime="20170824 16:38:49.796" status="PASS" starttime="20170824 16:38:49.793"></status>
</kw>
<status endtime="20170824 16:38:49.796" status="PASS" starttime="20170824 16:38:49.793"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:38:49.796" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:38:49.796" status="PASS" starttime="20170824 16:38:49.796"></status>
</kw>
<msg timestamp="20170824 16:38:49.796" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:38:49.796" status="PASS" starttime="20170824 16:38:49.475"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:38:49.797" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:38:49.797" status="PASS" starttime="20170824 16:38:49.797"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:38:49.798" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:38:49.798" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:38:49.798" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified'}</msg>
<status endtime="20170824 16:38:49.798" status="PASS" starttime="20170824 16:38:49.797"></status>
</kw>
<msg timestamp="20170824 16:38:49.798" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:38:49.798" status="PASS" starttime="20170824 16:38:49.474"></status>
</kw>
<msg timestamp="20170824 16:38:49.798" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:38:49.798" status="PASS" starttime="20170824 16:38:49.474"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170824 16:38:49.799" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170824 16:38:49.799" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:38:49.799" status="FAIL" starttime="20170824 16:38:49.799"></status>
</kw>
<status endtime="20170824 16:38:49.799" status="FAIL" starttime="20170824 16:38:49.166"></status>
</kw>
<status endtime="20170824 16:38:49.799" status="FAIL" starttime="20170824 16:38:48.449"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:38:59.805" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:38:59.805" status="PASS" starttime="20170824 16:38:59.804"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:38:59.806" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:38:59.806" status="PASS" starttime="20170824 16:38:59.805"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:38:59.806" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:38:59.806" status="PASS" starttime="20170824 16:38:59.806"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:38:59.807" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:38:59.807" status="PASS" starttime="20170824 16:38:59.807"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:39:00.389" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:39:00.390" status="PASS" starttime="20170824 16:38:59.808"></status>
</kw>
<msg timestamp="20170824 16:39:00.390" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:39:00.390" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:00.390" status="PASS" starttime="20170824 16:38:59.807"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:39:00.390" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:00.391" status="PASS" starttime="20170824 16:39:00.390"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:39:00.391" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:00.391" status="PASS" starttime="20170824 16:39:00.391"></status>
</kw>
<status endtime="20170824 16:39:00.391" status="PASS" starttime="20170824 16:38:59.804"></status>
</kw>
<status endtime="20170824 16:39:00.392" status="PASS" starttime="20170824 16:38:59.804"></status>
</kw>
<status endtime="20170824 16:39:00.392" status="PASS" starttime="20170824 16:38:59.803"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:39:00.392" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:39:00.392" status="PASS" starttime="20170824 16:39:00.392"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:39:00.394" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:39:00.394" status="PASS" starttime="20170824 16:39:00.394"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:39:00.398" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:39:00.398" status="PASS" starttime="20170824 16:39:00.395"></status>
</kw>
<status endtime="20170824 16:39:00.398" status="PASS" starttime="20170824 16:39:00.395"></status>
</kw>
<status endtime="20170824 16:39:00.398" status="PASS" starttime="20170824 16:39:00.393"></status>
</kw>
<status endtime="20170824 16:39:00.398" status="PASS" starttime="20170824 16:39:00.393"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:39:03.390" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:39:03.391" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:03.391" status="PASS" starttime="20170824 16:39:00.399"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:39:03.392" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:39:03.392" status="PASS" starttime="20170824 16:39:03.392"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:39:03.393" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:39:03.394" status="PASS" starttime="20170824 16:39:03.393"></status>
</kw>
<status endtime="20170824 16:39:03.394" status="PASS" starttime="20170824 16:39:03.393"></status>
</kw>
<status endtime="20170824 16:39:03.394" status="PASS" starttime="20170824 16:39:03.391"></status>
</kw>
<status endtime="20170824 16:39:03.394" status="PASS" starttime="20170824 16:39:03.391"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:39:03.394" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:39:03.394" status="PASS" starttime="20170824 16:39:03.394"></status>
</kw>
<msg timestamp="20170824 16:39:03.394" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:03.395" status="PASS" starttime="20170824 16:38:59.802"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:39:03.395" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:03.395" status="PASS" starttime="20170824 16:39:03.395"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:39:03.396" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:39:03.396" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:39:03.396" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170824 16:39:03.396" status="PASS" starttime="20170824 16:39:03.396"></status>
</kw>
<msg timestamp="20170824 16:39:03.397" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 16:39:03.397" status="PASS" starttime="20170824 16:38:59.801"></status>
</kw>
<msg timestamp="20170824 16:39:03.397" level="INFO">${power_state} = On</msg>
<status endtime="20170824 16:39:03.397" status="PASS" starttime="20170824 16:38:59.801"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:39:03.397" status="PASS" starttime="20170824 16:39:03.397"></status>
</kw>
<status endtime="20170824 16:39:03.398" status="PASS" starttime="20170824 16:38:59.801"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:39:03.401" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:39:03.401" status="PASS" starttime="20170824 16:39:03.401"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:39:03.402" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:39:03.402" status="PASS" starttime="20170824 16:39:03.402"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:39:03.403" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:39:03.403" status="PASS" starttime="20170824 16:39:03.402"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:39:03.403" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:39:03.403" status="PASS" starttime="20170824 16:39:03.403"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:39:04.181" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:39:04.181" status="PASS" starttime="20170824 16:39:03.404"></status>
</kw>
<msg timestamp="20170824 16:39:04.181" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:39:04.181" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:04.181" status="PASS" starttime="20170824 16:39:03.404"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:39:04.182" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:04.182" status="PASS" starttime="20170824 16:39:04.182"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:39:04.183" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:04.183" status="PASS" starttime="20170824 16:39:04.182"></status>
</kw>
<status endtime="20170824 16:39:04.183" status="PASS" starttime="20170824 16:39:03.400"></status>
</kw>
<status endtime="20170824 16:39:04.183" status="PASS" starttime="20170824 16:39:03.400"></status>
</kw>
<status endtime="20170824 16:39:04.183" status="PASS" starttime="20170824 16:39:03.399"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:39:04.183" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:39:04.184" status="PASS" starttime="20170824 16:39:04.183"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:39:04.186" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:39:04.186" status="PASS" starttime="20170824 16:39:04.185"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:39:04.187" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:39:04.187" status="PASS" starttime="20170824 16:39:04.186"></status>
</kw>
<status endtime="20170824 16:39:04.187" status="PASS" starttime="20170824 16:39:04.186"></status>
</kw>
<status endtime="20170824 16:39:04.187" status="PASS" starttime="20170824 16:39:04.184"></status>
</kw>
<status endtime="20170824 16:39:04.187" status="PASS" starttime="20170824 16:39:04.184"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:39:04.459" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:39:04.459" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:04.459" status="PASS" starttime="20170824 16:39:04.188"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:39:04.461" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:39:04.461" status="PASS" starttime="20170824 16:39:04.460"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:39:04.461" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:39:04.462" status="PASS" starttime="20170824 16:39:04.461"></status>
</kw>
<status endtime="20170824 16:39:04.462" status="PASS" starttime="20170824 16:39:04.461"></status>
</kw>
<status endtime="20170824 16:39:04.462" status="PASS" starttime="20170824 16:39:04.460"></status>
</kw>
<status endtime="20170824 16:39:04.462" status="PASS" starttime="20170824 16:39:04.459"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:39:04.462" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:39:04.462" status="PASS" starttime="20170824 16:39:04.462"></status>
</kw>
<msg timestamp="20170824 16:39:04.463" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:04.463" status="PASS" starttime="20170824 16:39:03.399"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:39:04.463" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:04.463" status="PASS" starttime="20170824 16:39:04.463"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:39:04.464" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:39:04.464" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:39:04.464" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170824 16:39:04.464" status="PASS" starttime="20170824 16:39:04.464"></status>
</kw>
<msg timestamp="20170824 16:39:04.464" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170824 16:39:04.464" status="PASS" starttime="20170824 16:39:03.398"></status>
</kw>
<msg timestamp="20170824 16:39:04.465" level="INFO">${host_state} = Running</msg>
<status endtime="20170824 16:39:04.465" status="PASS" starttime="20170824 16:39:03.398"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170824 16:39:04.465" status="PASS" starttime="20170824 16:39:04.465"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<doc>Get the boot progress and return it.</doc>
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="utils" name="Set Boot Progress Method">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw library="BuiltIn" name="Return From Keyword">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20170824 16:39:04.468" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170824 16:39:04.468" status="PASS" starttime="20170824 16:39:04.468"></status>
</kw>
<status endtime="20170824 16:39:04.468" status="PASS" starttime="20170824 16:39:04.467"></status>
</kw>
<status endtime="20170824 16:39:04.469" status="PASS" starttime="20170824 16:39:04.467"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="utils" name="New Get Boot Progress">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:39:04.473" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:39:04.473" status="PASS" starttime="20170824 16:39:04.472"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:39:04.474" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:39:04.474" status="PASS" starttime="20170824 16:39:04.473"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:39:04.474" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:39:04.474" status="PASS" starttime="20170824 16:39:04.474"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:39:04.475" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:39:04.475" status="PASS" starttime="20170824 16:39:04.474"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:39:04.659" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:39:04.659" status="PASS" starttime="20170824 16:39:04.476"></status>
</kw>
<msg timestamp="20170824 16:39:04.659" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:39:04.660" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:04.660" status="PASS" starttime="20170824 16:39:04.475"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:39:04.660" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:04.660" status="PASS" starttime="20170824 16:39:04.660"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:39:04.661" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:04.661" status="PASS" starttime="20170824 16:39:04.661"></status>
</kw>
<status endtime="20170824 16:39:04.661" status="PASS" starttime="20170824 16:39:04.472"></status>
</kw>
<status endtime="20170824 16:39:04.661" status="PASS" starttime="20170824 16:39:04.471"></status>
</kw>
<status endtime="20170824 16:39:04.661" status="PASS" starttime="20170824 16:39:04.471"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:39:04.662" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170824 16:39:04.662" status="PASS" starttime="20170824 16:39:04.662"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:39:04.664" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:39:04.664" status="PASS" starttime="20170824 16:39:04.663"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:39:04.665" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:39:04.665" status="PASS" starttime="20170824 16:39:04.665"></status>
</kw>
<status endtime="20170824 16:39:04.665" status="PASS" starttime="20170824 16:39:04.664"></status>
</kw>
<status endtime="20170824 16:39:04.665" status="PASS" starttime="20170824 16:39:04.663"></status>
</kw>
<status endtime="20170824 16:39:04.665" status="PASS" starttime="20170824 16:39:04.662"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:39:04.757" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170824 16:39:04.757" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:04.757" status="PASS" starttime="20170824 16:39:04.666"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:39:04.759" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:39:04.759" status="PASS" starttime="20170824 16:39:04.758"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:39:04.760" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:39:04.760" status="PASS" starttime="20170824 16:39:04.760"></status>
</kw>
<status endtime="20170824 16:39:04.760" status="PASS" starttime="20170824 16:39:04.759"></status>
</kw>
<status endtime="20170824 16:39:04.760" status="PASS" starttime="20170824 16:39:04.758"></status>
</kw>
<status endtime="20170824 16:39:04.760" status="PASS" starttime="20170824 16:39:04.758"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:39:04.761" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:39:04.761" status="PASS" starttime="20170824 16:39:04.761"></status>
</kw>
<msg timestamp="20170824 16:39:04.761" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:04.761" status="PASS" starttime="20170824 16:39:04.470"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:39:04.762" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:04.762" status="PASS" starttime="20170824 16:39:04.761"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:39:04.762" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:39:04.762" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:39:04.762" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified'}</msg>
<status endtime="20170824 16:39:04.762" status="PASS" starttime="20170824 16:39:04.762"></status>
</kw>
<msg timestamp="20170824 16:39:04.763" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:39:04.763" status="PASS" starttime="20170824 16:39:04.470"></status>
</kw>
<status endtime="20170824 16:39:04.763" status="PASS" starttime="20170824 16:39:04.469"></status>
</kw>
<msg timestamp="20170824 16:39:04.763" level="INFO">${state} = Unspecified</msg>
<status endtime="20170824 16:39:04.763" status="PASS" starttime="20170824 16:39:04.469"></status>
</kw>
<msg timestamp="20170824 16:39:04.763" level="INFO">${boot_progress} = Unspecified</msg>
<status endtime="20170824 16:39:04.763" status="PASS" starttime="20170824 16:39:04.466"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>OSStart</arg>
</arguments>
<msg timestamp="20170824 16:39:04.764" level="FAIL">Unspecified != OSStart</msg>
<status endtime="20170824 16:39:04.764" status="FAIL" starttime="20170824 16:39:04.764"></status>
</kw>
<status endtime="20170824 16:39:04.764" status="FAIL" starttime="20170824 16:39:04.466"></status>
</kw>
<msg timestamp="20170824 16:39:04.764" level="INFO">${status} = False</msg>
<status endtime="20170824 16:39:04.764" status="PASS" starttime="20170824 16:39:04.466"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170824 16:39:04.765" status="PASS" starttime="20170824 16:39:04.765"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:39:04.769" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:39:04.770" status="PASS" starttime="20170824 16:39:04.769"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:39:04.770" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:39:04.770" status="PASS" starttime="20170824 16:39:04.770"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:39:04.771" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:39:04.771" status="PASS" starttime="20170824 16:39:04.770"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:39:04.771" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:39:04.771" status="PASS" starttime="20170824 16:39:04.771"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:39:04.973" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:39:04.974" status="PASS" starttime="20170824 16:39:04.772"></status>
</kw>
<msg timestamp="20170824 16:39:04.974" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:39:04.974" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:04.974" status="PASS" starttime="20170824 16:39:04.772"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:39:04.974" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:04.975" status="PASS" starttime="20170824 16:39:04.974"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:39:04.975" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:04.975" status="PASS" starttime="20170824 16:39:04.975"></status>
</kw>
<status endtime="20170824 16:39:04.975" status="PASS" starttime="20170824 16:39:04.768"></status>
</kw>
<status endtime="20170824 16:39:04.975" status="PASS" starttime="20170824 16:39:04.768"></status>
</kw>
<status endtime="20170824 16:39:04.976" status="PASS" starttime="20170824 16:39:04.767"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:39:04.976" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170824 16:39:04.976" status="PASS" starttime="20170824 16:39:04.976"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:39:04.978" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:39:04.978" status="PASS" starttime="20170824 16:39:04.978"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:39:04.979" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:39:04.979" status="PASS" starttime="20170824 16:39:04.979"></status>
</kw>
<status endtime="20170824 16:39:04.979" status="PASS" starttime="20170824 16:39:04.978"></status>
</kw>
<status endtime="20170824 16:39:04.979" status="PASS" starttime="20170824 16:39:04.977"></status>
</kw>
<status endtime="20170824 16:39:04.980" status="PASS" starttime="20170824 16:39:04.976"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:39:05.145" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170824 16:39:05.145" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:05.145" status="PASS" starttime="20170824 16:39:04.980"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:39:05.147" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:39:05.147" status="PASS" starttime="20170824 16:39:05.147"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:39:05.148" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:39:05.148" status="PASS" starttime="20170824 16:39:05.148"></status>
</kw>
<status endtime="20170824 16:39:05.148" status="PASS" starttime="20170824 16:39:05.147"></status>
</kw>
<status endtime="20170824 16:39:05.148" status="PASS" starttime="20170824 16:39:05.146"></status>
</kw>
<status endtime="20170824 16:39:05.148" status="PASS" starttime="20170824 16:39:05.145"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:39:05.149" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:39:05.149" status="PASS" starttime="20170824 16:39:05.149"></status>
</kw>
<msg timestamp="20170824 16:39:05.149" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:05.149" status="PASS" starttime="20170824 16:39:04.766"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:39:05.150" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:05.150" status="PASS" starttime="20170824 16:39:05.149"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:39:05.150" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:39:05.150" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:39:05.150" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified'}</msg>
<status endtime="20170824 16:39:05.150" status="PASS" starttime="20170824 16:39:05.150"></status>
</kw>
<msg timestamp="20170824 16:39:05.151" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:39:05.151" status="PASS" starttime="20170824 16:39:04.765"></status>
</kw>
<msg timestamp="20170824 16:39:05.151" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:39:05.151" status="PASS" starttime="20170824 16:39:04.765"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170824 16:39:05.152" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170824 16:39:05.152" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:39:05.152" status="FAIL" starttime="20170824 16:39:05.151"></status>
</kw>
<status endtime="20170824 16:39:05.152" status="FAIL" starttime="20170824 16:39:04.465"></status>
</kw>
<status endtime="20170824 16:39:05.152" status="FAIL" starttime="20170824 16:38:59.800"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:39:15.157" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:39:15.158" status="PASS" starttime="20170824 16:39:15.157"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:39:15.158" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:39:15.158" status="PASS" starttime="20170824 16:39:15.158"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:39:15.159" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:39:15.159" status="PASS" starttime="20170824 16:39:15.159"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:39:15.160" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:39:15.160" status="PASS" starttime="20170824 16:39:15.159"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:39:15.844" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:39:15.845" status="PASS" starttime="20170824 16:39:15.160"></status>
</kw>
<msg timestamp="20170824 16:39:15.845" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:39:15.845" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:15.845" status="PASS" starttime="20170824 16:39:15.160"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:39:15.845" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:15.846" status="PASS" starttime="20170824 16:39:15.845"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:39:15.846" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:15.846" status="PASS" starttime="20170824 16:39:15.846"></status>
</kw>
<status endtime="20170824 16:39:15.846" status="PASS" starttime="20170824 16:39:15.157"></status>
</kw>
<status endtime="20170824 16:39:15.846" status="PASS" starttime="20170824 16:39:15.156"></status>
</kw>
<status endtime="20170824 16:39:15.847" status="PASS" starttime="20170824 16:39:15.155"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:39:15.847" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:39:15.847" status="PASS" starttime="20170824 16:39:15.847"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:39:15.849" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:39:15.849" status="PASS" starttime="20170824 16:39:15.849"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:39:15.851" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:39:15.851" status="PASS" starttime="20170824 16:39:15.850"></status>
</kw>
<status endtime="20170824 16:39:15.851" status="PASS" starttime="20170824 16:39:15.849"></status>
</kw>
<status endtime="20170824 16:39:15.851" status="PASS" starttime="20170824 16:39:15.848"></status>
</kw>
<status endtime="20170824 16:39:15.851" status="PASS" starttime="20170824 16:39:15.848"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:39:21.997" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:39:21.998" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:21.998" status="PASS" starttime="20170824 16:39:15.851"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:39:22.000" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:39:22.000" status="PASS" starttime="20170824 16:39:21.999"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:39:22.001" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:39:22.001" status="PASS" starttime="20170824 16:39:22.000"></status>
</kw>
<status endtime="20170824 16:39:22.001" status="PASS" starttime="20170824 16:39:22.000"></status>
</kw>
<status endtime="20170824 16:39:22.001" status="PASS" starttime="20170824 16:39:21.999"></status>
</kw>
<status endtime="20170824 16:39:22.001" status="PASS" starttime="20170824 16:39:21.998"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:39:22.001" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:39:22.001" status="PASS" starttime="20170824 16:39:22.001"></status>
</kw>
<msg timestamp="20170824 16:39:22.002" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:22.002" status="PASS" starttime="20170824 16:39:15.155"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:39:22.002" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:22.002" status="PASS" starttime="20170824 16:39:22.002"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:39:22.003" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:39:22.003" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:39:22.003" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170824 16:39:22.003" status="PASS" starttime="20170824 16:39:22.003"></status>
</kw>
<msg timestamp="20170824 16:39:22.003" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170824 16:39:22.003" status="PASS" starttime="20170824 16:39:15.154"></status>
</kw>
<msg timestamp="20170824 16:39:22.004" level="INFO">${power_state} = Off</msg>
<status endtime="20170824 16:39:22.004" status="PASS" starttime="20170824 16:39:15.153"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170824 16:39:22.004" level="FAIL">On != Off</msg>
<status endtime="20170824 16:39:22.005" status="FAIL" starttime="20170824 16:39:22.004"></status>
</kw>
<status endtime="20170824 16:39:22.005" status="FAIL" starttime="20170824 16:39:15.153"></status>
</kw>
<status endtime="20170824 16:39:22.005" status="FAIL" starttime="20170824 16:39:15.153"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:39:32.010" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:39:32.010" status="PASS" starttime="20170824 16:39:32.009"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:39:32.011" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:39:32.011" status="PASS" starttime="20170824 16:39:32.010"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:39:32.011" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:39:32.011" status="PASS" starttime="20170824 16:39:32.011"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:39:32.012" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:39:32.012" status="PASS" starttime="20170824 16:39:32.012"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:39:32.196" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:39:32.196" status="PASS" starttime="20170824 16:39:32.013"></status>
</kw>
<msg timestamp="20170824 16:39:32.197" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:39:32.197" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:32.197" status="PASS" starttime="20170824 16:39:32.012"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:39:32.197" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:32.198" status="PASS" starttime="20170824 16:39:32.197"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:39:32.198" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:32.198" status="PASS" starttime="20170824 16:39:32.198"></status>
</kw>
<status endtime="20170824 16:39:32.198" status="PASS" starttime="20170824 16:39:32.009"></status>
</kw>
<status endtime="20170824 16:39:32.198" status="PASS" starttime="20170824 16:39:32.008"></status>
</kw>
<status endtime="20170824 16:39:32.199" status="PASS" starttime="20170824 16:39:32.008"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:39:32.199" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:39:32.199" status="PASS" starttime="20170824 16:39:32.199"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:39:32.201" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:39:32.201" status="PASS" starttime="20170824 16:39:32.201"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:39:32.203" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:39:32.203" status="PASS" starttime="20170824 16:39:32.203"></status>
</kw>
<status endtime="20170824 16:39:32.203" status="PASS" starttime="20170824 16:39:32.202"></status>
</kw>
<status endtime="20170824 16:39:32.203" status="PASS" starttime="20170824 16:39:32.200"></status>
</kw>
<status endtime="20170824 16:39:32.203" status="PASS" starttime="20170824 16:39:32.199"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:39:32.351" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:39:32.351" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:32.351" status="PASS" starttime="20170824 16:39:32.204"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:39:32.353" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:39:32.353" status="PASS" starttime="20170824 16:39:32.352"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:39:32.354" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:39:32.354" status="PASS" starttime="20170824 16:39:32.353"></status>
</kw>
<status endtime="20170824 16:39:32.354" status="PASS" starttime="20170824 16:39:32.353"></status>
</kw>
<status endtime="20170824 16:39:32.354" status="PASS" starttime="20170824 16:39:32.352"></status>
</kw>
<status endtime="20170824 16:39:32.354" status="PASS" starttime="20170824 16:39:32.351"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:39:32.354" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:39:32.354" status="PASS" starttime="20170824 16:39:32.354"></status>
</kw>
<msg timestamp="20170824 16:39:32.355" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:32.355" status="PASS" starttime="20170824 16:39:32.007"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:39:32.355" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:32.355" status="PASS" starttime="20170824 16:39:32.355"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:39:32.356" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:39:32.356" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:39:32.356" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170824 16:39:32.356" status="PASS" starttime="20170824 16:39:32.356"></status>
</kw>
<msg timestamp="20170824 16:39:32.356" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 16:39:32.356" status="PASS" starttime="20170824 16:39:32.007"></status>
</kw>
<msg timestamp="20170824 16:39:32.357" level="INFO">${power_state} = On</msg>
<status endtime="20170824 16:39:32.357" status="PASS" starttime="20170824 16:39:32.006"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:39:32.357" status="PASS" starttime="20170824 16:39:32.357"></status>
</kw>
<status endtime="20170824 16:39:32.357" status="PASS" starttime="20170824 16:39:32.006"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:39:32.363" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:39:32.363" status="PASS" starttime="20170824 16:39:32.363"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:39:32.364" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:39:32.364" status="PASS" starttime="20170824 16:39:32.364"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:39:32.365" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:39:32.365" status="PASS" starttime="20170824 16:39:32.365"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:39:32.366" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:39:32.366" status="PASS" starttime="20170824 16:39:32.366"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:39:32.637" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:39:32.638" status="PASS" starttime="20170824 16:39:32.367"></status>
</kw>
<msg timestamp="20170824 16:39:32.638" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:39:32.638" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:32.638" status="PASS" starttime="20170824 16:39:32.366"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:39:32.638" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:32.638" status="PASS" starttime="20170824 16:39:32.638"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:39:32.639" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:32.639" status="PASS" starttime="20170824 16:39:32.639"></status>
</kw>
<status endtime="20170824 16:39:32.639" status="PASS" starttime="20170824 16:39:32.361"></status>
</kw>
<status endtime="20170824 16:39:32.639" status="PASS" starttime="20170824 16:39:32.360"></status>
</kw>
<status endtime="20170824 16:39:32.639" status="PASS" starttime="20170824 16:39:32.360"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:39:32.640" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:39:32.640" status="PASS" starttime="20170824 16:39:32.640"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:39:32.642" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:39:32.642" status="PASS" starttime="20170824 16:39:32.641"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:39:32.643" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:39:32.644" status="PASS" starttime="20170824 16:39:32.643"></status>
</kw>
<status endtime="20170824 16:39:32.644" status="PASS" starttime="20170824 16:39:32.642"></status>
</kw>
<status endtime="20170824 16:39:32.644" status="PASS" starttime="20170824 16:39:32.641"></status>
</kw>
<status endtime="20170824 16:39:32.644" status="PASS" starttime="20170824 16:39:32.640"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:39:32.737" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:39:32.737" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:32.737" status="PASS" starttime="20170824 16:39:32.644"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:39:32.739" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:39:32.739" status="PASS" starttime="20170824 16:39:32.738"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:39:32.740" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:39:32.740" status="PASS" starttime="20170824 16:39:32.740"></status>
</kw>
<status endtime="20170824 16:39:32.740" status="PASS" starttime="20170824 16:39:32.739"></status>
</kw>
<status endtime="20170824 16:39:32.741" status="PASS" starttime="20170824 16:39:32.738"></status>
</kw>
<status endtime="20170824 16:39:32.741" status="PASS" starttime="20170824 16:39:32.737"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:39:32.741" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:39:32.741" status="PASS" starttime="20170824 16:39:32.741"></status>
</kw>
<msg timestamp="20170824 16:39:32.741" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:32.741" status="PASS" starttime="20170824 16:39:32.359"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:39:32.742" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:32.742" status="PASS" starttime="20170824 16:39:32.742"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:39:32.743" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:39:32.743" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:39:32.743" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170824 16:39:32.743" status="PASS" starttime="20170824 16:39:32.742"></status>
</kw>
<msg timestamp="20170824 16:39:32.743" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170824 16:39:32.743" status="PASS" starttime="20170824 16:39:32.358"></status>
</kw>
<msg timestamp="20170824 16:39:32.743" level="INFO">${host_state} = Running</msg>
<status endtime="20170824 16:39:32.743" status="PASS" starttime="20170824 16:39:32.358"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170824 16:39:32.744" status="PASS" starttime="20170824 16:39:32.744"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<doc>Get the boot progress and return it.</doc>
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="utils" name="Set Boot Progress Method">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw library="BuiltIn" name="Return From Keyword">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20170824 16:39:32.748" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170824 16:39:32.748" status="PASS" starttime="20170824 16:39:32.748"></status>
</kw>
<status endtime="20170824 16:39:32.748" status="PASS" starttime="20170824 16:39:32.747"></status>
</kw>
<status endtime="20170824 16:39:32.748" status="PASS" starttime="20170824 16:39:32.746"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="utils" name="New Get Boot Progress">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:39:32.755" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:39:32.755" status="PASS" starttime="20170824 16:39:32.754"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:39:32.756" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:39:32.756" status="PASS" starttime="20170824 16:39:32.756"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:39:32.757" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:39:32.757" status="PASS" starttime="20170824 16:39:32.757"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:39:32.758" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:39:32.758" status="PASS" starttime="20170824 16:39:32.758"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:39:32.971" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:39:32.971" status="PASS" starttime="20170824 16:39:32.759"></status>
</kw>
<msg timestamp="20170824 16:39:32.971" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:39:32.971" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:32.971" status="PASS" starttime="20170824 16:39:32.759"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:39:32.972" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:32.972" status="PASS" starttime="20170824 16:39:32.972"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:39:32.973" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:32.973" status="PASS" starttime="20170824 16:39:32.972"></status>
</kw>
<status endtime="20170824 16:39:32.973" status="PASS" starttime="20170824 16:39:32.753"></status>
</kw>
<status endtime="20170824 16:39:32.973" status="PASS" starttime="20170824 16:39:32.753"></status>
</kw>
<status endtime="20170824 16:39:32.973" status="PASS" starttime="20170824 16:39:32.752"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:39:32.974" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170824 16:39:32.974" status="PASS" starttime="20170824 16:39:32.973"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:39:32.977" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:39:32.977" status="PASS" starttime="20170824 16:39:32.976"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:39:32.979" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:39:32.979" status="PASS" starttime="20170824 16:39:32.978"></status>
</kw>
<status endtime="20170824 16:39:32.979" status="PASS" starttime="20170824 16:39:32.977"></status>
</kw>
<status endtime="20170824 16:39:32.979" status="PASS" starttime="20170824 16:39:32.975"></status>
</kw>
<status endtime="20170824 16:39:32.979" status="PASS" starttime="20170824 16:39:32.974"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:39:33.082" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170824 16:39:33.082" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:33.082" status="PASS" starttime="20170824 16:39:32.979"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:39:33.084" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:39:33.084" status="PASS" starttime="20170824 16:39:33.083"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:39:33.084" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:39:33.085" status="PASS" starttime="20170824 16:39:33.084"></status>
</kw>
<status endtime="20170824 16:39:33.085" status="PASS" starttime="20170824 16:39:33.084"></status>
</kw>
<status endtime="20170824 16:39:33.085" status="PASS" starttime="20170824 16:39:33.083"></status>
</kw>
<status endtime="20170824 16:39:33.085" status="PASS" starttime="20170824 16:39:33.082"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:39:33.085" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:39:33.085" status="PASS" starttime="20170824 16:39:33.085"></status>
</kw>
<msg timestamp="20170824 16:39:33.086" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:33.086" status="PASS" starttime="20170824 16:39:32.751"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:39:33.086" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:33.086" status="PASS" starttime="20170824 16:39:33.086"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:39:33.087" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:39:33.087" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:39:33.087" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified'}</msg>
<status endtime="20170824 16:39:33.087" status="PASS" starttime="20170824 16:39:33.086"></status>
</kw>
<msg timestamp="20170824 16:39:33.087" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:39:33.087" status="PASS" starttime="20170824 16:39:32.750"></status>
</kw>
<status endtime="20170824 16:39:33.088" status="PASS" starttime="20170824 16:39:32.749"></status>
</kw>
<msg timestamp="20170824 16:39:33.088" level="INFO">${state} = Unspecified</msg>
<status endtime="20170824 16:39:33.088" status="PASS" starttime="20170824 16:39:32.749"></status>
</kw>
<msg timestamp="20170824 16:39:33.088" level="INFO">${boot_progress} = Unspecified</msg>
<status endtime="20170824 16:39:33.088" status="PASS" starttime="20170824 16:39:32.746"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>OSStart</arg>
</arguments>
<msg timestamp="20170824 16:39:33.089" level="FAIL">Unspecified != OSStart</msg>
<status endtime="20170824 16:39:33.089" status="FAIL" starttime="20170824 16:39:33.088"></status>
</kw>
<status endtime="20170824 16:39:33.089" status="FAIL" starttime="20170824 16:39:32.745"></status>
</kw>
<msg timestamp="20170824 16:39:33.089" level="INFO">${status} = False</msg>
<status endtime="20170824 16:39:33.089" status="PASS" starttime="20170824 16:39:32.745"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170824 16:39:33.090" status="PASS" starttime="20170824 16:39:33.089"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:39:33.094" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:39:33.094" status="PASS" starttime="20170824 16:39:33.093"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:39:33.094" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:39:33.094" status="PASS" starttime="20170824 16:39:33.094"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:39:33.095" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:39:33.095" status="PASS" starttime="20170824 16:39:33.095"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:39:33.096" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:39:33.096" status="PASS" starttime="20170824 16:39:33.095"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:39:33.286" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:39:33.286" status="PASS" starttime="20170824 16:39:33.096"></status>
</kw>
<msg timestamp="20170824 16:39:33.286" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:39:33.286" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:33.286" status="PASS" starttime="20170824 16:39:33.096"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:39:33.287" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:33.287" status="PASS" starttime="20170824 16:39:33.287"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:39:33.288" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:33.288" status="PASS" starttime="20170824 16:39:33.288"></status>
</kw>
<status endtime="20170824 16:39:33.288" status="PASS" starttime="20170824 16:39:33.093"></status>
</kw>
<status endtime="20170824 16:39:33.288" status="PASS" starttime="20170824 16:39:33.092"></status>
</kw>
<status endtime="20170824 16:39:33.288" status="PASS" starttime="20170824 16:39:33.092"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:39:33.289" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170824 16:39:33.289" status="PASS" starttime="20170824 16:39:33.289"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:39:33.291" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:39:33.291" status="PASS" starttime="20170824 16:39:33.290"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:39:33.292" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:39:33.292" status="PASS" starttime="20170824 16:39:33.292"></status>
</kw>
<status endtime="20170824 16:39:33.292" status="PASS" starttime="20170824 16:39:33.291"></status>
</kw>
<status endtime="20170824 16:39:33.293" status="PASS" starttime="20170824 16:39:33.290"></status>
</kw>
<status endtime="20170824 16:39:33.293" status="PASS" starttime="20170824 16:39:33.289"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:39:33.384" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170824 16:39:33.384" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:33.384" status="PASS" starttime="20170824 16:39:33.293"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:39:33.386" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:39:33.386" status="PASS" starttime="20170824 16:39:33.385"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:39:33.387" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:39:33.387" status="PASS" starttime="20170824 16:39:33.387"></status>
</kw>
<status endtime="20170824 16:39:33.387" status="PASS" starttime="20170824 16:39:33.386"></status>
</kw>
<status endtime="20170824 16:39:33.387" status="PASS" starttime="20170824 16:39:33.385"></status>
</kw>
<status endtime="20170824 16:39:33.387" status="PASS" starttime="20170824 16:39:33.384"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:39:33.388" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:39:33.388" status="PASS" starttime="20170824 16:39:33.388"></status>
</kw>
<msg timestamp="20170824 16:39:33.388" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:33.388" status="PASS" starttime="20170824 16:39:33.091"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:39:33.389" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:33.389" status="PASS" starttime="20170824 16:39:33.388"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:39:33.389" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:39:33.389" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:39:33.390" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified'}</msg>
<status endtime="20170824 16:39:33.390" status="PASS" starttime="20170824 16:39:33.389"></status>
</kw>
<msg timestamp="20170824 16:39:33.390" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:39:33.390" status="PASS" starttime="20170824 16:39:33.090"></status>
</kw>
<msg timestamp="20170824 16:39:33.390" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:39:33.390" status="PASS" starttime="20170824 16:39:33.090"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170824 16:39:33.391" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170824 16:39:33.391" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:39:33.391" status="FAIL" starttime="20170824 16:39:33.390"></status>
</kw>
<status endtime="20170824 16:39:33.391" status="FAIL" starttime="20170824 16:39:32.744"></status>
</kw>
<status endtime="20170824 16:39:33.391" status="FAIL" starttime="20170824 16:39:32.005"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:39:43.398" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:39:43.399" status="PASS" starttime="20170824 16:39:43.398"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:39:43.400" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:39:43.400" status="PASS" starttime="20170824 16:39:43.399"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:39:43.400" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:39:43.400" status="PASS" starttime="20170824 16:39:43.400"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:39:43.401" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:39:43.401" status="PASS" starttime="20170824 16:39:43.401"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:39:43.584" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:39:43.584" status="PASS" starttime="20170824 16:39:43.402"></status>
</kw>
<msg timestamp="20170824 16:39:43.584" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:39:43.584" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:43.584" status="PASS" starttime="20170824 16:39:43.401"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:39:43.585" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:43.585" status="PASS" starttime="20170824 16:39:43.584"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:39:43.585" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:43.585" status="PASS" starttime="20170824 16:39:43.585"></status>
</kw>
<status endtime="20170824 16:39:43.585" status="PASS" starttime="20170824 16:39:43.397"></status>
</kw>
<status endtime="20170824 16:39:43.586" status="PASS" starttime="20170824 16:39:43.396"></status>
</kw>
<status endtime="20170824 16:39:43.586" status="PASS" starttime="20170824 16:39:43.395"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:39:43.586" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:39:43.586" status="PASS" starttime="20170824 16:39:43.586"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:39:43.588" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:39:43.588" status="PASS" starttime="20170824 16:39:43.588"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:39:43.589" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:39:43.589" status="PASS" starttime="20170824 16:39:43.589"></status>
</kw>
<status endtime="20170824 16:39:43.590" status="PASS" starttime="20170824 16:39:43.589"></status>
</kw>
<status endtime="20170824 16:39:43.590" status="PASS" starttime="20170824 16:39:43.587"></status>
</kw>
<status endtime="20170824 16:39:43.590" status="PASS" starttime="20170824 16:39:43.587"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:39:43.679" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:39:43.679" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:43.679" status="PASS" starttime="20170824 16:39:43.590"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:39:43.681" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:39:43.681" status="PASS" starttime="20170824 16:39:43.681"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:39:43.682" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:39:43.682" status="PASS" starttime="20170824 16:39:43.682"></status>
</kw>
<status endtime="20170824 16:39:43.682" status="PASS" starttime="20170824 16:39:43.681"></status>
</kw>
<status endtime="20170824 16:39:43.682" status="PASS" starttime="20170824 16:39:43.680"></status>
</kw>
<status endtime="20170824 16:39:43.683" status="PASS" starttime="20170824 16:39:43.680"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:39:43.683" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:39:43.683" status="PASS" starttime="20170824 16:39:43.683"></status>
</kw>
<msg timestamp="20170824 16:39:43.683" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:43.683" status="PASS" starttime="20170824 16:39:43.394"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:39:43.684" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:43.684" status="PASS" starttime="20170824 16:39:43.684"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:39:43.685" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:39:43.685" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:39:43.685" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170824 16:39:43.685" status="PASS" starttime="20170824 16:39:43.684"></status>
</kw>
<msg timestamp="20170824 16:39:43.685" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 16:39:43.685" status="PASS" starttime="20170824 16:39:43.394"></status>
</kw>
<msg timestamp="20170824 16:39:43.685" level="INFO">${power_state} = On</msg>
<status endtime="20170824 16:39:43.685" status="PASS" starttime="20170824 16:39:43.393"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:39:43.686" status="PASS" starttime="20170824 16:39:43.686"></status>
</kw>
<status endtime="20170824 16:39:43.686" status="PASS" starttime="20170824 16:39:43.393"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:39:43.690" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:39:43.690" status="PASS" starttime="20170824 16:39:43.689"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:39:43.691" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:39:43.691" status="PASS" starttime="20170824 16:39:43.691"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:39:43.691" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:39:43.692" status="PASS" starttime="20170824 16:39:43.691"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:39:43.692" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:39:43.692" status="PASS" starttime="20170824 16:39:43.692"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:39:43.879" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:39:43.879" status="PASS" starttime="20170824 16:39:43.693"></status>
</kw>
<msg timestamp="20170824 16:39:43.879" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:39:43.879" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:43.880" status="PASS" starttime="20170824 16:39:43.692"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:39:43.880" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:43.881" status="PASS" starttime="20170824 16:39:43.880"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:39:43.881" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:43.882" status="PASS" starttime="20170824 16:39:43.881"></status>
</kw>
<status endtime="20170824 16:39:43.882" status="PASS" starttime="20170824 16:39:43.689"></status>
</kw>
<status endtime="20170824 16:39:43.882" status="PASS" starttime="20170824 16:39:43.688"></status>
</kw>
<status endtime="20170824 16:39:43.882" status="PASS" starttime="20170824 16:39:43.688"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:39:43.883" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:39:43.883" status="PASS" starttime="20170824 16:39:43.883"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:39:43.885" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:39:43.885" status="PASS" starttime="20170824 16:39:43.885"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:39:43.886" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:39:43.886" status="PASS" starttime="20170824 16:39:43.886"></status>
</kw>
<status endtime="20170824 16:39:43.886" status="PASS" starttime="20170824 16:39:43.885"></status>
</kw>
<status endtime="20170824 16:39:43.887" status="PASS" starttime="20170824 16:39:43.884"></status>
</kw>
<status endtime="20170824 16:39:43.887" status="PASS" starttime="20170824 16:39:43.884"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:39:43.991" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:39:43.992" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:43.992" status="PASS" starttime="20170824 16:39:43.887"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:39:43.993" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:39:43.993" status="PASS" starttime="20170824 16:39:43.993"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:39:43.994" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:39:43.994" status="PASS" starttime="20170824 16:39:43.994"></status>
</kw>
<status endtime="20170824 16:39:43.995" status="PASS" starttime="20170824 16:39:43.994"></status>
</kw>
<status endtime="20170824 16:39:43.995" status="PASS" starttime="20170824 16:39:43.992"></status>
</kw>
<status endtime="20170824 16:39:43.995" status="PASS" starttime="20170824 16:39:43.992"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:39:43.995" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:39:43.995" status="PASS" starttime="20170824 16:39:43.995"></status>
</kw>
<msg timestamp="20170824 16:39:43.995" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:43.995" status="PASS" starttime="20170824 16:39:43.687"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:39:43.996" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:43.996" status="PASS" starttime="20170824 16:39:43.996"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:39:43.997" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:39:43.997" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:39:43.997" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170824 16:39:43.997" status="PASS" starttime="20170824 16:39:43.996"></status>
</kw>
<msg timestamp="20170824 16:39:43.997" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170824 16:39:43.997" status="PASS" starttime="20170824 16:39:43.686"></status>
</kw>
<msg timestamp="20170824 16:39:43.998" level="INFO">${host_state} = Running</msg>
<status endtime="20170824 16:39:43.998" status="PASS" starttime="20170824 16:39:43.686"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170824 16:39:43.998" status="PASS" starttime="20170824 16:39:43.998"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<doc>Get the boot progress and return it.</doc>
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="utils" name="Set Boot Progress Method">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw library="BuiltIn" name="Return From Keyword">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20170824 16:39:44.001" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170824 16:39:44.002" status="PASS" starttime="20170824 16:39:44.001"></status>
</kw>
<status endtime="20170824 16:39:44.002" status="PASS" starttime="20170824 16:39:44.000"></status>
</kw>
<status endtime="20170824 16:39:44.002" status="PASS" starttime="20170824 16:39:44.000"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="utils" name="New Get Boot Progress">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:39:44.006" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:39:44.006" status="PASS" starttime="20170824 16:39:44.006"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:39:44.007" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:39:44.007" status="PASS" starttime="20170824 16:39:44.007"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:39:44.008" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:39:44.008" status="PASS" starttime="20170824 16:39:44.007"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:39:44.008" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:39:44.008" status="PASS" starttime="20170824 16:39:44.008"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:39:44.217" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:39:44.217" status="PASS" starttime="20170824 16:39:44.009"></status>
</kw>
<msg timestamp="20170824 16:39:44.217" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:39:44.217" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:44.217" status="PASS" starttime="20170824 16:39:44.009"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:39:44.218" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:44.218" status="PASS" starttime="20170824 16:39:44.217"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:39:44.218" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:44.219" status="PASS" starttime="20170824 16:39:44.218"></status>
</kw>
<status endtime="20170824 16:39:44.219" status="PASS" starttime="20170824 16:39:44.005"></status>
</kw>
<status endtime="20170824 16:39:44.219" status="PASS" starttime="20170824 16:39:44.005"></status>
</kw>
<status endtime="20170824 16:39:44.219" status="PASS" starttime="20170824 16:39:44.004"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:39:44.219" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170824 16:39:44.219" status="PASS" starttime="20170824 16:39:44.219"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:39:44.221" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:39:44.222" status="PASS" starttime="20170824 16:39:44.221"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:39:44.222" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:39:44.223" status="PASS" starttime="20170824 16:39:44.222"></status>
</kw>
<status endtime="20170824 16:39:44.223" status="PASS" starttime="20170824 16:39:44.222"></status>
</kw>
<status endtime="20170824 16:39:44.223" status="PASS" starttime="20170824 16:39:44.220"></status>
</kw>
<status endtime="20170824 16:39:44.223" status="PASS" starttime="20170824 16:39:44.220"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:39:44.327" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170824 16:39:44.327" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:44.327" status="PASS" starttime="20170824 16:39:44.223"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:39:44.329" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:39:44.329" status="PASS" starttime="20170824 16:39:44.328"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:39:44.330" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:39:44.330" status="PASS" starttime="20170824 16:39:44.329"></status>
</kw>
<status endtime="20170824 16:39:44.330" status="PASS" starttime="20170824 16:39:44.329"></status>
</kw>
<status endtime="20170824 16:39:44.330" status="PASS" starttime="20170824 16:39:44.328"></status>
</kw>
<status endtime="20170824 16:39:44.330" status="PASS" starttime="20170824 16:39:44.327"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:39:44.330" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:39:44.330" status="PASS" starttime="20170824 16:39:44.330"></status>
</kw>
<msg timestamp="20170824 16:39:44.331" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:44.331" status="PASS" starttime="20170824 16:39:44.004"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:39:44.331" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:44.331" status="PASS" starttime="20170824 16:39:44.331"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:39:44.332" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:39:44.332" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:39:44.332" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified'}</msg>
<status endtime="20170824 16:39:44.332" status="PASS" starttime="20170824 16:39:44.332"></status>
</kw>
<msg timestamp="20170824 16:39:44.332" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:39:44.332" status="PASS" starttime="20170824 16:39:44.003"></status>
</kw>
<status endtime="20170824 16:39:44.333" status="PASS" starttime="20170824 16:39:44.003"></status>
</kw>
<msg timestamp="20170824 16:39:44.333" level="INFO">${state} = Unspecified</msg>
<status endtime="20170824 16:39:44.333" status="PASS" starttime="20170824 16:39:44.002"></status>
</kw>
<msg timestamp="20170824 16:39:44.333" level="INFO">${boot_progress} = Unspecified</msg>
<status endtime="20170824 16:39:44.333" status="PASS" starttime="20170824 16:39:43.999"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>OSStart</arg>
</arguments>
<msg timestamp="20170824 16:39:44.334" level="FAIL">Unspecified != OSStart</msg>
<status endtime="20170824 16:39:44.334" status="FAIL" starttime="20170824 16:39:44.333"></status>
</kw>
<status endtime="20170824 16:39:44.334" status="FAIL" starttime="20170824 16:39:43.999"></status>
</kw>
<msg timestamp="20170824 16:39:44.334" level="INFO">${status} = False</msg>
<status endtime="20170824 16:39:44.334" status="PASS" starttime="20170824 16:39:43.999"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170824 16:39:44.335" status="PASS" starttime="20170824 16:39:44.334"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:39:44.338" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:39:44.339" status="PASS" starttime="20170824 16:39:44.338"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:39:44.339" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:39:44.339" status="PASS" starttime="20170824 16:39:44.339"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:39:44.340" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:39:44.340" status="PASS" starttime="20170824 16:39:44.340"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:39:44.341" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:39:44.341" status="PASS" starttime="20170824 16:39:44.340"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:39:44.591" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:39:44.591" status="PASS" starttime="20170824 16:39:44.342"></status>
</kw>
<msg timestamp="20170824 16:39:44.591" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:39:44.591" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:44.591" status="PASS" starttime="20170824 16:39:44.341"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:39:44.592" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:44.592" status="PASS" starttime="20170824 16:39:44.592"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:39:44.593" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:44.593" status="PASS" starttime="20170824 16:39:44.592"></status>
</kw>
<status endtime="20170824 16:39:44.593" status="PASS" starttime="20170824 16:39:44.337"></status>
</kw>
<status endtime="20170824 16:39:44.593" status="PASS" starttime="20170824 16:39:44.337"></status>
</kw>
<status endtime="20170824 16:39:44.593" status="PASS" starttime="20170824 16:39:44.336"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:39:44.594" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170824 16:39:44.594" status="PASS" starttime="20170824 16:39:44.594"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:39:44.596" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:39:44.596" status="PASS" starttime="20170824 16:39:44.595"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:39:44.597" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:39:44.597" status="PASS" starttime="20170824 16:39:44.597"></status>
</kw>
<status endtime="20170824 16:39:44.597" status="PASS" starttime="20170824 16:39:44.596"></status>
</kw>
<status endtime="20170824 16:39:44.597" status="PASS" starttime="20170824 16:39:44.595"></status>
</kw>
<status endtime="20170824 16:39:44.598" status="PASS" starttime="20170824 16:39:44.594"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:39:44.702" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170824 16:39:44.703" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:44.703" status="PASS" starttime="20170824 16:39:44.598"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:39:44.705" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:39:44.705" status="PASS" starttime="20170824 16:39:44.705"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:39:44.707" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:39:44.707" status="PASS" starttime="20170824 16:39:44.706"></status>
</kw>
<status endtime="20170824 16:39:44.707" status="PASS" starttime="20170824 16:39:44.705"></status>
</kw>
<status endtime="20170824 16:39:44.707" status="PASS" starttime="20170824 16:39:44.704"></status>
</kw>
<status endtime="20170824 16:39:44.707" status="PASS" starttime="20170824 16:39:44.703"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:39:44.707" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:39:44.708" status="PASS" starttime="20170824 16:39:44.707"></status>
</kw>
<msg timestamp="20170824 16:39:44.708" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:44.708" status="PASS" starttime="20170824 16:39:44.336"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:39:44.708" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:44.709" status="PASS" starttime="20170824 16:39:44.708"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:39:44.709" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:39:44.709" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:39:44.709" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified'}</msg>
<status endtime="20170824 16:39:44.709" status="PASS" starttime="20170824 16:39:44.709"></status>
</kw>
<msg timestamp="20170824 16:39:44.710" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:39:44.710" status="PASS" starttime="20170824 16:39:44.335"></status>
</kw>
<msg timestamp="20170824 16:39:44.710" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:39:44.710" status="PASS" starttime="20170824 16:39:44.335"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170824 16:39:44.710" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170824 16:39:44.711" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:39:44.711" status="FAIL" starttime="20170824 16:39:44.710"></status>
</kw>
<status endtime="20170824 16:39:44.711" status="FAIL" starttime="20170824 16:39:43.998"></status>
</kw>
<status endtime="20170824 16:39:44.711" status="FAIL" starttime="20170824 16:39:43.392"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:39:54.716" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:39:54.717" status="PASS" starttime="20170824 16:39:54.716"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:39:54.717" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:39:54.717" status="PASS" starttime="20170824 16:39:54.717"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:39:54.718" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:39:54.718" status="PASS" starttime="20170824 16:39:54.718"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:39:54.719" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:39:54.719" status="PASS" starttime="20170824 16:39:54.718"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:39:54.898" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:39:54.898" status="PASS" starttime="20170824 16:39:54.719"></status>
</kw>
<msg timestamp="20170824 16:39:54.899" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:39:54.899" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:54.899" status="PASS" starttime="20170824 16:39:54.719"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:39:54.899" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:54.899" status="PASS" starttime="20170824 16:39:54.899"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:39:54.900" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:54.900" status="PASS" starttime="20170824 16:39:54.900"></status>
</kw>
<status endtime="20170824 16:39:54.900" status="PASS" starttime="20170824 16:39:54.715"></status>
</kw>
<status endtime="20170824 16:39:54.900" status="PASS" starttime="20170824 16:39:54.715"></status>
</kw>
<status endtime="20170824 16:39:54.900" status="PASS" starttime="20170824 16:39:54.714"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:39:54.901" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:39:54.901" status="PASS" starttime="20170824 16:39:54.901"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:39:54.903" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:39:54.903" status="PASS" starttime="20170824 16:39:54.902"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:39:54.904" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:39:54.904" status="PASS" starttime="20170824 16:39:54.904"></status>
</kw>
<status endtime="20170824 16:39:54.904" status="PASS" starttime="20170824 16:39:54.903"></status>
</kw>
<status endtime="20170824 16:39:54.904" status="PASS" starttime="20170824 16:39:54.902"></status>
</kw>
<status endtime="20170824 16:39:54.904" status="PASS" starttime="20170824 16:39:54.901"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:39:54.970" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:39:54.970" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:54.970" status="PASS" starttime="20170824 16:39:54.905"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:39:54.972" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:39:54.972" status="PASS" starttime="20170824 16:39:54.971"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:39:54.972" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:39:54.973" status="PASS" starttime="20170824 16:39:54.972"></status>
</kw>
<status endtime="20170824 16:39:54.973" status="PASS" starttime="20170824 16:39:54.972"></status>
</kw>
<status endtime="20170824 16:39:54.973" status="PASS" starttime="20170824 16:39:54.971"></status>
</kw>
<status endtime="20170824 16:39:54.973" status="PASS" starttime="20170824 16:39:54.970"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:39:54.973" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:39:54.973" status="PASS" starttime="20170824 16:39:54.973"></status>
</kw>
<msg timestamp="20170824 16:39:54.973" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:54.974" status="PASS" starttime="20170824 16:39:54.714"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:39:54.974" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:54.974" status="PASS" starttime="20170824 16:39:54.974"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:39:54.975" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:39:54.975" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:39:54.975" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170824 16:39:54.975" status="PASS" starttime="20170824 16:39:54.974"></status>
</kw>
<msg timestamp="20170824 16:39:54.975" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 16:39:54.975" status="PASS" starttime="20170824 16:39:54.713"></status>
</kw>
<msg timestamp="20170824 16:39:54.976" level="INFO">${power_state} = On</msg>
<status endtime="20170824 16:39:54.976" status="PASS" starttime="20170824 16:39:54.712"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:39:54.976" status="PASS" starttime="20170824 16:39:54.976"></status>
</kw>
<status endtime="20170824 16:39:54.976" status="PASS" starttime="20170824 16:39:54.712"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:39:54.980" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:39:54.980" status="PASS" starttime="20170824 16:39:54.980"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:39:54.981" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:39:54.981" status="PASS" starttime="20170824 16:39:54.980"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:39:54.981" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:39:54.981" status="PASS" starttime="20170824 16:39:54.981"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:39:54.982" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:39:54.982" status="PASS" starttime="20170824 16:39:54.982"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:39:55.177" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:39:55.177" status="PASS" starttime="20170824 16:39:54.983"></status>
</kw>
<msg timestamp="20170824 16:39:55.177" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:39:55.177" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:55.177" status="PASS" starttime="20170824 16:39:54.982"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:39:55.178" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:55.178" status="PASS" starttime="20170824 16:39:55.178"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:39:55.179" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:55.179" status="PASS" starttime="20170824 16:39:55.178"></status>
</kw>
<status endtime="20170824 16:39:55.179" status="PASS" starttime="20170824 16:39:54.979"></status>
</kw>
<status endtime="20170824 16:39:55.179" status="PASS" starttime="20170824 16:39:54.979"></status>
</kw>
<status endtime="20170824 16:39:55.179" status="PASS" starttime="20170824 16:39:54.978"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:39:55.180" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:39:55.180" status="PASS" starttime="20170824 16:39:55.180"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:39:55.182" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:39:55.182" status="PASS" starttime="20170824 16:39:55.181"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:39:55.183" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:39:55.183" status="PASS" starttime="20170824 16:39:55.183"></status>
</kw>
<status endtime="20170824 16:39:55.183" status="PASS" starttime="20170824 16:39:55.182"></status>
</kw>
<status endtime="20170824 16:39:55.183" status="PASS" starttime="20170824 16:39:55.181"></status>
</kw>
<status endtime="20170824 16:39:55.183" status="PASS" starttime="20170824 16:39:55.180"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:39:55.328" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:39:55.328" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:55.328" status="PASS" starttime="20170824 16:39:55.184"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:39:55.330" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:39:55.330" status="PASS" starttime="20170824 16:39:55.329"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:39:55.331" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:39:55.331" status="PASS" starttime="20170824 16:39:55.331"></status>
</kw>
<status endtime="20170824 16:39:55.331" status="PASS" starttime="20170824 16:39:55.330"></status>
</kw>
<status endtime="20170824 16:39:55.331" status="PASS" starttime="20170824 16:39:55.329"></status>
</kw>
<status endtime="20170824 16:39:55.331" status="PASS" starttime="20170824 16:39:55.328"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:39:55.332" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:39:55.332" status="PASS" starttime="20170824 16:39:55.331"></status>
</kw>
<msg timestamp="20170824 16:39:55.332" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:55.332" status="PASS" starttime="20170824 16:39:54.977"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:39:55.332" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:55.333" status="PASS" starttime="20170824 16:39:55.332"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:39:55.333" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:39:55.333" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:39:55.333" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170824 16:39:55.333" status="PASS" starttime="20170824 16:39:55.333"></status>
</kw>
<msg timestamp="20170824 16:39:55.334" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170824 16:39:55.334" status="PASS" starttime="20170824 16:39:54.977"></status>
</kw>
<msg timestamp="20170824 16:39:55.334" level="INFO">${host_state} = Running</msg>
<status endtime="20170824 16:39:55.334" status="PASS" starttime="20170824 16:39:54.976"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170824 16:39:55.334" status="PASS" starttime="20170824 16:39:55.334"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<doc>Get the boot progress and return it.</doc>
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="utils" name="Set Boot Progress Method">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw library="BuiltIn" name="Return From Keyword">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20170824 16:39:55.337" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170824 16:39:55.337" status="PASS" starttime="20170824 16:39:55.337"></status>
</kw>
<status endtime="20170824 16:39:55.337" status="PASS" starttime="20170824 16:39:55.336"></status>
</kw>
<status endtime="20170824 16:39:55.337" status="PASS" starttime="20170824 16:39:55.336"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="utils" name="New Get Boot Progress">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:39:55.342" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:39:55.342" status="PASS" starttime="20170824 16:39:55.341"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:39:55.343" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:39:55.343" status="PASS" starttime="20170824 16:39:55.342"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:39:55.343" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:39:55.343" status="PASS" starttime="20170824 16:39:55.343"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:39:55.344" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:39:55.344" status="PASS" starttime="20170824 16:39:55.344"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:39:55.593" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:39:55.593" status="PASS" starttime="20170824 16:39:55.345"></status>
</kw>
<msg timestamp="20170824 16:39:55.593" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:39:55.593" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:55.593" status="PASS" starttime="20170824 16:39:55.344"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:39:55.594" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:55.594" status="PASS" starttime="20170824 16:39:55.594"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:39:55.595" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:55.595" status="PASS" starttime="20170824 16:39:55.594"></status>
</kw>
<status endtime="20170824 16:39:55.595" status="PASS" starttime="20170824 16:39:55.341"></status>
</kw>
<status endtime="20170824 16:39:55.595" status="PASS" starttime="20170824 16:39:55.341"></status>
</kw>
<status endtime="20170824 16:39:55.595" status="PASS" starttime="20170824 16:39:55.340"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:39:55.596" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170824 16:39:55.596" status="PASS" starttime="20170824 16:39:55.595"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:39:55.598" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:39:55.598" status="PASS" starttime="20170824 16:39:55.597"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:39:55.599" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:39:55.599" status="PASS" starttime="20170824 16:39:55.599"></status>
</kw>
<status endtime="20170824 16:39:55.599" status="PASS" starttime="20170824 16:39:55.598"></status>
</kw>
<status endtime="20170824 16:39:55.600" status="PASS" starttime="20170824 16:39:55.596"></status>
</kw>
<status endtime="20170824 16:39:55.600" status="PASS" starttime="20170824 16:39:55.596"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:39:55.716" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170824 16:39:55.716" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:55.716" status="PASS" starttime="20170824 16:39:55.600"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:39:55.718" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:39:55.718" status="PASS" starttime="20170824 16:39:55.718"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:39:55.719" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:39:55.719" status="PASS" starttime="20170824 16:39:55.719"></status>
</kw>
<status endtime="20170824 16:39:55.719" status="PASS" starttime="20170824 16:39:55.718"></status>
</kw>
<status endtime="20170824 16:39:55.719" status="PASS" starttime="20170824 16:39:55.717"></status>
</kw>
<status endtime="20170824 16:39:55.719" status="PASS" starttime="20170824 16:39:55.717"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:39:55.720" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:39:55.720" status="PASS" starttime="20170824 16:39:55.720"></status>
</kw>
<msg timestamp="20170824 16:39:55.720" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:55.720" status="PASS" starttime="20170824 16:39:55.339"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:39:55.721" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:55.721" status="PASS" starttime="20170824 16:39:55.720"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:39:55.721" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:39:55.721" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:39:55.722" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified'}</msg>
<status endtime="20170824 16:39:55.722" status="PASS" starttime="20170824 16:39:55.721"></status>
</kw>
<msg timestamp="20170824 16:39:55.722" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:39:55.722" status="PASS" starttime="20170824 16:39:55.338"></status>
</kw>
<status endtime="20170824 16:39:55.722" status="PASS" starttime="20170824 16:39:55.338"></status>
</kw>
<msg timestamp="20170824 16:39:55.722" level="INFO">${state} = Unspecified</msg>
<status endtime="20170824 16:39:55.722" status="PASS" starttime="20170824 16:39:55.338"></status>
</kw>
<msg timestamp="20170824 16:39:55.723" level="INFO">${boot_progress} = Unspecified</msg>
<status endtime="20170824 16:39:55.723" status="PASS" starttime="20170824 16:39:55.336"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>OSStart</arg>
</arguments>
<msg timestamp="20170824 16:39:55.724" level="FAIL">Unspecified != OSStart</msg>
<status endtime="20170824 16:39:55.724" status="FAIL" starttime="20170824 16:39:55.723"></status>
</kw>
<status endtime="20170824 16:39:55.724" status="FAIL" starttime="20170824 16:39:55.335"></status>
</kw>
<msg timestamp="20170824 16:39:55.724" level="INFO">${status} = False</msg>
<status endtime="20170824 16:39:55.724" status="PASS" starttime="20170824 16:39:55.335"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170824 16:39:55.725" status="PASS" starttime="20170824 16:39:55.725"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:39:55.730" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:39:55.731" status="PASS" starttime="20170824 16:39:55.730"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:39:55.731" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:39:55.732" status="PASS" starttime="20170824 16:39:55.731"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:39:55.732" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:39:55.733" status="PASS" starttime="20170824 16:39:55.732"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:39:55.733" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:39:55.733" status="PASS" starttime="20170824 16:39:55.733"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:39:55.913" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:39:55.914" status="PASS" starttime="20170824 16:39:55.734"></status>
</kw>
<msg timestamp="20170824 16:39:55.914" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:39:55.914" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:55.914" status="PASS" starttime="20170824 16:39:55.734"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:39:55.914" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:55.914" status="PASS" starttime="20170824 16:39:55.914"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:39:55.915" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:55.915" status="PASS" starttime="20170824 16:39:55.915"></status>
</kw>
<status endtime="20170824 16:39:55.915" status="PASS" starttime="20170824 16:39:55.729"></status>
</kw>
<status endtime="20170824 16:39:55.916" status="PASS" starttime="20170824 16:39:55.728"></status>
</kw>
<status endtime="20170824 16:39:55.916" status="PASS" starttime="20170824 16:39:55.727"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:39:55.916" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170824 16:39:55.916" status="PASS" starttime="20170824 16:39:55.916"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:39:55.918" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:39:55.919" status="PASS" starttime="20170824 16:39:55.918"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:39:55.919" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:39:55.920" status="PASS" starttime="20170824 16:39:55.919"></status>
</kw>
<status endtime="20170824 16:39:55.920" status="PASS" starttime="20170824 16:39:55.919"></status>
</kw>
<status endtime="20170824 16:39:55.920" status="PASS" starttime="20170824 16:39:55.917"></status>
</kw>
<status endtime="20170824 16:39:55.920" status="PASS" starttime="20170824 16:39:55.917"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:39:56.011" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170824 16:39:56.011" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:56.012" status="PASS" starttime="20170824 16:39:55.920"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:39:56.013" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:39:56.013" status="PASS" starttime="20170824 16:39:56.013"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:39:56.014" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:39:56.014" status="PASS" starttime="20170824 16:39:56.014"></status>
</kw>
<status endtime="20170824 16:39:56.014" status="PASS" starttime="20170824 16:39:56.013"></status>
</kw>
<status endtime="20170824 16:39:56.015" status="PASS" starttime="20170824 16:39:56.012"></status>
</kw>
<status endtime="20170824 16:39:56.015" status="PASS" starttime="20170824 16:39:56.012"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:39:56.015" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:39:56.015" status="PASS" starttime="20170824 16:39:56.015"></status>
</kw>
<msg timestamp="20170824 16:39:56.015" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:39:56.015" status="PASS" starttime="20170824 16:39:55.727"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:39:56.016" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:39:56.016" status="PASS" starttime="20170824 16:39:56.016"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:39:56.017" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:39:56.017" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:39:56.017" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified'}</msg>
<status endtime="20170824 16:39:56.017" status="PASS" starttime="20170824 16:39:56.016"></status>
</kw>
<msg timestamp="20170824 16:39:56.017" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:39:56.017" status="PASS" starttime="20170824 16:39:55.726"></status>
</kw>
<msg timestamp="20170824 16:39:56.017" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:39:56.018" status="PASS" starttime="20170824 16:39:55.725"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170824 16:39:56.018" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170824 16:39:56.018" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:39:56.018" status="FAIL" starttime="20170824 16:39:56.018"></status>
</kw>
<status endtime="20170824 16:39:56.019" status="FAIL" starttime="20170824 16:39:55.335"></status>
</kw>
<status endtime="20170824 16:39:56.019" status="FAIL" starttime="20170824 16:39:54.711"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:40:06.024" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:40:06.025" status="PASS" starttime="20170824 16:40:06.024"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:40:06.025" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:40:06.025" status="PASS" starttime="20170824 16:40:06.025"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:40:06.026" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:40:06.026" status="PASS" starttime="20170824 16:40:06.026"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:40:06.027" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:40:06.027" status="PASS" starttime="20170824 16:40:06.026"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:40:06.452" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:40:06.452" status="PASS" starttime="20170824 16:40:06.027"></status>
</kw>
<msg timestamp="20170824 16:40:06.452" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:40:06.452" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:40:06.452" status="PASS" starttime="20170824 16:40:06.027"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:40:06.453" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:40:06.453" status="PASS" starttime="20170824 16:40:06.452"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:40:06.453" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:40:06.453" status="PASS" starttime="20170824 16:40:06.453"></status>
</kw>
<status endtime="20170824 16:40:06.454" status="PASS" starttime="20170824 16:40:06.023"></status>
</kw>
<status endtime="20170824 16:40:06.454" status="PASS" starttime="20170824 16:40:06.023"></status>
</kw>
<status endtime="20170824 16:40:06.454" status="PASS" starttime="20170824 16:40:06.022"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:40:06.454" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:40:06.454" status="PASS" starttime="20170824 16:40:06.454"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:40:06.456" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:40:06.457" status="PASS" starttime="20170824 16:40:06.456"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:40:06.457" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:40:06.457" status="PASS" starttime="20170824 16:40:06.457"></status>
</kw>
<status endtime="20170824 16:40:06.458" status="PASS" starttime="20170824 16:40:06.457"></status>
</kw>
<status endtime="20170824 16:40:06.458" status="PASS" starttime="20170824 16:40:06.455"></status>
</kw>
<status endtime="20170824 16:40:06.458" status="PASS" starttime="20170824 16:40:06.455"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:40:09.805" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:40:09.806" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:40:09.806" status="PASS" starttime="20170824 16:40:06.458"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:40:09.808" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:40:09.808" status="PASS" starttime="20170824 16:40:09.807"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:40:09.813" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:40:09.813" status="PASS" starttime="20170824 16:40:09.808"></status>
</kw>
<status endtime="20170824 16:40:09.813" status="PASS" starttime="20170824 16:40:09.808"></status>
</kw>
<status endtime="20170824 16:40:09.813" status="PASS" starttime="20170824 16:40:09.806"></status>
</kw>
<status endtime="20170824 16:40:09.813" status="PASS" starttime="20170824 16:40:09.806"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:40:09.814" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:40:09.814" status="PASS" starttime="20170824 16:40:09.814"></status>
</kw>
<msg timestamp="20170824 16:40:09.814" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:40:09.814" status="PASS" starttime="20170824 16:40:06.021"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:40:09.815" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:40:09.815" status="PASS" starttime="20170824 16:40:09.814"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:40:09.815" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:40:09.815" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:40:09.815" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170824 16:40:09.816" status="PASS" starttime="20170824 16:40:09.815"></status>
</kw>
<msg timestamp="20170824 16:40:09.817" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 16:40:09.818" status="PASS" starttime="20170824 16:40:06.021"></status>
</kw>
<msg timestamp="20170824 16:40:09.818" level="INFO">${power_state} = On</msg>
<status endtime="20170824 16:40:09.818" status="PASS" starttime="20170824 16:40:06.020"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:40:09.818" status="PASS" starttime="20170824 16:40:09.818"></status>
</kw>
<status endtime="20170824 16:40:09.819" status="PASS" starttime="20170824 16:40:06.020"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:40:09.822" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:40:09.822" status="PASS" starttime="20170824 16:40:09.822"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:40:09.823" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:40:09.823" status="PASS" starttime="20170824 16:40:09.823"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:40:09.824" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:40:09.824" status="PASS" starttime="20170824 16:40:09.824"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:40:09.825" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:40:09.825" status="PASS" starttime="20170824 16:40:09.825"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:40:10.344" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:40:10.344" status="PASS" starttime="20170824 16:40:09.826"></status>
</kw>
<msg timestamp="20170824 16:40:10.344" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:40:10.344" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:40:10.344" status="PASS" starttime="20170824 16:40:09.826"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:40:10.345" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:40:10.345" status="PASS" starttime="20170824 16:40:10.345"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:40:10.346" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:40:10.346" status="PASS" starttime="20170824 16:40:10.345"></status>
</kw>
<status endtime="20170824 16:40:10.346" status="PASS" starttime="20170824 16:40:09.821"></status>
</kw>
<status endtime="20170824 16:40:10.346" status="PASS" starttime="20170824 16:40:09.821"></status>
</kw>
<status endtime="20170824 16:40:10.346" status="PASS" starttime="20170824 16:40:09.820"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:40:10.347" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:40:10.347" status="PASS" starttime="20170824 16:40:10.346"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:40:10.349" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:40:10.349" status="PASS" starttime="20170824 16:40:10.348"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:40:10.350" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:40:10.350" status="PASS" starttime="20170824 16:40:10.350"></status>
</kw>
<status endtime="20170824 16:40:10.351" status="PASS" starttime="20170824 16:40:10.350"></status>
</kw>
<status endtime="20170824 16:40:10.351" status="PASS" starttime="20170824 16:40:10.348"></status>
</kw>
<status endtime="20170824 16:40:10.351" status="PASS" starttime="20170824 16:40:10.347"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:40:10.460" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:40:10.460" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:40:10.460" status="PASS" starttime="20170824 16:40:10.351"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:40:10.462" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:40:10.462" status="PASS" starttime="20170824 16:40:10.461"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:40:10.463" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:40:10.463" status="PASS" starttime="20170824 16:40:10.462"></status>
</kw>
<status endtime="20170824 16:40:10.463" status="PASS" starttime="20170824 16:40:10.462"></status>
</kw>
<status endtime="20170824 16:40:10.463" status="PASS" starttime="20170824 16:40:10.461"></status>
</kw>
<status endtime="20170824 16:40:10.463" status="PASS" starttime="20170824 16:40:10.460"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:40:10.463" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:40:10.464" status="PASS" starttime="20170824 16:40:10.463"></status>
</kw>
<msg timestamp="20170824 16:40:10.464" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:40:10.464" status="PASS" starttime="20170824 16:40:09.820"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:40:10.464" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:40:10.464" status="PASS" starttime="20170824 16:40:10.464"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:40:10.465" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:40:10.465" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:40:10.465" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170824 16:40:10.465" status="PASS" starttime="20170824 16:40:10.465"></status>
</kw>
<msg timestamp="20170824 16:40:10.465" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170824 16:40:10.466" status="PASS" starttime="20170824 16:40:09.819"></status>
</kw>
<msg timestamp="20170824 16:40:10.466" level="INFO">${host_state} = Running</msg>
<status endtime="20170824 16:40:10.466" status="PASS" starttime="20170824 16:40:09.819"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170824 16:40:10.466" status="PASS" starttime="20170824 16:40:10.466"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<doc>Get the boot progress and return it.</doc>
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="utils" name="Set Boot Progress Method">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw library="BuiltIn" name="Return From Keyword">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20170824 16:40:10.469" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170824 16:40:10.469" status="PASS" starttime="20170824 16:40:10.469"></status>
</kw>
<status endtime="20170824 16:40:10.469" status="PASS" starttime="20170824 16:40:10.469"></status>
</kw>
<status endtime="20170824 16:40:10.469" status="PASS" starttime="20170824 16:40:10.468"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="utils" name="New Get Boot Progress">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:40:10.474" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:40:10.474" status="PASS" starttime="20170824 16:40:10.474"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:40:10.475" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:40:10.475" status="PASS" starttime="20170824 16:40:10.474"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:40:10.475" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:40:10.475" status="PASS" starttime="20170824 16:40:10.475"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:40:10.476" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:40:10.476" status="PASS" starttime="20170824 16:40:10.476"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:40:10.909" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:40:10.909" status="PASS" starttime="20170824 16:40:10.477"></status>
</kw>
<msg timestamp="20170824 16:40:10.909" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:40:10.909" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:40:10.909" status="PASS" starttime="20170824 16:40:10.476"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:40:10.910" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:40:10.910" status="PASS" starttime="20170824 16:40:10.909"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:40:10.910" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:40:10.911" status="PASS" starttime="20170824 16:40:10.910"></status>
</kw>
<status endtime="20170824 16:40:10.911" status="PASS" starttime="20170824 16:40:10.473"></status>
</kw>
<status endtime="20170824 16:40:10.911" status="PASS" starttime="20170824 16:40:10.472"></status>
</kw>
<status endtime="20170824 16:40:10.911" status="PASS" starttime="20170824 16:40:10.472"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:40:10.911" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170824 16:40:10.911" status="PASS" starttime="20170824 16:40:10.911"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:40:10.914" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:40:10.914" status="PASS" starttime="20170824 16:40:10.913"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:40:10.915" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:40:10.915" status="PASS" starttime="20170824 16:40:10.914"></status>
</kw>
<status endtime="20170824 16:40:10.915" status="PASS" starttime="20170824 16:40:10.914"></status>
</kw>
<status endtime="20170824 16:40:10.915" status="PASS" starttime="20170824 16:40:10.912"></status>
</kw>
<status endtime="20170824 16:40:10.915" status="PASS" starttime="20170824 16:40:10.912"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:40:11.069" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170824 16:40:11.069" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:40:11.069" status="PASS" starttime="20170824 16:40:10.915"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:40:11.071" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:40:11.071" status="PASS" starttime="20170824 16:40:11.071"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:40:11.072" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:40:11.073" status="PASS" starttime="20170824 16:40:11.072"></status>
</kw>
<status endtime="20170824 16:40:11.073" status="PASS" starttime="20170824 16:40:11.071"></status>
</kw>
<status endtime="20170824 16:40:11.073" status="PASS" starttime="20170824 16:40:11.070"></status>
</kw>
<status endtime="20170824 16:40:11.073" status="PASS" starttime="20170824 16:40:11.070"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:40:11.073" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:40:11.073" status="PASS" starttime="20170824 16:40:11.073"></status>
</kw>
<msg timestamp="20170824 16:40:11.073" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:40:11.074" status="PASS" starttime="20170824 16:40:10.471"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:40:11.074" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:40:11.074" status="PASS" starttime="20170824 16:40:11.074"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:40:11.075" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:40:11.075" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:40:11.075" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified'}</msg>
<status endtime="20170824 16:40:11.075" status="PASS" starttime="20170824 16:40:11.074"></status>
</kw>
<msg timestamp="20170824 16:40:11.075" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:40:11.075" status="PASS" starttime="20170824 16:40:10.471"></status>
</kw>
<status endtime="20170824 16:40:11.076" status="PASS" starttime="20170824 16:40:10.470"></status>
</kw>
<msg timestamp="20170824 16:40:11.076" level="INFO">${state} = Unspecified</msg>
<status endtime="20170824 16:40:11.076" status="PASS" starttime="20170824 16:40:10.470"></status>
</kw>
<msg timestamp="20170824 16:40:11.076" level="INFO">${boot_progress} = Unspecified</msg>
<status endtime="20170824 16:40:11.076" status="PASS" starttime="20170824 16:40:10.468"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>OSStart</arg>
</arguments>
<msg timestamp="20170824 16:40:11.077" level="FAIL">Unspecified != OSStart</msg>
<status endtime="20170824 16:40:11.077" status="FAIL" starttime="20170824 16:40:11.076"></status>
</kw>
<status endtime="20170824 16:40:11.077" status="FAIL" starttime="20170824 16:40:10.467"></status>
</kw>
<msg timestamp="20170824 16:40:11.077" level="INFO">${status} = False</msg>
<status endtime="20170824 16:40:11.077" status="PASS" starttime="20170824 16:40:10.467"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170824 16:40:11.078" status="PASS" starttime="20170824 16:40:11.077"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:40:11.081" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:40:11.082" status="PASS" starttime="20170824 16:40:11.081"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:40:11.082" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:40:11.082" status="PASS" starttime="20170824 16:40:11.082"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:40:11.083" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:40:11.083" status="PASS" starttime="20170824 16:40:11.082"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:40:11.083" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:40:11.084" status="PASS" starttime="20170824 16:40:11.083"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:40:11.263" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:40:11.263" status="PASS" starttime="20170824 16:40:11.084"></status>
</kw>
<msg timestamp="20170824 16:40:11.263" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:40:11.263" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:40:11.263" status="PASS" starttime="20170824 16:40:11.084"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:40:11.264" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:40:11.264" status="PASS" starttime="20170824 16:40:11.264"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:40:11.265" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:40:11.265" status="PASS" starttime="20170824 16:40:11.264"></status>
</kw>
<status endtime="20170824 16:40:11.265" status="PASS" starttime="20170824 16:40:11.080"></status>
</kw>
<status endtime="20170824 16:40:11.265" status="PASS" starttime="20170824 16:40:11.080"></status>
</kw>
<status endtime="20170824 16:40:11.265" status="PASS" starttime="20170824 16:40:11.079"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:40:11.266" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170824 16:40:11.266" status="PASS" starttime="20170824 16:40:11.265"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:40:11.268" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:40:11.268" status="PASS" starttime="20170824 16:40:11.267"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:40:11.269" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:40:11.269" status="PASS" starttime="20170824 16:40:11.269"></status>
</kw>
<status endtime="20170824 16:40:11.269" status="PASS" starttime="20170824 16:40:11.268"></status>
</kw>
<status endtime="20170824 16:40:11.270" status="PASS" starttime="20170824 16:40:11.267"></status>
</kw>
<status endtime="20170824 16:40:11.270" status="PASS" starttime="20170824 16:40:11.266"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:40:11.390" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170824 16:40:11.390" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:40:11.390" status="PASS" starttime="20170824 16:40:11.270"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:40:11.392" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:40:11.392" status="PASS" starttime="20170824 16:40:11.391"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:40:11.393" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:40:11.393" status="PASS" starttime="20170824 16:40:11.393"></status>
</kw>
<status endtime="20170824 16:40:11.393" status="PASS" starttime="20170824 16:40:11.392"></status>
</kw>
<status endtime="20170824 16:40:11.393" status="PASS" starttime="20170824 16:40:11.391"></status>
</kw>
<status endtime="20170824 16:40:11.393" status="PASS" starttime="20170824 16:40:11.390"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:40:11.394" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:40:11.394" status="PASS" starttime="20170824 16:40:11.393"></status>
</kw>
<msg timestamp="20170824 16:40:11.394" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:40:11.394" status="PASS" starttime="20170824 16:40:11.079"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:40:11.395" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:40:11.395" status="PASS" starttime="20170824 16:40:11.394"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:40:11.395" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:40:11.395" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:40:11.395" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified'}</msg>
<status endtime="20170824 16:40:11.395" status="PASS" starttime="20170824 16:40:11.395"></status>
</kw>
<msg timestamp="20170824 16:40:11.396" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:40:11.396" status="PASS" starttime="20170824 16:40:11.078"></status>
</kw>
<msg timestamp="20170824 16:40:11.396" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:40:11.396" status="PASS" starttime="20170824 16:40:11.078"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170824 16:40:11.396" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170824 16:40:11.397" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:40:11.397" status="FAIL" starttime="20170824 16:40:11.396"></status>
</kw>
<status endtime="20170824 16:40:11.397" status="FAIL" starttime="20170824 16:40:10.466"></status>
</kw>
<status endtime="20170824 16:40:11.397" status="FAIL" starttime="20170824 16:40:06.019"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:40:21.402" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:40:21.403" status="PASS" starttime="20170824 16:40:21.402"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:40:21.403" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:40:21.403" status="PASS" starttime="20170824 16:40:21.403"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:40:21.404" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:40:21.404" status="PASS" starttime="20170824 16:40:21.403"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:40:21.404" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:40:21.404" status="PASS" starttime="20170824 16:40:21.404"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:40:22.196" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:40:22.196" status="PASS" starttime="20170824 16:40:21.405"></status>
</kw>
<msg timestamp="20170824 16:40:22.196" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:40:22.196" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:40:22.196" status="PASS" starttime="20170824 16:40:21.405"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:40:22.197" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:40:22.197" status="PASS" starttime="20170824 16:40:22.196"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:40:22.197" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:40:22.197" status="PASS" starttime="20170824 16:40:22.197"></status>
</kw>
<status endtime="20170824 16:40:22.198" status="PASS" starttime="20170824 16:40:21.401"></status>
</kw>
<status endtime="20170824 16:40:22.198" status="PASS" starttime="20170824 16:40:21.401"></status>
</kw>
<status endtime="20170824 16:40:22.198" status="PASS" starttime="20170824 16:40:21.400"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:40:22.198" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:40:22.198" status="PASS" starttime="20170824 16:40:22.198"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:40:22.201" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:40:22.201" status="PASS" starttime="20170824 16:40:22.200"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:40:22.201" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:40:22.202" status="PASS" starttime="20170824 16:40:22.201"></status>
</kw>
<status endtime="20170824 16:40:22.202" status="PASS" starttime="20170824 16:40:22.201"></status>
</kw>
<status endtime="20170824 16:40:22.202" status="PASS" starttime="20170824 16:40:22.199"></status>
</kw>
<status endtime="20170824 16:40:22.202" status="PASS" starttime="20170824 16:40:22.199"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:40:27.196" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:40:27.197" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:40:27.197" status="PASS" starttime="20170824 16:40:22.202"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:40:27.199" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:40:27.199" status="PASS" starttime="20170824 16:40:27.198"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:40:27.199" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:40:27.200" status="PASS" starttime="20170824 16:40:27.199"></status>
</kw>
<status endtime="20170824 16:40:27.200" status="PASS" starttime="20170824 16:40:27.199"></status>
</kw>
<status endtime="20170824 16:40:27.200" status="PASS" starttime="20170824 16:40:27.197"></status>
</kw>
<status endtime="20170824 16:40:27.200" status="PASS" starttime="20170824 16:40:27.197"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:40:27.200" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:40:27.200" status="PASS" starttime="20170824 16:40:27.200"></status>
</kw>
<msg timestamp="20170824 16:40:27.201" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:40:27.201" status="PASS" starttime="20170824 16:40:21.399"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:40:27.201" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:40:27.201" status="PASS" starttime="20170824 16:40:27.201"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:40:27.202" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:40:27.202" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:40:27.202" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170824 16:40:27.202" status="PASS" starttime="20170824 16:40:27.202"></status>
</kw>
<msg timestamp="20170824 16:40:27.203" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170824 16:40:27.203" status="PASS" starttime="20170824 16:40:21.399"></status>
</kw>
<msg timestamp="20170824 16:40:27.203" level="INFO">${power_state} = Off</msg>
<status endtime="20170824 16:40:27.203" status="PASS" starttime="20170824 16:40:21.399"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170824 16:40:27.204" level="FAIL">On != Off</msg>
<status endtime="20170824 16:40:27.204" status="FAIL" starttime="20170824 16:40:27.203"></status>
</kw>
<status endtime="20170824 16:40:27.204" status="FAIL" starttime="20170824 16:40:21.398"></status>
</kw>
<status endtime="20170824 16:40:27.204" status="FAIL" starttime="20170824 16:40:21.397"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:40:37.210" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:40:37.210" status="PASS" starttime="20170824 16:40:37.209"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:40:37.211" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:40:37.211" status="PASS" starttime="20170824 16:40:37.210"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:40:37.211" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:40:37.211" status="PASS" starttime="20170824 16:40:37.211"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:40:37.212" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:40:37.212" status="PASS" starttime="20170824 16:40:37.212"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:40:37.697" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:40:37.697" status="PASS" starttime="20170824 16:40:37.213"></status>
</kw>
<msg timestamp="20170824 16:40:37.698" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:40:37.698" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:40:37.698" status="PASS" starttime="20170824 16:40:37.212"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:40:37.699" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:40:37.699" status="PASS" starttime="20170824 16:40:37.698"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:40:37.699" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:40:37.699" status="PASS" starttime="20170824 16:40:37.699"></status>
</kw>
<status endtime="20170824 16:40:37.700" status="PASS" starttime="20170824 16:40:37.209"></status>
</kw>
<status endtime="20170824 16:40:37.700" status="PASS" starttime="20170824 16:40:37.208"></status>
</kw>
<status endtime="20170824 16:40:37.700" status="PASS" starttime="20170824 16:40:37.207"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:40:37.700" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:40:37.700" status="PASS" starttime="20170824 16:40:37.700"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:40:37.702" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:40:37.702" status="PASS" starttime="20170824 16:40:37.702"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:40:37.703" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:40:37.703" status="PASS" starttime="20170824 16:40:37.703"></status>
</kw>
<status endtime="20170824 16:40:37.704" status="PASS" starttime="20170824 16:40:37.703"></status>
</kw>
<status endtime="20170824 16:40:37.704" status="PASS" starttime="20170824 16:40:37.701"></status>
</kw>
<status endtime="20170824 16:40:37.704" status="PASS" starttime="20170824 16:40:37.701"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:40:38.516" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:40:38.517" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:40:38.517" status="PASS" starttime="20170824 16:40:37.704"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:40:38.519" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:40:38.519" status="PASS" starttime="20170824 16:40:38.518"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:40:38.520" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:40:38.520" status="PASS" starttime="20170824 16:40:38.520"></status>
</kw>
<status endtime="20170824 16:40:38.521" status="PASS" starttime="20170824 16:40:38.519"></status>
</kw>
<status endtime="20170824 16:40:38.521" status="PASS" starttime="20170824 16:40:38.518"></status>
</kw>
<status endtime="20170824 16:40:38.521" status="PASS" starttime="20170824 16:40:38.517"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:40:38.521" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:40:38.521" status="PASS" starttime="20170824 16:40:38.521"></status>
</kw>
<msg timestamp="20170824 16:40:38.521" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:40:38.521" status="PASS" starttime="20170824 16:40:37.206"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:40:38.522" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:40:38.522" status="PASS" starttime="20170824 16:40:38.522"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:40:38.523" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:40:38.523" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:40:38.523" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170824 16:40:38.523" status="PASS" starttime="20170824 16:40:38.522"></status>
</kw>
<msg timestamp="20170824 16:40:38.523" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 16:40:38.523" status="PASS" starttime="20170824 16:40:37.206"></status>
</kw>
<msg timestamp="20170824 16:40:38.523" level="INFO">${power_state} = On</msg>
<status endtime="20170824 16:40:38.523" status="PASS" starttime="20170824 16:40:37.205"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:40:38.524" status="PASS" starttime="20170824 16:40:38.524"></status>
</kw>
<status endtime="20170824 16:40:38.524" status="PASS" starttime="20170824 16:40:37.205"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:40:38.528" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:40:38.528" status="PASS" starttime="20170824 16:40:38.528"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:40:38.529" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:40:38.529" status="PASS" starttime="20170824 16:40:38.529"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:40:38.530" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:40:38.530" status="PASS" starttime="20170824 16:40:38.529"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:40:38.530" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:40:38.530" status="PASS" starttime="20170824 16:40:38.530"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:40:38.870" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:40:38.870" status="PASS" starttime="20170824 16:40:38.531"></status>
</kw>
<msg timestamp="20170824 16:40:38.871" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:40:38.871" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:40:38.871" status="PASS" starttime="20170824 16:40:38.531"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:40:38.871" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:40:38.871" status="PASS" starttime="20170824 16:40:38.871"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:40:38.872" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:40:38.872" status="PASS" starttime="20170824 16:40:38.872"></status>
</kw>
<status endtime="20170824 16:40:38.872" status="PASS" starttime="20170824 16:40:38.527"></status>
</kw>
<status endtime="20170824 16:40:38.872" status="PASS" starttime="20170824 16:40:38.527"></status>
</kw>
<status endtime="20170824 16:40:38.872" status="PASS" starttime="20170824 16:40:38.526"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:40:38.873" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:40:38.873" status="PASS" starttime="20170824 16:40:38.873"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:40:38.875" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:40:38.875" status="PASS" starttime="20170824 16:40:38.874"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:40:38.876" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:40:38.876" status="PASS" starttime="20170824 16:40:38.876"></status>
</kw>
<status endtime="20170824 16:40:38.877" status="PASS" starttime="20170824 16:40:38.876"></status>
</kw>
<status endtime="20170824 16:40:38.877" status="PASS" starttime="20170824 16:40:38.874"></status>
</kw>
<status endtime="20170824 16:40:38.877" status="PASS" starttime="20170824 16:40:38.873"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:40:39.551" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:40:39.551" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:40:39.551" status="PASS" starttime="20170824 16:40:38.877"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:40:39.553" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:40:39.553" status="PASS" starttime="20170824 16:40:39.552"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:40:39.554" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:40:39.555" status="PASS" starttime="20170824 16:40:39.554"></status>
</kw>
<status endtime="20170824 16:40:39.555" status="PASS" starttime="20170824 16:40:39.553"></status>
</kw>
<status endtime="20170824 16:40:39.555" status="PASS" starttime="20170824 16:40:39.552"></status>
</kw>
<status endtime="20170824 16:40:39.555" status="PASS" starttime="20170824 16:40:39.551"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:40:39.555" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:40:39.555" status="PASS" starttime="20170824 16:40:39.555"></status>
</kw>
<msg timestamp="20170824 16:40:39.556" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:40:39.556" status="PASS" starttime="20170824 16:40:38.525"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:40:39.556" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:40:39.556" status="PASS" starttime="20170824 16:40:39.556"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:40:39.557" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:40:39.557" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:40:39.557" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170824 16:40:39.557" status="PASS" starttime="20170824 16:40:39.557"></status>
</kw>
<msg timestamp="20170824 16:40:39.557" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170824 16:40:39.557" status="PASS" starttime="20170824 16:40:38.525"></status>
</kw>
<msg timestamp="20170824 16:40:39.558" level="INFO">${host_state} = Running</msg>
<status endtime="20170824 16:40:39.558" status="PASS" starttime="20170824 16:40:38.524"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170824 16:40:39.558" status="PASS" starttime="20170824 16:40:39.558"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<doc>Get the boot progress and return it.</doc>
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="utils" name="Set Boot Progress Method">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw library="BuiltIn" name="Return From Keyword">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20170824 16:40:39.561" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170824 16:40:39.561" status="PASS" starttime="20170824 16:40:39.561"></status>
</kw>
<status endtime="20170824 16:40:39.561" status="PASS" starttime="20170824 16:40:39.560"></status>
</kw>
<status endtime="20170824 16:40:39.561" status="PASS" starttime="20170824 16:40:39.560"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="utils" name="New Get Boot Progress">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:40:39.566" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:40:39.567" status="PASS" starttime="20170824 16:40:39.566"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:40:39.568" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:40:39.568" status="PASS" starttime="20170824 16:40:39.567"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:40:39.569" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:40:39.569" status="PASS" starttime="20170824 16:40:39.568"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:40:39.569" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:40:39.569" status="PASS" starttime="20170824 16:40:39.569"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:40:39.888" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:40:39.889" status="PASS" starttime="20170824 16:40:39.571"></status>
</kw>
<msg timestamp="20170824 16:40:39.889" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:40:39.889" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:40:39.889" status="PASS" starttime="20170824 16:40:39.570"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:40:39.889" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:40:39.890" status="PASS" starttime="20170824 16:40:39.889"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:40:39.890" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:40:39.890" status="PASS" starttime="20170824 16:40:39.890"></status>
</kw>
<status endtime="20170824 16:40:39.890" status="PASS" starttime="20170824 16:40:39.565"></status>
</kw>
<status endtime="20170824 16:40:39.891" status="PASS" starttime="20170824 16:40:39.564"></status>
</kw>
<status endtime="20170824 16:40:39.891" status="PASS" starttime="20170824 16:40:39.564"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:40:39.891" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170824 16:40:39.891" status="PASS" starttime="20170824 16:40:39.891"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:40:39.893" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:40:39.893" status="PASS" starttime="20170824 16:40:39.893"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:40:39.894" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:40:39.895" status="PASS" starttime="20170824 16:40:39.894"></status>
</kw>
<status endtime="20170824 16:40:39.895" status="PASS" starttime="20170824 16:40:39.894"></status>
</kw>
<status endtime="20170824 16:40:39.895" status="PASS" starttime="20170824 16:40:39.892"></status>
</kw>
<status endtime="20170824 16:40:39.895" status="PASS" starttime="20170824 16:40:39.892"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:40:40.058" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170824 16:40:40.058" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:40:40.058" status="PASS" starttime="20170824 16:40:39.895"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:40:40.060" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:40:40.060" status="PASS" starttime="20170824 16:40:40.059"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:40:40.061" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:40:40.061" status="PASS" starttime="20170824 16:40:40.061"></status>
</kw>
<status endtime="20170824 16:40:40.061" status="PASS" starttime="20170824 16:40:40.060"></status>
</kw>
<status endtime="20170824 16:40:40.061" status="PASS" starttime="20170824 16:40:40.059"></status>
</kw>
<status endtime="20170824 16:40:40.061" status="PASS" starttime="20170824 16:40:40.058"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:40:40.062" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:40:40.062" status="PASS" starttime="20170824 16:40:40.062"></status>
</kw>
<msg timestamp="20170824 16:40:40.062" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:40:40.062" status="PASS" starttime="20170824 16:40:39.563"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:40:40.063" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:40:40.063" status="PASS" starttime="20170824 16:40:40.062"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:40:40.063" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:40:40.063" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:40:40.063" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified'}</msg>
<status endtime="20170824 16:40:40.064" status="PASS" starttime="20170824 16:40:40.063"></status>
</kw>
<msg timestamp="20170824 16:40:40.064" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:40:40.064" status="PASS" starttime="20170824 16:40:39.562"></status>
</kw>
<status endtime="20170824 16:40:40.064" status="PASS" starttime="20170824 16:40:39.562"></status>
</kw>
<msg timestamp="20170824 16:40:40.064" level="INFO">${state} = Unspecified</msg>
<status endtime="20170824 16:40:40.064" status="PASS" starttime="20170824 16:40:39.562"></status>
</kw>
<msg timestamp="20170824 16:40:40.064" level="INFO">${boot_progress} = Unspecified</msg>
<status endtime="20170824 16:40:40.064" status="PASS" starttime="20170824 16:40:39.560"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>OSStart</arg>
</arguments>
<msg timestamp="20170824 16:40:40.065" level="FAIL">Unspecified != OSStart</msg>
<status endtime="20170824 16:40:40.065" status="FAIL" starttime="20170824 16:40:40.065"></status>
</kw>
<status endtime="20170824 16:40:40.065" status="FAIL" starttime="20170824 16:40:39.559"></status>
</kw>
<msg timestamp="20170824 16:40:40.065" level="INFO">${status} = False</msg>
<status endtime="20170824 16:40:40.065" status="PASS" starttime="20170824 16:40:39.559"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170824 16:40:40.066" status="PASS" starttime="20170824 16:40:40.066"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:40:40.070" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:40:40.071" status="PASS" starttime="20170824 16:40:40.070"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:40:40.072" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:40:40.072" status="PASS" starttime="20170824 16:40:40.071"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:40:40.073" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:40:40.073" status="PASS" starttime="20170824 16:40:40.072"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:40:40.073" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:40:40.074" status="PASS" starttime="20170824 16:40:40.073"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:40:40.253" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:40:40.254" status="PASS" starttime="20170824 16:40:40.075"></status>
</kw>
<msg timestamp="20170824 16:40:40.254" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:40:40.254" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:40:40.254" status="PASS" starttime="20170824 16:40:40.074"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:40:40.254" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:40:40.254" status="PASS" starttime="20170824 16:40:40.254"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:40:40.255" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:40:40.255" status="PASS" starttime="20170824 16:40:40.255"></status>
</kw>
<status endtime="20170824 16:40:40.255" status="PASS" starttime="20170824 16:40:40.069"></status>
</kw>
<status endtime="20170824 16:40:40.255" status="PASS" starttime="20170824 16:40:40.068"></status>
</kw>
<status endtime="20170824 16:40:40.255" status="PASS" starttime="20170824 16:40:40.068"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:40:40.256" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170824 16:40:40.256" status="PASS" starttime="20170824 16:40:40.256"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:40:40.260" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:40:40.260" status="PASS" starttime="20170824 16:40:40.258"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:40:40.261" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:40:40.261" status="PASS" starttime="20170824 16:40:40.261"></status>
</kw>
<status endtime="20170824 16:40:40.261" status="PASS" starttime="20170824 16:40:40.260"></status>
</kw>
<status endtime="20170824 16:40:40.262" status="PASS" starttime="20170824 16:40:40.257"></status>
</kw>
<status endtime="20170824 16:40:40.262" status="PASS" starttime="20170824 16:40:40.257"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:40:40.360" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170824 16:40:40.360" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:40:40.360" status="PASS" starttime="20170824 16:40:40.262"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:40:40.362" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:40:40.362" status="PASS" starttime="20170824 16:40:40.361"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:40:40.363" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:40:40.363" status="PASS" starttime="20170824 16:40:40.362"></status>
</kw>
<status endtime="20170824 16:40:40.363" status="PASS" starttime="20170824 16:40:40.362"></status>
</kw>
<status endtime="20170824 16:40:40.363" status="PASS" starttime="20170824 16:40:40.361"></status>
</kw>
<status endtime="20170824 16:40:40.363" status="PASS" starttime="20170824 16:40:40.360"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:40:40.363" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:40:40.364" status="PASS" starttime="20170824 16:40:40.363"></status>
</kw>
<msg timestamp="20170824 16:40:40.364" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:40:40.364" status="PASS" starttime="20170824 16:40:40.067"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:40:40.364" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:40:40.364" status="PASS" starttime="20170824 16:40:40.364"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:40:40.365" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:40:40.365" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:40:40.365" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified'}</msg>
<status endtime="20170824 16:40:40.365" status="PASS" starttime="20170824 16:40:40.365"></status>
</kw>
<msg timestamp="20170824 16:40:40.365" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:40:40.365" status="PASS" starttime="20170824 16:40:40.067"></status>
</kw>
<msg timestamp="20170824 16:40:40.366" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:40:40.366" status="PASS" starttime="20170824 16:40:40.066"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170824 16:40:40.366" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170824 16:40:40.366" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:40:40.366" status="FAIL" starttime="20170824 16:40:40.366"></status>
</kw>
<status endtime="20170824 16:40:40.367" status="FAIL" starttime="20170824 16:40:39.558"></status>
</kw>
<status endtime="20170824 16:40:40.367" status="FAIL" starttime="20170824 16:40:37.204"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:40:50.372" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:40:50.372" status="PASS" starttime="20170824 16:40:50.371"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:40:50.373" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:40:50.373" status="PASS" starttime="20170824 16:40:50.372"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:40:50.373" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:40:50.373" status="PASS" starttime="20170824 16:40:50.373"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:40:50.380" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:40:50.380" status="PASS" starttime="20170824 16:40:50.374"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:40:50.594" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:40:50.594" status="PASS" starttime="20170824 16:40:50.381"></status>
</kw>
<msg timestamp="20170824 16:40:50.594" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:40:50.594" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:40:50.594" status="PASS" starttime="20170824 16:40:50.380"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:40:50.595" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:40:50.595" status="PASS" starttime="20170824 16:40:50.594"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:40:50.595" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:40:50.595" status="PASS" starttime="20170824 16:40:50.595"></status>
</kw>
<status endtime="20170824 16:40:50.596" status="PASS" starttime="20170824 16:40:50.371"></status>
</kw>
<status endtime="20170824 16:40:50.596" status="PASS" starttime="20170824 16:40:50.370"></status>
</kw>
<status endtime="20170824 16:40:50.596" status="PASS" starttime="20170824 16:40:50.370"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:40:50.596" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:40:50.596" status="PASS" starttime="20170824 16:40:50.596"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:40:50.598" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:40:50.598" status="PASS" starttime="20170824 16:40:50.598"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:40:50.599" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:40:50.599" status="PASS" starttime="20170824 16:40:50.599"></status>
</kw>
<status endtime="20170824 16:40:50.600" status="PASS" starttime="20170824 16:40:50.599"></status>
</kw>
<status endtime="20170824 16:40:50.600" status="PASS" starttime="20170824 16:40:50.597"></status>
</kw>
<status endtime="20170824 16:40:50.600" status="PASS" starttime="20170824 16:40:50.597"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:40:50.665" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:40:50.665" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:40:50.665" status="PASS" starttime="20170824 16:40:50.600"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:40:50.667" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:40:50.667" status="PASS" starttime="20170824 16:40:50.666"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:40:50.668" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:40:50.668" status="PASS" starttime="20170824 16:40:50.668"></status>
</kw>
<status endtime="20170824 16:40:50.668" status="PASS" starttime="20170824 16:40:50.667"></status>
</kw>
<status endtime="20170824 16:40:50.668" status="PASS" starttime="20170824 16:40:50.666"></status>
</kw>
<status endtime="20170824 16:40:50.668" status="PASS" starttime="20170824 16:40:50.665"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:40:50.669" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:40:50.669" status="PASS" starttime="20170824 16:40:50.669"></status>
</kw>
<msg timestamp="20170824 16:40:50.669" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:40:50.669" status="PASS" starttime="20170824 16:40:50.369"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:40:50.670" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:40:50.670" status="PASS" starttime="20170824 16:40:50.669"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:40:50.670" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:40:50.670" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:40:50.670" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170824 16:40:50.671" status="PASS" starttime="20170824 16:40:50.670"></status>
</kw>
<msg timestamp="20170824 16:40:50.671" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 16:40:50.671" status="PASS" starttime="20170824 16:40:50.369"></status>
</kw>
<msg timestamp="20170824 16:40:50.671" level="INFO">${power_state} = On</msg>
<status endtime="20170824 16:40:50.671" status="PASS" starttime="20170824 16:40:50.368"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:40:50.672" status="PASS" starttime="20170824 16:40:50.671"></status>
</kw>
<status endtime="20170824 16:40:50.672" status="PASS" starttime="20170824 16:40:50.368"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:40:50.676" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:40:50.676" status="PASS" starttime="20170824 16:40:50.675"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:40:50.677" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:40:50.677" status="PASS" starttime="20170824 16:40:50.676"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:40:50.677" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:40:50.677" status="PASS" starttime="20170824 16:40:50.677"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:40:50.678" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:40:50.678" status="PASS" starttime="20170824 16:40:50.678"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:40:50.943" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:40:50.943" status="PASS" starttime="20170824 16:40:50.679"></status>
</kw>
<msg timestamp="20170824 16:40:50.943" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:40:50.943" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:40:50.943" status="PASS" starttime="20170824 16:40:50.678"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:40:50.944" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:40:50.944" status="PASS" starttime="20170824 16:40:50.943"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:40:50.944" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:40:50.944" status="PASS" starttime="20170824 16:40:50.944"></status>
</kw>
<status endtime="20170824 16:40:50.944" status="PASS" starttime="20170824 16:40:50.674"></status>
</kw>
<status endtime="20170824 16:40:50.945" status="PASS" starttime="20170824 16:40:50.674"></status>
</kw>
<status endtime="20170824 16:40:50.945" status="PASS" starttime="20170824 16:40:50.673"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:40:50.945" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:40:50.945" status="PASS" starttime="20170824 16:40:50.945"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:40:50.947" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:40:50.947" status="PASS" starttime="20170824 16:40:50.947"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:40:50.948" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:40:50.948" status="PASS" starttime="20170824 16:40:50.948"></status>
</kw>
<status endtime="20170824 16:40:50.949" status="PASS" starttime="20170824 16:40:50.948"></status>
</kw>
<status endtime="20170824 16:40:50.949" status="PASS" starttime="20170824 16:40:50.946"></status>
</kw>
<status endtime="20170824 16:40:50.949" status="PASS" starttime="20170824 16:40:50.946"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:40:51.049" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:40:51.049" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:40:51.049" status="PASS" starttime="20170824 16:40:50.949"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:40:51.051" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:40:51.051" status="PASS" starttime="20170824 16:40:51.050"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:40:51.052" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:40:51.052" status="PASS" starttime="20170824 16:40:51.051"></status>
</kw>
<status endtime="20170824 16:40:51.052" status="PASS" starttime="20170824 16:40:51.051"></status>
</kw>
<status endtime="20170824 16:40:51.052" status="PASS" starttime="20170824 16:40:51.050"></status>
</kw>
<status endtime="20170824 16:40:51.052" status="PASS" starttime="20170824 16:40:51.049"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:40:51.053" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:40:51.053" status="PASS" starttime="20170824 16:40:51.053"></status>
</kw>
<msg timestamp="20170824 16:40:51.053" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:40:51.053" status="PASS" starttime="20170824 16:40:50.673"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:40:51.054" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:40:51.054" status="PASS" starttime="20170824 16:40:51.053"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:40:51.054" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:40:51.054" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:40:51.054" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170824 16:40:51.055" status="PASS" starttime="20170824 16:40:51.054"></status>
</kw>
<msg timestamp="20170824 16:40:51.055" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170824 16:40:51.055" status="PASS" starttime="20170824 16:40:50.672"></status>
</kw>
<msg timestamp="20170824 16:40:51.056" level="INFO">${host_state} = Running</msg>
<status endtime="20170824 16:40:51.056" status="PASS" starttime="20170824 16:40:50.672"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170824 16:40:51.056" status="PASS" starttime="20170824 16:40:51.056"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<doc>Get the boot progress and return it.</doc>
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="utils" name="Set Boot Progress Method">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw library="BuiltIn" name="Return From Keyword">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20170824 16:40:51.059" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170824 16:40:51.059" status="PASS" starttime="20170824 16:40:51.059"></status>
</kw>
<status endtime="20170824 16:40:51.059" status="PASS" starttime="20170824 16:40:51.058"></status>
</kw>
<status endtime="20170824 16:40:51.059" status="PASS" starttime="20170824 16:40:51.058"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="utils" name="New Get Boot Progress">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:40:51.063" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:40:51.064" status="PASS" starttime="20170824 16:40:51.063"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:40:51.064" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:40:51.064" status="PASS" starttime="20170824 16:40:51.064"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:40:51.065" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:40:51.065" status="PASS" starttime="20170824 16:40:51.065"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:40:51.066" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:40:51.066" status="PASS" starttime="20170824 16:40:51.065"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:40:51.298" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:40:51.299" status="PASS" starttime="20170824 16:40:51.066"></status>
</kw>
<msg timestamp="20170824 16:40:51.299" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:40:51.299" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:40:51.299" status="PASS" starttime="20170824 16:40:51.066"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:40:51.300" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:40:51.300" status="PASS" starttime="20170824 16:40:51.299"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:40:51.300" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:40:51.300" status="PASS" starttime="20170824 16:40:51.300"></status>
</kw>
<status endtime="20170824 16:40:51.300" status="PASS" starttime="20170824 16:40:51.062"></status>
</kw>
<status endtime="20170824 16:40:51.300" status="PASS" starttime="20170824 16:40:51.062"></status>
</kw>
<status endtime="20170824 16:40:51.301" status="PASS" starttime="20170824 16:40:51.061"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:40:51.301" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170824 16:40:51.301" status="PASS" starttime="20170824 16:40:51.301"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:40:51.303" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:40:51.303" status="PASS" starttime="20170824 16:40:51.303"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:40:51.304" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:40:51.304" status="PASS" starttime="20170824 16:40:51.304"></status>
</kw>
<status endtime="20170824 16:40:51.304" status="PASS" starttime="20170824 16:40:51.303"></status>
</kw>
<status endtime="20170824 16:40:51.305" status="PASS" starttime="20170824 16:40:51.302"></status>
</kw>
<status endtime="20170824 16:40:51.305" status="PASS" starttime="20170824 16:40:51.302"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:40:51.465" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170824 16:40:51.465" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:40:51.465" status="PASS" starttime="20170824 16:40:51.305"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:40:51.467" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:40:51.467" status="PASS" starttime="20170824 16:40:51.466"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:40:51.468" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:40:51.468" status="PASS" starttime="20170824 16:40:51.468"></status>
</kw>
<status endtime="20170824 16:40:51.468" status="PASS" starttime="20170824 16:40:51.467"></status>
</kw>
<status endtime="20170824 16:40:51.468" status="PASS" starttime="20170824 16:40:51.466"></status>
</kw>
<status endtime="20170824 16:40:51.468" status="PASS" starttime="20170824 16:40:51.465"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:40:51.469" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:40:51.469" status="PASS" starttime="20170824 16:40:51.468"></status>
</kw>
<msg timestamp="20170824 16:40:51.469" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:40:51.469" status="PASS" starttime="20170824 16:40:51.061"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:40:51.470" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:40:51.470" status="PASS" starttime="20170824 16:40:51.469"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:40:51.470" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:40:51.470" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:40:51.470" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified'}</msg>
<status endtime="20170824 16:40:51.470" status="PASS" starttime="20170824 16:40:51.470"></status>
</kw>
<msg timestamp="20170824 16:40:51.471" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:40:51.471" status="PASS" starttime="20170824 16:40:51.060"></status>
</kw>
<status endtime="20170824 16:40:51.471" status="PASS" starttime="20170824 16:40:51.060"></status>
</kw>
<msg timestamp="20170824 16:40:51.471" level="INFO">${state} = Unspecified</msg>
<status endtime="20170824 16:40:51.471" status="PASS" starttime="20170824 16:40:51.059"></status>
</kw>
<msg timestamp="20170824 16:40:51.471" level="INFO">${boot_progress} = Unspecified</msg>
<status endtime="20170824 16:40:51.471" status="PASS" starttime="20170824 16:40:51.057"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>OSStart</arg>
</arguments>
<msg timestamp="20170824 16:40:51.472" level="FAIL">Unspecified != OSStart</msg>
<status endtime="20170824 16:40:51.472" status="FAIL" starttime="20170824 16:40:51.472"></status>
</kw>
<status endtime="20170824 16:40:51.472" status="FAIL" starttime="20170824 16:40:51.057"></status>
</kw>
<msg timestamp="20170824 16:40:51.472" level="INFO">${status} = False</msg>
<status endtime="20170824 16:40:51.472" status="PASS" starttime="20170824 16:40:51.057"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170824 16:40:51.473" status="PASS" starttime="20170824 16:40:51.473"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:40:51.477" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:40:51.477" status="PASS" starttime="20170824 16:40:51.477"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:40:51.478" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:40:51.478" status="PASS" starttime="20170824 16:40:51.477"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:40:51.478" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:40:51.478" status="PASS" starttime="20170824 16:40:51.478"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:40:51.479" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:40:51.479" status="PASS" starttime="20170824 16:40:51.479"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:40:51.669" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:40:51.669" status="PASS" starttime="20170824 16:40:51.480"></status>
</kw>
<msg timestamp="20170824 16:40:51.669" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:40:51.669" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:40:51.669" status="PASS" starttime="20170824 16:40:51.480"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:40:51.670" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:40:51.670" status="PASS" starttime="20170824 16:40:51.670"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:40:51.671" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:40:51.671" status="PASS" starttime="20170824 16:40:51.670"></status>
</kw>
<status endtime="20170824 16:40:51.671" status="PASS" starttime="20170824 16:40:51.476"></status>
</kw>
<status endtime="20170824 16:40:51.671" status="PASS" starttime="20170824 16:40:51.475"></status>
</kw>
<status endtime="20170824 16:40:51.671" status="PASS" starttime="20170824 16:40:51.475"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:40:51.672" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170824 16:40:51.672" status="PASS" starttime="20170824 16:40:51.671"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:40:51.674" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:40:51.674" status="PASS" starttime="20170824 16:40:51.673"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:40:51.675" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:40:51.675" status="PASS" starttime="20170824 16:40:51.674"></status>
</kw>
<status endtime="20170824 16:40:51.675" status="PASS" starttime="20170824 16:40:51.674"></status>
</kw>
<status endtime="20170824 16:40:51.675" status="PASS" starttime="20170824 16:40:51.672"></status>
</kw>
<status endtime="20170824 16:40:51.675" status="PASS" starttime="20170824 16:40:51.672"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:40:51.778" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170824 16:40:51.778" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:40:51.778" status="PASS" starttime="20170824 16:40:51.675"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:40:51.780" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:40:51.780" status="PASS" starttime="20170824 16:40:51.779"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:40:51.781" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:40:51.781" status="PASS" starttime="20170824 16:40:51.781"></status>
</kw>
<status endtime="20170824 16:40:51.781" status="PASS" starttime="20170824 16:40:51.780"></status>
</kw>
<status endtime="20170824 16:40:51.781" status="PASS" starttime="20170824 16:40:51.779"></status>
</kw>
<status endtime="20170824 16:40:51.781" status="PASS" starttime="20170824 16:40:51.778"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:40:51.782" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:40:51.782" status="PASS" starttime="20170824 16:40:51.782"></status>
</kw>
<msg timestamp="20170824 16:40:51.782" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:40:51.783" status="PASS" starttime="20170824 16:40:51.474"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:40:51.783" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:40:51.783" status="PASS" starttime="20170824 16:40:51.783"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:40:51.784" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:40:51.784" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:40:51.784" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified'}</msg>
<status endtime="20170824 16:40:51.784" status="PASS" starttime="20170824 16:40:51.783"></status>
</kw>
<msg timestamp="20170824 16:40:51.784" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:40:51.785" status="PASS" starttime="20170824 16:40:51.473"></status>
</kw>
<msg timestamp="20170824 16:40:51.785" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:40:51.785" status="PASS" starttime="20170824 16:40:51.473"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170824 16:40:51.786" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170824 16:40:51.786" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:40:51.786" status="FAIL" starttime="20170824 16:40:51.785"></status>
</kw>
<status endtime="20170824 16:40:51.786" status="FAIL" starttime="20170824 16:40:51.056"></status>
</kw>
<status endtime="20170824 16:40:51.786" status="FAIL" starttime="20170824 16:40:50.367"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:41:01.792" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:41:01.792" status="PASS" starttime="20170824 16:41:01.791"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:41:01.793" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:41:01.793" status="PASS" starttime="20170824 16:41:01.792"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:41:01.793" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:41:01.793" status="PASS" starttime="20170824 16:41:01.793"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:41:01.794" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:41:01.794" status="PASS" starttime="20170824 16:41:01.794"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:41:01.988" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:41:01.988" status="PASS" starttime="20170824 16:41:01.795"></status>
</kw>
<msg timestamp="20170824 16:41:01.988" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:41:01.988" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:01.988" status="PASS" starttime="20170824 16:41:01.794"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:41:01.989" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:01.989" status="PASS" starttime="20170824 16:41:01.988"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:41:01.990" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:01.990" status="PASS" starttime="20170824 16:41:01.989"></status>
</kw>
<status endtime="20170824 16:41:01.990" status="PASS" starttime="20170824 16:41:01.791"></status>
</kw>
<status endtime="20170824 16:41:01.990" status="PASS" starttime="20170824 16:41:01.790"></status>
</kw>
<status endtime="20170824 16:41:01.990" status="PASS" starttime="20170824 16:41:01.790"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:41:01.990" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:41:01.991" status="PASS" starttime="20170824 16:41:01.990"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:41:01.993" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:41:01.993" status="PASS" starttime="20170824 16:41:01.992"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:41:01.994" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:41:01.994" status="PASS" starttime="20170824 16:41:01.993"></status>
</kw>
<status endtime="20170824 16:41:01.994" status="PASS" starttime="20170824 16:41:01.993"></status>
</kw>
<status endtime="20170824 16:41:01.994" status="PASS" starttime="20170824 16:41:01.991"></status>
</kw>
<status endtime="20170824 16:41:01.994" status="PASS" starttime="20170824 16:41:01.991"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:41:02.059" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:41:02.059" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:02.059" status="PASS" starttime="20170824 16:41:01.994"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:41:02.061" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:41:02.061" status="PASS" starttime="20170824 16:41:02.060"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:41:02.062" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:41:02.062" status="PASS" starttime="20170824 16:41:02.061"></status>
</kw>
<status endtime="20170824 16:41:02.062" status="PASS" starttime="20170824 16:41:02.061"></status>
</kw>
<status endtime="20170824 16:41:02.062" status="PASS" starttime="20170824 16:41:02.060"></status>
</kw>
<status endtime="20170824 16:41:02.062" status="PASS" starttime="20170824 16:41:02.059"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:41:02.062" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:41:02.062" status="PASS" starttime="20170824 16:41:02.062"></status>
</kw>
<msg timestamp="20170824 16:41:02.063" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:02.063" status="PASS" starttime="20170824 16:41:01.789"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:41:02.063" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:02.063" status="PASS" starttime="20170824 16:41:02.063"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:41:02.064" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:41:02.064" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:41:02.064" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170824 16:41:02.064" status="PASS" starttime="20170824 16:41:02.064"></status>
</kw>
<msg timestamp="20170824 16:41:02.064" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 16:41:02.064" status="PASS" starttime="20170824 16:41:01.788"></status>
</kw>
<msg timestamp="20170824 16:41:02.065" level="INFO">${power_state} = On</msg>
<status endtime="20170824 16:41:02.065" status="PASS" starttime="20170824 16:41:01.788"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:41:02.065" status="PASS" starttime="20170824 16:41:02.065"></status>
</kw>
<status endtime="20170824 16:41:02.065" status="PASS" starttime="20170824 16:41:01.788"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:41:02.069" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:41:02.070" status="PASS" starttime="20170824 16:41:02.068"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:41:02.070" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:41:02.070" status="PASS" starttime="20170824 16:41:02.070"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:41:02.071" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:41:02.071" status="PASS" starttime="20170824 16:41:02.070"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:41:02.071" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:41:02.072" status="PASS" starttime="20170824 16:41:02.071"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:41:02.277" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:41:02.278" status="PASS" starttime="20170824 16:41:02.072"></status>
</kw>
<msg timestamp="20170824 16:41:02.278" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:41:02.278" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:02.278" status="PASS" starttime="20170824 16:41:02.072"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:41:02.278" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:02.278" status="PASS" starttime="20170824 16:41:02.278"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:41:02.279" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:02.279" status="PASS" starttime="20170824 16:41:02.279"></status>
</kw>
<status endtime="20170824 16:41:02.279" status="PASS" starttime="20170824 16:41:02.068"></status>
</kw>
<status endtime="20170824 16:41:02.280" status="PASS" starttime="20170824 16:41:02.068"></status>
</kw>
<status endtime="20170824 16:41:02.280" status="PASS" starttime="20170824 16:41:02.067"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:41:02.280" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:41:02.280" status="PASS" starttime="20170824 16:41:02.280"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:41:02.282" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:41:02.282" status="PASS" starttime="20170824 16:41:02.282"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:41:02.283" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:41:02.283" status="PASS" starttime="20170824 16:41:02.283"></status>
</kw>
<status endtime="20170824 16:41:02.283" status="PASS" starttime="20170824 16:41:02.282"></status>
</kw>
<status endtime="20170824 16:41:02.284" status="PASS" starttime="20170824 16:41:02.281"></status>
</kw>
<status endtime="20170824 16:41:02.284" status="PASS" starttime="20170824 16:41:02.281"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:41:02.375" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:41:02.375" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:02.375" status="PASS" starttime="20170824 16:41:02.284"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:41:02.377" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:41:02.377" status="PASS" starttime="20170824 16:41:02.376"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:41:02.378" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:41:02.378" status="PASS" starttime="20170824 16:41:02.377"></status>
</kw>
<status endtime="20170824 16:41:02.378" status="PASS" starttime="20170824 16:41:02.377"></status>
</kw>
<status endtime="20170824 16:41:02.378" status="PASS" starttime="20170824 16:41:02.376"></status>
</kw>
<status endtime="20170824 16:41:02.378" status="PASS" starttime="20170824 16:41:02.375"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:41:02.379" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:41:02.379" status="PASS" starttime="20170824 16:41:02.378"></status>
</kw>
<msg timestamp="20170824 16:41:02.379" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:02.379" status="PASS" starttime="20170824 16:41:02.066"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:41:02.380" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:02.380" status="PASS" starttime="20170824 16:41:02.379"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:41:02.380" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:41:02.380" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:41:02.380" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170824 16:41:02.380" status="PASS" starttime="20170824 16:41:02.380"></status>
</kw>
<msg timestamp="20170824 16:41:02.381" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170824 16:41:02.381" status="PASS" starttime="20170824 16:41:02.066"></status>
</kw>
<msg timestamp="20170824 16:41:02.381" level="INFO">${host_state} = Running</msg>
<status endtime="20170824 16:41:02.381" status="PASS" starttime="20170824 16:41:02.065"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170824 16:41:02.381" status="PASS" starttime="20170824 16:41:02.381"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<doc>Get the boot progress and return it.</doc>
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="utils" name="Set Boot Progress Method">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw library="BuiltIn" name="Return From Keyword">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20170824 16:41:02.384" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170824 16:41:02.385" status="PASS" starttime="20170824 16:41:02.384"></status>
</kw>
<status endtime="20170824 16:41:02.385" status="PASS" starttime="20170824 16:41:02.384"></status>
</kw>
<status endtime="20170824 16:41:02.385" status="PASS" starttime="20170824 16:41:02.383"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="utils" name="New Get Boot Progress">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:41:02.389" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:41:02.389" status="PASS" starttime="20170824 16:41:02.388"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:41:02.390" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:41:02.390" status="PASS" starttime="20170824 16:41:02.389"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:41:02.390" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:41:02.390" status="PASS" starttime="20170824 16:41:02.390"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:41:02.391" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:41:02.391" status="PASS" starttime="20170824 16:41:02.391"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:41:02.583" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:41:02.583" status="PASS" starttime="20170824 16:41:02.392"></status>
</kw>
<msg timestamp="20170824 16:41:02.584" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:41:02.584" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:02.584" status="PASS" starttime="20170824 16:41:02.391"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:41:02.584" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:02.584" status="PASS" starttime="20170824 16:41:02.584"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:41:02.585" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:02.585" status="PASS" starttime="20170824 16:41:02.585"></status>
</kw>
<status endtime="20170824 16:41:02.585" status="PASS" starttime="20170824 16:41:02.388"></status>
</kw>
<status endtime="20170824 16:41:02.585" status="PASS" starttime="20170824 16:41:02.388"></status>
</kw>
<status endtime="20170824 16:41:02.585" status="PASS" starttime="20170824 16:41:02.387"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:41:02.586" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170824 16:41:02.586" status="PASS" starttime="20170824 16:41:02.586"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:41:02.588" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:41:02.588" status="PASS" starttime="20170824 16:41:02.587"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:41:02.589" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:41:02.589" status="PASS" starttime="20170824 16:41:02.589"></status>
</kw>
<status endtime="20170824 16:41:02.589" status="PASS" starttime="20170824 16:41:02.588"></status>
</kw>
<status endtime="20170824 16:41:02.589" status="PASS" starttime="20170824 16:41:02.587"></status>
</kw>
<status endtime="20170824 16:41:02.589" status="PASS" starttime="20170824 16:41:02.586"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:41:02.683" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170824 16:41:02.683" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:02.683" status="PASS" starttime="20170824 16:41:02.590"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:41:02.685" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:41:02.685" status="PASS" starttime="20170824 16:41:02.684"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:41:02.686" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:41:02.686" status="PASS" starttime="20170824 16:41:02.686"></status>
</kw>
<status endtime="20170824 16:41:02.686" status="PASS" starttime="20170824 16:41:02.685"></status>
</kw>
<status endtime="20170824 16:41:02.686" status="PASS" starttime="20170824 16:41:02.684"></status>
</kw>
<status endtime="20170824 16:41:02.686" status="PASS" starttime="20170824 16:41:02.683"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:41:02.687" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:41:02.687" status="PASS" starttime="20170824 16:41:02.686"></status>
</kw>
<msg timestamp="20170824 16:41:02.687" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:02.687" status="PASS" starttime="20170824 16:41:02.386"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:41:02.688" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:02.688" status="PASS" starttime="20170824 16:41:02.687"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:41:02.688" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:41:02.688" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:41:02.688" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified'}</msg>
<status endtime="20170824 16:41:02.688" status="PASS" starttime="20170824 16:41:02.688"></status>
</kw>
<msg timestamp="20170824 16:41:02.689" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:41:02.689" status="PASS" starttime="20170824 16:41:02.386"></status>
</kw>
<status endtime="20170824 16:41:02.689" status="PASS" starttime="20170824 16:41:02.385"></status>
</kw>
<msg timestamp="20170824 16:41:02.689" level="INFO">${state} = Unspecified</msg>
<status endtime="20170824 16:41:02.689" status="PASS" starttime="20170824 16:41:02.385"></status>
</kw>
<msg timestamp="20170824 16:41:02.689" level="INFO">${boot_progress} = Unspecified</msg>
<status endtime="20170824 16:41:02.689" status="PASS" starttime="20170824 16:41:02.383"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>OSStart</arg>
</arguments>
<msg timestamp="20170824 16:41:02.690" level="FAIL">Unspecified != OSStart</msg>
<status endtime="20170824 16:41:02.690" status="FAIL" starttime="20170824 16:41:02.690"></status>
</kw>
<status endtime="20170824 16:41:02.690" status="FAIL" starttime="20170824 16:41:02.382"></status>
</kw>
<msg timestamp="20170824 16:41:02.690" level="INFO">${status} = False</msg>
<status endtime="20170824 16:41:02.690" status="PASS" starttime="20170824 16:41:02.382"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170824 16:41:02.691" status="PASS" starttime="20170824 16:41:02.691"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:41:02.695" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:41:02.695" status="PASS" starttime="20170824 16:41:02.694"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:41:02.696" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:41:02.696" status="PASS" starttime="20170824 16:41:02.696"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:41:02.697" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:41:02.697" status="PASS" starttime="20170824 16:41:02.696"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:41:02.697" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:41:02.697" status="PASS" starttime="20170824 16:41:02.697"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:41:02.927" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:41:02.927" status="PASS" starttime="20170824 16:41:02.698"></status>
</kw>
<msg timestamp="20170824 16:41:02.928" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:41:02.928" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:02.928" status="PASS" starttime="20170824 16:41:02.698"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:41:02.928" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:02.928" status="PASS" starttime="20170824 16:41:02.928"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:41:02.929" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:02.929" status="PASS" starttime="20170824 16:41:02.929"></status>
</kw>
<status endtime="20170824 16:41:02.929" status="PASS" starttime="20170824 16:41:02.694"></status>
</kw>
<status endtime="20170824 16:41:02.929" status="PASS" starttime="20170824 16:41:02.693"></status>
</kw>
<status endtime="20170824 16:41:02.929" status="PASS" starttime="20170824 16:41:02.693"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:41:02.930" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170824 16:41:02.930" status="PASS" starttime="20170824 16:41:02.930"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:41:02.932" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:41:02.932" status="PASS" starttime="20170824 16:41:02.931"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:41:02.933" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:41:02.933" status="PASS" starttime="20170824 16:41:02.933"></status>
</kw>
<status endtime="20170824 16:41:02.933" status="PASS" starttime="20170824 16:41:02.932"></status>
</kw>
<status endtime="20170824 16:41:02.933" status="PASS" starttime="20170824 16:41:02.931"></status>
</kw>
<status endtime="20170824 16:41:02.933" status="PASS" starttime="20170824 16:41:02.930"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:41:03.071" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170824 16:41:03.071" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:03.071" status="PASS" starttime="20170824 16:41:02.934"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:41:03.073" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:41:03.073" status="PASS" starttime="20170824 16:41:03.073"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:41:03.074" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:41:03.074" status="PASS" starttime="20170824 16:41:03.074"></status>
</kw>
<status endtime="20170824 16:41:03.074" status="PASS" starttime="20170824 16:41:03.073"></status>
</kw>
<status endtime="20170824 16:41:03.074" status="PASS" starttime="20170824 16:41:03.072"></status>
</kw>
<status endtime="20170824 16:41:03.074" status="PASS" starttime="20170824 16:41:03.072"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:41:03.075" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:41:03.075" status="PASS" starttime="20170824 16:41:03.075"></status>
</kw>
<msg timestamp="20170824 16:41:03.075" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:03.075" status="PASS" starttime="20170824 16:41:02.692"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:41:03.076" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:03.076" status="PASS" starttime="20170824 16:41:03.075"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:41:03.076" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:41:03.076" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:41:03.076" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified'}</msg>
<status endtime="20170824 16:41:03.076" status="PASS" starttime="20170824 16:41:03.076"></status>
</kw>
<msg timestamp="20170824 16:41:03.077" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:41:03.077" status="PASS" starttime="20170824 16:41:02.692"></status>
</kw>
<msg timestamp="20170824 16:41:03.077" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:41:03.077" status="PASS" starttime="20170824 16:41:02.691"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170824 16:41:03.077" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170824 16:41:03.078" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:41:03.078" status="FAIL" starttime="20170824 16:41:03.077"></status>
</kw>
<status endtime="20170824 16:41:03.078" status="FAIL" starttime="20170824 16:41:02.382"></status>
</kw>
<status endtime="20170824 16:41:03.078" status="FAIL" starttime="20170824 16:41:01.787"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:41:13.084" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:41:13.084" status="PASS" starttime="20170824 16:41:13.083"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:41:13.085" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:41:13.085" status="PASS" starttime="20170824 16:41:13.084"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:41:13.085" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:41:13.085" status="PASS" starttime="20170824 16:41:13.085"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:41:13.086" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:41:13.086" status="PASS" starttime="20170824 16:41:13.086"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:41:13.267" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:41:13.267" status="PASS" starttime="20170824 16:41:13.087"></status>
</kw>
<msg timestamp="20170824 16:41:13.267" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:41:13.267" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:13.267" status="PASS" starttime="20170824 16:41:13.086"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:41:13.268" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:13.268" status="PASS" starttime="20170824 16:41:13.268"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:41:13.269" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:13.269" status="PASS" starttime="20170824 16:41:13.268"></status>
</kw>
<status endtime="20170824 16:41:13.269" status="PASS" starttime="20170824 16:41:13.083"></status>
</kw>
<status endtime="20170824 16:41:13.269" status="PASS" starttime="20170824 16:41:13.082"></status>
</kw>
<status endtime="20170824 16:41:13.269" status="PASS" starttime="20170824 16:41:13.082"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:41:13.270" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:41:13.270" status="PASS" starttime="20170824 16:41:13.269"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:41:13.272" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:41:13.272" status="PASS" starttime="20170824 16:41:13.271"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:41:13.273" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:41:13.273" status="PASS" starttime="20170824 16:41:13.272"></status>
</kw>
<status endtime="20170824 16:41:13.273" status="PASS" starttime="20170824 16:41:13.272"></status>
</kw>
<status endtime="20170824 16:41:13.273" status="PASS" starttime="20170824 16:41:13.270"></status>
</kw>
<status endtime="20170824 16:41:13.273" status="PASS" starttime="20170824 16:41:13.270"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:41:17.469" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:41:17.469" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:17.469" status="PASS" starttime="20170824 16:41:13.273"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:41:17.472" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:41:17.472" status="PASS" starttime="20170824 16:41:17.471"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:41:17.473" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:41:17.473" status="PASS" starttime="20170824 16:41:17.473"></status>
</kw>
<status endtime="20170824 16:41:17.473" status="PASS" starttime="20170824 16:41:17.472"></status>
</kw>
<status endtime="20170824 16:41:17.473" status="PASS" starttime="20170824 16:41:17.470"></status>
</kw>
<status endtime="20170824 16:41:17.473" status="PASS" starttime="20170824 16:41:17.470"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:41:17.474" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:41:17.474" status="PASS" starttime="20170824 16:41:17.474"></status>
</kw>
<msg timestamp="20170824 16:41:17.474" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:17.474" status="PASS" starttime="20170824 16:41:13.081"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:41:17.475" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:17.475" status="PASS" starttime="20170824 16:41:17.474"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:41:17.475" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:41:17.475" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:41:17.475" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170824 16:41:17.476" status="PASS" starttime="20170824 16:41:17.475"></status>
</kw>
<msg timestamp="20170824 16:41:17.476" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 16:41:17.476" status="PASS" starttime="20170824 16:41:13.080"></status>
</kw>
<msg timestamp="20170824 16:41:17.476" level="INFO">${power_state} = On</msg>
<status endtime="20170824 16:41:17.476" status="PASS" starttime="20170824 16:41:13.080"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:41:17.477" status="PASS" starttime="20170824 16:41:17.476"></status>
</kw>
<status endtime="20170824 16:41:17.477" status="PASS" starttime="20170824 16:41:13.079"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:41:17.480" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:41:17.481" status="PASS" starttime="20170824 16:41:17.480"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:41:17.481" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:41:17.482" status="PASS" starttime="20170824 16:41:17.481"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:41:17.482" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:41:17.482" status="PASS" starttime="20170824 16:41:17.482"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:41:17.483" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:41:17.483" status="PASS" starttime="20170824 16:41:17.483"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:41:17.675" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:41:17.675" status="PASS" starttime="20170824 16:41:17.484"></status>
</kw>
<msg timestamp="20170824 16:41:17.676" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:41:17.676" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:17.676" status="PASS" starttime="20170824 16:41:17.483"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:41:17.676" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:17.676" status="PASS" starttime="20170824 16:41:17.676"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:41:17.678" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:17.678" status="PASS" starttime="20170824 16:41:17.677"></status>
</kw>
<status endtime="20170824 16:41:17.678" status="PASS" starttime="20170824 16:41:17.480"></status>
</kw>
<status endtime="20170824 16:41:17.678" status="PASS" starttime="20170824 16:41:17.479"></status>
</kw>
<status endtime="20170824 16:41:17.678" status="PASS" starttime="20170824 16:41:17.478"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:41:17.679" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:41:17.679" status="PASS" starttime="20170824 16:41:17.678"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:41:17.681" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:41:17.681" status="PASS" starttime="20170824 16:41:17.680"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:41:17.682" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:41:17.682" status="PASS" starttime="20170824 16:41:17.681"></status>
</kw>
<status endtime="20170824 16:41:17.682" status="PASS" starttime="20170824 16:41:17.681"></status>
</kw>
<status endtime="20170824 16:41:17.682" status="PASS" starttime="20170824 16:41:17.679"></status>
</kw>
<status endtime="20170824 16:41:17.682" status="PASS" starttime="20170824 16:41:17.679"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:41:17.955" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:41:17.955" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:17.955" status="PASS" starttime="20170824 16:41:17.682"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:41:17.957" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:41:17.957" status="PASS" starttime="20170824 16:41:17.956"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:41:17.958" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:41:17.958" status="PASS" starttime="20170824 16:41:17.958"></status>
</kw>
<status endtime="20170824 16:41:17.958" status="PASS" starttime="20170824 16:41:17.957"></status>
</kw>
<status endtime="20170824 16:41:17.958" status="PASS" starttime="20170824 16:41:17.956"></status>
</kw>
<status endtime="20170824 16:41:17.958" status="PASS" starttime="20170824 16:41:17.955"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:41:17.959" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:41:17.959" status="PASS" starttime="20170824 16:41:17.958"></status>
</kw>
<msg timestamp="20170824 16:41:17.959" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:17.959" status="PASS" starttime="20170824 16:41:17.478"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:41:17.960" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:17.960" status="PASS" starttime="20170824 16:41:17.959"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:41:17.960" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:41:17.960" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:41:17.960" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170824 16:41:17.960" status="PASS" starttime="20170824 16:41:17.960"></status>
</kw>
<msg timestamp="20170824 16:41:17.961" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170824 16:41:17.961" status="PASS" starttime="20170824 16:41:17.477"></status>
</kw>
<msg timestamp="20170824 16:41:17.961" level="INFO">${host_state} = Running</msg>
<status endtime="20170824 16:41:17.961" status="PASS" starttime="20170824 16:41:17.477"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170824 16:41:17.962" status="PASS" starttime="20170824 16:41:17.961"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<doc>Get the boot progress and return it.</doc>
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="utils" name="Set Boot Progress Method">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw library="BuiltIn" name="Return From Keyword">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20170824 16:41:17.964" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170824 16:41:17.964" status="PASS" starttime="20170824 16:41:17.964"></status>
</kw>
<status endtime="20170824 16:41:17.964" status="PASS" starttime="20170824 16:41:17.964"></status>
</kw>
<status endtime="20170824 16:41:17.965" status="PASS" starttime="20170824 16:41:17.963"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="utils" name="New Get Boot Progress">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:41:17.969" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:41:17.970" status="PASS" starttime="20170824 16:41:17.969"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:41:17.970" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:41:17.970" status="PASS" starttime="20170824 16:41:17.970"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:41:17.971" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:41:17.971" status="PASS" starttime="20170824 16:41:17.970"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:41:17.971" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:41:17.971" status="PASS" starttime="20170824 16:41:17.971"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:41:18.341" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:41:18.341" status="PASS" starttime="20170824 16:41:17.972"></status>
</kw>
<msg timestamp="20170824 16:41:18.342" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:41:18.342" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:18.342" status="PASS" starttime="20170824 16:41:17.972"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:41:18.342" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:18.343" status="PASS" starttime="20170824 16:41:18.342"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:41:18.343" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:18.343" status="PASS" starttime="20170824 16:41:18.343"></status>
</kw>
<status endtime="20170824 16:41:18.343" status="PASS" starttime="20170824 16:41:17.968"></status>
</kw>
<status endtime="20170824 16:41:18.343" status="PASS" starttime="20170824 16:41:17.968"></status>
</kw>
<status endtime="20170824 16:41:18.344" status="PASS" starttime="20170824 16:41:17.967"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:41:18.344" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170824 16:41:18.344" status="PASS" starttime="20170824 16:41:18.344"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:41:18.347" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:41:18.347" status="PASS" starttime="20170824 16:41:18.346"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:41:18.348" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:41:18.349" status="PASS" starttime="20170824 16:41:18.348"></status>
</kw>
<status endtime="20170824 16:41:18.349" status="PASS" starttime="20170824 16:41:18.347"></status>
</kw>
<status endtime="20170824 16:41:18.349" status="PASS" starttime="20170824 16:41:18.345"></status>
</kw>
<status endtime="20170824 16:41:18.349" status="PASS" starttime="20170824 16:41:18.344"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:41:18.614" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170824 16:41:18.615" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:18.615" status="PASS" starttime="20170824 16:41:18.349"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:41:18.617" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:41:18.617" status="PASS" starttime="20170824 16:41:18.616"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:41:18.618" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:41:18.618" status="PASS" starttime="20170824 16:41:18.617"></status>
</kw>
<status endtime="20170824 16:41:18.618" status="PASS" starttime="20170824 16:41:18.617"></status>
</kw>
<status endtime="20170824 16:41:18.618" status="PASS" starttime="20170824 16:41:18.615"></status>
</kw>
<status endtime="20170824 16:41:18.618" status="PASS" starttime="20170824 16:41:18.615"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:41:18.618" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:41:18.618" status="PASS" starttime="20170824 16:41:18.618"></status>
</kw>
<msg timestamp="20170824 16:41:18.619" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:18.619" status="PASS" starttime="20170824 16:41:17.967"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:41:18.619" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:18.619" status="PASS" starttime="20170824 16:41:18.619"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:41:18.620" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:41:18.620" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:41:18.620" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified'}</msg>
<status endtime="20170824 16:41:18.620" status="PASS" starttime="20170824 16:41:18.620"></status>
</kw>
<msg timestamp="20170824 16:41:18.620" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:41:18.620" status="PASS" starttime="20170824 16:41:17.966"></status>
</kw>
<status endtime="20170824 16:41:18.621" status="PASS" starttime="20170824 16:41:17.965"></status>
</kw>
<msg timestamp="20170824 16:41:18.621" level="INFO">${state} = Unspecified</msg>
<status endtime="20170824 16:41:18.621" status="PASS" starttime="20170824 16:41:17.965"></status>
</kw>
<msg timestamp="20170824 16:41:18.621" level="INFO">${boot_progress} = Unspecified</msg>
<status endtime="20170824 16:41:18.621" status="PASS" starttime="20170824 16:41:17.963"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>OSStart</arg>
</arguments>
<msg timestamp="20170824 16:41:18.622" level="FAIL">Unspecified != OSStart</msg>
<status endtime="20170824 16:41:18.622" status="FAIL" starttime="20170824 16:41:18.621"></status>
</kw>
<status endtime="20170824 16:41:18.622" status="FAIL" starttime="20170824 16:41:17.962"></status>
</kw>
<msg timestamp="20170824 16:41:18.622" level="INFO">${status} = False</msg>
<status endtime="20170824 16:41:18.622" status="PASS" starttime="20170824 16:41:17.962"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170824 16:41:18.623" status="PASS" starttime="20170824 16:41:18.623"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:41:18.628" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:41:18.629" status="PASS" starttime="20170824 16:41:18.628"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:41:18.629" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:41:18.629" status="PASS" starttime="20170824 16:41:18.629"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:41:18.630" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:41:18.630" status="PASS" starttime="20170824 16:41:18.630"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:41:18.631" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:41:18.631" status="PASS" starttime="20170824 16:41:18.630"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:41:18.872" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:41:18.872" status="PASS" starttime="20170824 16:41:18.631"></status>
</kw>
<msg timestamp="20170824 16:41:18.872" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:41:18.872" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:18.872" status="PASS" starttime="20170824 16:41:18.631"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:41:18.873" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:18.873" status="PASS" starttime="20170824 16:41:18.873"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:41:18.874" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:18.874" status="PASS" starttime="20170824 16:41:18.874"></status>
</kw>
<status endtime="20170824 16:41:18.874" status="PASS" starttime="20170824 16:41:18.627"></status>
</kw>
<status endtime="20170824 16:41:18.874" status="PASS" starttime="20170824 16:41:18.626"></status>
</kw>
<status endtime="20170824 16:41:18.874" status="PASS" starttime="20170824 16:41:18.626"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:41:18.875" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170824 16:41:18.875" status="PASS" starttime="20170824 16:41:18.875"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:41:18.877" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:41:18.877" status="PASS" starttime="20170824 16:41:18.876"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:41:18.878" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:41:18.878" status="PASS" starttime="20170824 16:41:18.878"></status>
</kw>
<status endtime="20170824 16:41:18.878" status="PASS" starttime="20170824 16:41:18.877"></status>
</kw>
<status endtime="20170824 16:41:18.878" status="PASS" starttime="20170824 16:41:18.876"></status>
</kw>
<status endtime="20170824 16:41:18.878" status="PASS" starttime="20170824 16:41:18.875"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:41:18.971" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170824 16:41:18.971" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:18.971" status="PASS" starttime="20170824 16:41:18.879"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:41:18.973" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:41:18.973" status="PASS" starttime="20170824 16:41:18.972"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:41:18.974" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:41:18.974" status="PASS" starttime="20170824 16:41:18.973"></status>
</kw>
<status endtime="20170824 16:41:18.974" status="PASS" starttime="20170824 16:41:18.973"></status>
</kw>
<status endtime="20170824 16:41:18.974" status="PASS" starttime="20170824 16:41:18.972"></status>
</kw>
<status endtime="20170824 16:41:18.974" status="PASS" starttime="20170824 16:41:18.971"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:41:18.974" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:41:18.975" status="PASS" starttime="20170824 16:41:18.974"></status>
</kw>
<msg timestamp="20170824 16:41:18.975" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:18.975" status="PASS" starttime="20170824 16:41:18.625"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:41:18.975" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:18.975" status="PASS" starttime="20170824 16:41:18.975"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:41:18.976" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:41:18.976" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:41:18.976" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified'}</msg>
<status endtime="20170824 16:41:18.976" status="PASS" starttime="20170824 16:41:18.976"></status>
</kw>
<msg timestamp="20170824 16:41:18.976" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:41:18.977" status="PASS" starttime="20170824 16:41:18.624"></status>
</kw>
<msg timestamp="20170824 16:41:18.977" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:41:18.977" status="PASS" starttime="20170824 16:41:18.623"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170824 16:41:18.977" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170824 16:41:18.977" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:41:18.978" status="FAIL" starttime="20170824 16:41:18.977"></status>
</kw>
<status endtime="20170824 16:41:18.978" status="FAIL" starttime="20170824 16:41:17.962"></status>
</kw>
<status endtime="20170824 16:41:18.978" status="FAIL" starttime="20170824 16:41:13.079"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:41:28.984" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:41:28.984" status="PASS" starttime="20170824 16:41:28.983"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:41:28.985" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:41:28.985" status="PASS" starttime="20170824 16:41:28.984"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:41:28.985" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:41:28.985" status="PASS" starttime="20170824 16:41:28.985"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:41:28.986" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:41:28.986" status="PASS" starttime="20170824 16:41:28.985"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:41:29.989" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:41:29.989" status="PASS" starttime="20170824 16:41:28.987"></status>
</kw>
<msg timestamp="20170824 16:41:29.989" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:41:29.989" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:29.989" status="PASS" starttime="20170824 16:41:28.986"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:41:29.990" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:29.990" status="PASS" starttime="20170824 16:41:29.990"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:41:29.991" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:29.991" status="PASS" starttime="20170824 16:41:29.990"></status>
</kw>
<status endtime="20170824 16:41:29.991" status="PASS" starttime="20170824 16:41:28.982"></status>
</kw>
<status endtime="20170824 16:41:29.991" status="PASS" starttime="20170824 16:41:28.982"></status>
</kw>
<status endtime="20170824 16:41:29.991" status="PASS" starttime="20170824 16:41:28.981"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:41:29.992" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:41:29.992" status="PASS" starttime="20170824 16:41:29.992"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:41:29.994" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:41:29.994" status="PASS" starttime="20170824 16:41:29.993"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:41:29.995" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:41:29.995" status="PASS" starttime="20170824 16:41:29.995"></status>
</kw>
<status endtime="20170824 16:41:29.995" status="PASS" starttime="20170824 16:41:29.994"></status>
</kw>
<status endtime="20170824 16:41:29.995" status="PASS" starttime="20170824 16:41:29.993"></status>
</kw>
<status endtime="20170824 16:41:29.995" status="PASS" starttime="20170824 16:41:29.992"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:41:36.439" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:41:36.440" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:36.440" status="PASS" starttime="20170824 16:41:29.996"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:41:36.442" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:41:36.442" status="PASS" starttime="20170824 16:41:36.442"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:41:36.443" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:41:36.443" status="PASS" starttime="20170824 16:41:36.443"></status>
</kw>
<status endtime="20170824 16:41:36.443" status="PASS" starttime="20170824 16:41:36.442"></status>
</kw>
<status endtime="20170824 16:41:36.443" status="PASS" starttime="20170824 16:41:36.441"></status>
</kw>
<status endtime="20170824 16:41:36.444" status="PASS" starttime="20170824 16:41:36.441"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:41:36.444" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:41:36.444" status="PASS" starttime="20170824 16:41:36.444"></status>
</kw>
<msg timestamp="20170824 16:41:36.444" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:36.444" status="PASS" starttime="20170824 16:41:28.981"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:41:36.445" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:36.445" status="PASS" starttime="20170824 16:41:36.444"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:41:36.446" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:41:36.446" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:41:36.446" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170824 16:41:36.446" status="PASS" starttime="20170824 16:41:36.445"></status>
</kw>
<msg timestamp="20170824 16:41:36.446" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170824 16:41:36.446" status="PASS" starttime="20170824 16:41:28.980"></status>
</kw>
<msg timestamp="20170824 16:41:36.446" level="INFO">${power_state} = Off</msg>
<status endtime="20170824 16:41:36.446" status="PASS" starttime="20170824 16:41:28.979"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170824 16:41:36.447" level="FAIL">On != Off</msg>
<status endtime="20170824 16:41:36.448" status="FAIL" starttime="20170824 16:41:36.447"></status>
</kw>
<status endtime="20170824 16:41:36.448" status="FAIL" starttime="20170824 16:41:28.979"></status>
</kw>
<status endtime="20170824 16:41:36.448" status="FAIL" starttime="20170824 16:41:28.978"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:41:46.453" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:41:46.453" status="PASS" starttime="20170824 16:41:46.453"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:41:46.454" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:41:46.454" status="PASS" starttime="20170824 16:41:46.454"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:41:46.455" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:41:46.455" status="PASS" starttime="20170824 16:41:46.454"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:41:46.455" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:41:46.455" status="PASS" starttime="20170824 16:41:46.455"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:41:46.645" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:41:46.645" status="PASS" starttime="20170824 16:41:46.456"></status>
</kw>
<msg timestamp="20170824 16:41:46.645" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:41:46.645" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:46.645" status="PASS" starttime="20170824 16:41:46.456"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:41:46.646" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:46.646" status="PASS" starttime="20170824 16:41:46.646"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:41:46.647" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:46.647" status="PASS" starttime="20170824 16:41:46.646"></status>
</kw>
<status endtime="20170824 16:41:46.647" status="PASS" starttime="20170824 16:41:46.452"></status>
</kw>
<status endtime="20170824 16:41:46.647" status="PASS" starttime="20170824 16:41:46.452"></status>
</kw>
<status endtime="20170824 16:41:46.647" status="PASS" starttime="20170824 16:41:46.451"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:41:46.648" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:41:46.648" status="PASS" starttime="20170824 16:41:46.647"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:41:46.650" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:41:46.650" status="PASS" starttime="20170824 16:41:46.649"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:41:46.651" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:41:46.651" status="PASS" starttime="20170824 16:41:46.651"></status>
</kw>
<status endtime="20170824 16:41:46.651" status="PASS" starttime="20170824 16:41:46.650"></status>
</kw>
<status endtime="20170824 16:41:46.651" status="PASS" starttime="20170824 16:41:46.648"></status>
</kw>
<status endtime="20170824 16:41:46.651" status="PASS" starttime="20170824 16:41:46.648"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:41:46.715" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:41:46.715" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:46.715" status="PASS" starttime="20170824 16:41:46.651"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:41:46.717" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:41:46.717" status="PASS" starttime="20170824 16:41:46.717"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:41:46.718" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:41:46.718" status="PASS" starttime="20170824 16:41:46.718"></status>
</kw>
<status endtime="20170824 16:41:46.719" status="PASS" starttime="20170824 16:41:46.718"></status>
</kw>
<status endtime="20170824 16:41:46.719" status="PASS" starttime="20170824 16:41:46.716"></status>
</kw>
<status endtime="20170824 16:41:46.719" status="PASS" starttime="20170824 16:41:46.715"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:41:46.719" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:41:46.719" status="PASS" starttime="20170824 16:41:46.719"></status>
</kw>
<msg timestamp="20170824 16:41:46.719" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:46.719" status="PASS" starttime="20170824 16:41:46.450"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:41:46.720" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:46.720" status="PASS" starttime="20170824 16:41:46.720"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:41:46.721" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:41:46.721" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:41:46.721" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170824 16:41:46.721" status="PASS" starttime="20170824 16:41:46.720"></status>
</kw>
<msg timestamp="20170824 16:41:46.721" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 16:41:46.721" status="PASS" starttime="20170824 16:41:46.450"></status>
</kw>
<msg timestamp="20170824 16:41:46.722" level="INFO">${power_state} = On</msg>
<status endtime="20170824 16:41:46.722" status="PASS" starttime="20170824 16:41:46.449"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:41:46.722" status="PASS" starttime="20170824 16:41:46.722"></status>
</kw>
<status endtime="20170824 16:41:46.722" status="PASS" starttime="20170824 16:41:46.449"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:41:46.726" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:41:46.726" status="PASS" starttime="20170824 16:41:46.725"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:41:46.727" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:41:46.727" status="PASS" starttime="20170824 16:41:46.727"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:41:46.728" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:41:46.728" status="PASS" starttime="20170824 16:41:46.727"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:41:46.728" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:41:46.728" status="PASS" starttime="20170824 16:41:46.728"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:41:47.003" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:41:47.003" status="PASS" starttime="20170824 16:41:46.729"></status>
</kw>
<msg timestamp="20170824 16:41:47.003" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:41:47.003" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:47.003" status="PASS" starttime="20170824 16:41:46.729"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:41:47.004" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:47.004" status="PASS" starttime="20170824 16:41:47.004"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:41:47.005" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:47.005" status="PASS" starttime="20170824 16:41:47.004"></status>
</kw>
<status endtime="20170824 16:41:47.005" status="PASS" starttime="20170824 16:41:46.725"></status>
</kw>
<status endtime="20170824 16:41:47.005" status="PASS" starttime="20170824 16:41:46.724"></status>
</kw>
<status endtime="20170824 16:41:47.005" status="PASS" starttime="20170824 16:41:46.724"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:41:47.006" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:41:47.006" status="PASS" starttime="20170824 16:41:47.005"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:41:47.008" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:41:47.008" status="PASS" starttime="20170824 16:41:47.007"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:41:47.009" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:41:47.009" status="PASS" starttime="20170824 16:41:47.008"></status>
</kw>
<status endtime="20170824 16:41:47.009" status="PASS" starttime="20170824 16:41:47.008"></status>
</kw>
<status endtime="20170824 16:41:47.009" status="PASS" starttime="20170824 16:41:47.006"></status>
</kw>
<status endtime="20170824 16:41:47.009" status="PASS" starttime="20170824 16:41:47.006"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:41:47.111" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:41:47.111" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:47.111" status="PASS" starttime="20170824 16:41:47.009"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:41:47.113" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:41:47.113" status="PASS" starttime="20170824 16:41:47.112"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:41:47.114" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:41:47.114" status="PASS" starttime="20170824 16:41:47.114"></status>
</kw>
<status endtime="20170824 16:41:47.114" status="PASS" starttime="20170824 16:41:47.113"></status>
</kw>
<status endtime="20170824 16:41:47.114" status="PASS" starttime="20170824 16:41:47.112"></status>
</kw>
<status endtime="20170824 16:41:47.114" status="PASS" starttime="20170824 16:41:47.111"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:41:47.115" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:41:47.115" status="PASS" starttime="20170824 16:41:47.115"></status>
</kw>
<msg timestamp="20170824 16:41:47.115" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:47.115" status="PASS" starttime="20170824 16:41:46.723"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:41:47.116" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:47.116" status="PASS" starttime="20170824 16:41:47.115"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:41:47.117" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:41:47.117" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:41:47.117" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170824 16:41:47.117" status="PASS" starttime="20170824 16:41:47.116"></status>
</kw>
<msg timestamp="20170824 16:41:47.117" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170824 16:41:47.117" status="PASS" starttime="20170824 16:41:46.723"></status>
</kw>
<msg timestamp="20170824 16:41:47.117" level="INFO">${host_state} = Running</msg>
<status endtime="20170824 16:41:47.117" status="PASS" starttime="20170824 16:41:46.722"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170824 16:41:47.118" status="PASS" starttime="20170824 16:41:47.118"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<doc>Get the boot progress and return it.</doc>
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="utils" name="Set Boot Progress Method">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw library="BuiltIn" name="Return From Keyword">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20170824 16:41:47.121" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170824 16:41:47.121" status="PASS" starttime="20170824 16:41:47.121"></status>
</kw>
<status endtime="20170824 16:41:47.121" status="PASS" starttime="20170824 16:41:47.120"></status>
</kw>
<status endtime="20170824 16:41:47.121" status="PASS" starttime="20170824 16:41:47.120"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="utils" name="New Get Boot Progress">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:41:47.125" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:41:47.126" status="PASS" starttime="20170824 16:41:47.125"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:41:47.126" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:41:47.126" status="PASS" starttime="20170824 16:41:47.126"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:41:47.127" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:41:47.127" status="PASS" starttime="20170824 16:41:47.127"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:41:47.128" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:41:47.128" status="PASS" starttime="20170824 16:41:47.127"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:41:47.323" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:41:47.323" status="PASS" starttime="20170824 16:41:47.128"></status>
</kw>
<msg timestamp="20170824 16:41:47.323" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:41:47.323" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:47.323" status="PASS" starttime="20170824 16:41:47.128"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:41:47.324" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:47.324" status="PASS" starttime="20170824 16:41:47.323"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:41:47.324" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:47.325" status="PASS" starttime="20170824 16:41:47.324"></status>
</kw>
<status endtime="20170824 16:41:47.325" status="PASS" starttime="20170824 16:41:47.125"></status>
</kw>
<status endtime="20170824 16:41:47.325" status="PASS" starttime="20170824 16:41:47.124"></status>
</kw>
<status endtime="20170824 16:41:47.325" status="PASS" starttime="20170824 16:41:47.124"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:41:47.325" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170824 16:41:47.326" status="PASS" starttime="20170824 16:41:47.325"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:41:47.328" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:41:47.328" status="PASS" starttime="20170824 16:41:47.327"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:41:47.329" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:41:47.329" status="PASS" starttime="20170824 16:41:47.328"></status>
</kw>
<status endtime="20170824 16:41:47.329" status="PASS" starttime="20170824 16:41:47.328"></status>
</kw>
<status endtime="20170824 16:41:47.329" status="PASS" starttime="20170824 16:41:47.326"></status>
</kw>
<status endtime="20170824 16:41:47.329" status="PASS" starttime="20170824 16:41:47.326"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:41:47.432" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170824 16:41:47.432" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:47.432" status="PASS" starttime="20170824 16:41:47.329"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:41:47.434" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:41:47.434" status="PASS" starttime="20170824 16:41:47.433"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:41:47.435" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:41:47.435" status="PASS" starttime="20170824 16:41:47.434"></status>
</kw>
<status endtime="20170824 16:41:47.435" status="PASS" starttime="20170824 16:41:47.434"></status>
</kw>
<status endtime="20170824 16:41:47.435" status="PASS" starttime="20170824 16:41:47.433"></status>
</kw>
<status endtime="20170824 16:41:47.435" status="PASS" starttime="20170824 16:41:47.432"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:41:47.435" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:41:47.436" status="PASS" starttime="20170824 16:41:47.435"></status>
</kw>
<msg timestamp="20170824 16:41:47.436" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:47.436" status="PASS" starttime="20170824 16:41:47.123"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:41:47.436" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:47.436" status="PASS" starttime="20170824 16:41:47.436"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:41:47.437" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:41:47.437" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:41:47.437" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified'}</msg>
<status endtime="20170824 16:41:47.437" status="PASS" starttime="20170824 16:41:47.437"></status>
</kw>
<msg timestamp="20170824 16:41:47.437" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:41:47.438" status="PASS" starttime="20170824 16:41:47.122"></status>
</kw>
<status endtime="20170824 16:41:47.438" status="PASS" starttime="20170824 16:41:47.122"></status>
</kw>
<msg timestamp="20170824 16:41:47.438" level="INFO">${state} = Unspecified</msg>
<status endtime="20170824 16:41:47.438" status="PASS" starttime="20170824 16:41:47.122"></status>
</kw>
<msg timestamp="20170824 16:41:47.438" level="INFO">${boot_progress} = Unspecified</msg>
<status endtime="20170824 16:41:47.438" status="PASS" starttime="20170824 16:41:47.119"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>OSStart</arg>
</arguments>
<msg timestamp="20170824 16:41:47.439" level="FAIL">Unspecified != OSStart</msg>
<status endtime="20170824 16:41:47.439" status="FAIL" starttime="20170824 16:41:47.438"></status>
</kw>
<status endtime="20170824 16:41:47.439" status="FAIL" starttime="20170824 16:41:47.119"></status>
</kw>
<msg timestamp="20170824 16:41:47.439" level="INFO">${status} = False</msg>
<status endtime="20170824 16:41:47.439" status="PASS" starttime="20170824 16:41:47.119"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170824 16:41:47.440" status="PASS" starttime="20170824 16:41:47.439"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:41:47.443" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:41:47.444" status="PASS" starttime="20170824 16:41:47.443"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:41:47.445" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:41:47.445" status="PASS" starttime="20170824 16:41:47.444"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:41:47.445" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:41:47.445" status="PASS" starttime="20170824 16:41:47.445"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:41:47.446" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:41:47.446" status="PASS" starttime="20170824 16:41:47.446"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:41:47.636" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:41:47.636" status="PASS" starttime="20170824 16:41:47.447"></status>
</kw>
<msg timestamp="20170824 16:41:47.637" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:41:47.637" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:47.637" status="PASS" starttime="20170824 16:41:47.446"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:41:47.637" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:47.637" status="PASS" starttime="20170824 16:41:47.637"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:41:47.638" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:47.638" status="PASS" starttime="20170824 16:41:47.638"></status>
</kw>
<status endtime="20170824 16:41:47.638" status="PASS" starttime="20170824 16:41:47.443"></status>
</kw>
<status endtime="20170824 16:41:47.638" status="PASS" starttime="20170824 16:41:47.442"></status>
</kw>
<status endtime="20170824 16:41:47.638" status="PASS" starttime="20170824 16:41:47.442"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:41:47.639" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170824 16:41:47.639" status="PASS" starttime="20170824 16:41:47.639"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:41:47.641" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:41:47.641" status="PASS" starttime="20170824 16:41:47.640"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:41:47.642" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:41:47.642" status="PASS" starttime="20170824 16:41:47.642"></status>
</kw>
<status endtime="20170824 16:41:47.642" status="PASS" starttime="20170824 16:41:47.641"></status>
</kw>
<status endtime="20170824 16:41:47.642" status="PASS" starttime="20170824 16:41:47.640"></status>
</kw>
<status endtime="20170824 16:41:47.642" status="PASS" starttime="20170824 16:41:47.639"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:41:47.734" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170824 16:41:47.734" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:47.734" status="PASS" starttime="20170824 16:41:47.643"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:41:47.736" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:41:47.736" status="PASS" starttime="20170824 16:41:47.735"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:41:47.736" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:41:47.737" status="PASS" starttime="20170824 16:41:47.736"></status>
</kw>
<status endtime="20170824 16:41:47.737" status="PASS" starttime="20170824 16:41:47.736"></status>
</kw>
<status endtime="20170824 16:41:47.737" status="PASS" starttime="20170824 16:41:47.735"></status>
</kw>
<status endtime="20170824 16:41:47.737" status="PASS" starttime="20170824 16:41:47.734"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:41:47.737" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:41:47.737" status="PASS" starttime="20170824 16:41:47.737"></status>
</kw>
<msg timestamp="20170824 16:41:47.738" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:47.738" status="PASS" starttime="20170824 16:41:47.441"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:41:47.738" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:47.738" status="PASS" starttime="20170824 16:41:47.738"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:41:47.739" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:41:47.739" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:41:47.739" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified'}</msg>
<status endtime="20170824 16:41:47.739" status="PASS" starttime="20170824 16:41:47.739"></status>
</kw>
<msg timestamp="20170824 16:41:47.739" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:41:47.739" status="PASS" starttime="20170824 16:41:47.440"></status>
</kw>
<msg timestamp="20170824 16:41:47.739" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:41:47.740" status="PASS" starttime="20170824 16:41:47.440"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170824 16:41:47.740" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170824 16:41:47.740" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:41:47.740" status="FAIL" starttime="20170824 16:41:47.740"></status>
</kw>
<status endtime="20170824 16:41:47.741" status="FAIL" starttime="20170824 16:41:47.118"></status>
</kw>
<status endtime="20170824 16:41:47.741" status="FAIL" starttime="20170824 16:41:46.448"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:41:57.749" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:41:57.749" status="PASS" starttime="20170824 16:41:57.749"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:41:57.750" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:41:57.750" status="PASS" starttime="20170824 16:41:57.750"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:41:57.751" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:41:57.751" status="PASS" starttime="20170824 16:41:57.751"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:41:57.752" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:41:57.752" status="PASS" starttime="20170824 16:41:57.751"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:41:57.957" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:41:57.957" status="PASS" starttime="20170824 16:41:57.752"></status>
</kw>
<msg timestamp="20170824 16:41:57.957" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:41:57.957" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:57.957" status="PASS" starttime="20170824 16:41:57.752"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:41:57.958" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:57.958" status="PASS" starttime="20170824 16:41:57.958"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:41:57.959" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:57.959" status="PASS" starttime="20170824 16:41:57.958"></status>
</kw>
<status endtime="20170824 16:41:57.959" status="PASS" starttime="20170824 16:41:57.748"></status>
</kw>
<status endtime="20170824 16:41:57.959" status="PASS" starttime="20170824 16:41:57.748"></status>
</kw>
<status endtime="20170824 16:41:57.959" status="PASS" starttime="20170824 16:41:57.747"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:41:57.960" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:41:57.960" status="PASS" starttime="20170824 16:41:57.959"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:41:57.962" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:41:57.962" status="PASS" starttime="20170824 16:41:57.961"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:41:57.963" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:41:57.963" status="PASS" starttime="20170824 16:41:57.963"></status>
</kw>
<status endtime="20170824 16:41:57.963" status="PASS" starttime="20170824 16:41:57.962"></status>
</kw>
<status endtime="20170824 16:41:57.963" status="PASS" starttime="20170824 16:41:57.961"></status>
</kw>
<status endtime="20170824 16:41:57.963" status="PASS" starttime="20170824 16:41:57.960"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:41:58.028" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:41:58.028" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:58.028" status="PASS" starttime="20170824 16:41:57.964"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:41:58.030" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:41:58.030" status="PASS" starttime="20170824 16:41:58.029"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:41:58.031" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:41:58.031" status="PASS" starttime="20170824 16:41:58.031"></status>
</kw>
<status endtime="20170824 16:41:58.031" status="PASS" starttime="20170824 16:41:58.030"></status>
</kw>
<status endtime="20170824 16:41:58.031" status="PASS" starttime="20170824 16:41:58.029"></status>
</kw>
<status endtime="20170824 16:41:58.031" status="PASS" starttime="20170824 16:41:58.028"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:41:58.032" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:41:58.032" status="PASS" starttime="20170824 16:41:58.032"></status>
</kw>
<msg timestamp="20170824 16:41:58.032" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:58.032" status="PASS" starttime="20170824 16:41:57.746"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:41:58.033" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:58.033" status="PASS" starttime="20170824 16:41:58.032"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:41:58.033" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:41:58.033" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:41:58.034" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170824 16:41:58.034" status="PASS" starttime="20170824 16:41:58.033"></status>
</kw>
<msg timestamp="20170824 16:41:58.034" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 16:41:58.034" status="PASS" starttime="20170824 16:41:57.743"></status>
</kw>
<msg timestamp="20170824 16:41:58.034" level="INFO">${power_state} = On</msg>
<status endtime="20170824 16:41:58.034" status="PASS" starttime="20170824 16:41:57.742"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:41:58.035" status="PASS" starttime="20170824 16:41:58.034"></status>
</kw>
<status endtime="20170824 16:41:58.035" status="PASS" starttime="20170824 16:41:57.742"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:41:58.038" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:41:58.039" status="PASS" starttime="20170824 16:41:58.038"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:41:58.039" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:41:58.039" status="PASS" starttime="20170824 16:41:58.039"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:41:58.040" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:41:58.040" status="PASS" starttime="20170824 16:41:58.040"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:41:58.041" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:41:58.041" status="PASS" starttime="20170824 16:41:58.040"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:41:58.222" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:41:58.222" status="PASS" starttime="20170824 16:41:58.041"></status>
</kw>
<msg timestamp="20170824 16:41:58.222" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:41:58.222" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:58.222" status="PASS" starttime="20170824 16:41:58.041"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:41:58.223" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:58.223" status="PASS" starttime="20170824 16:41:58.222"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:41:58.224" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:58.224" status="PASS" starttime="20170824 16:41:58.223"></status>
</kw>
<status endtime="20170824 16:41:58.224" status="PASS" starttime="20170824 16:41:58.037"></status>
</kw>
<status endtime="20170824 16:41:58.224" status="PASS" starttime="20170824 16:41:58.037"></status>
</kw>
<status endtime="20170824 16:41:58.224" status="PASS" starttime="20170824 16:41:58.037"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:41:58.225" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:41:58.225" status="PASS" starttime="20170824 16:41:58.224"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:41:58.227" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:41:58.227" status="PASS" starttime="20170824 16:41:58.226"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:41:58.228" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:41:58.228" status="PASS" starttime="20170824 16:41:58.228"></status>
</kw>
<status endtime="20170824 16:41:58.228" status="PASS" starttime="20170824 16:41:58.227"></status>
</kw>
<status endtime="20170824 16:41:58.228" status="PASS" starttime="20170824 16:41:58.225"></status>
</kw>
<status endtime="20170824 16:41:58.228" status="PASS" starttime="20170824 16:41:58.225"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:41:58.330" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:41:58.330" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:58.330" status="PASS" starttime="20170824 16:41:58.228"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:41:58.332" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:41:58.332" status="PASS" starttime="20170824 16:41:58.331"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:41:58.333" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:41:58.333" status="PASS" starttime="20170824 16:41:58.332"></status>
</kw>
<status endtime="20170824 16:41:58.333" status="PASS" starttime="20170824 16:41:58.332"></status>
</kw>
<status endtime="20170824 16:41:58.333" status="PASS" starttime="20170824 16:41:58.331"></status>
</kw>
<status endtime="20170824 16:41:58.333" status="PASS" starttime="20170824 16:41:58.330"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:41:58.333" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:41:58.334" status="PASS" starttime="20170824 16:41:58.333"></status>
</kw>
<msg timestamp="20170824 16:41:58.334" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:58.334" status="PASS" starttime="20170824 16:41:58.036"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:41:58.334" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:58.334" status="PASS" starttime="20170824 16:41:58.334"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:41:58.335" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:41:58.335" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:41:58.335" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170824 16:41:58.335" status="PASS" starttime="20170824 16:41:58.335"></status>
</kw>
<msg timestamp="20170824 16:41:58.335" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170824 16:41:58.335" status="PASS" starttime="20170824 16:41:58.035"></status>
</kw>
<msg timestamp="20170824 16:41:58.336" level="INFO">${host_state} = Running</msg>
<status endtime="20170824 16:41:58.336" status="PASS" starttime="20170824 16:41:58.035"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170824 16:41:58.336" status="PASS" starttime="20170824 16:41:58.336"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<doc>Get the boot progress and return it.</doc>
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="utils" name="Set Boot Progress Method">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw library="BuiltIn" name="Return From Keyword">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20170824 16:41:58.339" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170824 16:41:58.339" status="PASS" starttime="20170824 16:41:58.339"></status>
</kw>
<status endtime="20170824 16:41:58.339" status="PASS" starttime="20170824 16:41:58.338"></status>
</kw>
<status endtime="20170824 16:41:58.339" status="PASS" starttime="20170824 16:41:58.338"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="utils" name="New Get Boot Progress">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:41:58.344" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:41:58.344" status="PASS" starttime="20170824 16:41:58.343"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:41:58.345" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:41:58.345" status="PASS" starttime="20170824 16:41:58.344"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:41:58.345" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:41:58.345" status="PASS" starttime="20170824 16:41:58.345"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:41:58.346" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:41:58.346" status="PASS" starttime="20170824 16:41:58.346"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:41:58.526" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:41:58.526" status="PASS" starttime="20170824 16:41:58.347"></status>
</kw>
<msg timestamp="20170824 16:41:58.526" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:41:58.526" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:58.526" status="PASS" starttime="20170824 16:41:58.346"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:41:58.527" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:58.527" status="PASS" starttime="20170824 16:41:58.527"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:41:58.528" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:58.528" status="PASS" starttime="20170824 16:41:58.527"></status>
</kw>
<status endtime="20170824 16:41:58.528" status="PASS" starttime="20170824 16:41:58.343"></status>
</kw>
<status endtime="20170824 16:41:58.528" status="PASS" starttime="20170824 16:41:58.342"></status>
</kw>
<status endtime="20170824 16:41:58.528" status="PASS" starttime="20170824 16:41:58.342"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:41:58.529" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170824 16:41:58.529" status="PASS" starttime="20170824 16:41:58.528"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:41:58.531" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:41:58.531" status="PASS" starttime="20170824 16:41:58.530"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:41:58.532" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:41:58.532" status="PASS" starttime="20170824 16:41:58.532"></status>
</kw>
<status endtime="20170824 16:41:58.532" status="PASS" starttime="20170824 16:41:58.531"></status>
</kw>
<status endtime="20170824 16:41:58.532" status="PASS" starttime="20170824 16:41:58.529"></status>
</kw>
<status endtime="20170824 16:41:58.533" status="PASS" starttime="20170824 16:41:58.529"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:41:58.649" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170824 16:41:58.649" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:58.649" status="PASS" starttime="20170824 16:41:58.533"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:41:58.651" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:41:58.651" status="PASS" starttime="20170824 16:41:58.650"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:41:58.652" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:41:58.652" status="PASS" starttime="20170824 16:41:58.652"></status>
</kw>
<status endtime="20170824 16:41:58.652" status="PASS" starttime="20170824 16:41:58.651"></status>
</kw>
<status endtime="20170824 16:41:58.652" status="PASS" starttime="20170824 16:41:58.650"></status>
</kw>
<status endtime="20170824 16:41:58.652" status="PASS" starttime="20170824 16:41:58.649"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:41:58.653" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:41:58.653" status="PASS" starttime="20170824 16:41:58.653"></status>
</kw>
<msg timestamp="20170824 16:41:58.653" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:58.653" status="PASS" starttime="20170824 16:41:58.341"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:41:58.654" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:58.654" status="PASS" starttime="20170824 16:41:58.653"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:41:58.654" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:41:58.654" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:41:58.654" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified'}</msg>
<status endtime="20170824 16:41:58.655" status="PASS" starttime="20170824 16:41:58.654"></status>
</kw>
<msg timestamp="20170824 16:41:58.655" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:41:58.655" status="PASS" starttime="20170824 16:41:58.340"></status>
</kw>
<status endtime="20170824 16:41:58.655" status="PASS" starttime="20170824 16:41:58.340"></status>
</kw>
<msg timestamp="20170824 16:41:58.655" level="INFO">${state} = Unspecified</msg>
<status endtime="20170824 16:41:58.655" status="PASS" starttime="20170824 16:41:58.339"></status>
</kw>
<msg timestamp="20170824 16:41:58.655" level="INFO">${boot_progress} = Unspecified</msg>
<status endtime="20170824 16:41:58.655" status="PASS" starttime="20170824 16:41:58.337"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>OSStart</arg>
</arguments>
<msg timestamp="20170824 16:41:58.656" level="FAIL">Unspecified != OSStart</msg>
<status endtime="20170824 16:41:58.656" status="FAIL" starttime="20170824 16:41:58.656"></status>
</kw>
<status endtime="20170824 16:41:58.656" status="FAIL" starttime="20170824 16:41:58.337"></status>
</kw>
<msg timestamp="20170824 16:41:58.656" level="INFO">${status} = False</msg>
<status endtime="20170824 16:41:58.656" status="PASS" starttime="20170824 16:41:58.337"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170824 16:41:58.657" status="PASS" starttime="20170824 16:41:58.657"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:41:58.661" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:41:58.661" status="PASS" starttime="20170824 16:41:58.660"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:41:58.662" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:41:58.662" status="PASS" starttime="20170824 16:41:58.661"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:41:58.662" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:41:58.662" status="PASS" starttime="20170824 16:41:58.662"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:41:58.663" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:41:58.663" status="PASS" starttime="20170824 16:41:58.662"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:41:58.934" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:41:58.935" status="PASS" starttime="20170824 16:41:58.664"></status>
</kw>
<msg timestamp="20170824 16:41:58.935" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:41:58.935" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:58.935" status="PASS" starttime="20170824 16:41:58.663"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:41:58.935" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:58.936" status="PASS" starttime="20170824 16:41:58.935"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:41:58.937" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:58.937" status="PASS" starttime="20170824 16:41:58.936"></status>
</kw>
<status endtime="20170824 16:41:58.937" status="PASS" starttime="20170824 16:41:58.660"></status>
</kw>
<status endtime="20170824 16:41:58.937" status="PASS" starttime="20170824 16:41:58.659"></status>
</kw>
<status endtime="20170824 16:41:58.937" status="PASS" starttime="20170824 16:41:58.659"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:41:58.938" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170824 16:41:58.938" status="PASS" starttime="20170824 16:41:58.937"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:41:58.940" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:41:58.940" status="PASS" starttime="20170824 16:41:58.939"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:41:58.941" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:41:58.941" status="PASS" starttime="20170824 16:41:58.940"></status>
</kw>
<status endtime="20170824 16:41:58.941" status="PASS" starttime="20170824 16:41:58.940"></status>
</kw>
<status endtime="20170824 16:41:58.941" status="PASS" starttime="20170824 16:41:58.938"></status>
</kw>
<status endtime="20170824 16:41:58.941" status="PASS" starttime="20170824 16:41:58.938"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:41:59.041" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170824 16:41:59.041" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:59.041" status="PASS" starttime="20170824 16:41:58.941"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:41:59.043" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:41:59.043" status="PASS" starttime="20170824 16:41:59.042"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:41:59.044" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:41:59.044" status="PASS" starttime="20170824 16:41:59.043"></status>
</kw>
<status endtime="20170824 16:41:59.044" status="PASS" starttime="20170824 16:41:59.043"></status>
</kw>
<status endtime="20170824 16:41:59.044" status="PASS" starttime="20170824 16:41:59.042"></status>
</kw>
<status endtime="20170824 16:41:59.044" status="PASS" starttime="20170824 16:41:59.041"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:41:59.044" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:41:59.045" status="PASS" starttime="20170824 16:41:59.044"></status>
</kw>
<msg timestamp="20170824 16:41:59.045" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:41:59.045" status="PASS" starttime="20170824 16:41:58.658"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:41:59.045" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:41:59.045" status="PASS" starttime="20170824 16:41:59.045"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:41:59.046" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:41:59.046" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:41:59.046" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified'}</msg>
<status endtime="20170824 16:41:59.046" status="PASS" starttime="20170824 16:41:59.046"></status>
</kw>
<msg timestamp="20170824 16:41:59.047" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:41:59.047" status="PASS" starttime="20170824 16:41:58.658"></status>
</kw>
<msg timestamp="20170824 16:41:59.047" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:41:59.047" status="PASS" starttime="20170824 16:41:58.657"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170824 16:41:59.047" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170824 16:41:59.048" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:41:59.048" status="FAIL" starttime="20170824 16:41:59.047"></status>
</kw>
<status endtime="20170824 16:41:59.048" status="FAIL" starttime="20170824 16:41:58.336"></status>
</kw>
<status endtime="20170824 16:41:59.048" status="FAIL" starttime="20170824 16:41:57.741"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:42:09.053" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:42:09.054" status="PASS" starttime="20170824 16:42:09.053"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:42:09.054" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:42:09.054" status="PASS" starttime="20170824 16:42:09.054"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:42:09.055" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:42:09.055" status="PASS" starttime="20170824 16:42:09.055"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:42:09.056" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:42:09.056" status="PASS" starttime="20170824 16:42:09.055"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:42:09.245" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:42:09.245" status="PASS" starttime="20170824 16:42:09.056"></status>
</kw>
<msg timestamp="20170824 16:42:09.245" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:42:09.245" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:42:09.245" status="PASS" starttime="20170824 16:42:09.056"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:42:09.246" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:42:09.246" status="PASS" starttime="20170824 16:42:09.246"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:42:09.247" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:42:09.247" status="PASS" starttime="20170824 16:42:09.246"></status>
</kw>
<status endtime="20170824 16:42:09.247" status="PASS" starttime="20170824 16:42:09.052"></status>
</kw>
<status endtime="20170824 16:42:09.247" status="PASS" starttime="20170824 16:42:09.052"></status>
</kw>
<status endtime="20170824 16:42:09.247" status="PASS" starttime="20170824 16:42:09.051"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:42:09.248" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:42:09.248" status="PASS" starttime="20170824 16:42:09.247"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:42:09.250" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:42:09.250" status="PASS" starttime="20170824 16:42:09.249"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:42:09.251" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:42:09.251" status="PASS" starttime="20170824 16:42:09.251"></status>
</kw>
<status endtime="20170824 16:42:09.251" status="PASS" starttime="20170824 16:42:09.250"></status>
</kw>
<status endtime="20170824 16:42:09.251" status="PASS" starttime="20170824 16:42:09.249"></status>
</kw>
<status endtime="20170824 16:42:09.251" status="PASS" starttime="20170824 16:42:09.248"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:42:09.315" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:42:09.315" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:42:09.315" status="PASS" starttime="20170824 16:42:09.252"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:42:09.317" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:42:09.317" status="PASS" starttime="20170824 16:42:09.317"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:42:09.318" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:42:09.318" status="PASS" starttime="20170824 16:42:09.318"></status>
</kw>
<status endtime="20170824 16:42:09.318" status="PASS" starttime="20170824 16:42:09.317"></status>
</kw>
<status endtime="20170824 16:42:09.318" status="PASS" starttime="20170824 16:42:09.316"></status>
</kw>
<status endtime="20170824 16:42:09.318" status="PASS" starttime="20170824 16:42:09.316"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:42:09.319" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:42:09.319" status="PASS" starttime="20170824 16:42:09.319"></status>
</kw>
<msg timestamp="20170824 16:42:09.319" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:42:09.319" status="PASS" starttime="20170824 16:42:09.050"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:42:09.320" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:42:09.320" status="PASS" starttime="20170824 16:42:09.319"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:42:09.320" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:42:09.320" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:42:09.320" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170824 16:42:09.321" status="PASS" starttime="20170824 16:42:09.320"></status>
</kw>
<msg timestamp="20170824 16:42:09.321" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 16:42:09.321" status="PASS" starttime="20170824 16:42:09.050"></status>
</kw>
<msg timestamp="20170824 16:42:09.321" level="INFO">${power_state} = On</msg>
<status endtime="20170824 16:42:09.321" status="PASS" starttime="20170824 16:42:09.049"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:42:09.322" status="PASS" starttime="20170824 16:42:09.321"></status>
</kw>
<status endtime="20170824 16:42:09.322" status="PASS" starttime="20170824 16:42:09.049"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:42:09.327" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:42:09.328" status="PASS" starttime="20170824 16:42:09.327"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:42:09.328" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:42:09.329" status="PASS" starttime="20170824 16:42:09.328"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:42:09.329" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:42:09.329" status="PASS" starttime="20170824 16:42:09.329"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:42:09.330" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:42:09.330" status="PASS" starttime="20170824 16:42:09.330"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:42:09.528" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:42:09.528" status="PASS" starttime="20170824 16:42:09.331"></status>
</kw>
<msg timestamp="20170824 16:42:09.528" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:42:09.528" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:42:09.528" status="PASS" starttime="20170824 16:42:09.330"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:42:09.529" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:42:09.529" status="PASS" starttime="20170824 16:42:09.528"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:42:09.530" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:42:09.530" status="PASS" starttime="20170824 16:42:09.529"></status>
</kw>
<status endtime="20170824 16:42:09.530" status="PASS" starttime="20170824 16:42:09.326"></status>
</kw>
<status endtime="20170824 16:42:09.530" status="PASS" starttime="20170824 16:42:09.325"></status>
</kw>
<status endtime="20170824 16:42:09.530" status="PASS" starttime="20170824 16:42:09.324"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:42:09.531" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:42:09.531" status="PASS" starttime="20170824 16:42:09.531"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:42:09.534" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:42:09.534" status="PASS" starttime="20170824 16:42:09.533"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:42:09.536" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:42:09.536" status="PASS" starttime="20170824 16:42:09.535"></status>
</kw>
<status endtime="20170824 16:42:09.536" status="PASS" starttime="20170824 16:42:09.534"></status>
</kw>
<status endtime="20170824 16:42:09.536" status="PASS" starttime="20170824 16:42:09.532"></status>
</kw>
<status endtime="20170824 16:42:09.536" status="PASS" starttime="20170824 16:42:09.532"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:42:09.628" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:42:09.628" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:42:09.628" status="PASS" starttime="20170824 16:42:09.537"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:42:09.630" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:42:09.630" status="PASS" starttime="20170824 16:42:09.629"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:42:09.631" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:42:09.631" status="PASS" starttime="20170824 16:42:09.630"></status>
</kw>
<status endtime="20170824 16:42:09.631" status="PASS" starttime="20170824 16:42:09.630"></status>
</kw>
<status endtime="20170824 16:42:09.631" status="PASS" starttime="20170824 16:42:09.629"></status>
</kw>
<status endtime="20170824 16:42:09.631" status="PASS" starttime="20170824 16:42:09.628"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:42:09.632" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:42:09.632" status="PASS" starttime="20170824 16:42:09.631"></status>
</kw>
<msg timestamp="20170824 16:42:09.632" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:42:09.632" status="PASS" starttime="20170824 16:42:09.324"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:42:09.633" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:42:09.633" status="PASS" starttime="20170824 16:42:09.632"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:42:09.633" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:42:09.633" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:42:09.633" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170824 16:42:09.633" status="PASS" starttime="20170824 16:42:09.633"></status>
</kw>
<msg timestamp="20170824 16:42:09.634" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170824 16:42:09.634" status="PASS" starttime="20170824 16:42:09.323"></status>
</kw>
<msg timestamp="20170824 16:42:09.634" level="INFO">${host_state} = Running</msg>
<status endtime="20170824 16:42:09.634" status="PASS" starttime="20170824 16:42:09.322"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170824 16:42:09.634" status="PASS" starttime="20170824 16:42:09.634"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<doc>Get the boot progress and return it.</doc>
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="utils" name="Set Boot Progress Method">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw library="BuiltIn" name="Return From Keyword">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20170824 16:42:09.638" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170824 16:42:09.638" status="PASS" starttime="20170824 16:42:09.637"></status>
</kw>
<status endtime="20170824 16:42:09.638" status="PASS" starttime="20170824 16:42:09.637"></status>
</kw>
<status endtime="20170824 16:42:09.638" status="PASS" starttime="20170824 16:42:09.636"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="utils" name="New Get Boot Progress">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:42:09.644" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:42:09.645" status="PASS" starttime="20170824 16:42:09.644"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:42:09.646" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:42:09.646" status="PASS" starttime="20170824 16:42:09.645"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:42:09.647" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:42:09.647" status="PASS" starttime="20170824 16:42:09.646"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:42:09.648" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:42:09.648" status="PASS" starttime="20170824 16:42:09.647"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:42:09.855" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:42:09.855" status="PASS" starttime="20170824 16:42:09.649"></status>
</kw>
<msg timestamp="20170824 16:42:09.855" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:42:09.856" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:42:09.856" status="PASS" starttime="20170824 16:42:09.648"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:42:09.856" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:42:09.856" status="PASS" starttime="20170824 16:42:09.856"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:42:09.857" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:42:09.857" status="PASS" starttime="20170824 16:42:09.857"></status>
</kw>
<status endtime="20170824 16:42:09.857" status="PASS" starttime="20170824 16:42:09.643"></status>
</kw>
<status endtime="20170824 16:42:09.857" status="PASS" starttime="20170824 16:42:09.642"></status>
</kw>
<status endtime="20170824 16:42:09.857" status="PASS" starttime="20170824 16:42:09.641"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:42:09.858" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170824 16:42:09.858" status="PASS" starttime="20170824 16:42:09.858"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:42:09.860" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:42:09.860" status="PASS" starttime="20170824 16:42:09.859"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:42:09.861" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:42:09.861" status="PASS" starttime="20170824 16:42:09.861"></status>
</kw>
<status endtime="20170824 16:42:09.861" status="PASS" starttime="20170824 16:42:09.860"></status>
</kw>
<status endtime="20170824 16:42:09.861" status="PASS" starttime="20170824 16:42:09.859"></status>
</kw>
<status endtime="20170824 16:42:09.862" status="PASS" starttime="20170824 16:42:09.858"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:42:09.954" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170824 16:42:09.954" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:42:09.954" status="PASS" starttime="20170824 16:42:09.862"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:42:09.955" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:42:09.956" status="PASS" starttime="20170824 16:42:09.955"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:42:09.957" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:42:09.957" status="PASS" starttime="20170824 16:42:09.957"></status>
</kw>
<status endtime="20170824 16:42:09.957" status="PASS" starttime="20170824 16:42:09.956"></status>
</kw>
<status endtime="20170824 16:42:09.957" status="PASS" starttime="20170824 16:42:09.955"></status>
</kw>
<status endtime="20170824 16:42:09.957" status="PASS" starttime="20170824 16:42:09.954"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:42:09.958" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:42:09.958" status="PASS" starttime="20170824 16:42:09.957"></status>
</kw>
<msg timestamp="20170824 16:42:09.958" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:42:09.958" status="PASS" starttime="20170824 16:42:09.640"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:42:09.958" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:42:09.959" status="PASS" starttime="20170824 16:42:09.958"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:42:09.959" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:42:09.959" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:42:09.959" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified'}</msg>
<status endtime="20170824 16:42:09.959" status="PASS" starttime="20170824 16:42:09.959"></status>
</kw>
<msg timestamp="20170824 16:42:09.960" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:42:09.960" status="PASS" starttime="20170824 16:42:09.640"></status>
</kw>
<status endtime="20170824 16:42:09.960" status="PASS" starttime="20170824 16:42:09.639"></status>
</kw>
<msg timestamp="20170824 16:42:09.960" level="INFO">${state} = Unspecified</msg>
<status endtime="20170824 16:42:09.960" status="PASS" starttime="20170824 16:42:09.638"></status>
</kw>
<msg timestamp="20170824 16:42:09.960" level="INFO">${boot_progress} = Unspecified</msg>
<status endtime="20170824 16:42:09.960" status="PASS" starttime="20170824 16:42:09.636"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>OSStart</arg>
</arguments>
<msg timestamp="20170824 16:42:09.961" level="FAIL">Unspecified != OSStart</msg>
<status endtime="20170824 16:42:09.961" status="FAIL" starttime="20170824 16:42:09.961"></status>
</kw>
<status endtime="20170824 16:42:09.961" status="FAIL" starttime="20170824 16:42:09.635"></status>
</kw>
<msg timestamp="20170824 16:42:09.961" level="INFO">${status} = False</msg>
<status endtime="20170824 16:42:09.961" status="PASS" starttime="20170824 16:42:09.635"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170824 16:42:09.962" status="PASS" starttime="20170824 16:42:09.962"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:42:09.966" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:42:09.966" status="PASS" starttime="20170824 16:42:09.965"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:42:09.967" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:42:09.967" status="PASS" starttime="20170824 16:42:09.966"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:42:09.967" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:42:09.967" status="PASS" starttime="20170824 16:42:09.967"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:42:09.968" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:42:09.968" status="PASS" starttime="20170824 16:42:09.967"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:42:10.250" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:42:10.250" status="PASS" starttime="20170824 16:42:09.969"></status>
</kw>
<msg timestamp="20170824 16:42:10.250" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:42:10.250" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:42:10.250" status="PASS" starttime="20170824 16:42:09.968"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:42:10.251" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:42:10.251" status="PASS" starttime="20170824 16:42:10.250"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:42:10.252" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:42:10.252" status="PASS" starttime="20170824 16:42:10.251"></status>
</kw>
<status endtime="20170824 16:42:10.252" status="PASS" starttime="20170824 16:42:09.965"></status>
</kw>
<status endtime="20170824 16:42:10.252" status="PASS" starttime="20170824 16:42:09.964"></status>
</kw>
<status endtime="20170824 16:42:10.252" status="PASS" starttime="20170824 16:42:09.964"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:42:10.253" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170824 16:42:10.253" status="PASS" starttime="20170824 16:42:10.253"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:42:10.257" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:42:10.257" status="PASS" starttime="20170824 16:42:10.255"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:42:10.258" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170824 16:42:10.258" status="PASS" starttime="20170824 16:42:10.258"></status>
</kw>
<status endtime="20170824 16:42:10.258" status="PASS" starttime="20170824 16:42:10.257"></status>
</kw>
<status endtime="20170824 16:42:10.258" status="PASS" starttime="20170824 16:42:10.254"></status>
</kw>
<status endtime="20170824 16:42:10.258" status="PASS" starttime="20170824 16:42:10.254"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:42:10.351" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170824 16:42:10.351" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:42:10.351" status="PASS" starttime="20170824 16:42:10.259"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:42:10.353" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:42:10.353" status="PASS" starttime="20170824 16:42:10.353"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:42:10.354" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:42:10.354" status="PASS" starttime="20170824 16:42:10.354"></status>
</kw>
<status endtime="20170824 16:42:10.354" status="PASS" starttime="20170824 16:42:10.353"></status>
</kw>
<status endtime="20170824 16:42:10.354" status="PASS" starttime="20170824 16:42:10.352"></status>
</kw>
<status endtime="20170824 16:42:10.354" status="PASS" starttime="20170824 16:42:10.352"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:42:10.355" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:42:10.355" status="PASS" starttime="20170824 16:42:10.355"></status>
</kw>
<msg timestamp="20170824 16:42:10.355" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:42:10.355" status="PASS" starttime="20170824 16:42:09.963"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:42:10.356" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:42:10.356" status="PASS" starttime="20170824 16:42:10.355"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:42:10.356" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:42:10.356" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:42:10.356" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified'}</msg>
<status endtime="20170824 16:42:10.356" status="PASS" starttime="20170824 16:42:10.356"></status>
</kw>
<msg timestamp="20170824 16:42:10.357" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:42:10.357" status="PASS" starttime="20170824 16:42:09.963"></status>
</kw>
<msg timestamp="20170824 16:42:10.357" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:42:10.357" status="PASS" starttime="20170824 16:42:09.962"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170824 16:42:10.358" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170824 16:42:10.358" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170824 16:42:10.358" status="FAIL" starttime="20170824 16:42:10.357"></status>
</kw>
<status endtime="20170824 16:42:10.358" status="FAIL" starttime="20170824 16:42:09.635"></status>
</kw>
<status endtime="20170824 16:42:10.358" status="FAIL" starttime="20170824 16:42:09.048"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:42:20.363" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:42:20.364" status="PASS" starttime="20170824 16:42:20.363"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:42:20.365" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:42:20.365" status="PASS" starttime="20170824 16:42:20.364"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:42:20.365" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:42:20.365" status="PASS" starttime="20170824 16:42:20.365"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:42:20.366" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:42:20.366" status="PASS" starttime="20170824 16:42:20.365"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:42:20.570" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:42:20.570" status="PASS" starttime="20170824 16:42:20.367"></status>
</kw>
<msg timestamp="20170824 16:42:20.571" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:42:20.571" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:42:20.571" status="PASS" starttime="20170824 16:42:20.366"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:42:20.572" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:42:20.572" status="PASS" starttime="20170824 16:42:20.571"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:42:20.573" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:42:20.573" status="PASS" starttime="20170824 16:42:20.572"></status>
</kw>
<status endtime="20170824 16:42:20.573" status="PASS" starttime="20170824 16:42:20.363"></status>
</kw>
<status endtime="20170824 16:42:20.573" status="PASS" starttime="20170824 16:42:20.362"></status>
</kw>
<status endtime="20170824 16:42:20.573" status="PASS" starttime="20170824 16:42:20.361"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:42:20.574" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:42:20.574" status="PASS" starttime="20170824 16:42:20.573"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:42:20.577" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:42:20.577" status="PASS" starttime="20170824 16:42:20.576"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:42:20.579" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:42:20.579" status="PASS" starttime="20170824 16:42:20.578"></status>
</kw>
<status endtime="20170824 16:42:20.579" status="PASS" starttime="20170824 16:42:20.577"></status>
</kw>
<status endtime="20170824 16:42:20.579" status="PASS" starttime="20170824 16:42:20.575"></status>
</kw>
<status endtime="20170824 16:42:20.579" status="PASS" starttime="20170824 16:42:20.574"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:42:20.643" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:42:20.644" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:42:20.644" status="PASS" starttime="20170824 16:42:20.579"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:42:20.645" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:42:20.645" status="PASS" starttime="20170824 16:42:20.645"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:42:20.646" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:42:20.646" status="PASS" starttime="20170824 16:42:20.646"></status>
</kw>
<status endtime="20170824 16:42:20.647" status="PASS" starttime="20170824 16:42:20.646"></status>
</kw>
<status endtime="20170824 16:42:20.647" status="PASS" starttime="20170824 16:42:20.644"></status>
</kw>
<status endtime="20170824 16:42:20.647" status="PASS" starttime="20170824 16:42:20.644"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:42:20.647" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:42:20.647" status="PASS" starttime="20170824 16:42:20.647"></status>
</kw>
<msg timestamp="20170824 16:42:20.647" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:42:20.647" status="PASS" starttime="20170824 16:42:20.361"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:42:20.648" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:42:20.648" status="PASS" starttime="20170824 16:42:20.648"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:42:20.649" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:42:20.649" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:42:20.649" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170824 16:42:20.649" status="PASS" starttime="20170824 16:42:20.648"></status>
</kw>
<msg timestamp="20170824 16:42:20.649" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 16:42:20.649" status="PASS" starttime="20170824 16:42:20.360"></status>
</kw>
<msg timestamp="20170824 16:42:20.649" level="INFO">${power_state} = On</msg>
<status endtime="20170824 16:42:20.649" status="PASS" starttime="20170824 16:42:20.360"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:42:20.650" status="PASS" starttime="20170824 16:42:20.650"></status>
</kw>
<status endtime="20170824 16:42:20.650" status="PASS" starttime="20170824 16:42:20.359"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:42:20.654" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:42:20.654" status="PASS" starttime="20170824 16:42:20.654"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:42:20.655" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:42:20.655" status="PASS" starttime="20170824 16:42:20.655"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:42:20.656" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:42:20.656" status="PASS" starttime="20170824 16:42:20.655"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:42:20.656" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:42:20.656" status="PASS" starttime="20170824 16:42:20.656"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:42:20.854" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:42:20.854" status="PASS" starttime="20170824 16:42:20.657"></status>
</kw>
<msg timestamp="20170824 16:42:20.854" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:42:20.854" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:42:20.854" status="PASS" starttime="20170824 16:42:20.657"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:42:20.855" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:42:20.855" status="PASS" starttime="20170824 16:42:20.855"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:42:20.856" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:42:20.856" status="PASS" starttime="20170824 16:42:20.855"></status>
</kw>
<status endtime="20170824 16:42:20.856" status="PASS" starttime="20170824 16:42:20.653"></status>
</kw>
<status endtime="20170824 16:42:20.856" status="PASS" starttime="20170824 16:42:20.652"></status>
</kw>
<status endtime="20170824 16:42:20.856" status="PASS" starttime="20170824 16:42:20.652"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:42:20.857" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:42:20.857" status="PASS" starttime="20170824 16:42:20.856"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:42:20.859" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:42:20.859" status="PASS" starttime="20170824 16:42:20.858"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:42:20.860" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:42:20.860" status="PASS" starttime="20170824 16:42:20.860"></status>
</kw>
<status endtime="20170824 16:42:20.860" status="PASS" starttime="20170824 16:42:20.859"></status>
</kw>
<status endtime="20170824 16:42:20.860" status="PASS" starttime="20170824 16:42:20.858"></status>
</kw>
<status endtime="20170824 16:42:20.860" status="PASS" starttime="20170824 16:42:20.857"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:42:20.983" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:42:20.983" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:42:20.983" status="PASS" starttime="20170824 16:42:20.860"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:42:20.985" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:42:20.985" status="PASS" starttime="20170824 16:42:20.985"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:42:20.986" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:42:20.986" status="PASS" starttime="20170824 16:42:20.986"></status>
</kw>
<status endtime="20170824 16:42:20.987" status="PASS" starttime="20170824 16:42:20.985"></status>
</kw>
<status endtime="20170824 16:42:20.987" status="PASS" starttime="20170824 16:42:20.984"></status>
</kw>
<status endtime="20170824 16:42:20.987" status="PASS" starttime="20170824 16:42:20.984"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:42:20.987" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:42:20.987" status="PASS" starttime="20170824 16:42:20.987"></status>
</kw>
<msg timestamp="20170824 16:42:20.987" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:42:20.987" status="PASS" starttime="20170824 16:42:20.651"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:42:20.988" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:42:20.988" status="PASS" starttime="20170824 16:42:20.988"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:42:20.989" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:42:20.989" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:42:20.989" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170824 16:42:20.989" status="PASS" starttime="20170824 16:42:20.988"></status>
</kw>
<msg timestamp="20170824 16:42:20.989" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170824 16:42:20.989" status="PASS" starttime="20170824 16:42:20.651"></status>
</kw>
<msg timestamp="20170824 16:42:20.989" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170824 16:42:20.989" status="PASS" starttime="20170824 16:42:20.650"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170824 16:42:20.990" level="FAIL">Running != Quiesced</msg>
<status endtime="20170824 16:42:20.990" status="FAIL" starttime="20170824 16:42:20.990"></status>
</kw>
<status endtime="20170824 16:42:20.990" status="FAIL" starttime="20170824 16:42:20.359"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:42:30.997" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:42:30.997" status="PASS" starttime="20170824 16:42:30.996"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:42:30.998" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:42:30.998" status="PASS" starttime="20170824 16:42:30.997"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:42:30.998" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:42:30.998" status="PASS" starttime="20170824 16:42:30.998"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:42:30.999" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:42:30.999" status="PASS" starttime="20170824 16:42:30.998"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:42:31.196" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:42:31.196" status="PASS" starttime="20170824 16:42:31.000"></status>
</kw>
<msg timestamp="20170824 16:42:31.196" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:42:31.197" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:42:31.197" status="PASS" starttime="20170824 16:42:30.999"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:42:31.197" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:42:31.197" status="PASS" starttime="20170824 16:42:31.197"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:42:31.198" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:42:31.198" status="PASS" starttime="20170824 16:42:31.198"></status>
</kw>
<status endtime="20170824 16:42:31.198" status="PASS" starttime="20170824 16:42:30.996"></status>
</kw>
<status endtime="20170824 16:42:31.198" status="PASS" starttime="20170824 16:42:30.995"></status>
</kw>
<status endtime="20170824 16:42:31.198" status="PASS" starttime="20170824 16:42:30.994"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:42:31.199" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:42:31.199" status="PASS" starttime="20170824 16:42:31.199"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:42:31.201" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:42:31.202" status="PASS" starttime="20170824 16:42:31.200"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:42:31.202" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:42:31.203" status="PASS" starttime="20170824 16:42:31.202"></status>
</kw>
<status endtime="20170824 16:42:31.203" status="PASS" starttime="20170824 16:42:31.202"></status>
</kw>
<status endtime="20170824 16:42:31.203" status="PASS" starttime="20170824 16:42:31.200"></status>
</kw>
<status endtime="20170824 16:42:31.203" status="PASS" starttime="20170824 16:42:31.199"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:42:31.306" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:42:31.306" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:42:31.307" status="PASS" starttime="20170824 16:42:31.203"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:42:31.309" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:42:31.309" status="PASS" starttime="20170824 16:42:31.308"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:42:31.309" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:42:31.310" status="PASS" starttime="20170824 16:42:31.309"></status>
</kw>
<status endtime="20170824 16:42:31.310" status="PASS" starttime="20170824 16:42:31.309"></status>
</kw>
<status endtime="20170824 16:42:31.310" status="PASS" starttime="20170824 16:42:31.307"></status>
</kw>
<status endtime="20170824 16:42:31.310" status="PASS" starttime="20170824 16:42:31.307"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:42:31.310" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:42:31.310" status="PASS" starttime="20170824 16:42:31.310"></status>
</kw>
<msg timestamp="20170824 16:42:31.311" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:42:31.311" status="PASS" starttime="20170824 16:42:30.994"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:42:31.311" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:42:31.311" status="PASS" starttime="20170824 16:42:31.311"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:42:31.312" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:42:31.312" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:42:31.312" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170824 16:42:31.312" status="PASS" starttime="20170824 16:42:31.312"></status>
</kw>
<msg timestamp="20170824 16:42:31.312" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 16:42:31.313" status="PASS" starttime="20170824 16:42:30.993"></status>
</kw>
<msg timestamp="20170824 16:42:31.313" level="INFO">${power_state} = On</msg>
<status endtime="20170824 16:42:31.313" status="PASS" starttime="20170824 16:42:30.992"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:42:31.313" status="PASS" starttime="20170824 16:42:31.313"></status>
</kw>
<status endtime="20170824 16:42:31.313" status="PASS" starttime="20170824 16:42:30.991"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:42:31.317" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:42:31.317" status="PASS" starttime="20170824 16:42:31.317"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:42:31.318" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:42:31.318" status="PASS" starttime="20170824 16:42:31.318"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:42:31.319" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:42:31.319" status="PASS" starttime="20170824 16:42:31.318"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:42:31.319" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:42:31.319" status="PASS" starttime="20170824 16:42:31.319"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:42:31.574" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:42:31.575" status="PASS" starttime="20170824 16:42:31.320"></status>
</kw>
<msg timestamp="20170824 16:42:31.575" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:42:31.575" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:42:31.575" status="PASS" starttime="20170824 16:42:31.320"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:42:31.575" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:42:31.576" status="PASS" starttime="20170824 16:42:31.575"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:42:31.576" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:42:31.576" status="PASS" starttime="20170824 16:42:31.576"></status>
</kw>
<status endtime="20170824 16:42:31.577" status="PASS" starttime="20170824 16:42:31.316"></status>
</kw>
<status endtime="20170824 16:42:31.577" status="PASS" starttime="20170824 16:42:31.316"></status>
</kw>
<status endtime="20170824 16:42:31.577" status="PASS" starttime="20170824 16:42:31.315"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:42:31.577" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:42:31.577" status="PASS" starttime="20170824 16:42:31.577"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:42:31.579" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:42:31.579" status="PASS" starttime="20170824 16:42:31.579"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:42:31.580" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:42:31.580" status="PASS" starttime="20170824 16:42:31.580"></status>
</kw>
<status endtime="20170824 16:42:31.581" status="PASS" starttime="20170824 16:42:31.580"></status>
</kw>
<status endtime="20170824 16:42:31.581" status="PASS" starttime="20170824 16:42:31.578"></status>
</kw>
<status endtime="20170824 16:42:31.581" status="PASS" starttime="20170824 16:42:31.578"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:42:31.673" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:42:31.673" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:42:31.673" status="PASS" starttime="20170824 16:42:31.581"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:42:31.675" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:42:31.675" status="PASS" starttime="20170824 16:42:31.674"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:42:31.676" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:42:31.676" status="PASS" starttime="20170824 16:42:31.675"></status>
</kw>
<status endtime="20170824 16:42:31.676" status="PASS" starttime="20170824 16:42:31.675"></status>
</kw>
<status endtime="20170824 16:42:31.676" status="PASS" starttime="20170824 16:42:31.674"></status>
</kw>
<status endtime="20170824 16:42:31.676" status="PASS" starttime="20170824 16:42:31.673"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:42:31.676" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:42:31.676" status="PASS" starttime="20170824 16:42:31.676"></status>
</kw>
<msg timestamp="20170824 16:42:31.677" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:42:31.677" status="PASS" starttime="20170824 16:42:31.315"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:42:31.677" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:42:31.677" status="PASS" starttime="20170824 16:42:31.677"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:42:31.678" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:42:31.678" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:42:31.678" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170824 16:42:31.678" status="PASS" starttime="20170824 16:42:31.678"></status>
</kw>
<msg timestamp="20170824 16:42:31.678" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170824 16:42:31.678" status="PASS" starttime="20170824 16:42:31.314"></status>
</kw>
<msg timestamp="20170824 16:42:31.679" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170824 16:42:31.679" status="PASS" starttime="20170824 16:42:31.314"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170824 16:42:31.679" level="FAIL">Running != Quiesced</msg>
<status endtime="20170824 16:42:31.679" status="FAIL" starttime="20170824 16:42:31.679"></status>
</kw>
<status endtime="20170824 16:42:31.680" status="FAIL" starttime="20170824 16:42:30.991"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:42:41.685" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:42:41.685" status="PASS" starttime="20170824 16:42:41.685"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:42:41.686" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:42:41.686" status="PASS" starttime="20170824 16:42:41.686"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:42:41.687" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:42:41.687" status="PASS" starttime="20170824 16:42:41.686"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:42:41.687" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:42:41.687" status="PASS" starttime="20170824 16:42:41.687"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:42:41.877" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:42:41.877" status="PASS" starttime="20170824 16:42:41.688"></status>
</kw>
<msg timestamp="20170824 16:42:41.878" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:42:41.878" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:42:41.878" status="PASS" starttime="20170824 16:42:41.688"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:42:41.878" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:42:41.878" status="PASS" starttime="20170824 16:42:41.878"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:42:41.879" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:42:41.879" status="PASS" starttime="20170824 16:42:41.879"></status>
</kw>
<status endtime="20170824 16:42:41.879" status="PASS" starttime="20170824 16:42:41.684"></status>
</kw>
<status endtime="20170824 16:42:41.879" status="PASS" starttime="20170824 16:42:41.683"></status>
</kw>
<status endtime="20170824 16:42:41.879" status="PASS" starttime="20170824 16:42:41.683"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:42:41.880" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:42:41.880" status="PASS" starttime="20170824 16:42:41.880"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:42:41.882" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:42:41.882" status="PASS" starttime="20170824 16:42:41.881"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:42:41.883" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:42:41.883" status="PASS" starttime="20170824 16:42:41.883"></status>
</kw>
<status endtime="20170824 16:42:41.883" status="PASS" starttime="20170824 16:42:41.882"></status>
</kw>
<status endtime="20170824 16:42:41.883" status="PASS" starttime="20170824 16:42:41.881"></status>
</kw>
<status endtime="20170824 16:42:41.883" status="PASS" starttime="20170824 16:42:41.880"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:42:41.958" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:42:41.958" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:42:41.958" status="PASS" starttime="20170824 16:42:41.884"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:42:41.960" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:42:41.960" status="PASS" starttime="20170824 16:42:41.960"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:42:41.962" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:42:41.962" status="PASS" starttime="20170824 16:42:41.961"></status>
</kw>
<status endtime="20170824 16:42:41.962" status="PASS" starttime="20170824 16:42:41.960"></status>
</kw>
<status endtime="20170824 16:42:41.962" status="PASS" starttime="20170824 16:42:41.959"></status>
</kw>
<status endtime="20170824 16:42:41.962" status="PASS" starttime="20170824 16:42:41.959"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:42:41.962" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:42:41.962" status="PASS" starttime="20170824 16:42:41.962"></status>
</kw>
<msg timestamp="20170824 16:42:41.963" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:42:41.963" status="PASS" starttime="20170824 16:42:41.682"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:42:41.963" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:42:41.963" status="PASS" starttime="20170824 16:42:41.963"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:42:41.964" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:42:41.964" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:42:41.964" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170824 16:42:41.964" status="PASS" starttime="20170824 16:42:41.964"></status>
</kw>
<msg timestamp="20170824 16:42:41.964" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 16:42:41.965" status="PASS" starttime="20170824 16:42:41.681"></status>
</kw>
<msg timestamp="20170824 16:42:41.965" level="INFO">${power_state} = On</msg>
<status endtime="20170824 16:42:41.965" status="PASS" starttime="20170824 16:42:41.681"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:42:41.965" status="PASS" starttime="20170824 16:42:41.965"></status>
</kw>
<status endtime="20170824 16:42:41.965" status="PASS" starttime="20170824 16:42:41.681"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:42:41.969" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:42:41.969" status="PASS" starttime="20170824 16:42:41.969"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:42:41.970" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:42:41.970" status="PASS" starttime="20170824 16:42:41.970"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:42:41.971" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:42:41.971" status="PASS" starttime="20170824 16:42:41.970"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:42:41.971" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:42:41.971" status="PASS" starttime="20170824 16:42:41.971"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:42:42.202" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:42:42.202" status="PASS" starttime="20170824 16:42:41.972"></status>
</kw>
<msg timestamp="20170824 16:42:42.202" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:42:42.203" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:42:42.203" status="PASS" starttime="20170824 16:42:41.972"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:42:42.203" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:42:42.203" status="PASS" starttime="20170824 16:42:42.203"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:42:42.204" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:42:42.204" status="PASS" starttime="20170824 16:42:42.204"></status>
</kw>
<status endtime="20170824 16:42:42.204" status="PASS" starttime="20170824 16:42:41.968"></status>
</kw>
<status endtime="20170824 16:42:42.204" status="PASS" starttime="20170824 16:42:41.968"></status>
</kw>
<status endtime="20170824 16:42:42.204" status="PASS" starttime="20170824 16:42:41.967"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:42:42.205" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:42:42.205" status="PASS" starttime="20170824 16:42:42.205"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:42:42.207" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:42:42.207" status="PASS" starttime="20170824 16:42:42.206"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:42:42.208" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:42:42.209" status="PASS" starttime="20170824 16:42:42.208"></status>
</kw>
<status endtime="20170824 16:42:42.209" status="PASS" starttime="20170824 16:42:42.208"></status>
</kw>
<status endtime="20170824 16:42:42.209" status="PASS" starttime="20170824 16:42:42.206"></status>
</kw>
<status endtime="20170824 16:42:42.209" status="PASS" starttime="20170824 16:42:42.205"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:42:42.340" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:42:42.340" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:42:42.340" status="PASS" starttime="20170824 16:42:42.209"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:42:42.342" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:42:42.342" status="PASS" starttime="20170824 16:42:42.342"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:42:42.343" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:42:42.343" status="PASS" starttime="20170824 16:42:42.343"></status>
</kw>
<status endtime="20170824 16:42:42.343" status="PASS" starttime="20170824 16:42:42.342"></status>
</kw>
<status endtime="20170824 16:42:42.344" status="PASS" starttime="20170824 16:42:42.341"></status>
</kw>
<status endtime="20170824 16:42:42.344" status="PASS" starttime="20170824 16:42:42.341"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:42:42.344" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:42:42.344" status="PASS" starttime="20170824 16:42:42.344"></status>
</kw>
<msg timestamp="20170824 16:42:42.344" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:42:42.344" status="PASS" starttime="20170824 16:42:41.966"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:42:42.345" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:42:42.345" status="PASS" starttime="20170824 16:42:42.345"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:42:42.345" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:42:42.346" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:42:42.346" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170824 16:42:42.346" status="PASS" starttime="20170824 16:42:42.345"></status>
</kw>
<msg timestamp="20170824 16:42:42.346" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170824 16:42:42.346" status="PASS" starttime="20170824 16:42:41.966"></status>
</kw>
<msg timestamp="20170824 16:42:42.346" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170824 16:42:42.346" status="PASS" starttime="20170824 16:42:41.966"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170824 16:42:42.347" level="FAIL">Running != Quiesced</msg>
<status endtime="20170824 16:42:42.347" status="FAIL" starttime="20170824 16:42:42.347"></status>
</kw>
<status endtime="20170824 16:42:42.347" status="FAIL" starttime="20170824 16:42:41.680"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:42:52.352" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:42:52.353" status="PASS" starttime="20170824 16:42:52.352"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:42:52.354" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:42:52.354" status="PASS" starttime="20170824 16:42:52.353"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:42:52.355" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:42:52.355" status="PASS" starttime="20170824 16:42:52.354"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:42:52.356" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:42:52.356" status="PASS" starttime="20170824 16:42:52.355"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:42:52.550" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:42:52.550" status="PASS" starttime="20170824 16:42:52.357"></status>
</kw>
<msg timestamp="20170824 16:42:52.550" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:42:52.550" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:42:52.550" status="PASS" starttime="20170824 16:42:52.357"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:42:52.551" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:42:52.551" status="PASS" starttime="20170824 16:42:52.550"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:42:52.552" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:42:52.552" status="PASS" starttime="20170824 16:42:52.551"></status>
</kw>
<status endtime="20170824 16:42:52.552" status="PASS" starttime="20170824 16:42:52.351"></status>
</kw>
<status endtime="20170824 16:42:52.552" status="PASS" starttime="20170824 16:42:52.351"></status>
</kw>
<status endtime="20170824 16:42:52.552" status="PASS" starttime="20170824 16:42:52.350"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:42:52.553" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:42:52.553" status="PASS" starttime="20170824 16:42:52.552"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:42:52.555" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:42:52.555" status="PASS" starttime="20170824 16:42:52.554"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:42:52.556" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:42:52.556" status="PASS" starttime="20170824 16:42:52.556"></status>
</kw>
<status endtime="20170824 16:42:52.556" status="PASS" starttime="20170824 16:42:52.555"></status>
</kw>
<status endtime="20170824 16:42:52.556" status="PASS" starttime="20170824 16:42:52.553"></status>
</kw>
<status endtime="20170824 16:42:52.556" status="PASS" starttime="20170824 16:42:52.553"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:42:52.621" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:42:52.621" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:42:52.621" status="PASS" starttime="20170824 16:42:52.556"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:42:52.623" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:42:52.623" status="PASS" starttime="20170824 16:42:52.622"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:42:52.624" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:42:52.624" status="PASS" starttime="20170824 16:42:52.624"></status>
</kw>
<status endtime="20170824 16:42:52.624" status="PASS" starttime="20170824 16:42:52.623"></status>
</kw>
<status endtime="20170824 16:42:52.624" status="PASS" starttime="20170824 16:42:52.622"></status>
</kw>
<status endtime="20170824 16:42:52.624" status="PASS" starttime="20170824 16:42:52.622"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:42:52.625" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:42:52.625" status="PASS" starttime="20170824 16:42:52.625"></status>
</kw>
<msg timestamp="20170824 16:42:52.625" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:42:52.625" status="PASS" starttime="20170824 16:42:52.350"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:42:52.626" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:42:52.626" status="PASS" starttime="20170824 16:42:52.626"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:42:52.627" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:42:52.627" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:42:52.627" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170824 16:42:52.628" status="PASS" starttime="20170824 16:42:52.627"></status>
</kw>
<msg timestamp="20170824 16:42:52.628" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 16:42:52.628" status="PASS" starttime="20170824 16:42:52.349"></status>
</kw>
<msg timestamp="20170824 16:42:52.628" level="INFO">${power_state} = On</msg>
<status endtime="20170824 16:42:52.628" status="PASS" starttime="20170824 16:42:52.349"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:42:52.629" status="PASS" starttime="20170824 16:42:52.629"></status>
</kw>
<status endtime="20170824 16:42:52.629" status="PASS" starttime="20170824 16:42:52.348"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:42:52.635" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:42:52.635" status="PASS" starttime="20170824 16:42:52.634"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:42:52.636" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:42:52.636" status="PASS" starttime="20170824 16:42:52.636"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:42:52.637" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:42:52.637" status="PASS" starttime="20170824 16:42:52.637"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:42:52.638" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:42:52.638" status="PASS" starttime="20170824 16:42:52.638"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:42:52.821" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:42:52.821" status="PASS" starttime="20170824 16:42:52.639"></status>
</kw>
<msg timestamp="20170824 16:42:52.821" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:42:52.821" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:42:52.822" status="PASS" starttime="20170824 16:42:52.638"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:42:52.822" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:42:52.822" status="PASS" starttime="20170824 16:42:52.822"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:42:52.823" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:42:52.823" status="PASS" starttime="20170824 16:42:52.822"></status>
</kw>
<status endtime="20170824 16:42:52.823" status="PASS" starttime="20170824 16:42:52.634"></status>
</kw>
<status endtime="20170824 16:42:52.823" status="PASS" starttime="20170824 16:42:52.633"></status>
</kw>
<status endtime="20170824 16:42:52.823" status="PASS" starttime="20170824 16:42:52.632"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:42:52.824" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:42:52.824" status="PASS" starttime="20170824 16:42:52.823"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:42:52.826" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:42:52.826" status="PASS" starttime="20170824 16:42:52.825"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:42:52.827" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:42:52.827" status="PASS" starttime="20170824 16:42:52.827"></status>
</kw>
<status endtime="20170824 16:42:52.827" status="PASS" starttime="20170824 16:42:52.826"></status>
</kw>
<status endtime="20170824 16:42:52.827" status="PASS" starttime="20170824 16:42:52.825"></status>
</kw>
<status endtime="20170824 16:42:52.827" status="PASS" starttime="20170824 16:42:52.824"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:42:52.937" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:42:52.937" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:42:52.937" status="PASS" starttime="20170824 16:42:52.827"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:42:52.939" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:42:52.939" status="PASS" starttime="20170824 16:42:52.939"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:42:52.941" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:42:52.941" status="PASS" starttime="20170824 16:42:52.941"></status>
</kw>
<status endtime="20170824 16:42:52.941" status="PASS" starttime="20170824 16:42:52.940"></status>
</kw>
<status endtime="20170824 16:42:52.941" status="PASS" starttime="20170824 16:42:52.938"></status>
</kw>
<status endtime="20170824 16:42:52.941" status="PASS" starttime="20170824 16:42:52.937"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:42:52.942" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:42:52.942" status="PASS" starttime="20170824 16:42:52.942"></status>
</kw>
<msg timestamp="20170824 16:42:52.942" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:42:52.942" status="PASS" starttime="20170824 16:42:52.631"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:42:52.943" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:42:52.943" status="PASS" starttime="20170824 16:42:52.942"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:42:52.944" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:42:52.944" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:42:52.944" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170824 16:42:52.944" status="PASS" starttime="20170824 16:42:52.943"></status>
</kw>
<msg timestamp="20170824 16:42:52.944" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170824 16:42:52.944" status="PASS" starttime="20170824 16:42:52.630"></status>
</kw>
<msg timestamp="20170824 16:42:52.944" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170824 16:42:52.944" status="PASS" starttime="20170824 16:42:52.630"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170824 16:42:52.945" level="FAIL">Running != Quiesced</msg>
<status endtime="20170824 16:42:52.945" status="FAIL" starttime="20170824 16:42:52.945"></status>
</kw>
<status endtime="20170824 16:42:52.945" status="FAIL" starttime="20170824 16:42:52.348"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:43:02.950" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:43:02.951" status="PASS" starttime="20170824 16:43:02.950"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:43:02.951" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:43:02.951" status="PASS" starttime="20170824 16:43:02.951"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:43:02.952" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:43:02.952" status="PASS" starttime="20170824 16:43:02.952"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:43:02.953" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:43:02.953" status="PASS" starttime="20170824 16:43:02.952"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:43:03.139" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:43:03.139" status="PASS" starttime="20170824 16:43:02.953"></status>
</kw>
<msg timestamp="20170824 16:43:03.140" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:43:03.140" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:43:03.140" status="PASS" starttime="20170824 16:43:02.953"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:43:03.140" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:43:03.140" status="PASS" starttime="20170824 16:43:03.140"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:43:03.141" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:43:03.141" status="PASS" starttime="20170824 16:43:03.141"></status>
</kw>
<status endtime="20170824 16:43:03.141" status="PASS" starttime="20170824 16:43:02.949"></status>
</kw>
<status endtime="20170824 16:43:03.141" status="PASS" starttime="20170824 16:43:02.949"></status>
</kw>
<status endtime="20170824 16:43:03.141" status="PASS" starttime="20170824 16:43:02.948"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:43:03.142" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:43:03.142" status="PASS" starttime="20170824 16:43:03.142"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:43:03.144" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:43:03.144" status="PASS" starttime="20170824 16:43:03.144"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:43:03.145" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:43:03.145" status="PASS" starttime="20170824 16:43:03.145"></status>
</kw>
<status endtime="20170824 16:43:03.145" status="PASS" starttime="20170824 16:43:03.144"></status>
</kw>
<status endtime="20170824 16:43:03.146" status="PASS" starttime="20170824 16:43:03.143"></status>
</kw>
<status endtime="20170824 16:43:03.146" status="PASS" starttime="20170824 16:43:03.142"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:43:03.218" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:43:03.218" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:43:03.218" status="PASS" starttime="20170824 16:43:03.146"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:43:03.221" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:43:03.221" status="PASS" starttime="20170824 16:43:03.220"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:43:03.221" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:43:03.222" status="PASS" starttime="20170824 16:43:03.221"></status>
</kw>
<status endtime="20170824 16:43:03.222" status="PASS" starttime="20170824 16:43:03.221"></status>
</kw>
<status endtime="20170824 16:43:03.222" status="PASS" starttime="20170824 16:43:03.220"></status>
</kw>
<status endtime="20170824 16:43:03.222" status="PASS" starttime="20170824 16:43:03.219"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:43:03.222" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:43:03.222" status="PASS" starttime="20170824 16:43:03.222"></status>
</kw>
<msg timestamp="20170824 16:43:03.223" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:43:03.223" status="PASS" starttime="20170824 16:43:02.948"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:43:03.223" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:43:03.223" status="PASS" starttime="20170824 16:43:03.223"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:43:03.224" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:43:03.224" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:43:03.224" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170824 16:43:03.224" status="PASS" starttime="20170824 16:43:03.224"></status>
</kw>
<msg timestamp="20170824 16:43:03.224" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 16:43:03.224" status="PASS" starttime="20170824 16:43:02.947"></status>
</kw>
<msg timestamp="20170824 16:43:03.225" level="INFO">${power_state} = On</msg>
<status endtime="20170824 16:43:03.225" status="PASS" starttime="20170824 16:43:02.947"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:43:03.225" status="PASS" starttime="20170824 16:43:03.225"></status>
</kw>
<status endtime="20170824 16:43:03.225" status="PASS" starttime="20170824 16:43:02.946"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:43:03.229" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:43:03.232" status="PASS" starttime="20170824 16:43:03.229"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:43:03.233" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:43:03.233" status="PASS" starttime="20170824 16:43:03.233"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:43:03.234" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:43:03.234" status="PASS" starttime="20170824 16:43:03.233"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:43:03.234" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:43:03.235" status="PASS" starttime="20170824 16:43:03.234"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:43:03.452" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:43:03.452" status="PASS" starttime="20170824 16:43:03.235"></status>
</kw>
<msg timestamp="20170824 16:43:03.452" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:43:03.452" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:43:03.452" status="PASS" starttime="20170824 16:43:03.235"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:43:03.453" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:43:03.453" status="PASS" starttime="20170824 16:43:03.453"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:43:03.454" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:43:03.454" status="PASS" starttime="20170824 16:43:03.453"></status>
</kw>
<status endtime="20170824 16:43:03.454" status="PASS" starttime="20170824 16:43:03.228"></status>
</kw>
<status endtime="20170824 16:43:03.454" status="PASS" starttime="20170824 16:43:03.228"></status>
</kw>
<status endtime="20170824 16:43:03.454" status="PASS" starttime="20170824 16:43:03.227"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:43:03.455" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:43:03.455" status="PASS" starttime="20170824 16:43:03.454"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:43:03.457" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:43:03.457" status="PASS" starttime="20170824 16:43:03.456"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:43:03.459" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:43:03.459" status="PASS" starttime="20170824 16:43:03.458"></status>
</kw>
<status endtime="20170824 16:43:03.459" status="PASS" starttime="20170824 16:43:03.458"></status>
</kw>
<status endtime="20170824 16:43:03.459" status="PASS" starttime="20170824 16:43:03.455"></status>
</kw>
<status endtime="20170824 16:43:03.459" status="PASS" starttime="20170824 16:43:03.455"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:43:03.566" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:43:03.566" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:43:03.566" status="PASS" starttime="20170824 16:43:03.459"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:43:03.568" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:43:03.568" status="PASS" starttime="20170824 16:43:03.568"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:43:03.569" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:43:03.569" status="PASS" starttime="20170824 16:43:03.569"></status>
</kw>
<status endtime="20170824 16:43:03.569" status="PASS" starttime="20170824 16:43:03.568"></status>
</kw>
<status endtime="20170824 16:43:03.570" status="PASS" starttime="20170824 16:43:03.567"></status>
</kw>
<status endtime="20170824 16:43:03.570" status="PASS" starttime="20170824 16:43:03.567"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:43:03.570" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:43:03.570" status="PASS" starttime="20170824 16:43:03.570"></status>
</kw>
<msg timestamp="20170824 16:43:03.570" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:43:03.570" status="PASS" starttime="20170824 16:43:03.226"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:43:03.571" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:43:03.571" status="PASS" starttime="20170824 16:43:03.571"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:43:03.572" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:43:03.572" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:43:03.572" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170824 16:43:03.572" status="PASS" starttime="20170824 16:43:03.571"></status>
</kw>
<msg timestamp="20170824 16:43:03.572" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170824 16:43:03.572" status="PASS" starttime="20170824 16:43:03.226"></status>
</kw>
<msg timestamp="20170824 16:43:03.573" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170824 16:43:03.573" status="PASS" starttime="20170824 16:43:03.226"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170824 16:43:03.573" level="FAIL">Running != Quiesced</msg>
<status endtime="20170824 16:43:03.573" status="FAIL" starttime="20170824 16:43:03.573"></status>
</kw>
<status endtime="20170824 16:43:03.573" status="FAIL" starttime="20170824 16:43:02.946"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:43:13.579" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:43:13.579" status="PASS" starttime="20170824 16:43:13.579"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:43:13.580" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:43:13.580" status="PASS" starttime="20170824 16:43:13.580"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:43:13.581" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:43:13.581" status="PASS" starttime="20170824 16:43:13.580"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:43:13.581" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:43:13.581" status="PASS" starttime="20170824 16:43:13.581"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:43:13.790" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:43:13.790" status="PASS" starttime="20170824 16:43:13.582"></status>
</kw>
<msg timestamp="20170824 16:43:13.790" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:43:13.790" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:43:13.790" status="PASS" starttime="20170824 16:43:13.582"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:43:13.791" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:43:13.791" status="PASS" starttime="20170824 16:43:13.791"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:43:13.792" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:43:13.792" status="PASS" starttime="20170824 16:43:13.791"></status>
</kw>
<status endtime="20170824 16:43:13.792" status="PASS" starttime="20170824 16:43:13.578"></status>
</kw>
<status endtime="20170824 16:43:13.792" status="PASS" starttime="20170824 16:43:13.578"></status>
</kw>
<status endtime="20170824 16:43:13.792" status="PASS" starttime="20170824 16:43:13.577"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:43:13.793" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:43:13.793" status="PASS" starttime="20170824 16:43:13.793"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:43:13.796" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:43:13.796" status="PASS" starttime="20170824 16:43:13.795"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:43:13.798" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:43:13.798" status="PASS" starttime="20170824 16:43:13.797"></status>
</kw>
<status endtime="20170824 16:43:13.798" status="PASS" starttime="20170824 16:43:13.797"></status>
</kw>
<status endtime="20170824 16:43:13.798" status="PASS" starttime="20170824 16:43:13.794"></status>
</kw>
<status endtime="20170824 16:43:13.798" status="PASS" starttime="20170824 16:43:13.794"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:43:13.862" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:43:13.862" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:43:13.862" status="PASS" starttime="20170824 16:43:13.799"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:43:13.864" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:43:13.864" status="PASS" starttime="20170824 16:43:13.863"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:43:13.865" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:43:13.865" status="PASS" starttime="20170824 16:43:13.865"></status>
</kw>
<status endtime="20170824 16:43:13.865" status="PASS" starttime="20170824 16:43:13.864"></status>
</kw>
<status endtime="20170824 16:43:13.865" status="PASS" starttime="20170824 16:43:13.863"></status>
</kw>
<status endtime="20170824 16:43:13.865" status="PASS" starttime="20170824 16:43:13.863"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:43:13.866" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:43:13.866" status="PASS" starttime="20170824 16:43:13.866"></status>
</kw>
<msg timestamp="20170824 16:43:13.866" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:43:13.866" status="PASS" starttime="20170824 16:43:13.576"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:43:13.867" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:43:13.867" status="PASS" starttime="20170824 16:43:13.866"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:43:13.867" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:43:13.867" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:43:13.867" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170824 16:43:13.867" status="PASS" starttime="20170824 16:43:13.867"></status>
</kw>
<msg timestamp="20170824 16:43:13.868" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 16:43:13.868" status="PASS" starttime="20170824 16:43:13.575"></status>
</kw>
<msg timestamp="20170824 16:43:13.868" level="INFO">${power_state} = On</msg>
<status endtime="20170824 16:43:13.868" status="PASS" starttime="20170824 16:43:13.575"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:43:13.869" status="PASS" starttime="20170824 16:43:13.868"></status>
</kw>
<status endtime="20170824 16:43:13.869" status="PASS" starttime="20170824 16:43:13.575"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:43:13.872" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:43:13.873" status="PASS" starttime="20170824 16:43:13.872"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:43:13.874" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:43:13.874" status="PASS" starttime="20170824 16:43:13.873"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:43:13.875" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:43:13.875" status="PASS" starttime="20170824 16:43:13.874"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:43:13.876" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:43:13.876" status="PASS" starttime="20170824 16:43:13.875"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:43:14.072" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:43:14.072" status="PASS" starttime="20170824 16:43:13.877"></status>
</kw>
<msg timestamp="20170824 16:43:14.072" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:43:14.072" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:43:14.072" status="PASS" starttime="20170824 16:43:13.876"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:43:14.073" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:43:14.073" status="PASS" starttime="20170824 16:43:14.072"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:43:14.073" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:43:14.074" status="PASS" starttime="20170824 16:43:14.073"></status>
</kw>
<status endtime="20170824 16:43:14.074" status="PASS" starttime="20170824 16:43:13.871"></status>
</kw>
<status endtime="20170824 16:43:14.074" status="PASS" starttime="20170824 16:43:13.871"></status>
</kw>
<status endtime="20170824 16:43:14.074" status="PASS" starttime="20170824 16:43:13.870"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:43:14.074" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:43:14.074" status="PASS" starttime="20170824 16:43:14.074"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:43:14.076" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:43:14.077" status="PASS" starttime="20170824 16:43:14.076"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:43:14.077" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:43:14.078" status="PASS" starttime="20170824 16:43:14.077"></status>
</kw>
<status endtime="20170824 16:43:14.078" status="PASS" starttime="20170824 16:43:14.077"></status>
</kw>
<status endtime="20170824 16:43:14.078" status="PASS" starttime="20170824 16:43:14.075"></status>
</kw>
<status endtime="20170824 16:43:14.078" status="PASS" starttime="20170824 16:43:14.075"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:43:14.175" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:43:14.175" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:43:14.176" status="PASS" starttime="20170824 16:43:14.078"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:43:14.178" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:43:14.178" status="PASS" starttime="20170824 16:43:14.177"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:43:14.178" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:43:14.179" status="PASS" starttime="20170824 16:43:14.178"></status>
</kw>
<status endtime="20170824 16:43:14.179" status="PASS" starttime="20170824 16:43:14.178"></status>
</kw>
<status endtime="20170824 16:43:14.179" status="PASS" starttime="20170824 16:43:14.176"></status>
</kw>
<status endtime="20170824 16:43:14.179" status="PASS" starttime="20170824 16:43:14.176"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:43:14.179" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:43:14.180" status="PASS" starttime="20170824 16:43:14.179"></status>
</kw>
<msg timestamp="20170824 16:43:14.180" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:43:14.180" status="PASS" starttime="20170824 16:43:13.870"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:43:14.181" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:43:14.181" status="PASS" starttime="20170824 16:43:14.180"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:43:14.182" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:43:14.182" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:43:14.182" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170824 16:43:14.182" status="PASS" starttime="20170824 16:43:14.181"></status>
</kw>
<msg timestamp="20170824 16:43:14.182" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170824 16:43:14.183" status="PASS" starttime="20170824 16:43:13.869"></status>
</kw>
<msg timestamp="20170824 16:43:14.183" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170824 16:43:14.183" status="PASS" starttime="20170824 16:43:13.869"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170824 16:43:14.184" level="FAIL">Running != Quiesced</msg>
<status endtime="20170824 16:43:14.184" status="FAIL" starttime="20170824 16:43:14.183"></status>
</kw>
<status endtime="20170824 16:43:14.184" status="FAIL" starttime="20170824 16:43:13.574"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:43:24.190" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:43:24.190" status="PASS" starttime="20170824 16:43:24.189"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:43:24.191" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:43:24.191" status="PASS" starttime="20170824 16:43:24.190"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:43:24.192" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:43:24.192" status="PASS" starttime="20170824 16:43:24.191"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:43:24.193" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:43:24.193" status="PASS" starttime="20170824 16:43:24.192"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:43:24.469" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:43:24.469" status="PASS" starttime="20170824 16:43:24.193"></status>
</kw>
<msg timestamp="20170824 16:43:24.469" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:43:24.469" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:43:24.470" status="PASS" starttime="20170824 16:43:24.193"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:43:24.470" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:43:24.470" status="PASS" starttime="20170824 16:43:24.470"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:43:24.471" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:43:24.471" status="PASS" starttime="20170824 16:43:24.471"></status>
</kw>
<status endtime="20170824 16:43:24.471" status="PASS" starttime="20170824 16:43:24.189"></status>
</kw>
<status endtime="20170824 16:43:24.471" status="PASS" starttime="20170824 16:43:24.188"></status>
</kw>
<status endtime="20170824 16:43:24.471" status="PASS" starttime="20170824 16:43:24.187"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:43:24.472" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:43:24.472" status="PASS" starttime="20170824 16:43:24.472"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:43:24.474" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:43:24.474" status="PASS" starttime="20170824 16:43:24.474"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:43:24.475" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:43:24.475" status="PASS" starttime="20170824 16:43:24.475"></status>
</kw>
<status endtime="20170824 16:43:24.475" status="PASS" starttime="20170824 16:43:24.474"></status>
</kw>
<status endtime="20170824 16:43:24.475" status="PASS" starttime="20170824 16:43:24.473"></status>
</kw>
<status endtime="20170824 16:43:24.476" status="PASS" starttime="20170824 16:43:24.472"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:43:24.541" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:43:24.541" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:43:24.541" status="PASS" starttime="20170824 16:43:24.476"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:43:24.543" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:43:24.543" status="PASS" starttime="20170824 16:43:24.542"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:43:24.544" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:43:24.544" status="PASS" starttime="20170824 16:43:24.544"></status>
</kw>
<status endtime="20170824 16:43:24.545" status="PASS" starttime="20170824 16:43:24.543"></status>
</kw>
<status endtime="20170824 16:43:24.545" status="PASS" starttime="20170824 16:43:24.542"></status>
</kw>
<status endtime="20170824 16:43:24.545" status="PASS" starttime="20170824 16:43:24.541"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:43:24.545" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:43:24.545" status="PASS" starttime="20170824 16:43:24.545"></status>
</kw>
<msg timestamp="20170824 16:43:24.545" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:43:24.545" status="PASS" starttime="20170824 16:43:24.187"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:43:24.546" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:43:24.546" status="PASS" starttime="20170824 16:43:24.546"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:43:24.547" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:43:24.547" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:43:24.547" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170824 16:43:24.547" status="PASS" starttime="20170824 16:43:24.546"></status>
</kw>
<msg timestamp="20170824 16:43:24.547" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 16:43:24.547" status="PASS" starttime="20170824 16:43:24.186"></status>
</kw>
<msg timestamp="20170824 16:43:24.547" level="INFO">${power_state} = On</msg>
<status endtime="20170824 16:43:24.548" status="PASS" starttime="20170824 16:43:24.186"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:43:24.548" status="PASS" starttime="20170824 16:43:24.548"></status>
</kw>
<status endtime="20170824 16:43:24.548" status="PASS" starttime="20170824 16:43:24.185"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:43:24.552" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:43:24.552" status="PASS" starttime="20170824 16:43:24.551"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:43:24.553" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:43:24.553" status="PASS" starttime="20170824 16:43:24.552"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:43:24.553" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:43:24.553" status="PASS" starttime="20170824 16:43:24.553"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:43:24.554" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:43:24.554" status="PASS" starttime="20170824 16:43:24.554"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:43:24.736" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:43:24.736" status="PASS" starttime="20170824 16:43:24.555"></status>
</kw>
<msg timestamp="20170824 16:43:24.737" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:43:24.737" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:43:24.737" status="PASS" starttime="20170824 16:43:24.554"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:43:24.737" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:43:24.737" status="PASS" starttime="20170824 16:43:24.737"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:43:24.738" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:43:24.738" status="PASS" starttime="20170824 16:43:24.738"></status>
</kw>
<status endtime="20170824 16:43:24.738" status="PASS" starttime="20170824 16:43:24.551"></status>
</kw>
<status endtime="20170824 16:43:24.738" status="PASS" starttime="20170824 16:43:24.551"></status>
</kw>
<status endtime="20170824 16:43:24.738" status="PASS" starttime="20170824 16:43:24.550"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:43:24.739" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:43:24.739" status="PASS" starttime="20170824 16:43:24.739"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:43:24.742" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:43:24.742" status="PASS" starttime="20170824 16:43:24.740"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:43:24.743" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:43:24.743" status="PASS" starttime="20170824 16:43:24.742"></status>
</kw>
<status endtime="20170824 16:43:24.743" status="PASS" starttime="20170824 16:43:24.742"></status>
</kw>
<status endtime="20170824 16:43:24.743" status="PASS" starttime="20170824 16:43:24.740"></status>
</kw>
<status endtime="20170824 16:43:24.743" status="PASS" starttime="20170824 16:43:24.739"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:43:24.835" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:43:24.835" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:43:24.835" status="PASS" starttime="20170824 16:43:24.743"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:43:24.837" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:43:24.837" status="PASS" starttime="20170824 16:43:24.836"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:43:24.838" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:43:24.838" status="PASS" starttime="20170824 16:43:24.837"></status>
</kw>
<status endtime="20170824 16:43:24.838" status="PASS" starttime="20170824 16:43:24.837"></status>
</kw>
<status endtime="20170824 16:43:24.838" status="PASS" starttime="20170824 16:43:24.836"></status>
</kw>
<status endtime="20170824 16:43:24.838" status="PASS" starttime="20170824 16:43:24.835"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:43:24.838" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:43:24.839" status="PASS" starttime="20170824 16:43:24.838"></status>
</kw>
<msg timestamp="20170824 16:43:24.839" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:43:24.839" status="PASS" starttime="20170824 16:43:24.549"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:43:24.839" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:43:24.839" status="PASS" starttime="20170824 16:43:24.839"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:43:24.840" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:43:24.840" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:43:24.840" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170824 16:43:24.840" status="PASS" starttime="20170824 16:43:24.840"></status>
</kw>
<msg timestamp="20170824 16:43:24.840" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170824 16:43:24.840" status="PASS" starttime="20170824 16:43:24.549"></status>
</kw>
<msg timestamp="20170824 16:43:24.841" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170824 16:43:24.841" status="PASS" starttime="20170824 16:43:24.548"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170824 16:43:24.841" level="FAIL">Running != Quiesced</msg>
<status endtime="20170824 16:43:24.841" status="FAIL" starttime="20170824 16:43:24.841"></status>
</kw>
<status endtime="20170824 16:43:24.842" status="FAIL" starttime="20170824 16:43:24.185"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:43:34.847" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:43:34.848" status="PASS" starttime="20170824 16:43:34.847"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:43:34.848" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:43:34.848" status="PASS" starttime="20170824 16:43:34.848"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:43:34.849" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:43:34.849" status="PASS" starttime="20170824 16:43:34.848"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:43:34.850" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:43:34.850" status="PASS" starttime="20170824 16:43:34.849"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:43:35.039" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:43:35.039" status="PASS" starttime="20170824 16:43:34.851"></status>
</kw>
<msg timestamp="20170824 16:43:35.039" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:43:35.039" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:43:35.039" status="PASS" starttime="20170824 16:43:34.850"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:43:35.040" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:43:35.040" status="PASS" starttime="20170824 16:43:35.040"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:43:35.041" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:43:35.041" status="PASS" starttime="20170824 16:43:35.040"></status>
</kw>
<status endtime="20170824 16:43:35.041" status="PASS" starttime="20170824 16:43:34.846"></status>
</kw>
<status endtime="20170824 16:43:35.041" status="PASS" starttime="20170824 16:43:34.846"></status>
</kw>
<status endtime="20170824 16:43:35.041" status="PASS" starttime="20170824 16:43:34.845"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:43:35.042" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:43:35.042" status="PASS" starttime="20170824 16:43:35.041"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:43:35.044" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:43:35.044" status="PASS" starttime="20170824 16:43:35.043"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:43:35.045" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:43:35.045" status="PASS" starttime="20170824 16:43:35.044"></status>
</kw>
<status endtime="20170824 16:43:35.045" status="PASS" starttime="20170824 16:43:35.044"></status>
</kw>
<status endtime="20170824 16:43:35.045" status="PASS" starttime="20170824 16:43:35.042"></status>
</kw>
<status endtime="20170824 16:43:35.045" status="PASS" starttime="20170824 16:43:35.042"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:43:35.119" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:43:35.119" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:43:35.119" status="PASS" starttime="20170824 16:43:35.045"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:43:35.121" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:43:35.121" status="PASS" starttime="20170824 16:43:35.121"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:43:35.122" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:43:35.122" status="PASS" starttime="20170824 16:43:35.122"></status>
</kw>
<status endtime="20170824 16:43:35.123" status="PASS" starttime="20170824 16:43:35.121"></status>
</kw>
<status endtime="20170824 16:43:35.123" status="PASS" starttime="20170824 16:43:35.120"></status>
</kw>
<status endtime="20170824 16:43:35.123" status="PASS" starttime="20170824 16:43:35.120"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:43:35.123" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:43:35.123" status="PASS" starttime="20170824 16:43:35.123"></status>
</kw>
<msg timestamp="20170824 16:43:35.123" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:43:35.123" status="PASS" starttime="20170824 16:43:34.844"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:43:35.124" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:43:35.124" status="PASS" starttime="20170824 16:43:35.124"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:43:35.125" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:43:35.125" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:43:35.125" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170824 16:43:35.125" status="PASS" starttime="20170824 16:43:35.124"></status>
</kw>
<msg timestamp="20170824 16:43:35.125" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 16:43:35.125" status="PASS" starttime="20170824 16:43:34.844"></status>
</kw>
<msg timestamp="20170824 16:43:35.125" level="INFO">${power_state} = On</msg>
<status endtime="20170824 16:43:35.126" status="PASS" starttime="20170824 16:43:34.843"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:43:35.126" status="PASS" starttime="20170824 16:43:35.126"></status>
</kw>
<status endtime="20170824 16:43:35.126" status="PASS" starttime="20170824 16:43:34.843"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:43:35.131" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:43:35.132" status="PASS" starttime="20170824 16:43:35.131"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:43:35.133" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:43:35.133" status="PASS" starttime="20170824 16:43:35.132"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:43:35.134" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:43:35.134" status="PASS" starttime="20170824 16:43:35.133"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:43:35.135" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:43:35.135" status="PASS" starttime="20170824 16:43:35.134"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:43:35.411" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:43:35.411" status="PASS" starttime="20170824 16:43:35.136"></status>
</kw>
<msg timestamp="20170824 16:43:35.411" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:43:35.411" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:43:35.411" status="PASS" starttime="20170824 16:43:35.135"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:43:35.412" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:43:35.412" status="PASS" starttime="20170824 16:43:35.411"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:43:35.413" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:43:35.413" status="PASS" starttime="20170824 16:43:35.413"></status>
</kw>
<status endtime="20170824 16:43:35.413" status="PASS" starttime="20170824 16:43:35.130"></status>
</kw>
<status endtime="20170824 16:43:35.414" status="PASS" starttime="20170824 16:43:35.129"></status>
</kw>
<status endtime="20170824 16:43:35.414" status="PASS" starttime="20170824 16:43:35.128"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:43:35.415" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:43:35.415" status="PASS" starttime="20170824 16:43:35.414"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:43:35.418" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:43:35.418" status="PASS" starttime="20170824 16:43:35.417"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:43:35.419" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:43:35.419" status="PASS" starttime="20170824 16:43:35.419"></status>
</kw>
<status endtime="20170824 16:43:35.419" status="PASS" starttime="20170824 16:43:35.418"></status>
</kw>
<status endtime="20170824 16:43:35.419" status="PASS" starttime="20170824 16:43:35.416"></status>
</kw>
<status endtime="20170824 16:43:35.419" status="PASS" starttime="20170824 16:43:35.415"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:43:35.510" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:43:35.510" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:43:35.510" status="PASS" starttime="20170824 16:43:35.420"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:43:35.512" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:43:35.512" status="PASS" starttime="20170824 16:43:35.512"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:43:35.514" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:43:35.514" status="PASS" starttime="20170824 16:43:35.513"></status>
</kw>
<status endtime="20170824 16:43:35.514" status="PASS" starttime="20170824 16:43:35.513"></status>
</kw>
<status endtime="20170824 16:43:35.514" status="PASS" starttime="20170824 16:43:35.511"></status>
</kw>
<status endtime="20170824 16:43:35.514" status="PASS" starttime="20170824 16:43:35.511"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:43:35.515" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:43:35.515" status="PASS" starttime="20170824 16:43:35.514"></status>
</kw>
<msg timestamp="20170824 16:43:35.515" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:43:35.515" status="PASS" starttime="20170824 16:43:35.127"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:43:35.515" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:43:35.516" status="PASS" starttime="20170824 16:43:35.515"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:43:35.516" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:43:35.516" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:43:35.516" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170824 16:43:35.516" status="PASS" starttime="20170824 16:43:35.516"></status>
</kw>
<msg timestamp="20170824 16:43:35.517" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170824 16:43:35.517" status="PASS" starttime="20170824 16:43:35.127"></status>
</kw>
<msg timestamp="20170824 16:43:35.517" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170824 16:43:35.517" status="PASS" starttime="20170824 16:43:35.126"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170824 16:43:35.517" level="FAIL">Running != Quiesced</msg>
<status endtime="20170824 16:43:35.518" status="FAIL" starttime="20170824 16:43:35.517"></status>
</kw>
<status endtime="20170824 16:43:35.518" status="FAIL" starttime="20170824 16:43:34.842"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:43:45.523" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:43:45.523" status="PASS" starttime="20170824 16:43:45.523"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:43:45.524" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:43:45.524" status="PASS" starttime="20170824 16:43:45.524"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:43:45.525" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:43:45.525" status="PASS" starttime="20170824 16:43:45.524"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:43:45.525" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:43:45.526" status="PASS" starttime="20170824 16:43:45.525"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:43:45.708" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:43:45.708" status="PASS" starttime="20170824 16:43:45.526"></status>
</kw>
<msg timestamp="20170824 16:43:45.708" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:43:45.709" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:43:45.709" status="PASS" starttime="20170824 16:43:45.526"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:43:45.709" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:43:45.709" status="PASS" starttime="20170824 16:43:45.709"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:43:45.710" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:43:45.710" status="PASS" starttime="20170824 16:43:45.710"></status>
</kw>
<status endtime="20170824 16:43:45.710" status="PASS" starttime="20170824 16:43:45.522"></status>
</kw>
<status endtime="20170824 16:43:45.710" status="PASS" starttime="20170824 16:43:45.522"></status>
</kw>
<status endtime="20170824 16:43:45.710" status="PASS" starttime="20170824 16:43:45.521"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:43:45.711" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:43:45.711" status="PASS" starttime="20170824 16:43:45.711"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:43:45.713" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:43:45.713" status="PASS" starttime="20170824 16:43:45.713"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:43:45.714" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:43:45.714" status="PASS" starttime="20170824 16:43:45.714"></status>
</kw>
<status endtime="20170824 16:43:45.715" status="PASS" starttime="20170824 16:43:45.714"></status>
</kw>
<status endtime="20170824 16:43:45.715" status="PASS" starttime="20170824 16:43:45.712"></status>
</kw>
<status endtime="20170824 16:43:45.715" status="PASS" starttime="20170824 16:43:45.711"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:43:45.778" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:43:45.779" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:43:45.779" status="PASS" starttime="20170824 16:43:45.715"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:43:45.780" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:43:45.780" status="PASS" starttime="20170824 16:43:45.780"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:43:45.781" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:43:45.781" status="PASS" starttime="20170824 16:43:45.781"></status>
</kw>
<status endtime="20170824 16:43:45.782" status="PASS" starttime="20170824 16:43:45.781"></status>
</kw>
<status endtime="20170824 16:43:45.782" status="PASS" starttime="20170824 16:43:45.779"></status>
</kw>
<status endtime="20170824 16:43:45.782" status="PASS" starttime="20170824 16:43:45.779"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:43:45.782" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:43:45.782" status="PASS" starttime="20170824 16:43:45.782"></status>
</kw>
<msg timestamp="20170824 16:43:45.783" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:43:45.783" status="PASS" starttime="20170824 16:43:45.520"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:43:45.783" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:43:45.783" status="PASS" starttime="20170824 16:43:45.783"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:43:45.784" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:43:45.784" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:43:45.784" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170824 16:43:45.784" status="PASS" starttime="20170824 16:43:45.784"></status>
</kw>
<msg timestamp="20170824 16:43:45.784" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 16:43:45.784" status="PASS" starttime="20170824 16:43:45.520"></status>
</kw>
<msg timestamp="20170824 16:43:45.785" level="INFO">${power_state} = On</msg>
<status endtime="20170824 16:43:45.785" status="PASS" starttime="20170824 16:43:45.519"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:43:45.785" status="PASS" starttime="20170824 16:43:45.785"></status>
</kw>
<status endtime="20170824 16:43:45.785" status="PASS" starttime="20170824 16:43:45.519"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:43:45.789" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:43:45.790" status="PASS" starttime="20170824 16:43:45.789"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:43:45.790" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:43:45.790" status="PASS" starttime="20170824 16:43:45.790"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:43:45.791" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:43:45.791" status="PASS" starttime="20170824 16:43:45.790"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:43:45.791" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:43:45.792" status="PASS" starttime="20170824 16:43:45.791"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:43:46.004" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:43:46.004" status="PASS" starttime="20170824 16:43:45.792"></status>
</kw>
<msg timestamp="20170824 16:43:46.004" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:43:46.005" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:43:46.005" status="PASS" starttime="20170824 16:43:45.792"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:43:46.005" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:43:46.005" status="PASS" starttime="20170824 16:43:46.005"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:43:46.006" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:43:46.006" status="PASS" starttime="20170824 16:43:46.006"></status>
</kw>
<status endtime="20170824 16:43:46.006" status="PASS" starttime="20170824 16:43:45.788"></status>
</kw>
<status endtime="20170824 16:43:46.006" status="PASS" starttime="20170824 16:43:45.788"></status>
</kw>
<status endtime="20170824 16:43:46.006" status="PASS" starttime="20170824 16:43:45.787"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:43:46.007" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:43:46.007" status="PASS" starttime="20170824 16:43:46.007"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:43:46.009" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:43:46.009" status="PASS" starttime="20170824 16:43:46.008"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:43:46.010" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:43:46.010" status="PASS" starttime="20170824 16:43:46.010"></status>
</kw>
<status endtime="20170824 16:43:46.010" status="PASS" starttime="20170824 16:43:46.009"></status>
</kw>
<status endtime="20170824 16:43:46.010" status="PASS" starttime="20170824 16:43:46.008"></status>
</kw>
<status endtime="20170824 16:43:46.010" status="PASS" starttime="20170824 16:43:46.007"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:43:46.194" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:43:46.194" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:43:46.194" status="PASS" starttime="20170824 16:43:46.011"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:43:46.196" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:43:46.196" status="PASS" starttime="20170824 16:43:46.196"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:43:46.197" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:43:46.197" status="PASS" starttime="20170824 16:43:46.197"></status>
</kw>
<status endtime="20170824 16:43:46.197" status="PASS" starttime="20170824 16:43:46.196"></status>
</kw>
<status endtime="20170824 16:43:46.197" status="PASS" starttime="20170824 16:43:46.195"></status>
</kw>
<status endtime="20170824 16:43:46.197" status="PASS" starttime="20170824 16:43:46.195"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:43:46.198" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:43:46.198" status="PASS" starttime="20170824 16:43:46.198"></status>
</kw>
<msg timestamp="20170824 16:43:46.198" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:43:46.198" status="PASS" starttime="20170824 16:43:45.786"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:43:46.199" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:43:46.199" status="PASS" starttime="20170824 16:43:46.198"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:43:46.199" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:43:46.199" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:43:46.199" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170824 16:43:46.200" status="PASS" starttime="20170824 16:43:46.199"></status>
</kw>
<msg timestamp="20170824 16:43:46.200" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170824 16:43:46.200" status="PASS" starttime="20170824 16:43:45.786"></status>
</kw>
<msg timestamp="20170824 16:43:46.200" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170824 16:43:46.200" status="PASS" starttime="20170824 16:43:45.785"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170824 16:43:46.201" level="FAIL">Running != Quiesced</msg>
<status endtime="20170824 16:43:46.201" status="FAIL" starttime="20170824 16:43:46.200"></status>
</kw>
<status endtime="20170824 16:43:46.201" status="FAIL" starttime="20170824 16:43:45.518"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:43:56.211" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:43:56.211" status="PASS" starttime="20170824 16:43:56.210"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:43:56.212" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:43:56.212" status="PASS" starttime="20170824 16:43:56.211"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:43:56.212" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:43:56.213" status="PASS" starttime="20170824 16:43:56.212"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:43:56.213" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:43:56.213" status="PASS" starttime="20170824 16:43:56.213"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:43:56.409" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:43:56.409" status="PASS" starttime="20170824 16:43:56.214"></status>
</kw>
<msg timestamp="20170824 16:43:56.409" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:43:56.409" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:43:56.409" status="PASS" starttime="20170824 16:43:56.214"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:43:56.410" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:43:56.410" status="PASS" starttime="20170824 16:43:56.410"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:43:56.411" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:43:56.411" status="PASS" starttime="20170824 16:43:56.410"></status>
</kw>
<status endtime="20170824 16:43:56.411" status="PASS" starttime="20170824 16:43:56.210"></status>
</kw>
<status endtime="20170824 16:43:56.411" status="PASS" starttime="20170824 16:43:56.209"></status>
</kw>
<status endtime="20170824 16:43:56.411" status="PASS" starttime="20170824 16:43:56.209"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:43:56.412" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:43:56.412" status="PASS" starttime="20170824 16:43:56.411"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:43:56.414" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:43:56.414" status="PASS" starttime="20170824 16:43:56.414"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:43:56.416" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:43:56.416" status="PASS" starttime="20170824 16:43:56.415"></status>
</kw>
<status endtime="20170824 16:43:56.416" status="PASS" starttime="20170824 16:43:56.415"></status>
</kw>
<status endtime="20170824 16:43:56.416" status="PASS" starttime="20170824 16:43:56.413"></status>
</kw>
<status endtime="20170824 16:43:56.416" status="PASS" starttime="20170824 16:43:56.412"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:43:56.507" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:43:56.507" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:43:56.507" status="PASS" starttime="20170824 16:43:56.416"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:43:56.509" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:43:56.509" status="PASS" starttime="20170824 16:43:56.509"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:43:56.510" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:43:56.510" status="PASS" starttime="20170824 16:43:56.510"></status>
</kw>
<status endtime="20170824 16:43:56.510" status="PASS" starttime="20170824 16:43:56.509"></status>
</kw>
<status endtime="20170824 16:43:56.510" status="PASS" starttime="20170824 16:43:56.508"></status>
</kw>
<status endtime="20170824 16:43:56.510" status="PASS" starttime="20170824 16:43:56.508"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:43:56.511" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:43:56.511" status="PASS" starttime="20170824 16:43:56.511"></status>
</kw>
<msg timestamp="20170824 16:43:56.511" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:43:56.511" status="PASS" starttime="20170824 16:43:56.207"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:43:56.512" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:43:56.512" status="PASS" starttime="20170824 16:43:56.512"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:43:56.513" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:43:56.513" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:43:56.513" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170824 16:43:56.513" status="PASS" starttime="20170824 16:43:56.512"></status>
</kw>
<msg timestamp="20170824 16:43:56.513" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 16:43:56.513" status="PASS" starttime="20170824 16:43:56.203"></status>
</kw>
<msg timestamp="20170824 16:43:56.514" level="INFO">${power_state} = On</msg>
<status endtime="20170824 16:43:56.514" status="PASS" starttime="20170824 16:43:56.202"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:43:56.514" status="PASS" starttime="20170824 16:43:56.514"></status>
</kw>
<status endtime="20170824 16:43:56.514" status="PASS" starttime="20170824 16:43:56.202"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:43:56.518" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:43:56.518" status="PASS" starttime="20170824 16:43:56.517"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:43:56.519" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:43:56.519" status="PASS" starttime="20170824 16:43:56.518"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:43:56.519" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:43:56.519" status="PASS" starttime="20170824 16:43:56.519"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:43:56.520" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:43:56.520" status="PASS" starttime="20170824 16:43:56.520"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:43:56.747" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:43:56.747" status="PASS" starttime="20170824 16:43:56.521"></status>
</kw>
<msg timestamp="20170824 16:43:56.748" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:43:56.748" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:43:56.748" status="PASS" starttime="20170824 16:43:56.520"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:43:56.749" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:43:56.749" status="PASS" starttime="20170824 16:43:56.748"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:43:56.749" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:43:56.749" status="PASS" starttime="20170824 16:43:56.749"></status>
</kw>
<status endtime="20170824 16:43:56.750" status="PASS" starttime="20170824 16:43:56.517"></status>
</kw>
<status endtime="20170824 16:43:56.750" status="PASS" starttime="20170824 16:43:56.516"></status>
</kw>
<status endtime="20170824 16:43:56.750" status="PASS" starttime="20170824 16:43:56.516"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:43:56.750" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:43:56.750" status="PASS" starttime="20170824 16:43:56.750"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:43:56.752" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:43:56.752" status="PASS" starttime="20170824 16:43:56.752"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:43:56.753" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:43:56.754" status="PASS" starttime="20170824 16:43:56.753"></status>
</kw>
<status endtime="20170824 16:43:56.754" status="PASS" starttime="20170824 16:43:56.753"></status>
</kw>
<status endtime="20170824 16:43:56.754" status="PASS" starttime="20170824 16:43:56.751"></status>
</kw>
<status endtime="20170824 16:43:56.754" status="PASS" starttime="20170824 16:43:56.751"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:43:56.926" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:43:56.926" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:43:56.926" status="PASS" starttime="20170824 16:43:56.754"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:43:56.928" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:43:56.928" status="PASS" starttime="20170824 16:43:56.928"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:43:56.929" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:43:56.929" status="PASS" starttime="20170824 16:43:56.929"></status>
</kw>
<status endtime="20170824 16:43:56.929" status="PASS" starttime="20170824 16:43:56.928"></status>
</kw>
<status endtime="20170824 16:43:56.929" status="PASS" starttime="20170824 16:43:56.927"></status>
</kw>
<status endtime="20170824 16:43:56.929" status="PASS" starttime="20170824 16:43:56.927"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:43:56.930" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:43:56.930" status="PASS" starttime="20170824 16:43:56.930"></status>
</kw>
<msg timestamp="20170824 16:43:56.930" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:43:56.930" status="PASS" starttime="20170824 16:43:56.515"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:43:56.931" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:43:56.931" status="PASS" starttime="20170824 16:43:56.930"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:43:56.931" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:43:56.931" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:43:56.931" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170824 16:43:56.931" status="PASS" starttime="20170824 16:43:56.931"></status>
</kw>
<msg timestamp="20170824 16:43:56.932" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170824 16:43:56.932" status="PASS" starttime="20170824 16:43:56.515"></status>
</kw>
<msg timestamp="20170824 16:43:56.932" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170824 16:43:56.932" status="PASS" starttime="20170824 16:43:56.514"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170824 16:43:56.933" level="FAIL">Running != Quiesced</msg>
<status endtime="20170824 16:43:56.933" status="FAIL" starttime="20170824 16:43:56.932"></status>
</kw>
<status endtime="20170824 16:43:56.933" status="FAIL" starttime="20170824 16:43:56.201"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:44:06.939" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:44:06.939" status="PASS" starttime="20170824 16:44:06.939"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:44:06.940" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:44:06.940" status="PASS" starttime="20170824 16:44:06.940"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:44:06.941" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:44:06.941" status="PASS" starttime="20170824 16:44:06.940"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:44:06.941" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:44:06.941" status="PASS" starttime="20170824 16:44:06.941"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:44:07.129" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:44:07.129" status="PASS" starttime="20170824 16:44:06.942"></status>
</kw>
<msg timestamp="20170824 16:44:07.129" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:44:07.129" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:44:07.129" status="PASS" starttime="20170824 16:44:06.942"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:44:07.130" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:44:07.130" status="PASS" starttime="20170824 16:44:07.130"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:44:07.131" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:44:07.131" status="PASS" starttime="20170824 16:44:07.130"></status>
</kw>
<status endtime="20170824 16:44:07.131" status="PASS" starttime="20170824 16:44:06.938"></status>
</kw>
<status endtime="20170824 16:44:07.131" status="PASS" starttime="20170824 16:44:06.937"></status>
</kw>
<status endtime="20170824 16:44:07.131" status="PASS" starttime="20170824 16:44:06.937"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:44:07.132" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:44:07.132" status="PASS" starttime="20170824 16:44:07.131"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:44:07.134" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:44:07.134" status="PASS" starttime="20170824 16:44:07.133"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:44:07.135" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:44:07.135" status="PASS" starttime="20170824 16:44:07.135"></status>
</kw>
<status endtime="20170824 16:44:07.135" status="PASS" starttime="20170824 16:44:07.134"></status>
</kw>
<status endtime="20170824 16:44:07.135" status="PASS" starttime="20170824 16:44:07.132"></status>
</kw>
<status endtime="20170824 16:44:07.135" status="PASS" starttime="20170824 16:44:07.132"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:44:07.210" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:44:07.210" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:44:07.210" status="PASS" starttime="20170824 16:44:07.135"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:44:07.212" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:44:07.212" status="PASS" starttime="20170824 16:44:07.211"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:44:07.214" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:44:07.214" status="PASS" starttime="20170824 16:44:07.214"></status>
</kw>
<status endtime="20170824 16:44:07.214" status="PASS" starttime="20170824 16:44:07.212"></status>
</kw>
<status endtime="20170824 16:44:07.214" status="PASS" starttime="20170824 16:44:07.211"></status>
</kw>
<status endtime="20170824 16:44:07.215" status="PASS" starttime="20170824 16:44:07.210"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:44:07.215" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:44:07.215" status="PASS" starttime="20170824 16:44:07.215"></status>
</kw>
<msg timestamp="20170824 16:44:07.215" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:44:07.215" status="PASS" starttime="20170824 16:44:06.936"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:44:07.216" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:44:07.216" status="PASS" starttime="20170824 16:44:07.215"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:44:07.216" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:44:07.217" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:44:07.217" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170824 16:44:07.217" status="PASS" starttime="20170824 16:44:07.216"></status>
</kw>
<msg timestamp="20170824 16:44:07.217" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 16:44:07.217" status="PASS" starttime="20170824 16:44:06.935"></status>
</kw>
<msg timestamp="20170824 16:44:07.217" level="INFO">${power_state} = On</msg>
<status endtime="20170824 16:44:07.217" status="PASS" starttime="20170824 16:44:06.935"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:44:07.218" status="PASS" starttime="20170824 16:44:07.218"></status>
</kw>
<status endtime="20170824 16:44:07.218" status="PASS" starttime="20170824 16:44:06.934"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:44:07.221" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:44:07.222" status="PASS" starttime="20170824 16:44:07.221"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:44:07.222" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:44:07.222" status="PASS" starttime="20170824 16:44:07.222"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:44:07.223" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:44:07.223" status="PASS" starttime="20170824 16:44:07.223"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:44:07.224" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:44:07.224" status="PASS" starttime="20170824 16:44:07.223"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:44:07.403" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:44:07.403" status="PASS" starttime="20170824 16:44:07.224"></status>
</kw>
<msg timestamp="20170824 16:44:07.403" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:44:07.403" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:44:07.403" status="PASS" starttime="20170824 16:44:07.224"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:44:07.404" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:44:07.404" status="PASS" starttime="20170824 16:44:07.404"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:44:07.405" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:44:07.405" status="PASS" starttime="20170824 16:44:07.404"></status>
</kw>
<status endtime="20170824 16:44:07.405" status="PASS" starttime="20170824 16:44:07.221"></status>
</kw>
<status endtime="20170824 16:44:07.405" status="PASS" starttime="20170824 16:44:07.220"></status>
</kw>
<status endtime="20170824 16:44:07.405" status="PASS" starttime="20170824 16:44:07.220"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:44:07.406" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:44:07.406" status="PASS" starttime="20170824 16:44:07.405"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:44:07.408" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:44:07.408" status="PASS" starttime="20170824 16:44:07.407"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:44:07.409" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:44:07.409" status="PASS" starttime="20170824 16:44:07.409"></status>
</kw>
<status endtime="20170824 16:44:07.409" status="PASS" starttime="20170824 16:44:07.408"></status>
</kw>
<status endtime="20170824 16:44:07.409" status="PASS" starttime="20170824 16:44:07.406"></status>
</kw>
<status endtime="20170824 16:44:07.409" status="PASS" starttime="20170824 16:44:07.406"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:44:07.511" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:44:07.512" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:44:07.512" status="PASS" starttime="20170824 16:44:07.410"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:44:07.515" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:44:07.515" status="PASS" starttime="20170824 16:44:07.514"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:44:07.516" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:44:07.516" status="PASS" starttime="20170824 16:44:07.516"></status>
</kw>
<status endtime="20170824 16:44:07.516" status="PASS" starttime="20170824 16:44:07.515"></status>
</kw>
<status endtime="20170824 16:44:07.516" status="PASS" starttime="20170824 16:44:07.514"></status>
</kw>
<status endtime="20170824 16:44:07.516" status="PASS" starttime="20170824 16:44:07.513"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:44:07.517" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:44:07.517" status="PASS" starttime="20170824 16:44:07.516"></status>
</kw>
<msg timestamp="20170824 16:44:07.517" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:44:07.517" status="PASS" starttime="20170824 16:44:07.219"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:44:07.517" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:44:07.518" status="PASS" starttime="20170824 16:44:07.517"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:44:07.518" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:44:07.518" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:44:07.518" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170824 16:44:07.518" status="PASS" starttime="20170824 16:44:07.518"></status>
</kw>
<msg timestamp="20170824 16:44:07.519" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170824 16:44:07.519" status="PASS" starttime="20170824 16:44:07.218"></status>
</kw>
<msg timestamp="20170824 16:44:07.519" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170824 16:44:07.519" status="PASS" starttime="20170824 16:44:07.218"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170824 16:44:07.520" level="FAIL">Running != Quiesced</msg>
<status endtime="20170824 16:44:07.520" status="FAIL" starttime="20170824 16:44:07.519"></status>
</kw>
<status endtime="20170824 16:44:07.520" status="FAIL" starttime="20170824 16:44:06.934"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:44:17.525" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:44:17.526" status="PASS" starttime="20170824 16:44:17.525"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:44:17.526" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:44:17.526" status="PASS" starttime="20170824 16:44:17.526"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:44:17.527" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:44:17.527" status="PASS" starttime="20170824 16:44:17.526"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:44:17.528" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:44:17.528" status="PASS" starttime="20170824 16:44:17.527"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:44:17.729" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:44:17.729" status="PASS" starttime="20170824 16:44:17.529"></status>
</kw>
<msg timestamp="20170824 16:44:17.729" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:44:17.729" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:44:17.729" status="PASS" starttime="20170824 16:44:17.528"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:44:17.730" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:44:17.730" status="PASS" starttime="20170824 16:44:17.730"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:44:17.731" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:44:17.731" status="PASS" starttime="20170824 16:44:17.730"></status>
</kw>
<status endtime="20170824 16:44:17.731" status="PASS" starttime="20170824 16:44:17.524"></status>
</kw>
<status endtime="20170824 16:44:17.731" status="PASS" starttime="20170824 16:44:17.524"></status>
</kw>
<status endtime="20170824 16:44:17.731" status="PASS" starttime="20170824 16:44:17.523"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:44:17.732" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:44:17.732" status="PASS" starttime="20170824 16:44:17.732"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:44:17.734" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:44:17.734" status="PASS" starttime="20170824 16:44:17.733"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:44:17.735" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:44:17.735" status="PASS" starttime="20170824 16:44:17.735"></status>
</kw>
<status endtime="20170824 16:44:17.735" status="PASS" starttime="20170824 16:44:17.734"></status>
</kw>
<status endtime="20170824 16:44:17.736" status="PASS" starttime="20170824 16:44:17.733"></status>
</kw>
<status endtime="20170824 16:44:17.736" status="PASS" starttime="20170824 16:44:17.732"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:44:17.800" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:44:17.800" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:44:17.800" status="PASS" starttime="20170824 16:44:17.736"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:44:17.802" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:44:17.802" status="PASS" starttime="20170824 16:44:17.801"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:44:17.803" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:44:17.803" status="PASS" starttime="20170824 16:44:17.802"></status>
</kw>
<status endtime="20170824 16:44:17.803" status="PASS" starttime="20170824 16:44:17.802"></status>
</kw>
<status endtime="20170824 16:44:17.803" status="PASS" starttime="20170824 16:44:17.801"></status>
</kw>
<status endtime="20170824 16:44:17.803" status="PASS" starttime="20170824 16:44:17.800"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:44:17.804" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:44:17.804" status="PASS" starttime="20170824 16:44:17.803"></status>
</kw>
<msg timestamp="20170824 16:44:17.804" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:44:17.804" status="PASS" starttime="20170824 16:44:17.522"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:44:17.804" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:44:17.805" status="PASS" starttime="20170824 16:44:17.804"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:44:17.805" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:44:17.805" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:44:17.805" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170824 16:44:17.805" status="PASS" starttime="20170824 16:44:17.805"></status>
</kw>
<msg timestamp="20170824 16:44:17.806" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 16:44:17.806" status="PASS" starttime="20170824 16:44:17.522"></status>
</kw>
<msg timestamp="20170824 16:44:17.806" level="INFO">${power_state} = On</msg>
<status endtime="20170824 16:44:17.806" status="PASS" starttime="20170824 16:44:17.521"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:44:17.806" status="PASS" starttime="20170824 16:44:17.806"></status>
</kw>
<status endtime="20170824 16:44:17.807" status="PASS" starttime="20170824 16:44:17.521"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:44:17.810" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:44:17.811" status="PASS" starttime="20170824 16:44:17.810"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:44:17.811" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:44:17.811" status="PASS" starttime="20170824 16:44:17.811"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:44:17.812" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:44:17.812" status="PASS" starttime="20170824 16:44:17.812"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:44:17.813" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:44:17.813" status="PASS" starttime="20170824 16:44:17.812"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:44:18.020" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:44:18.020" status="PASS" starttime="20170824 16:44:17.814"></status>
</kw>
<msg timestamp="20170824 16:44:18.020" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:44:18.020" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:44:18.021" status="PASS" starttime="20170824 16:44:17.813"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:44:18.021" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:44:18.021" status="PASS" starttime="20170824 16:44:18.021"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:44:18.022" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:44:18.022" status="PASS" starttime="20170824 16:44:18.022"></status>
</kw>
<status endtime="20170824 16:44:18.022" status="PASS" starttime="20170824 16:44:17.810"></status>
</kw>
<status endtime="20170824 16:44:18.022" status="PASS" starttime="20170824 16:44:17.809"></status>
</kw>
<status endtime="20170824 16:44:18.022" status="PASS" starttime="20170824 16:44:17.808"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:44:18.023" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:44:18.023" status="PASS" starttime="20170824 16:44:18.023"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:44:18.025" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:44:18.025" status="PASS" starttime="20170824 16:44:18.024"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:44:18.026" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:44:18.026" status="PASS" starttime="20170824 16:44:18.026"></status>
</kw>
<status endtime="20170824 16:44:18.027" status="PASS" starttime="20170824 16:44:18.026"></status>
</kw>
<status endtime="20170824 16:44:18.027" status="PASS" starttime="20170824 16:44:18.024"></status>
</kw>
<status endtime="20170824 16:44:18.027" status="PASS" starttime="20170824 16:44:18.023"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:44:18.128" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:44:18.128" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:44:18.128" status="PASS" starttime="20170824 16:44:18.027"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:44:18.130" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:44:18.130" status="PASS" starttime="20170824 16:44:18.129"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:44:18.131" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:44:18.131" status="PASS" starttime="20170824 16:44:18.131"></status>
</kw>
<status endtime="20170824 16:44:18.131" status="PASS" starttime="20170824 16:44:18.130"></status>
</kw>
<status endtime="20170824 16:44:18.132" status="PASS" starttime="20170824 16:44:18.129"></status>
</kw>
<status endtime="20170824 16:44:18.132" status="PASS" starttime="20170824 16:44:18.128"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:44:18.132" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:44:18.132" status="PASS" starttime="20170824 16:44:18.132"></status>
</kw>
<msg timestamp="20170824 16:44:18.132" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:44:18.132" status="PASS" starttime="20170824 16:44:17.808"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:44:18.133" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:44:18.133" status="PASS" starttime="20170824 16:44:18.133"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:44:18.134" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:44:18.134" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:44:18.134" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170824 16:44:18.134" status="PASS" starttime="20170824 16:44:18.133"></status>
</kw>
<msg timestamp="20170824 16:44:18.134" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170824 16:44:18.134" status="PASS" starttime="20170824 16:44:17.807"></status>
</kw>
<msg timestamp="20170824 16:44:18.135" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170824 16:44:18.135" status="PASS" starttime="20170824 16:44:17.807"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170824 16:44:18.135" level="FAIL">Running != Quiesced</msg>
<status endtime="20170824 16:44:18.135" status="FAIL" starttime="20170824 16:44:18.135"></status>
</kw>
<status endtime="20170824 16:44:18.135" status="FAIL" starttime="20170824 16:44:17.520"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:44:28.140" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:44:28.141" status="PASS" starttime="20170824 16:44:28.140"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:44:28.141" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:44:28.141" status="PASS" starttime="20170824 16:44:28.141"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:44:28.142" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:44:28.142" status="PASS" starttime="20170824 16:44:28.142"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:44:28.143" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:44:28.143" status="PASS" starttime="20170824 16:44:28.142"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:44:28.373" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:44:28.373" status="PASS" starttime="20170824 16:44:28.143"></status>
</kw>
<msg timestamp="20170824 16:44:28.374" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:44:28.374" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:44:28.374" status="PASS" starttime="20170824 16:44:28.143"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:44:28.374" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:44:28.374" status="PASS" starttime="20170824 16:44:28.374"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:44:28.375" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:44:28.375" status="PASS" starttime="20170824 16:44:28.375"></status>
</kw>
<status endtime="20170824 16:44:28.375" status="PASS" starttime="20170824 16:44:28.140"></status>
</kw>
<status endtime="20170824 16:44:28.375" status="PASS" starttime="20170824 16:44:28.139"></status>
</kw>
<status endtime="20170824 16:44:28.375" status="PASS" starttime="20170824 16:44:28.138"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:44:28.376" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:44:28.376" status="PASS" starttime="20170824 16:44:28.376"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:44:28.378" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:44:28.378" status="PASS" starttime="20170824 16:44:28.377"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:44:28.379" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:44:28.379" status="PASS" starttime="20170824 16:44:28.379"></status>
</kw>
<status endtime="20170824 16:44:28.379" status="PASS" starttime="20170824 16:44:28.378"></status>
</kw>
<status endtime="20170824 16:44:28.379" status="PASS" starttime="20170824 16:44:28.377"></status>
</kw>
<status endtime="20170824 16:44:28.380" status="PASS" starttime="20170824 16:44:28.376"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:44:28.448" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:44:28.448" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:44:28.448" status="PASS" starttime="20170824 16:44:28.380"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:44:28.450" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:44:28.450" status="PASS" starttime="20170824 16:44:28.449"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:44:28.451" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:44:28.451" status="PASS" starttime="20170824 16:44:28.451"></status>
</kw>
<status endtime="20170824 16:44:28.451" status="PASS" starttime="20170824 16:44:28.450"></status>
</kw>
<status endtime="20170824 16:44:28.451" status="PASS" starttime="20170824 16:44:28.449"></status>
</kw>
<status endtime="20170824 16:44:28.451" status="PASS" starttime="20170824 16:44:28.448"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:44:28.452" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:44:28.452" status="PASS" starttime="20170824 16:44:28.452"></status>
</kw>
<msg timestamp="20170824 16:44:28.452" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:44:28.452" status="PASS" starttime="20170824 16:44:28.138"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:44:28.453" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:44:28.453" status="PASS" starttime="20170824 16:44:28.452"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:44:28.453" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:44:28.453" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:44:28.453" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170824 16:44:28.453" status="PASS" starttime="20170824 16:44:28.453"></status>
</kw>
<msg timestamp="20170824 16:44:28.454" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 16:44:28.454" status="PASS" starttime="20170824 16:44:28.137"></status>
</kw>
<msg timestamp="20170824 16:44:28.454" level="INFO">${power_state} = On</msg>
<status endtime="20170824 16:44:28.454" status="PASS" starttime="20170824 16:44:28.137"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:44:28.455" status="PASS" starttime="20170824 16:44:28.454"></status>
</kw>
<status endtime="20170824 16:44:28.455" status="PASS" starttime="20170824 16:44:28.137"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:44:28.458" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:44:28.459" status="PASS" starttime="20170824 16:44:28.458"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:44:28.460" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:44:28.460" status="PASS" starttime="20170824 16:44:28.459"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:44:28.461" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:44:28.461" status="PASS" starttime="20170824 16:44:28.460"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:44:28.461" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:44:28.461" status="PASS" starttime="20170824 16:44:28.461"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:44:28.671" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:44:28.672" status="PASS" starttime="20170824 16:44:28.462"></status>
</kw>
<msg timestamp="20170824 16:44:28.672" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:44:28.672" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:44:28.672" status="PASS" starttime="20170824 16:44:28.462"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:44:28.672" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:44:28.673" status="PASS" starttime="20170824 16:44:28.672"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:44:28.673" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:44:28.673" status="PASS" starttime="20170824 16:44:28.673"></status>
</kw>
<status endtime="20170824 16:44:28.673" status="PASS" starttime="20170824 16:44:28.458"></status>
</kw>
<status endtime="20170824 16:44:28.673" status="PASS" starttime="20170824 16:44:28.457"></status>
</kw>
<status endtime="20170824 16:44:28.674" status="PASS" starttime="20170824 16:44:28.457"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:44:28.674" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:44:28.674" status="PASS" starttime="20170824 16:44:28.674"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:44:28.677" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:44:28.677" status="PASS" starttime="20170824 16:44:28.676"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:44:28.677" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:44:28.678" status="PASS" starttime="20170824 16:44:28.677"></status>
</kw>
<status endtime="20170824 16:44:28.678" status="PASS" starttime="20170824 16:44:28.677"></status>
</kw>
<status endtime="20170824 16:44:28.678" status="PASS" starttime="20170824 16:44:28.675"></status>
</kw>
<status endtime="20170824 16:44:28.678" status="PASS" starttime="20170824 16:44:28.675"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:44:28.768" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:44:28.769" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:44:28.769" status="PASS" starttime="20170824 16:44:28.678"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:44:28.770" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:44:28.770" status="PASS" starttime="20170824 16:44:28.770"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:44:28.771" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:44:28.771" status="PASS" starttime="20170824 16:44:28.771"></status>
</kw>
<status endtime="20170824 16:44:28.772" status="PASS" starttime="20170824 16:44:28.771"></status>
</kw>
<status endtime="20170824 16:44:28.772" status="PASS" starttime="20170824 16:44:28.769"></status>
</kw>
<status endtime="20170824 16:44:28.772" status="PASS" starttime="20170824 16:44:28.769"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:44:28.772" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:44:28.772" status="PASS" starttime="20170824 16:44:28.772"></status>
</kw>
<msg timestamp="20170824 16:44:28.772" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:44:28.773" status="PASS" starttime="20170824 16:44:28.456"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:44:28.773" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:44:28.773" status="PASS" starttime="20170824 16:44:28.773"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:44:28.774" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:44:28.774" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:44:28.774" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170824 16:44:28.774" status="PASS" starttime="20170824 16:44:28.773"></status>
</kw>
<msg timestamp="20170824 16:44:28.774" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170824 16:44:28.774" status="PASS" starttime="20170824 16:44:28.455"></status>
</kw>
<msg timestamp="20170824 16:44:28.775" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170824 16:44:28.775" status="PASS" starttime="20170824 16:44:28.455"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170824 16:44:28.775" level="FAIL">Running != Quiesced</msg>
<status endtime="20170824 16:44:28.775" status="FAIL" starttime="20170824 16:44:28.775"></status>
</kw>
<status endtime="20170824 16:44:28.775" status="FAIL" starttime="20170824 16:44:28.136"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:44:38.783" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:44:38.783" status="PASS" starttime="20170824 16:44:38.782"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:44:38.784" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:44:38.784" status="PASS" starttime="20170824 16:44:38.783"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:44:38.784" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:44:38.784" status="PASS" starttime="20170824 16:44:38.784"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:44:38.785" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:44:38.785" status="PASS" starttime="20170824 16:44:38.785"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:44:38.977" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:44:38.977" status="PASS" starttime="20170824 16:44:38.786"></status>
</kw>
<msg timestamp="20170824 16:44:38.977" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:44:38.978" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:44:38.978" status="PASS" starttime="20170824 16:44:38.785"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:44:38.978" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:44:38.978" status="PASS" starttime="20170824 16:44:38.978"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:44:38.979" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:44:38.979" status="PASS" starttime="20170824 16:44:38.979"></status>
</kw>
<status endtime="20170824 16:44:38.979" status="PASS" starttime="20170824 16:44:38.782"></status>
</kw>
<status endtime="20170824 16:44:38.979" status="PASS" starttime="20170824 16:44:38.781"></status>
</kw>
<status endtime="20170824 16:44:38.979" status="PASS" starttime="20170824 16:44:38.780"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:44:38.980" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:44:38.980" status="PASS" starttime="20170824 16:44:38.980"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:44:38.982" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:44:38.982" status="PASS" starttime="20170824 16:44:38.982"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:44:38.987" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:44:38.987" status="PASS" starttime="20170824 16:44:38.983"></status>
</kw>
<status endtime="20170824 16:44:38.987" status="PASS" starttime="20170824 16:44:38.983"></status>
</kw>
<status endtime="20170824 16:44:38.987" status="PASS" starttime="20170824 16:44:38.981"></status>
</kw>
<status endtime="20170824 16:44:38.987" status="PASS" starttime="20170824 16:44:38.980"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:44:39.071" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:44:39.071" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:44:39.071" status="PASS" starttime="20170824 16:44:38.987"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:44:39.073" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:44:39.073" status="PASS" starttime="20170824 16:44:39.073"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:44:39.074" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:44:39.074" status="PASS" starttime="20170824 16:44:39.074"></status>
</kw>
<status endtime="20170824 16:44:39.074" status="PASS" starttime="20170824 16:44:39.073"></status>
</kw>
<status endtime="20170824 16:44:39.075" status="PASS" starttime="20170824 16:44:39.072"></status>
</kw>
<status endtime="20170824 16:44:39.075" status="PASS" starttime="20170824 16:44:39.072"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:44:39.075" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:44:39.075" status="PASS" starttime="20170824 16:44:39.075"></status>
</kw>
<msg timestamp="20170824 16:44:39.075" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:44:39.075" status="PASS" starttime="20170824 16:44:38.780"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:44:39.076" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:44:39.076" status="PASS" starttime="20170824 16:44:39.076"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:44:39.077" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:44:39.077" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:44:39.077" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170824 16:44:39.077" status="PASS" starttime="20170824 16:44:39.076"></status>
</kw>
<msg timestamp="20170824 16:44:39.077" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 16:44:39.077" status="PASS" starttime="20170824 16:44:38.778"></status>
</kw>
<msg timestamp="20170824 16:44:39.077" level="INFO">${power_state} = On</msg>
<status endtime="20170824 16:44:39.077" status="PASS" starttime="20170824 16:44:38.777"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:44:39.078" status="PASS" starttime="20170824 16:44:39.078"></status>
</kw>
<status endtime="20170824 16:44:39.078" status="PASS" starttime="20170824 16:44:38.777"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:44:39.082" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:44:39.082" status="PASS" starttime="20170824 16:44:39.082"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:44:39.083" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:44:39.083" status="PASS" starttime="20170824 16:44:39.083"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:44:39.083" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:44:39.084" status="PASS" starttime="20170824 16:44:39.083"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:44:39.084" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:44:39.084" status="PASS" starttime="20170824 16:44:39.084"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:44:39.314" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:44:39.314" status="PASS" starttime="20170824 16:44:39.085"></status>
</kw>
<msg timestamp="20170824 16:44:39.314" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:44:39.314" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:44:39.314" status="PASS" starttime="20170824 16:44:39.085"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:44:39.315" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:44:39.315" status="PASS" starttime="20170824 16:44:39.315"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:44:39.316" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:44:39.316" status="PASS" starttime="20170824 16:44:39.315"></status>
</kw>
<status endtime="20170824 16:44:39.316" status="PASS" starttime="20170824 16:44:39.081"></status>
</kw>
<status endtime="20170824 16:44:39.316" status="PASS" starttime="20170824 16:44:39.081"></status>
</kw>
<status endtime="20170824 16:44:39.316" status="PASS" starttime="20170824 16:44:39.080"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:44:39.317" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:44:39.317" status="PASS" starttime="20170824 16:44:39.316"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:44:39.319" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:44:39.319" status="PASS" starttime="20170824 16:44:39.318"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:44:39.320" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:44:39.321" status="PASS" starttime="20170824 16:44:39.320"></status>
</kw>
<status endtime="20170824 16:44:39.321" status="PASS" starttime="20170824 16:44:39.319"></status>
</kw>
<status endtime="20170824 16:44:39.321" status="PASS" starttime="20170824 16:44:39.317"></status>
</kw>
<status endtime="20170824 16:44:39.321" status="PASS" starttime="20170824 16:44:39.317"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:44:39.480" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:44:39.480" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:44:39.481" status="PASS" starttime="20170824 16:44:39.321"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:44:39.482" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:44:39.482" status="PASS" starttime="20170824 16:44:39.482"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:44:39.483" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:44:39.484" status="PASS" starttime="20170824 16:44:39.483"></status>
</kw>
<status endtime="20170824 16:44:39.484" status="PASS" starttime="20170824 16:44:39.483"></status>
</kw>
<status endtime="20170824 16:44:39.484" status="PASS" starttime="20170824 16:44:39.481"></status>
</kw>
<status endtime="20170824 16:44:39.484" status="PASS" starttime="20170824 16:44:39.481"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:44:39.484" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:44:39.484" status="PASS" starttime="20170824 16:44:39.484"></status>
</kw>
<msg timestamp="20170824 16:44:39.485" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:44:39.485" status="PASS" starttime="20170824 16:44:39.079"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:44:39.485" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:44:39.485" status="PASS" starttime="20170824 16:44:39.485"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:44:39.486" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:44:39.486" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:44:39.486" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170824 16:44:39.486" status="PASS" starttime="20170824 16:44:39.486"></status>
</kw>
<msg timestamp="20170824 16:44:39.486" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170824 16:44:39.486" status="PASS" starttime="20170824 16:44:39.079"></status>
</kw>
<msg timestamp="20170824 16:44:39.487" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170824 16:44:39.487" status="PASS" starttime="20170824 16:44:39.078"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170824 16:44:39.487" level="FAIL">Running != Quiesced</msg>
<status endtime="20170824 16:44:39.487" status="FAIL" starttime="20170824 16:44:39.487"></status>
</kw>
<status endtime="20170824 16:44:39.488" status="FAIL" starttime="20170824 16:44:38.776"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:44:49.493" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:44:49.494" status="PASS" starttime="20170824 16:44:49.493"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:44:49.494" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:44:49.494" status="PASS" starttime="20170824 16:44:49.494"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:44:49.495" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:44:49.495" status="PASS" starttime="20170824 16:44:49.495"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:44:49.496" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:44:49.496" status="PASS" starttime="20170824 16:44:49.495"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:44:49.686" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:44:49.687" status="PASS" starttime="20170824 16:44:49.496"></status>
</kw>
<msg timestamp="20170824 16:44:49.687" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:44:49.687" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:44:49.687" status="PASS" starttime="20170824 16:44:49.496"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:44:49.687" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:44:49.688" status="PASS" starttime="20170824 16:44:49.687"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:44:49.688" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:44:49.688" status="PASS" starttime="20170824 16:44:49.688"></status>
</kw>
<status endtime="20170824 16:44:49.689" status="PASS" starttime="20170824 16:44:49.492"></status>
</kw>
<status endtime="20170824 16:44:49.689" status="PASS" starttime="20170824 16:44:49.492"></status>
</kw>
<status endtime="20170824 16:44:49.689" status="PASS" starttime="20170824 16:44:49.491"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:44:49.689" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:44:49.689" status="PASS" starttime="20170824 16:44:49.689"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:44:49.691" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:44:49.691" status="PASS" starttime="20170824 16:44:49.691"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:44:49.692" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:44:49.692" status="PASS" starttime="20170824 16:44:49.692"></status>
</kw>
<status endtime="20170824 16:44:49.693" status="PASS" starttime="20170824 16:44:49.692"></status>
</kw>
<status endtime="20170824 16:44:49.693" status="PASS" starttime="20170824 16:44:49.690"></status>
</kw>
<status endtime="20170824 16:44:49.693" status="PASS" starttime="20170824 16:44:49.690"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:44:49.783" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:44:49.783" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:44:49.783" status="PASS" starttime="20170824 16:44:49.693"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:44:49.785" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:44:49.785" status="PASS" starttime="20170824 16:44:49.784"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:44:49.786" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:44:49.786" status="PASS" starttime="20170824 16:44:49.786"></status>
</kw>
<status endtime="20170824 16:44:49.786" status="PASS" starttime="20170824 16:44:49.785"></status>
</kw>
<status endtime="20170824 16:44:49.786" status="PASS" starttime="20170824 16:44:49.784"></status>
</kw>
<status endtime="20170824 16:44:49.786" status="PASS" starttime="20170824 16:44:49.783"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:44:49.787" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:44:49.787" status="PASS" starttime="20170824 16:44:49.787"></status>
</kw>
<msg timestamp="20170824 16:44:49.787" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:44:49.787" status="PASS" starttime="20170824 16:44:49.490"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:44:49.788" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:44:49.788" status="PASS" starttime="20170824 16:44:49.787"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:44:49.788" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:44:49.788" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:44:49.788" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170824 16:44:49.788" status="PASS" starttime="20170824 16:44:49.788"></status>
</kw>
<msg timestamp="20170824 16:44:49.789" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 16:44:49.789" status="PASS" starttime="20170824 16:44:49.490"></status>
</kw>
<msg timestamp="20170824 16:44:49.789" level="INFO">${power_state} = On</msg>
<status endtime="20170824 16:44:49.789" status="PASS" starttime="20170824 16:44:49.489"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:44:49.790" status="PASS" starttime="20170824 16:44:49.789"></status>
</kw>
<status endtime="20170824 16:44:49.790" status="PASS" starttime="20170824 16:44:49.489"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:44:49.793" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:44:49.794" status="PASS" starttime="20170824 16:44:49.793"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:44:49.794" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:44:49.794" status="PASS" starttime="20170824 16:44:49.794"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:44:49.795" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:44:49.795" status="PASS" starttime="20170824 16:44:49.795"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:44:49.796" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:44:49.796" status="PASS" starttime="20170824 16:44:49.795"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:44:49.982" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:44:49.982" status="PASS" starttime="20170824 16:44:49.796"></status>
</kw>
<msg timestamp="20170824 16:44:49.982" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:44:49.982" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:44:49.982" status="PASS" starttime="20170824 16:44:49.796"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:44:49.983" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:44:49.983" status="PASS" starttime="20170824 16:44:49.982"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:44:49.983" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:44:49.983" status="PASS" starttime="20170824 16:44:49.983"></status>
</kw>
<status endtime="20170824 16:44:49.983" status="PASS" starttime="20170824 16:44:49.792"></status>
</kw>
<status endtime="20170824 16:44:49.984" status="PASS" starttime="20170824 16:44:49.792"></status>
</kw>
<status endtime="20170824 16:44:49.984" status="PASS" starttime="20170824 16:44:49.791"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:44:49.984" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:44:49.984" status="PASS" starttime="20170824 16:44:49.984"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:44:49.987" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:44:49.987" status="PASS" starttime="20170824 16:44:49.986"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:44:49.988" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:44:49.988" status="PASS" starttime="20170824 16:44:49.987"></status>
</kw>
<status endtime="20170824 16:44:49.988" status="PASS" starttime="20170824 16:44:49.987"></status>
</kw>
<status endtime="20170824 16:44:49.988" status="PASS" starttime="20170824 16:44:49.985"></status>
</kw>
<status endtime="20170824 16:44:49.988" status="PASS" starttime="20170824 16:44:49.985"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:44:50.145" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:44:50.146" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:44:50.146" status="PASS" starttime="20170824 16:44:49.988"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:44:50.148" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:44:50.148" status="PASS" starttime="20170824 16:44:50.147"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:44:50.148" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:44:50.149" status="PASS" starttime="20170824 16:44:50.148"></status>
</kw>
<status endtime="20170824 16:44:50.149" status="PASS" starttime="20170824 16:44:50.148"></status>
</kw>
<status endtime="20170824 16:44:50.149" status="PASS" starttime="20170824 16:44:50.147"></status>
</kw>
<status endtime="20170824 16:44:50.149" status="PASS" starttime="20170824 16:44:50.146"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:44:50.149" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:44:50.149" status="PASS" starttime="20170824 16:44:50.149"></status>
</kw>
<msg timestamp="20170824 16:44:50.150" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:44:50.150" status="PASS" starttime="20170824 16:44:49.791"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:44:50.150" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:44:50.150" status="PASS" starttime="20170824 16:44:50.150"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:44:50.151" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:44:50.151" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:44:50.151" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170824 16:44:50.151" status="PASS" starttime="20170824 16:44:50.150"></status>
</kw>
<msg timestamp="20170824 16:44:50.151" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170824 16:44:50.151" status="PASS" starttime="20170824 16:44:49.790"></status>
</kw>
<msg timestamp="20170824 16:44:50.152" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170824 16:44:50.152" status="PASS" starttime="20170824 16:44:49.790"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170824 16:44:50.152" level="FAIL">Running != Quiesced</msg>
<status endtime="20170824 16:44:50.152" status="FAIL" starttime="20170824 16:44:50.152"></status>
</kw>
<status endtime="20170824 16:44:50.153" status="FAIL" starttime="20170824 16:44:49.488"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:45:00.158" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:45:00.158" status="PASS" starttime="20170824 16:45:00.157"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:45:00.159" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:45:00.159" status="PASS" starttime="20170824 16:45:00.158"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:45:00.159" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:45:00.160" status="PASS" starttime="20170824 16:45:00.159"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:45:00.161" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:45:00.161" status="PASS" starttime="20170824 16:45:00.160"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:45:00.348" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:45:00.349" status="PASS" starttime="20170824 16:45:00.161"></status>
</kw>
<msg timestamp="20170824 16:45:00.349" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:45:00.349" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:45:00.349" status="PASS" starttime="20170824 16:45:00.161"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:45:00.350" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:45:00.350" status="PASS" starttime="20170824 16:45:00.349"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:45:00.350" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:45:00.350" status="PASS" starttime="20170824 16:45:00.350"></status>
</kw>
<status endtime="20170824 16:45:00.351" status="PASS" starttime="20170824 16:45:00.157"></status>
</kw>
<status endtime="20170824 16:45:00.351" status="PASS" starttime="20170824 16:45:00.156"></status>
</kw>
<status endtime="20170824 16:45:00.351" status="PASS" starttime="20170824 16:45:00.156"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:45:00.351" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:45:00.351" status="PASS" starttime="20170824 16:45:00.351"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:45:00.354" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:45:00.354" status="PASS" starttime="20170824 16:45:00.353"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:45:00.355" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:45:00.356" status="PASS" starttime="20170824 16:45:00.355"></status>
</kw>
<status endtime="20170824 16:45:00.356" status="PASS" starttime="20170824 16:45:00.354"></status>
</kw>
<status endtime="20170824 16:45:00.356" status="PASS" starttime="20170824 16:45:00.352"></status>
</kw>
<status endtime="20170824 16:45:00.356" status="PASS" starttime="20170824 16:45:00.352"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:45:00.430" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:45:00.430" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:45:00.430" status="PASS" starttime="20170824 16:45:00.356"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:45:00.432" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:45:00.432" status="PASS" starttime="20170824 16:45:00.431"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:45:00.433" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:45:00.433" status="PASS" starttime="20170824 16:45:00.432"></status>
</kw>
<status endtime="20170824 16:45:00.433" status="PASS" starttime="20170824 16:45:00.432"></status>
</kw>
<status endtime="20170824 16:45:00.433" status="PASS" starttime="20170824 16:45:00.431"></status>
</kw>
<status endtime="20170824 16:45:00.433" status="PASS" starttime="20170824 16:45:00.430"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:45:00.434" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:45:00.434" status="PASS" starttime="20170824 16:45:00.434"></status>
</kw>
<msg timestamp="20170824 16:45:00.434" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:45:00.434" status="PASS" starttime="20170824 16:45:00.155"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:45:00.435" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:45:00.435" status="PASS" starttime="20170824 16:45:00.435"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:45:00.436" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:45:00.436" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:45:00.436" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170824 16:45:00.436" status="PASS" starttime="20170824 16:45:00.436"></status>
</kw>
<msg timestamp="20170824 16:45:00.437" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 16:45:00.437" status="PASS" starttime="20170824 16:45:00.155"></status>
</kw>
<msg timestamp="20170824 16:45:00.437" level="INFO">${power_state} = On</msg>
<status endtime="20170824 16:45:00.437" status="PASS" starttime="20170824 16:45:00.154"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:45:00.438" status="PASS" starttime="20170824 16:45:00.437"></status>
</kw>
<status endtime="20170824 16:45:00.438" status="PASS" starttime="20170824 16:45:00.154"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:45:00.442" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:45:00.442" status="PASS" starttime="20170824 16:45:00.441"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:45:00.443" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:45:00.443" status="PASS" starttime="20170824 16:45:00.442"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:45:00.443" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:45:00.443" status="PASS" starttime="20170824 16:45:00.443"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:45:00.444" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:45:00.444" status="PASS" starttime="20170824 16:45:00.444"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:45:00.632" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:45:00.632" status="PASS" starttime="20170824 16:45:00.445"></status>
</kw>
<msg timestamp="20170824 16:45:00.632" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:45:00.632" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:45:00.632" status="PASS" starttime="20170824 16:45:00.444"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:45:00.633" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:45:00.633" status="PASS" starttime="20170824 16:45:00.632"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:45:00.633" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:45:00.633" status="PASS" starttime="20170824 16:45:00.633"></status>
</kw>
<status endtime="20170824 16:45:00.634" status="PASS" starttime="20170824 16:45:00.441"></status>
</kw>
<status endtime="20170824 16:45:00.634" status="PASS" starttime="20170824 16:45:00.440"></status>
</kw>
<status endtime="20170824 16:45:00.634" status="PASS" starttime="20170824 16:45:00.440"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:45:00.634" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:45:00.634" status="PASS" starttime="20170824 16:45:00.634"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:45:00.636" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:45:00.636" status="PASS" starttime="20170824 16:45:00.636"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:45:00.637" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:45:00.638" status="PASS" starttime="20170824 16:45:00.637"></status>
</kw>
<status endtime="20170824 16:45:00.638" status="PASS" starttime="20170824 16:45:00.637"></status>
</kw>
<status endtime="20170824 16:45:00.638" status="PASS" starttime="20170824 16:45:00.635"></status>
</kw>
<status endtime="20170824 16:45:00.638" status="PASS" starttime="20170824 16:45:00.635"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:45:00.728" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:45:00.728" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:45:00.729" status="PASS" starttime="20170824 16:45:00.638"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:45:00.730" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:45:00.730" status="PASS" starttime="20170824 16:45:00.730"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:45:00.732" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:45:00.732" status="PASS" starttime="20170824 16:45:00.731"></status>
</kw>
<status endtime="20170824 16:45:00.732" status="PASS" starttime="20170824 16:45:00.731"></status>
</kw>
<status endtime="20170824 16:45:00.732" status="PASS" starttime="20170824 16:45:00.729"></status>
</kw>
<status endtime="20170824 16:45:00.732" status="PASS" starttime="20170824 16:45:00.729"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:45:00.732" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:45:00.733" status="PASS" starttime="20170824 16:45:00.732"></status>
</kw>
<msg timestamp="20170824 16:45:00.733" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:45:00.733" status="PASS" starttime="20170824 16:45:00.439"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:45:00.734" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:45:00.734" status="PASS" starttime="20170824 16:45:00.733"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:45:00.734" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:45:00.734" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:45:00.735" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170824 16:45:00.735" status="PASS" starttime="20170824 16:45:00.734"></status>
</kw>
<msg timestamp="20170824 16:45:00.735" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170824 16:45:00.735" status="PASS" starttime="20170824 16:45:00.438"></status>
</kw>
<msg timestamp="20170824 16:45:00.735" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170824 16:45:00.735" status="PASS" starttime="20170824 16:45:00.438"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170824 16:45:00.736" level="FAIL">Running != Quiesced</msg>
<status endtime="20170824 16:45:00.736" status="FAIL" starttime="20170824 16:45:00.735"></status>
</kw>
<status endtime="20170824 16:45:00.736" status="FAIL" starttime="20170824 16:45:00.153"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:45:10.742" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:45:10.742" status="PASS" starttime="20170824 16:45:10.741"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:45:10.743" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:45:10.743" status="PASS" starttime="20170824 16:45:10.742"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:45:10.743" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:45:10.743" status="PASS" starttime="20170824 16:45:10.743"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:45:10.744" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:45:10.744" status="PASS" starttime="20170824 16:45:10.743"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:45:10.939" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:45:10.939" status="PASS" starttime="20170824 16:45:10.745"></status>
</kw>
<msg timestamp="20170824 16:45:10.939" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:45:10.939" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:45:10.939" status="PASS" starttime="20170824 16:45:10.744"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:45:10.940" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:45:10.940" status="PASS" starttime="20170824 16:45:10.940"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:45:10.941" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:45:10.941" status="PASS" starttime="20170824 16:45:10.940"></status>
</kw>
<status endtime="20170824 16:45:10.941" status="PASS" starttime="20170824 16:45:10.741"></status>
</kw>
<status endtime="20170824 16:45:10.941" status="PASS" starttime="20170824 16:45:10.740"></status>
</kw>
<status endtime="20170824 16:45:10.941" status="PASS" starttime="20170824 16:45:10.740"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:45:10.942" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:45:10.942" status="PASS" starttime="20170824 16:45:10.941"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:45:10.944" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:45:10.944" status="PASS" starttime="20170824 16:45:10.943"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:45:10.945" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:45:10.945" status="PASS" starttime="20170824 16:45:10.944"></status>
</kw>
<status endtime="20170824 16:45:10.945" status="PASS" starttime="20170824 16:45:10.944"></status>
</kw>
<status endtime="20170824 16:45:10.945" status="PASS" starttime="20170824 16:45:10.942"></status>
</kw>
<status endtime="20170824 16:45:10.945" status="PASS" starttime="20170824 16:45:10.942"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:45:11.010" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:45:11.010" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:45:11.010" status="PASS" starttime="20170824 16:45:10.945"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:45:11.012" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:45:11.012" status="PASS" starttime="20170824 16:45:11.012"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:45:11.013" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:45:11.013" status="PASS" starttime="20170824 16:45:11.013"></status>
</kw>
<status endtime="20170824 16:45:11.013" status="PASS" starttime="20170824 16:45:11.012"></status>
</kw>
<status endtime="20170824 16:45:11.013" status="PASS" starttime="20170824 16:45:11.011"></status>
</kw>
<status endtime="20170824 16:45:11.013" status="PASS" starttime="20170824 16:45:11.011"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:45:11.014" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:45:11.014" status="PASS" starttime="20170824 16:45:11.014"></status>
</kw>
<msg timestamp="20170824 16:45:11.014" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:45:11.014" status="PASS" starttime="20170824 16:45:10.739"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:45:11.015" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:45:11.015" status="PASS" starttime="20170824 16:45:11.014"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:45:11.016" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:45:11.016" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:45:11.016" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170824 16:45:11.016" status="PASS" starttime="20170824 16:45:11.015"></status>
</kw>
<msg timestamp="20170824 16:45:11.016" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 16:45:11.016" status="PASS" starttime="20170824 16:45:10.738"></status>
</kw>
<msg timestamp="20170824 16:45:11.016" level="INFO">${power_state} = On</msg>
<status endtime="20170824 16:45:11.017" status="PASS" starttime="20170824 16:45:10.738"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:45:11.017" status="PASS" starttime="20170824 16:45:11.017"></status>
</kw>
<status endtime="20170824 16:45:11.017" status="PASS" starttime="20170824 16:45:10.738"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:45:11.021" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:45:11.021" status="PASS" starttime="20170824 16:45:11.020"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:45:11.022" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:45:11.022" status="PASS" starttime="20170824 16:45:11.022"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:45:11.023" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:45:11.023" status="PASS" starttime="20170824 16:45:11.022"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:45:11.023" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:45:11.023" status="PASS" starttime="20170824 16:45:11.023"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:45:11.204" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:45:11.204" status="PASS" starttime="20170824 16:45:11.024"></status>
</kw>
<msg timestamp="20170824 16:45:11.204" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:45:11.204" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:45:11.204" status="PASS" starttime="20170824 16:45:11.024"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:45:11.205" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:45:11.205" status="PASS" starttime="20170824 16:45:11.204"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:45:11.205" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:45:11.206" status="PASS" starttime="20170824 16:45:11.205"></status>
</kw>
<status endtime="20170824 16:45:11.206" status="PASS" starttime="20170824 16:45:11.020"></status>
</kw>
<status endtime="20170824 16:45:11.206" status="PASS" starttime="20170824 16:45:11.019"></status>
</kw>
<status endtime="20170824 16:45:11.206" status="PASS" starttime="20170824 16:45:11.019"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:45:11.206" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:45:11.207" status="PASS" starttime="20170824 16:45:11.206"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:45:11.209" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:45:11.209" status="PASS" starttime="20170824 16:45:11.208"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:45:11.210" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:45:11.210" status="PASS" starttime="20170824 16:45:11.209"></status>
</kw>
<status endtime="20170824 16:45:11.210" status="PASS" starttime="20170824 16:45:11.209"></status>
</kw>
<status endtime="20170824 16:45:11.210" status="PASS" starttime="20170824 16:45:11.207"></status>
</kw>
<status endtime="20170824 16:45:11.210" status="PASS" starttime="20170824 16:45:11.207"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:45:11.302" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:45:11.302" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:45:11.302" status="PASS" starttime="20170824 16:45:11.210"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:45:11.304" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:45:11.304" status="PASS" starttime="20170824 16:45:11.304"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:45:11.305" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:45:11.305" status="PASS" starttime="20170824 16:45:11.305"></status>
</kw>
<status endtime="20170824 16:45:11.305" status="PASS" starttime="20170824 16:45:11.304"></status>
</kw>
<status endtime="20170824 16:45:11.305" status="PASS" starttime="20170824 16:45:11.303"></status>
</kw>
<status endtime="20170824 16:45:11.305" status="PASS" starttime="20170824 16:45:11.303"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:45:11.306" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:45:11.306" status="PASS" starttime="20170824 16:45:11.306"></status>
</kw>
<msg timestamp="20170824 16:45:11.306" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:45:11.306" status="PASS" starttime="20170824 16:45:11.018"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:45:11.307" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:45:11.307" status="PASS" starttime="20170824 16:45:11.306"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:45:11.307" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:45:11.307" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:45:11.308" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170824 16:45:11.308" status="PASS" starttime="20170824 16:45:11.307"></status>
</kw>
<msg timestamp="20170824 16:45:11.308" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170824 16:45:11.308" status="PASS" starttime="20170824 16:45:11.018"></status>
</kw>
<msg timestamp="20170824 16:45:11.308" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170824 16:45:11.308" status="PASS" starttime="20170824 16:45:11.017"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170824 16:45:11.309" level="FAIL">Running != Quiesced</msg>
<status endtime="20170824 16:45:11.309" status="FAIL" starttime="20170824 16:45:11.308"></status>
</kw>
<status endtime="20170824 16:45:11.309" status="FAIL" starttime="20170824 16:45:10.737"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:45:21.315" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:45:21.315" status="PASS" starttime="20170824 16:45:21.314"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:45:21.316" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:45:21.316" status="PASS" starttime="20170824 16:45:21.316"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:45:21.317" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:45:21.317" status="PASS" starttime="20170824 16:45:21.316"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:45:21.317" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:45:21.317" status="PASS" starttime="20170824 16:45:21.317"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:45:21.594" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:45:21.594" status="PASS" starttime="20170824 16:45:21.318"></status>
</kw>
<msg timestamp="20170824 16:45:21.595" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:45:21.595" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:45:21.595" status="PASS" starttime="20170824 16:45:21.318"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:45:21.595" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:45:21.595" status="PASS" starttime="20170824 16:45:21.595"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:45:21.596" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:45:21.596" status="PASS" starttime="20170824 16:45:21.596"></status>
</kw>
<status endtime="20170824 16:45:21.596" status="PASS" starttime="20170824 16:45:21.314"></status>
</kw>
<status endtime="20170824 16:45:21.596" status="PASS" starttime="20170824 16:45:21.313"></status>
</kw>
<status endtime="20170824 16:45:21.597" status="PASS" starttime="20170824 16:45:21.313"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:45:21.597" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:45:21.597" status="PASS" starttime="20170824 16:45:21.597"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:45:21.599" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:45:21.599" status="PASS" starttime="20170824 16:45:21.599"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:45:21.601" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:45:21.601" status="PASS" starttime="20170824 16:45:21.600"></status>
</kw>
<status endtime="20170824 16:45:21.601" status="PASS" starttime="20170824 16:45:21.599"></status>
</kw>
<status endtime="20170824 16:45:21.601" status="PASS" starttime="20170824 16:45:21.598"></status>
</kw>
<status endtime="20170824 16:45:21.601" status="PASS" starttime="20170824 16:45:21.597"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:45:21.667" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:45:21.667" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:45:21.667" status="PASS" starttime="20170824 16:45:21.601"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:45:21.669" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:45:21.669" status="PASS" starttime="20170824 16:45:21.669"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:45:21.670" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:45:21.671" status="PASS" starttime="20170824 16:45:21.670"></status>
</kw>
<status endtime="20170824 16:45:21.671" status="PASS" starttime="20170824 16:45:21.670"></status>
</kw>
<status endtime="20170824 16:45:21.671" status="PASS" starttime="20170824 16:45:21.668"></status>
</kw>
<status endtime="20170824 16:45:21.671" status="PASS" starttime="20170824 16:45:21.667"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:45:21.671" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:45:21.671" status="PASS" starttime="20170824 16:45:21.671"></status>
</kw>
<msg timestamp="20170824 16:45:21.672" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:45:21.672" status="PASS" starttime="20170824 16:45:21.312"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:45:21.672" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:45:21.672" status="PASS" starttime="20170824 16:45:21.672"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:45:21.673" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:45:21.673" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:45:21.673" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170824 16:45:21.673" status="PASS" starttime="20170824 16:45:21.673"></status>
</kw>
<msg timestamp="20170824 16:45:21.673" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 16:45:21.673" status="PASS" starttime="20170824 16:45:21.311"></status>
</kw>
<msg timestamp="20170824 16:45:21.674" level="INFO">${power_state} = On</msg>
<status endtime="20170824 16:45:21.674" status="PASS" starttime="20170824 16:45:21.311"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:45:21.674" status="PASS" starttime="20170824 16:45:21.674"></status>
</kw>
<status endtime="20170824 16:45:21.674" status="PASS" starttime="20170824 16:45:21.310"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:45:21.678" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:45:21.678" status="PASS" starttime="20170824 16:45:21.678"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:45:21.679" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:45:21.679" status="PASS" starttime="20170824 16:45:21.679"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:45:21.680" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:45:21.680" status="PASS" starttime="20170824 16:45:21.679"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:45:21.680" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:45:21.680" status="PASS" starttime="20170824 16:45:21.680"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:45:21.902" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:45:21.902" status="PASS" starttime="20170824 16:45:21.681"></status>
</kw>
<msg timestamp="20170824 16:45:21.903" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:45:21.903" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:45:21.903" status="PASS" starttime="20170824 16:45:21.681"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:45:21.903" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:45:21.903" status="PASS" starttime="20170824 16:45:21.903"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:45:21.904" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:45:21.904" status="PASS" starttime="20170824 16:45:21.904"></status>
</kw>
<status endtime="20170824 16:45:21.904" status="PASS" starttime="20170824 16:45:21.677"></status>
</kw>
<status endtime="20170824 16:45:21.904" status="PASS" starttime="20170824 16:45:21.677"></status>
</kw>
<status endtime="20170824 16:45:21.904" status="PASS" starttime="20170824 16:45:21.676"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:45:21.905" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:45:21.905" status="PASS" starttime="20170824 16:45:21.905"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:45:21.907" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:45:21.907" status="PASS" starttime="20170824 16:45:21.907"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:45:21.908" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:45:21.908" status="PASS" starttime="20170824 16:45:21.908"></status>
</kw>
<status endtime="20170824 16:45:21.908" status="PASS" starttime="20170824 16:45:21.907"></status>
</kw>
<status endtime="20170824 16:45:21.909" status="PASS" starttime="20170824 16:45:21.906"></status>
</kw>
<status endtime="20170824 16:45:21.909" status="PASS" starttime="20170824 16:45:21.905"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:45:22.039" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:45:22.040" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:45:22.040" status="PASS" starttime="20170824 16:45:21.909"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:45:22.041" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:45:22.041" status="PASS" starttime="20170824 16:45:22.041"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:45:22.042" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:45:22.042" status="PASS" starttime="20170824 16:45:22.042"></status>
</kw>
<status endtime="20170824 16:45:22.043" status="PASS" starttime="20170824 16:45:22.042"></status>
</kw>
<status endtime="20170824 16:45:22.043" status="PASS" starttime="20170824 16:45:22.040"></status>
</kw>
<status endtime="20170824 16:45:22.043" status="PASS" starttime="20170824 16:45:22.040"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:45:22.043" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:45:22.043" status="PASS" starttime="20170824 16:45:22.043"></status>
</kw>
<msg timestamp="20170824 16:45:22.043" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:45:22.043" status="PASS" starttime="20170824 16:45:21.675"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:45:22.044" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:45:22.044" status="PASS" starttime="20170824 16:45:22.044"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:45:22.045" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:45:22.045" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:45:22.045" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170824 16:45:22.045" status="PASS" starttime="20170824 16:45:22.044"></status>
</kw>
<msg timestamp="20170824 16:45:22.045" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170824 16:45:22.045" status="PASS" starttime="20170824 16:45:21.675"></status>
</kw>
<msg timestamp="20170824 16:45:22.046" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170824 16:45:22.046" status="PASS" starttime="20170824 16:45:21.675"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170824 16:45:22.046" level="FAIL">Running != Quiesced</msg>
<status endtime="20170824 16:45:22.046" status="FAIL" starttime="20170824 16:45:22.046"></status>
</kw>
<status endtime="20170824 16:45:22.046" status="FAIL" starttime="20170824 16:45:21.310"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:45:32.052" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:45:32.052" status="PASS" starttime="20170824 16:45:32.051"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:45:32.053" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:45:32.053" status="PASS" starttime="20170824 16:45:32.053"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:45:32.054" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:45:32.054" status="PASS" starttime="20170824 16:45:32.053"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:45:32.054" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:45:32.054" status="PASS" starttime="20170824 16:45:32.054"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:45:32.235" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:45:32.236" status="PASS" starttime="20170824 16:45:32.055"></status>
</kw>
<msg timestamp="20170824 16:45:32.236" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:45:32.236" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:45:32.236" status="PASS" starttime="20170824 16:45:32.055"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:45:32.236" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:45:32.236" status="PASS" starttime="20170824 16:45:32.236"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:45:32.237" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:45:32.237" status="PASS" starttime="20170824 16:45:32.237"></status>
</kw>
<status endtime="20170824 16:45:32.237" status="PASS" starttime="20170824 16:45:32.050"></status>
</kw>
<status endtime="20170824 16:45:32.237" status="PASS" starttime="20170824 16:45:32.050"></status>
</kw>
<status endtime="20170824 16:45:32.237" status="PASS" starttime="20170824 16:45:32.049"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:45:32.238" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:45:32.238" status="PASS" starttime="20170824 16:45:32.238"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:45:32.240" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:45:32.240" status="PASS" starttime="20170824 16:45:32.239"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:45:32.241" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:45:32.241" status="PASS" starttime="20170824 16:45:32.241"></status>
</kw>
<status endtime="20170824 16:45:32.241" status="PASS" starttime="20170824 16:45:32.240"></status>
</kw>
<status endtime="20170824 16:45:32.241" status="PASS" starttime="20170824 16:45:32.239"></status>
</kw>
<status endtime="20170824 16:45:32.241" status="PASS" starttime="20170824 16:45:32.238"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:45:32.378" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:45:32.378" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:45:32.378" status="PASS" starttime="20170824 16:45:32.242"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:45:32.380" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:45:32.380" status="PASS" starttime="20170824 16:45:32.379"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:45:32.381" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:45:32.381" status="PASS" starttime="20170824 16:45:32.381"></status>
</kw>
<status endtime="20170824 16:45:32.382" status="PASS" starttime="20170824 16:45:32.380"></status>
</kw>
<status endtime="20170824 16:45:32.382" status="PASS" starttime="20170824 16:45:32.379"></status>
</kw>
<status endtime="20170824 16:45:32.382" status="PASS" starttime="20170824 16:45:32.378"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:45:32.382" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:45:32.382" status="PASS" starttime="20170824 16:45:32.382"></status>
</kw>
<msg timestamp="20170824 16:45:32.382" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:45:32.382" status="PASS" starttime="20170824 16:45:32.049"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:45:32.383" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:45:32.383" status="PASS" starttime="20170824 16:45:32.383"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:45:32.384" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:45:32.384" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:45:32.384" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170824 16:45:32.384" status="PASS" starttime="20170824 16:45:32.383"></status>
</kw>
<msg timestamp="20170824 16:45:32.384" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 16:45:32.384" status="PASS" starttime="20170824 16:45:32.048"></status>
</kw>
<msg timestamp="20170824 16:45:32.384" level="INFO">${power_state} = On</msg>
<status endtime="20170824 16:45:32.385" status="PASS" starttime="20170824 16:45:32.048"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:45:32.385" status="PASS" starttime="20170824 16:45:32.385"></status>
</kw>
<status endtime="20170824 16:45:32.385" status="PASS" starttime="20170824 16:45:32.047"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:45:32.389" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:45:32.389" status="PASS" starttime="20170824 16:45:32.388"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:45:32.390" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:45:32.390" status="PASS" starttime="20170824 16:45:32.389"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:45:32.390" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:45:32.390" status="PASS" starttime="20170824 16:45:32.390"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:45:32.391" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:45:32.391" status="PASS" starttime="20170824 16:45:32.391"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:45:32.737" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:45:32.737" status="PASS" starttime="20170824 16:45:32.392"></status>
</kw>
<msg timestamp="20170824 16:45:32.737" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:45:32.737" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:45:32.737" status="PASS" starttime="20170824 16:45:32.391"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:45:32.738" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:45:32.738" status="PASS" starttime="20170824 16:45:32.738"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:45:32.739" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:45:32.739" status="PASS" starttime="20170824 16:45:32.738"></status>
</kw>
<status endtime="20170824 16:45:32.739" status="PASS" starttime="20170824 16:45:32.388"></status>
</kw>
<status endtime="20170824 16:45:32.739" status="PASS" starttime="20170824 16:45:32.387"></status>
</kw>
<status endtime="20170824 16:45:32.739" status="PASS" starttime="20170824 16:45:32.387"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:45:32.740" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:45:32.740" status="PASS" starttime="20170824 16:45:32.739"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:45:32.742" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:45:32.742" status="PASS" starttime="20170824 16:45:32.741"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:45:32.743" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:45:32.743" status="PASS" starttime="20170824 16:45:32.743"></status>
</kw>
<status endtime="20170824 16:45:32.743" status="PASS" starttime="20170824 16:45:32.742"></status>
</kw>
<status endtime="20170824 16:45:32.743" status="PASS" starttime="20170824 16:45:32.741"></status>
</kw>
<status endtime="20170824 16:45:32.744" status="PASS" starttime="20170824 16:45:32.740"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:45:32.833" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:45:32.833" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:45:32.833" status="PASS" starttime="20170824 16:45:32.744"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:45:32.835" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:45:32.835" status="PASS" starttime="20170824 16:45:32.834"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:45:32.836" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:45:32.836" status="PASS" starttime="20170824 16:45:32.836"></status>
</kw>
<status endtime="20170824 16:45:32.836" status="PASS" starttime="20170824 16:45:32.835"></status>
</kw>
<status endtime="20170824 16:45:32.836" status="PASS" starttime="20170824 16:45:32.834"></status>
</kw>
<status endtime="20170824 16:45:32.836" status="PASS" starttime="20170824 16:45:32.833"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:45:32.837" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:45:32.837" status="PASS" starttime="20170824 16:45:32.836"></status>
</kw>
<msg timestamp="20170824 16:45:32.837" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:45:32.837" status="PASS" starttime="20170824 16:45:32.386"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:45:32.837" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:45:32.838" status="PASS" starttime="20170824 16:45:32.837"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:45:32.838" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:45:32.838" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:45:32.838" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170824 16:45:32.838" status="PASS" starttime="20170824 16:45:32.838"></status>
</kw>
<msg timestamp="20170824 16:45:32.839" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170824 16:45:32.839" status="PASS" starttime="20170824 16:45:32.386"></status>
</kw>
<msg timestamp="20170824 16:45:32.839" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170824 16:45:32.839" status="PASS" starttime="20170824 16:45:32.385"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170824 16:45:32.840" level="FAIL">Running != Quiesced</msg>
<status endtime="20170824 16:45:32.840" status="FAIL" starttime="20170824 16:45:32.839"></status>
</kw>
<status endtime="20170824 16:45:32.840" status="FAIL" starttime="20170824 16:45:32.047"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:45:42.845" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:45:42.845" status="PASS" starttime="20170824 16:45:42.844"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:45:42.846" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:45:42.846" status="PASS" starttime="20170824 16:45:42.846"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:45:42.846" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:45:42.847" status="PASS" starttime="20170824 16:45:42.846"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:45:42.848" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:45:42.848" status="PASS" starttime="20170824 16:45:42.847"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:45:43.035" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:45:43.035" status="PASS" starttime="20170824 16:45:42.848"></status>
</kw>
<msg timestamp="20170824 16:45:43.035" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:45:43.035" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:45:43.035" status="PASS" starttime="20170824 16:45:42.848"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:45:43.036" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:45:43.036" status="PASS" starttime="20170824 16:45:43.035"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:45:43.036" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:45:43.036" status="PASS" starttime="20170824 16:45:43.036"></status>
</kw>
<status endtime="20170824 16:45:43.036" status="PASS" starttime="20170824 16:45:42.844"></status>
</kw>
<status endtime="20170824 16:45:43.037" status="PASS" starttime="20170824 16:45:42.843"></status>
</kw>
<status endtime="20170824 16:45:43.037" status="PASS" starttime="20170824 16:45:42.843"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:45:43.037" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:45:43.037" status="PASS" starttime="20170824 16:45:43.037"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:45:43.039" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:45:43.039" status="PASS" starttime="20170824 16:45:43.039"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:45:43.040" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:45:43.040" status="PASS" starttime="20170824 16:45:43.040"></status>
</kw>
<status endtime="20170824 16:45:43.040" status="PASS" starttime="20170824 16:45:43.039"></status>
</kw>
<status endtime="20170824 16:45:43.041" status="PASS" starttime="20170824 16:45:43.038"></status>
</kw>
<status endtime="20170824 16:45:43.041" status="PASS" starttime="20170824 16:45:43.038"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:45:43.104" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:45:43.104" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:45:43.104" status="PASS" starttime="20170824 16:45:43.041"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:45:43.106" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:45:43.106" status="PASS" starttime="20170824 16:45:43.106"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:45:43.107" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:45:43.107" status="PASS" starttime="20170824 16:45:43.107"></status>
</kw>
<status endtime="20170824 16:45:43.107" status="PASS" starttime="20170824 16:45:43.106"></status>
</kw>
<status endtime="20170824 16:45:43.107" status="PASS" starttime="20170824 16:45:43.105"></status>
</kw>
<status endtime="20170824 16:45:43.107" status="PASS" starttime="20170824 16:45:43.105"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:45:43.108" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:45:43.108" status="PASS" starttime="20170824 16:45:43.108"></status>
</kw>
<msg timestamp="20170824 16:45:43.108" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:45:43.108" status="PASS" starttime="20170824 16:45:42.842"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:45:43.109" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:45:43.109" status="PASS" starttime="20170824 16:45:43.108"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:45:43.109" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:45:43.109" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:45:43.110" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170824 16:45:43.110" status="PASS" starttime="20170824 16:45:43.109"></status>
</kw>
<msg timestamp="20170824 16:45:43.110" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 16:45:43.110" status="PASS" starttime="20170824 16:45:42.842"></status>
</kw>
<msg timestamp="20170824 16:45:43.110" level="INFO">${power_state} = On</msg>
<status endtime="20170824 16:45:43.110" status="PASS" starttime="20170824 16:45:42.841"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:45:43.111" status="PASS" starttime="20170824 16:45:43.110"></status>
</kw>
<status endtime="20170824 16:45:43.111" status="PASS" starttime="20170824 16:45:42.841"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:45:43.116" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:45:43.116" status="PASS" starttime="20170824 16:45:43.115"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:45:43.117" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:45:43.117" status="PASS" starttime="20170824 16:45:43.116"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:45:43.118" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:45:43.118" status="PASS" starttime="20170824 16:45:43.117"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:45:43.119" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:45:43.119" status="PASS" starttime="20170824 16:45:43.118"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:45:43.366" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:45:43.366" status="PASS" starttime="20170824 16:45:43.120"></status>
</kw>
<msg timestamp="20170824 16:45:43.366" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:45:43.367" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:45:43.367" status="PASS" starttime="20170824 16:45:43.119"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:45:43.367" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:45:43.367" status="PASS" starttime="20170824 16:45:43.367"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:45:43.368" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:45:43.368" status="PASS" starttime="20170824 16:45:43.368"></status>
</kw>
<status endtime="20170824 16:45:43.368" status="PASS" starttime="20170824 16:45:43.114"></status>
</kw>
<status endtime="20170824 16:45:43.368" status="PASS" starttime="20170824 16:45:43.113"></status>
</kw>
<status endtime="20170824 16:45:43.368" status="PASS" starttime="20170824 16:45:43.113"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:45:43.369" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:45:43.369" status="PASS" starttime="20170824 16:45:43.369"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:45:43.371" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:45:43.371" status="PASS" starttime="20170824 16:45:43.370"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:45:43.372" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:45:43.372" status="PASS" starttime="20170824 16:45:43.372"></status>
</kw>
<status endtime="20170824 16:45:43.372" status="PASS" starttime="20170824 16:45:43.371"></status>
</kw>
<status endtime="20170824 16:45:43.372" status="PASS" starttime="20170824 16:45:43.370"></status>
</kw>
<status endtime="20170824 16:45:43.373" status="PASS" starttime="20170824 16:45:43.369"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:45:43.563" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:45:43.563" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:45:43.563" status="PASS" starttime="20170824 16:45:43.373"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:45:43.565" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:45:43.565" status="PASS" starttime="20170824 16:45:43.564"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:45:43.566" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:45:43.566" status="PASS" starttime="20170824 16:45:43.566"></status>
</kw>
<status endtime="20170824 16:45:43.566" status="PASS" starttime="20170824 16:45:43.565"></status>
</kw>
<status endtime="20170824 16:45:43.567" status="PASS" starttime="20170824 16:45:43.564"></status>
</kw>
<status endtime="20170824 16:45:43.567" status="PASS" starttime="20170824 16:45:43.563"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:45:43.567" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:45:43.567" status="PASS" starttime="20170824 16:45:43.567"></status>
</kw>
<msg timestamp="20170824 16:45:43.567" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:45:43.567" status="PASS" starttime="20170824 16:45:43.112"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:45:43.568" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:45:43.568" status="PASS" starttime="20170824 16:45:43.568"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:45:43.568" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:45:43.569" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:45:43.569" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170824 16:45:43.569" status="PASS" starttime="20170824 16:45:43.568"></status>
</kw>
<msg timestamp="20170824 16:45:43.569" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170824 16:45:43.569" status="PASS" starttime="20170824 16:45:43.111"></status>
</kw>
<msg timestamp="20170824 16:45:43.569" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170824 16:45:43.569" status="PASS" starttime="20170824 16:45:43.111"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170824 16:45:43.570" level="FAIL">Running != Quiesced</msg>
<status endtime="20170824 16:45:43.570" status="FAIL" starttime="20170824 16:45:43.570"></status>
</kw>
<status endtime="20170824 16:45:43.570" status="FAIL" starttime="20170824 16:45:42.840"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:45:53.575" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:45:53.576" status="PASS" starttime="20170824 16:45:53.575"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:45:53.576" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:45:53.576" status="PASS" starttime="20170824 16:45:53.576"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:45:53.577" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:45:53.577" status="PASS" starttime="20170824 16:45:53.577"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:45:53.578" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:45:53.578" status="PASS" starttime="20170824 16:45:53.577"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:45:53.763" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:45:53.763" status="PASS" starttime="20170824 16:45:53.578"></status>
</kw>
<msg timestamp="20170824 16:45:53.763" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:45:53.763" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:45:53.763" status="PASS" starttime="20170824 16:45:53.578"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:45:53.764" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:45:53.764" status="PASS" starttime="20170824 16:45:53.763"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:45:53.764" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:45:53.765" status="PASS" starttime="20170824 16:45:53.764"></status>
</kw>
<status endtime="20170824 16:45:53.765" status="PASS" starttime="20170824 16:45:53.574"></status>
</kw>
<status endtime="20170824 16:45:53.765" status="PASS" starttime="20170824 16:45:53.574"></status>
</kw>
<status endtime="20170824 16:45:53.765" status="PASS" starttime="20170824 16:45:53.573"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:45:53.765" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:45:53.765" status="PASS" starttime="20170824 16:45:53.765"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:45:53.768" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:45:53.768" status="PASS" starttime="20170824 16:45:53.767"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:45:53.768" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:45:53.769" status="PASS" starttime="20170824 16:45:53.768"></status>
</kw>
<status endtime="20170824 16:45:53.769" status="PASS" starttime="20170824 16:45:53.768"></status>
</kw>
<status endtime="20170824 16:45:53.769" status="PASS" starttime="20170824 16:45:53.766"></status>
</kw>
<status endtime="20170824 16:45:53.769" status="PASS" starttime="20170824 16:45:53.766"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:45:53.833" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:45:53.833" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:45:53.833" status="PASS" starttime="20170824 16:45:53.769"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:45:53.835" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:45:53.836" status="PASS" starttime="20170824 16:45:53.835"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:45:53.837" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:45:53.837" status="PASS" starttime="20170824 16:45:53.836"></status>
</kw>
<status endtime="20170824 16:45:53.837" status="PASS" starttime="20170824 16:45:53.836"></status>
</kw>
<status endtime="20170824 16:45:53.837" status="PASS" starttime="20170824 16:45:53.834"></status>
</kw>
<status endtime="20170824 16:45:53.837" status="PASS" starttime="20170824 16:45:53.834"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:45:53.838" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:45:53.838" status="PASS" starttime="20170824 16:45:53.838"></status>
</kw>
<msg timestamp="20170824 16:45:53.838" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:45:53.838" status="PASS" starttime="20170824 16:45:53.572"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:45:53.839" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:45:53.839" status="PASS" starttime="20170824 16:45:53.839"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:45:53.840" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:45:53.840" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:45:53.840" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170824 16:45:53.841" status="PASS" starttime="20170824 16:45:53.840"></status>
</kw>
<msg timestamp="20170824 16:45:53.841" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 16:45:53.841" status="PASS" starttime="20170824 16:45:53.572"></status>
</kw>
<msg timestamp="20170824 16:45:53.841" level="INFO">${power_state} = On</msg>
<status endtime="20170824 16:45:53.841" status="PASS" starttime="20170824 16:45:53.571"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:45:53.842" status="PASS" starttime="20170824 16:45:53.842"></status>
</kw>
<status endtime="20170824 16:45:53.842" status="PASS" starttime="20170824 16:45:53.571"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:45:53.847" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:45:53.848" status="PASS" starttime="20170824 16:45:53.847"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:45:53.849" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:45:53.849" status="PASS" starttime="20170824 16:45:53.849"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:45:53.850" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:45:53.850" status="PASS" starttime="20170824 16:45:53.850"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:45:53.851" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:45:53.851" status="PASS" starttime="20170824 16:45:53.851"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:45:54.068" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:45:54.068" status="PASS" starttime="20170824 16:45:53.852"></status>
</kw>
<msg timestamp="20170824 16:45:54.068" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:45:54.068" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:45:54.068" status="PASS" starttime="20170824 16:45:53.852"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:45:54.069" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:45:54.069" status="PASS" starttime="20170824 16:45:54.068"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:45:54.069" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:45:54.069" status="PASS" starttime="20170824 16:45:54.069"></status>
</kw>
<status endtime="20170824 16:45:54.070" status="PASS" starttime="20170824 16:45:53.846"></status>
</kw>
<status endtime="20170824 16:45:54.070" status="PASS" starttime="20170824 16:45:53.846"></status>
</kw>
<status endtime="20170824 16:45:54.070" status="PASS" starttime="20170824 16:45:53.845"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:45:54.070" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:45:54.070" status="PASS" starttime="20170824 16:45:54.070"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:45:54.072" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:45:54.072" status="PASS" starttime="20170824 16:45:54.072"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:45:54.073" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:45:54.073" status="PASS" starttime="20170824 16:45:54.073"></status>
</kw>
<status endtime="20170824 16:45:54.074" status="PASS" starttime="20170824 16:45:54.073"></status>
</kw>
<status endtime="20170824 16:45:54.074" status="PASS" starttime="20170824 16:45:54.071"></status>
</kw>
<status endtime="20170824 16:45:54.074" status="PASS" starttime="20170824 16:45:54.071"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:45:54.202" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:45:54.202" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:45:54.202" status="PASS" starttime="20170824 16:45:54.074"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:45:54.204" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:45:54.204" status="PASS" starttime="20170824 16:45:54.203"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:45:54.205" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:45:54.205" status="PASS" starttime="20170824 16:45:54.204"></status>
</kw>
<status endtime="20170824 16:45:54.205" status="PASS" starttime="20170824 16:45:54.204"></status>
</kw>
<status endtime="20170824 16:45:54.205" status="PASS" starttime="20170824 16:45:54.203"></status>
</kw>
<status endtime="20170824 16:45:54.205" status="PASS" starttime="20170824 16:45:54.202"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:45:54.206" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:45:54.206" status="PASS" starttime="20170824 16:45:54.205"></status>
</kw>
<msg timestamp="20170824 16:45:54.206" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:45:54.206" status="PASS" starttime="20170824 16:45:53.844"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:45:54.206" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:45:54.207" status="PASS" starttime="20170824 16:45:54.206"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:45:54.207" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:45:54.207" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:45:54.207" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170824 16:45:54.207" status="PASS" starttime="20170824 16:45:54.207"></status>
</kw>
<msg timestamp="20170824 16:45:54.208" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170824 16:45:54.208" status="PASS" starttime="20170824 16:45:53.843"></status>
</kw>
<msg timestamp="20170824 16:45:54.208" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170824 16:45:54.208" status="PASS" starttime="20170824 16:45:53.843"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170824 16:45:54.209" level="FAIL">Running != Quiesced</msg>
<status endtime="20170824 16:45:54.209" status="FAIL" starttime="20170824 16:45:54.208"></status>
</kw>
<status endtime="20170824 16:45:54.209" status="FAIL" starttime="20170824 16:45:53.571"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:46:04.214" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:46:04.215" status="PASS" starttime="20170824 16:46:04.214"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:46:04.215" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:46:04.215" status="PASS" starttime="20170824 16:46:04.215"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:46:04.216" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:46:04.216" status="PASS" starttime="20170824 16:46:04.216"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:46:04.217" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:46:04.217" status="PASS" starttime="20170824 16:46:04.216"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:46:04.396" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:46:04.396" status="PASS" starttime="20170824 16:46:04.217"></status>
</kw>
<msg timestamp="20170824 16:46:04.396" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:46:04.396" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:46:04.396" status="PASS" starttime="20170824 16:46:04.217"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:46:04.397" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:46:04.397" status="PASS" starttime="20170824 16:46:04.396"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:46:04.397" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:46:04.398" status="PASS" starttime="20170824 16:46:04.397"></status>
</kw>
<status endtime="20170824 16:46:04.398" status="PASS" starttime="20170824 16:46:04.214"></status>
</kw>
<status endtime="20170824 16:46:04.398" status="PASS" starttime="20170824 16:46:04.213"></status>
</kw>
<status endtime="20170824 16:46:04.398" status="PASS" starttime="20170824 16:46:04.212"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:46:04.398" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:46:04.399" status="PASS" starttime="20170824 16:46:04.398"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:46:04.401" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:46:04.401" status="PASS" starttime="20170824 16:46:04.400"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:46:04.402" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:46:04.402" status="PASS" starttime="20170824 16:46:04.401"></status>
</kw>
<status endtime="20170824 16:46:04.402" status="PASS" starttime="20170824 16:46:04.401"></status>
</kw>
<status endtime="20170824 16:46:04.402" status="PASS" starttime="20170824 16:46:04.399"></status>
</kw>
<status endtime="20170824 16:46:04.402" status="PASS" starttime="20170824 16:46:04.399"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:46:04.466" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:46:04.467" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:46:04.467" status="PASS" starttime="20170824 16:46:04.403"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:46:04.469" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:46:04.469" status="PASS" starttime="20170824 16:46:04.468"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:46:04.470" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:46:04.471" status="PASS" starttime="20170824 16:46:04.470"></status>
</kw>
<status endtime="20170824 16:46:04.471" status="PASS" starttime="20170824 16:46:04.469"></status>
</kw>
<status endtime="20170824 16:46:04.471" status="PASS" starttime="20170824 16:46:04.468"></status>
</kw>
<status endtime="20170824 16:46:04.471" status="PASS" starttime="20170824 16:46:04.467"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:46:04.471" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:46:04.471" status="PASS" starttime="20170824 16:46:04.471"></status>
</kw>
<msg timestamp="20170824 16:46:04.472" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:46:04.472" status="PASS" starttime="20170824 16:46:04.212"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:46:04.472" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:46:04.472" status="PASS" starttime="20170824 16:46:04.472"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:46:04.473" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:46:04.473" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:46:04.473" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170824 16:46:04.473" status="PASS" starttime="20170824 16:46:04.473"></status>
</kw>
<msg timestamp="20170824 16:46:04.473" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 16:46:04.473" status="PASS" starttime="20170824 16:46:04.211"></status>
</kw>
<msg timestamp="20170824 16:46:04.474" level="INFO">${power_state} = On</msg>
<status endtime="20170824 16:46:04.474" status="PASS" starttime="20170824 16:46:04.210"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:46:04.474" status="PASS" starttime="20170824 16:46:04.474"></status>
</kw>
<status endtime="20170824 16:46:04.474" status="PASS" starttime="20170824 16:46:04.210"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:46:04.478" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:46:04.478" status="PASS" starttime="20170824 16:46:04.478"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:46:04.479" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:46:04.479" status="PASS" starttime="20170824 16:46:04.478"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:46:04.480" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:46:04.480" status="PASS" starttime="20170824 16:46:04.479"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:46:04.480" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:46:04.480" status="PASS" starttime="20170824 16:46:04.480"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:46:04.684" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:46:04.684" status="PASS" starttime="20170824 16:46:04.481"></status>
</kw>
<msg timestamp="20170824 16:46:04.684" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:46:04.684" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:46:04.684" status="PASS" starttime="20170824 16:46:04.481"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:46:04.684" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:46:04.685" status="PASS" starttime="20170824 16:46:04.684"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:46:04.685" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:46:04.685" status="PASS" starttime="20170824 16:46:04.685"></status>
</kw>
<status endtime="20170824 16:46:04.685" status="PASS" starttime="20170824 16:46:04.477"></status>
</kw>
<status endtime="20170824 16:46:04.685" status="PASS" starttime="20170824 16:46:04.477"></status>
</kw>
<status endtime="20170824 16:46:04.686" status="PASS" starttime="20170824 16:46:04.476"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:46:04.686" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:46:04.686" status="PASS" starttime="20170824 16:46:04.686"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:46:04.688" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:46:04.688" status="PASS" starttime="20170824 16:46:04.688"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:46:04.689" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:46:04.689" status="PASS" starttime="20170824 16:46:04.689"></status>
</kw>
<status endtime="20170824 16:46:04.689" status="PASS" starttime="20170824 16:46:04.688"></status>
</kw>
<status endtime="20170824 16:46:04.690" status="PASS" starttime="20170824 16:46:04.687"></status>
</kw>
<status endtime="20170824 16:46:04.690" status="PASS" starttime="20170824 16:46:04.687"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:46:04.781" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:46:04.781" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:46:04.781" status="PASS" starttime="20170824 16:46:04.690"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:46:04.782" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:46:04.782" status="PASS" starttime="20170824 16:46:04.782"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:46:04.783" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:46:04.783" status="PASS" starttime="20170824 16:46:04.783"></status>
</kw>
<status endtime="20170824 16:46:04.784" status="PASS" starttime="20170824 16:46:04.783"></status>
</kw>
<status endtime="20170824 16:46:04.784" status="PASS" starttime="20170824 16:46:04.781"></status>
</kw>
<status endtime="20170824 16:46:04.784" status="PASS" starttime="20170824 16:46:04.781"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:46:04.784" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:46:04.784" status="PASS" starttime="20170824 16:46:04.784"></status>
</kw>
<msg timestamp="20170824 16:46:04.784" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:46:04.785" status="PASS" starttime="20170824 16:46:04.475"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:46:04.785" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:46:04.785" status="PASS" starttime="20170824 16:46:04.785"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:46:04.786" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:46:04.786" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:46:04.786" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170824 16:46:04.786" status="PASS" starttime="20170824 16:46:04.785"></status>
</kw>
<msg timestamp="20170824 16:46:04.786" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170824 16:46:04.786" status="PASS" starttime="20170824 16:46:04.475"></status>
</kw>
<msg timestamp="20170824 16:46:04.787" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170824 16:46:04.787" status="PASS" starttime="20170824 16:46:04.474"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170824 16:46:04.787" level="FAIL">Running != Quiesced</msg>
<status endtime="20170824 16:46:04.787" status="FAIL" starttime="20170824 16:46:04.787"></status>
</kw>
<status endtime="20170824 16:46:04.787" status="FAIL" starttime="20170824 16:46:04.209"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:46:14.795" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:46:14.796" status="PASS" starttime="20170824 16:46:14.795"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:46:14.797" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:46:14.797" status="PASS" starttime="20170824 16:46:14.796"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:46:14.797" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:46:14.797" status="PASS" starttime="20170824 16:46:14.797"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:46:14.798" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:46:14.798" status="PASS" starttime="20170824 16:46:14.798"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:46:15.019" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:46:15.019" status="PASS" starttime="20170824 16:46:14.799"></status>
</kw>
<msg timestamp="20170824 16:46:15.019" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:46:15.019" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:46:15.019" status="PASS" starttime="20170824 16:46:14.798"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:46:15.020" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:46:15.020" status="PASS" starttime="20170824 16:46:15.020"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:46:15.021" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:46:15.021" status="PASS" starttime="20170824 16:46:15.020"></status>
</kw>
<status endtime="20170824 16:46:15.021" status="PASS" starttime="20170824 16:46:14.794"></status>
</kw>
<status endtime="20170824 16:46:15.021" status="PASS" starttime="20170824 16:46:14.791"></status>
</kw>
<status endtime="20170824 16:46:15.021" status="PASS" starttime="20170824 16:46:14.790"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:46:15.022" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:46:15.022" status="PASS" starttime="20170824 16:46:15.022"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:46:15.024" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:46:15.024" status="PASS" starttime="20170824 16:46:15.024"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:46:15.025" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:46:15.025" status="PASS" starttime="20170824 16:46:15.025"></status>
</kw>
<status endtime="20170824 16:46:15.025" status="PASS" starttime="20170824 16:46:15.024"></status>
</kw>
<status endtime="20170824 16:46:15.025" status="PASS" starttime="20170824 16:46:15.023"></status>
</kw>
<status endtime="20170824 16:46:15.026" status="PASS" starttime="20170824 16:46:15.022"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:46:15.090" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:46:15.090" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:46:15.090" status="PASS" starttime="20170824 16:46:15.026"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:46:15.092" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:46:15.092" status="PASS" starttime="20170824 16:46:15.092"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:46:15.093" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:46:15.093" status="PASS" starttime="20170824 16:46:15.093"></status>
</kw>
<status endtime="20170824 16:46:15.094" status="PASS" starttime="20170824 16:46:15.092"></status>
</kw>
<status endtime="20170824 16:46:15.094" status="PASS" starttime="20170824 16:46:15.091"></status>
</kw>
<status endtime="20170824 16:46:15.094" status="PASS" starttime="20170824 16:46:15.091"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:46:15.094" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:46:15.094" status="PASS" starttime="20170824 16:46:15.094"></status>
</kw>
<msg timestamp="20170824 16:46:15.094" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:46:15.094" status="PASS" starttime="20170824 16:46:14.790"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:46:15.095" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:46:15.095" status="PASS" starttime="20170824 16:46:15.095"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:46:15.096" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:46:15.096" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:46:15.096" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170824 16:46:15.096" status="PASS" starttime="20170824 16:46:15.095"></status>
</kw>
<msg timestamp="20170824 16:46:15.096" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 16:46:15.096" status="PASS" starttime="20170824 16:46:14.789"></status>
</kw>
<msg timestamp="20170824 16:46:15.096" level="INFO">${power_state} = On</msg>
<status endtime="20170824 16:46:15.097" status="PASS" starttime="20170824 16:46:14.789"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:46:15.097" status="PASS" starttime="20170824 16:46:15.097"></status>
</kw>
<status endtime="20170824 16:46:15.097" status="PASS" starttime="20170824 16:46:14.789"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:46:15.101" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:46:15.101" status="PASS" starttime="20170824 16:46:15.100"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:46:15.102" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:46:15.102" status="PASS" starttime="20170824 16:46:15.101"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:46:15.102" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:46:15.102" status="PASS" starttime="20170824 16:46:15.102"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:46:15.103" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:46:15.103" status="PASS" starttime="20170824 16:46:15.103"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:46:15.284" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:46:15.284" status="PASS" starttime="20170824 16:46:15.104"></status>
</kw>
<msg timestamp="20170824 16:46:15.284" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:46:15.284" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:46:15.284" status="PASS" starttime="20170824 16:46:15.103"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:46:15.285" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:46:15.285" status="PASS" starttime="20170824 16:46:15.284"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:46:15.285" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:46:15.285" status="PASS" starttime="20170824 16:46:15.285"></status>
</kw>
<status endtime="20170824 16:46:15.286" status="PASS" starttime="20170824 16:46:15.100"></status>
</kw>
<status endtime="20170824 16:46:15.286" status="PASS" starttime="20170824 16:46:15.099"></status>
</kw>
<status endtime="20170824 16:46:15.286" status="PASS" starttime="20170824 16:46:15.099"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:46:15.286" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:46:15.286" status="PASS" starttime="20170824 16:46:15.286"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:46:15.289" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:46:15.289" status="PASS" starttime="20170824 16:46:15.288"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:46:15.290" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:46:15.290" status="PASS" starttime="20170824 16:46:15.290"></status>
</kw>
<status endtime="20170824 16:46:15.290" status="PASS" starttime="20170824 16:46:15.289"></status>
</kw>
<status endtime="20170824 16:46:15.290" status="PASS" starttime="20170824 16:46:15.287"></status>
</kw>
<status endtime="20170824 16:46:15.290" status="PASS" starttime="20170824 16:46:15.287"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:46:15.400" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:46:15.400" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:46:15.400" status="PASS" starttime="20170824 16:46:15.290"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:46:15.402" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:46:15.402" status="PASS" starttime="20170824 16:46:15.401"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:46:15.403" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:46:15.403" status="PASS" starttime="20170824 16:46:15.403"></status>
</kw>
<status endtime="20170824 16:46:15.403" status="PASS" starttime="20170824 16:46:15.402"></status>
</kw>
<status endtime="20170824 16:46:15.404" status="PASS" starttime="20170824 16:46:15.401"></status>
</kw>
<status endtime="20170824 16:46:15.404" status="PASS" starttime="20170824 16:46:15.400"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:46:15.404" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:46:15.404" status="PASS" starttime="20170824 16:46:15.404"></status>
</kw>
<msg timestamp="20170824 16:46:15.404" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:46:15.404" status="PASS" starttime="20170824 16:46:15.098"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:46:15.405" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:46:15.405" status="PASS" starttime="20170824 16:46:15.405"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:46:15.406" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:46:15.406" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:46:15.406" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170824 16:46:15.406" status="PASS" starttime="20170824 16:46:15.405"></status>
</kw>
<msg timestamp="20170824 16:46:15.406" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170824 16:46:15.406" status="PASS" starttime="20170824 16:46:15.098"></status>
</kw>
<msg timestamp="20170824 16:46:15.406" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170824 16:46:15.406" status="PASS" starttime="20170824 16:46:15.097"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170824 16:46:15.407" level="FAIL">Running != Quiesced</msg>
<status endtime="20170824 16:46:15.407" status="FAIL" starttime="20170824 16:46:15.407"></status>
</kw>
<status endtime="20170824 16:46:15.407" status="FAIL" starttime="20170824 16:46:14.788"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:46:25.412" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:46:25.413" status="PASS" starttime="20170824 16:46:25.412"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:46:25.413" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:46:25.413" status="PASS" starttime="20170824 16:46:25.413"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:46:25.414" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:46:25.414" status="PASS" starttime="20170824 16:46:25.413"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:46:25.415" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:46:25.415" status="PASS" starttime="20170824 16:46:25.414"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:46:25.604" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:46:25.604" status="PASS" starttime="20170824 16:46:25.416"></status>
</kw>
<msg timestamp="20170824 16:46:25.604" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:46:25.604" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:46:25.604" status="PASS" starttime="20170824 16:46:25.415"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:46:25.605" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:46:25.605" status="PASS" starttime="20170824 16:46:25.605"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:46:25.606" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:46:25.606" status="PASS" starttime="20170824 16:46:25.605"></status>
</kw>
<status endtime="20170824 16:46:25.606" status="PASS" starttime="20170824 16:46:25.411"></status>
</kw>
<status endtime="20170824 16:46:25.606" status="PASS" starttime="20170824 16:46:25.411"></status>
</kw>
<status endtime="20170824 16:46:25.606" status="PASS" starttime="20170824 16:46:25.410"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:46:25.607" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:46:25.607" status="PASS" starttime="20170824 16:46:25.607"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:46:25.609" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:46:25.609" status="PASS" starttime="20170824 16:46:25.608"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:46:25.610" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:46:25.610" status="PASS" starttime="20170824 16:46:25.610"></status>
</kw>
<status endtime="20170824 16:46:25.610" status="PASS" starttime="20170824 16:46:25.609"></status>
</kw>
<status endtime="20170824 16:46:25.610" status="PASS" starttime="20170824 16:46:25.608"></status>
</kw>
<status endtime="20170824 16:46:25.610" status="PASS" starttime="20170824 16:46:25.607"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:46:25.675" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:46:25.676" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:46:25.676" status="PASS" starttime="20170824 16:46:25.611"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:46:25.677" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:46:25.678" status="PASS" starttime="20170824 16:46:25.677"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:46:25.678" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:46:25.679" status="PASS" starttime="20170824 16:46:25.678"></status>
</kw>
<status endtime="20170824 16:46:25.679" status="PASS" starttime="20170824 16:46:25.678"></status>
</kw>
<status endtime="20170824 16:46:25.679" status="PASS" starttime="20170824 16:46:25.677"></status>
</kw>
<status endtime="20170824 16:46:25.679" status="PASS" starttime="20170824 16:46:25.676"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:46:25.679" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:46:25.679" status="PASS" starttime="20170824 16:46:25.679"></status>
</kw>
<msg timestamp="20170824 16:46:25.679" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:46:25.680" status="PASS" starttime="20170824 16:46:25.410"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:46:25.680" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:46:25.680" status="PASS" starttime="20170824 16:46:25.680"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:46:25.681" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:46:25.681" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:46:25.681" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170824 16:46:25.681" status="PASS" starttime="20170824 16:46:25.680"></status>
</kw>
<msg timestamp="20170824 16:46:25.681" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 16:46:25.681" status="PASS" starttime="20170824 16:46:25.409"></status>
</kw>
<msg timestamp="20170824 16:46:25.682" level="INFO">${power_state} = On</msg>
<status endtime="20170824 16:46:25.682" status="PASS" starttime="20170824 16:46:25.409"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:46:25.682" status="PASS" starttime="20170824 16:46:25.682"></status>
</kw>
<status endtime="20170824 16:46:25.682" status="PASS" starttime="20170824 16:46:25.408"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:46:25.686" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:46:25.687" status="PASS" starttime="20170824 16:46:25.686"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:46:25.687" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:46:25.687" status="PASS" starttime="20170824 16:46:25.687"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:46:25.688" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:46:25.688" status="PASS" starttime="20170824 16:46:25.688"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:46:25.689" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:46:25.689" status="PASS" starttime="20170824 16:46:25.688"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:46:25.895" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:46:25.895" status="PASS" starttime="20170824 16:46:25.689"></status>
</kw>
<msg timestamp="20170824 16:46:25.895" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:46:25.896" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:46:25.896" status="PASS" starttime="20170824 16:46:25.689"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:46:25.897" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:46:25.897" status="PASS" starttime="20170824 16:46:25.896"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:46:25.898" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:46:25.898" status="PASS" starttime="20170824 16:46:25.897"></status>
</kw>
<status endtime="20170824 16:46:25.898" status="PASS" starttime="20170824 16:46:25.685"></status>
</kw>
<status endtime="20170824 16:46:25.898" status="PASS" starttime="20170824 16:46:25.685"></status>
</kw>
<status endtime="20170824 16:46:25.898" status="PASS" starttime="20170824 16:46:25.684"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:46:25.899" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:46:25.899" status="PASS" starttime="20170824 16:46:25.899"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:46:25.902" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:46:25.902" status="PASS" starttime="20170824 16:46:25.901"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:46:25.903" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:46:25.904" status="PASS" starttime="20170824 16:46:25.903"></status>
</kw>
<status endtime="20170824 16:46:25.904" status="PASS" starttime="20170824 16:46:25.902"></status>
</kw>
<status endtime="20170824 16:46:25.904" status="PASS" starttime="20170824 16:46:25.900"></status>
</kw>
<status endtime="20170824 16:46:25.904" status="PASS" starttime="20170824 16:46:25.899"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:46:25.994" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:46:25.994" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:46:25.994" status="PASS" starttime="20170824 16:46:25.904"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:46:25.996" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:46:25.996" status="PASS" starttime="20170824 16:46:25.995"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:46:25.997" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:46:25.997" status="PASS" starttime="20170824 16:46:25.997"></status>
</kw>
<status endtime="20170824 16:46:25.997" status="PASS" starttime="20170824 16:46:25.996"></status>
</kw>
<status endtime="20170824 16:46:25.997" status="PASS" starttime="20170824 16:46:25.995"></status>
</kw>
<status endtime="20170824 16:46:25.997" status="PASS" starttime="20170824 16:46:25.994"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:46:25.998" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:46:25.998" status="PASS" starttime="20170824 16:46:25.998"></status>
</kw>
<msg timestamp="20170824 16:46:25.998" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:46:25.998" status="PASS" starttime="20170824 16:46:25.683"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:46:25.999" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:46:25.999" status="PASS" starttime="20170824 16:46:25.998"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:46:25.999" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:46:25.999" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:46:25.999" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170824 16:46:25.999" status="PASS" starttime="20170824 16:46:25.999"></status>
</kw>
<msg timestamp="20170824 16:46:26.000" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170824 16:46:26.000" status="PASS" starttime="20170824 16:46:25.683"></status>
</kw>
<msg timestamp="20170824 16:46:26.000" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170824 16:46:26.000" status="PASS" starttime="20170824 16:46:25.682"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170824 16:46:26.001" level="FAIL">Running != Quiesced</msg>
<status endtime="20170824 16:46:26.001" status="FAIL" starttime="20170824 16:46:26.000"></status>
</kw>
<status endtime="20170824 16:46:26.001" status="FAIL" starttime="20170824 16:46:25.408"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:46:36.006" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:46:36.007" status="PASS" starttime="20170824 16:46:36.006"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:46:36.007" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:46:36.007" status="PASS" starttime="20170824 16:46:36.007"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:46:36.008" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:46:36.008" status="PASS" starttime="20170824 16:46:36.008"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:46:36.009" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:46:36.009" status="PASS" starttime="20170824 16:46:36.008"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:46:36.208" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:46:36.208" status="PASS" starttime="20170824 16:46:36.009"></status>
</kw>
<msg timestamp="20170824 16:46:36.208" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:46:36.208" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:46:36.208" status="PASS" starttime="20170824 16:46:36.009"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:46:36.209" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:46:36.209" status="PASS" starttime="20170824 16:46:36.209"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:46:36.210" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:46:36.210" status="PASS" starttime="20170824 16:46:36.209"></status>
</kw>
<status endtime="20170824 16:46:36.210" status="PASS" starttime="20170824 16:46:36.005"></status>
</kw>
<status endtime="20170824 16:46:36.210" status="PASS" starttime="20170824 16:46:36.005"></status>
</kw>
<status endtime="20170824 16:46:36.210" status="PASS" starttime="20170824 16:46:36.004"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:46:36.211" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:46:36.211" status="PASS" starttime="20170824 16:46:36.210"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:46:36.213" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:46:36.213" status="PASS" starttime="20170824 16:46:36.212"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:46:36.214" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:46:36.214" status="PASS" starttime="20170824 16:46:36.214"></status>
</kw>
<status endtime="20170824 16:46:36.214" status="PASS" starttime="20170824 16:46:36.213"></status>
</kw>
<status endtime="20170824 16:46:36.214" status="PASS" starttime="20170824 16:46:36.212"></status>
</kw>
<status endtime="20170824 16:46:36.214" status="PASS" starttime="20170824 16:46:36.211"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:46:36.289" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:46:36.289" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:46:36.289" status="PASS" starttime="20170824 16:46:36.214"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:46:36.291" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:46:36.291" status="PASS" starttime="20170824 16:46:36.291"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:46:36.292" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:46:36.292" status="PASS" starttime="20170824 16:46:36.292"></status>
</kw>
<status endtime="20170824 16:46:36.292" status="PASS" starttime="20170824 16:46:36.291"></status>
</kw>
<status endtime="20170824 16:46:36.292" status="PASS" starttime="20170824 16:46:36.290"></status>
</kw>
<status endtime="20170824 16:46:36.293" status="PASS" starttime="20170824 16:46:36.290"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:46:36.293" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:46:36.293" status="PASS" starttime="20170824 16:46:36.293"></status>
</kw>
<msg timestamp="20170824 16:46:36.293" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:46:36.293" status="PASS" starttime="20170824 16:46:36.003"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:46:36.294" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:46:36.294" status="PASS" starttime="20170824 16:46:36.294"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:46:36.294" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:46:36.295" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:46:36.295" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170824 16:46:36.295" status="PASS" starttime="20170824 16:46:36.294"></status>
</kw>
<msg timestamp="20170824 16:46:36.295" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 16:46:36.295" status="PASS" starttime="20170824 16:46:36.003"></status>
</kw>
<msg timestamp="20170824 16:46:36.295" level="INFO">${power_state} = On</msg>
<status endtime="20170824 16:46:36.295" status="PASS" starttime="20170824 16:46:36.003"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:46:36.296" status="PASS" starttime="20170824 16:46:36.296"></status>
</kw>
<status endtime="20170824 16:46:36.296" status="PASS" starttime="20170824 16:46:36.002"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:46:36.300" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:46:36.300" status="PASS" starttime="20170824 16:46:36.299"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:46:36.301" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:46:36.301" status="PASS" starttime="20170824 16:46:36.301"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:46:36.302" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:46:36.302" status="PASS" starttime="20170824 16:46:36.301"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:46:36.302" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:46:36.302" status="PASS" starttime="20170824 16:46:36.302"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:46:36.563" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:46:36.564" status="PASS" starttime="20170824 16:46:36.303"></status>
</kw>
<msg timestamp="20170824 16:46:36.564" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:46:36.564" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:46:36.564" status="PASS" starttime="20170824 16:46:36.303"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:46:36.564" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:46:36.565" status="PASS" starttime="20170824 16:46:36.564"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:46:36.565" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:46:36.565" status="PASS" starttime="20170824 16:46:36.565"></status>
</kw>
<status endtime="20170824 16:46:36.565" status="PASS" starttime="20170824 16:46:36.299"></status>
</kw>
<status endtime="20170824 16:46:36.565" status="PASS" starttime="20170824 16:46:36.298"></status>
</kw>
<status endtime="20170824 16:46:36.566" status="PASS" starttime="20170824 16:46:36.298"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:46:36.566" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:46:36.566" status="PASS" starttime="20170824 16:46:36.566"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:46:36.569" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:46:36.569" status="PASS" starttime="20170824 16:46:36.568"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:46:36.571" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:46:36.571" status="PASS" starttime="20170824 16:46:36.570"></status>
</kw>
<status endtime="20170824 16:46:36.571" status="PASS" starttime="20170824 16:46:36.570"></status>
</kw>
<status endtime="20170824 16:46:36.571" status="PASS" starttime="20170824 16:46:36.567"></status>
</kw>
<status endtime="20170824 16:46:36.571" status="PASS" starttime="20170824 16:46:36.567"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:46:36.662" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:46:36.662" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:46:36.662" status="PASS" starttime="20170824 16:46:36.572"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:46:36.664" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:46:36.664" status="PASS" starttime="20170824 16:46:36.663"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:46:36.665" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:46:36.665" status="PASS" starttime="20170824 16:46:36.665"></status>
</kw>
<status endtime="20170824 16:46:36.665" status="PASS" starttime="20170824 16:46:36.664"></status>
</kw>
<status endtime="20170824 16:46:36.665" status="PASS" starttime="20170824 16:46:36.663"></status>
</kw>
<status endtime="20170824 16:46:36.665" status="PASS" starttime="20170824 16:46:36.662"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:46:36.666" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:46:36.666" status="PASS" starttime="20170824 16:46:36.665"></status>
</kw>
<msg timestamp="20170824 16:46:36.666" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:46:36.666" status="PASS" starttime="20170824 16:46:36.297"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:46:36.667" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:46:36.667" status="PASS" starttime="20170824 16:46:36.666"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:46:36.667" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:46:36.667" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:46:36.667" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170824 16:46:36.667" status="PASS" starttime="20170824 16:46:36.667"></status>
</kw>
<msg timestamp="20170824 16:46:36.668" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170824 16:46:36.668" status="PASS" starttime="20170824 16:46:36.297"></status>
</kw>
<msg timestamp="20170824 16:46:36.668" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170824 16:46:36.668" status="PASS" starttime="20170824 16:46:36.296"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170824 16:46:36.669" level="FAIL">Running != Quiesced</msg>
<status endtime="20170824 16:46:36.669" status="FAIL" starttime="20170824 16:46:36.668"></status>
</kw>
<status endtime="20170824 16:46:36.669" status="FAIL" starttime="20170824 16:46:36.002"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:46:46.675" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:46:46.675" status="PASS" starttime="20170824 16:46:46.674"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:46:46.676" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:46:46.676" status="PASS" starttime="20170824 16:46:46.676"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:46:46.677" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:46:46.677" status="PASS" starttime="20170824 16:46:46.676"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:46:46.677" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:46:46.678" status="PASS" starttime="20170824 16:46:46.677"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:46:46.871" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:46:46.871" status="PASS" starttime="20170824 16:46:46.678"></status>
</kw>
<msg timestamp="20170824 16:46:46.871" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:46:46.871" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:46:46.871" status="PASS" starttime="20170824 16:46:46.678"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:46:46.872" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:46:46.872" status="PASS" starttime="20170824 16:46:46.872"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:46:46.873" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:46:46.873" status="PASS" starttime="20170824 16:46:46.872"></status>
</kw>
<status endtime="20170824 16:46:46.873" status="PASS" starttime="20170824 16:46:46.674"></status>
</kw>
<status endtime="20170824 16:46:46.873" status="PASS" starttime="20170824 16:46:46.673"></status>
</kw>
<status endtime="20170824 16:46:46.873" status="PASS" starttime="20170824 16:46:46.673"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:46:46.874" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:46:46.874" status="PASS" starttime="20170824 16:46:46.873"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:46:46.876" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:46:46.876" status="PASS" starttime="20170824 16:46:46.875"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:46:46.877" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:46:46.877" status="PASS" starttime="20170824 16:46:46.877"></status>
</kw>
<status endtime="20170824 16:46:46.878" status="PASS" starttime="20170824 16:46:46.876"></status>
</kw>
<status endtime="20170824 16:46:46.878" status="PASS" starttime="20170824 16:46:46.875"></status>
</kw>
<status endtime="20170824 16:46:46.878" status="PASS" starttime="20170824 16:46:46.874"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:46:46.945" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:46:46.945" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:46:46.945" status="PASS" starttime="20170824 16:46:46.878"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:46:46.948" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:46:46.948" status="PASS" starttime="20170824 16:46:46.947"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:46:46.949" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:46:46.950" status="PASS" starttime="20170824 16:46:46.949"></status>
</kw>
<status endtime="20170824 16:46:46.950" status="PASS" starttime="20170824 16:46:46.948"></status>
</kw>
<status endtime="20170824 16:46:46.950" status="PASS" starttime="20170824 16:46:46.946"></status>
</kw>
<status endtime="20170824 16:46:46.950" status="PASS" starttime="20170824 16:46:46.946"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:46:46.950" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:46:46.951" status="PASS" starttime="20170824 16:46:46.950"></status>
</kw>
<msg timestamp="20170824 16:46:46.951" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:46:46.951" status="PASS" starttime="20170824 16:46:46.672"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:46:46.951" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:46:46.952" status="PASS" starttime="20170824 16:46:46.951"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:46:46.952" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:46:46.952" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:46:46.952" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170824 16:46:46.952" status="PASS" starttime="20170824 16:46:46.952"></status>
</kw>
<msg timestamp="20170824 16:46:46.953" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 16:46:46.953" status="PASS" starttime="20170824 16:46:46.671"></status>
</kw>
<msg timestamp="20170824 16:46:46.953" level="INFO">${power_state} = On</msg>
<status endtime="20170824 16:46:46.953" status="PASS" starttime="20170824 16:46:46.670"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:46:46.953" status="PASS" starttime="20170824 16:46:46.953"></status>
</kw>
<status endtime="20170824 16:46:46.954" status="PASS" starttime="20170824 16:46:46.670"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:46:46.957" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:46:46.958" status="PASS" starttime="20170824 16:46:46.957"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:46:46.958" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:46:46.958" status="PASS" starttime="20170824 16:46:46.958"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:46:46.959" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:46:46.959" status="PASS" starttime="20170824 16:46:46.958"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:46:46.959" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:46:46.959" status="PASS" starttime="20170824 16:46:46.959"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:46:47.239" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:46:47.239" status="PASS" starttime="20170824 16:46:46.960"></status>
</kw>
<msg timestamp="20170824 16:46:47.239" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:46:47.239" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:46:47.239" status="PASS" starttime="20170824 16:46:46.960"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:46:47.240" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:46:47.240" status="PASS" starttime="20170824 16:46:47.239"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:46:47.241" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:46:47.241" status="PASS" starttime="20170824 16:46:47.240"></status>
</kw>
<status endtime="20170824 16:46:47.241" status="PASS" starttime="20170824 16:46:46.956"></status>
</kw>
<status endtime="20170824 16:46:47.241" status="PASS" starttime="20170824 16:46:46.956"></status>
</kw>
<status endtime="20170824 16:46:47.241" status="PASS" starttime="20170824 16:46:46.955"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:46:47.242" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:46:47.242" status="PASS" starttime="20170824 16:46:47.241"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:46:47.244" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:46:47.244" status="PASS" starttime="20170824 16:46:47.243"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:46:47.245" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:46:47.245" status="PASS" starttime="20170824 16:46:47.244"></status>
</kw>
<status endtime="20170824 16:46:47.245" status="PASS" starttime="20170824 16:46:47.244"></status>
</kw>
<status endtime="20170824 16:46:47.245" status="PASS" starttime="20170824 16:46:47.242"></status>
</kw>
<status endtime="20170824 16:46:47.245" status="PASS" starttime="20170824 16:46:47.242"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:46:47.385" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:46:47.385" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:46:47.385" status="PASS" starttime="20170824 16:46:47.245"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:46:47.387" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:46:47.387" status="PASS" starttime="20170824 16:46:47.387"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:46:47.388" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:46:47.388" status="PASS" starttime="20170824 16:46:47.388"></status>
</kw>
<status endtime="20170824 16:46:47.388" status="PASS" starttime="20170824 16:46:47.387"></status>
</kw>
<status endtime="20170824 16:46:47.389" status="PASS" starttime="20170824 16:46:47.386"></status>
</kw>
<status endtime="20170824 16:46:47.389" status="PASS" starttime="20170824 16:46:47.386"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:46:47.389" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:46:47.389" status="PASS" starttime="20170824 16:46:47.389"></status>
</kw>
<msg timestamp="20170824 16:46:47.389" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:46:47.389" status="PASS" starttime="20170824 16:46:46.955"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:46:47.390" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:46:47.390" status="PASS" starttime="20170824 16:46:47.390"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:46:47.391" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:46:47.391" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:46:47.391" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170824 16:46:47.391" status="PASS" starttime="20170824 16:46:47.390"></status>
</kw>
<msg timestamp="20170824 16:46:47.391" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170824 16:46:47.391" status="PASS" starttime="20170824 16:46:46.954"></status>
</kw>
<msg timestamp="20170824 16:46:47.391" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170824 16:46:47.391" status="PASS" starttime="20170824 16:46:46.954"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170824 16:46:47.392" level="FAIL">Running != Quiesced</msg>
<status endtime="20170824 16:46:47.392" status="FAIL" starttime="20170824 16:46:47.392"></status>
</kw>
<status endtime="20170824 16:46:47.392" status="FAIL" starttime="20170824 16:46:46.669"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:46:57.398" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:46:57.398" status="PASS" starttime="20170824 16:46:57.397"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:46:57.399" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:46:57.399" status="PASS" starttime="20170824 16:46:57.399"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:46:57.400" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:46:57.400" status="PASS" starttime="20170824 16:46:57.399"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:46:57.400" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:46:57.400" status="PASS" starttime="20170824 16:46:57.400"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:46:57.588" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:46:57.588" status="PASS" starttime="20170824 16:46:57.401"></status>
</kw>
<msg timestamp="20170824 16:46:57.588" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:46:57.589" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:46:57.589" status="PASS" starttime="20170824 16:46:57.401"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:46:57.589" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:46:57.589" status="PASS" starttime="20170824 16:46:57.589"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:46:57.590" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:46:57.590" status="PASS" starttime="20170824 16:46:57.590"></status>
</kw>
<status endtime="20170824 16:46:57.590" status="PASS" starttime="20170824 16:46:57.396"></status>
</kw>
<status endtime="20170824 16:46:57.590" status="PASS" starttime="20170824 16:46:57.396"></status>
</kw>
<status endtime="20170824 16:46:57.590" status="PASS" starttime="20170824 16:46:57.395"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:46:57.591" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:46:57.591" status="PASS" starttime="20170824 16:46:57.591"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:46:57.593" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:46:57.593" status="PASS" starttime="20170824 16:46:57.592"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:46:57.594" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:46:57.594" status="PASS" starttime="20170824 16:46:57.594"></status>
</kw>
<status endtime="20170824 16:46:57.594" status="PASS" starttime="20170824 16:46:57.593"></status>
</kw>
<status endtime="20170824 16:46:57.594" status="PASS" starttime="20170824 16:46:57.592"></status>
</kw>
<status endtime="20170824 16:46:57.594" status="PASS" starttime="20170824 16:46:57.591"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:46:57.660" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:46:57.660" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:46:57.660" status="PASS" starttime="20170824 16:46:57.595"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:46:57.662" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:46:57.662" status="PASS" starttime="20170824 16:46:57.662"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:46:57.666" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:46:57.667" status="PASS" starttime="20170824 16:46:57.666"></status>
</kw>
<status endtime="20170824 16:46:57.667" status="PASS" starttime="20170824 16:46:57.662"></status>
</kw>
<status endtime="20170824 16:46:57.667" status="PASS" starttime="20170824 16:46:57.661"></status>
</kw>
<status endtime="20170824 16:46:57.667" status="PASS" starttime="20170824 16:46:57.661"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:46:57.667" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:46:57.668" status="PASS" starttime="20170824 16:46:57.667"></status>
</kw>
<msg timestamp="20170824 16:46:57.668" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:46:57.668" status="PASS" starttime="20170824 16:46:57.394"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:46:57.668" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:46:57.668" status="PASS" starttime="20170824 16:46:57.668"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:46:57.669" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:46:57.669" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:46:57.669" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170824 16:46:57.669" status="PASS" starttime="20170824 16:46:57.669"></status>
</kw>
<msg timestamp="20170824 16:46:57.669" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 16:46:57.670" status="PASS" starttime="20170824 16:46:57.394"></status>
</kw>
<msg timestamp="20170824 16:46:57.670" level="INFO">${power_state} = On</msg>
<status endtime="20170824 16:46:57.670" status="PASS" starttime="20170824 16:46:57.393"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:46:57.671" status="PASS" starttime="20170824 16:46:57.670"></status>
</kw>
<status endtime="20170824 16:46:57.671" status="PASS" starttime="20170824 16:46:57.393"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:46:57.674" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:46:57.675" status="PASS" starttime="20170824 16:46:57.674"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:46:57.675" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:46:57.675" status="PASS" starttime="20170824 16:46:57.675"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:46:57.676" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:46:57.676" status="PASS" starttime="20170824 16:46:57.676"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:46:57.677" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:46:57.677" status="PASS" starttime="20170824 16:46:57.676"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:46:57.900" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:46:57.900" status="PASS" starttime="20170824 16:46:57.678"></status>
</kw>
<msg timestamp="20170824 16:46:57.900" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:46:57.900" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:46:57.900" status="PASS" starttime="20170824 16:46:57.677"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:46:57.901" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:46:57.901" status="PASS" starttime="20170824 16:46:57.901"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:46:57.902" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:46:57.902" status="PASS" starttime="20170824 16:46:57.901"></status>
</kw>
<status endtime="20170824 16:46:57.902" status="PASS" starttime="20170824 16:46:57.674"></status>
</kw>
<status endtime="20170824 16:46:57.902" status="PASS" starttime="20170824 16:46:57.673"></status>
</kw>
<status endtime="20170824 16:46:57.902" status="PASS" starttime="20170824 16:46:57.672"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:46:57.903" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:46:57.903" status="PASS" starttime="20170824 16:46:57.902"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:46:57.905" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:46:57.905" status="PASS" starttime="20170824 16:46:57.904"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:46:57.906" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:46:57.906" status="PASS" starttime="20170824 16:46:57.906"></status>
</kw>
<status endtime="20170824 16:46:57.906" status="PASS" starttime="20170824 16:46:57.905"></status>
</kw>
<status endtime="20170824 16:46:57.907" status="PASS" starttime="20170824 16:46:57.904"></status>
</kw>
<status endtime="20170824 16:46:57.907" status="PASS" starttime="20170824 16:46:57.903"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:46:58.089" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:46:58.090" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:46:58.090" status="PASS" starttime="20170824 16:46:57.907"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:46:58.092" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:46:58.092" status="PASS" starttime="20170824 16:46:58.091"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:46:58.093" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:46:58.093" status="PASS" starttime="20170824 16:46:58.092"></status>
</kw>
<status endtime="20170824 16:46:58.093" status="PASS" starttime="20170824 16:46:58.092"></status>
</kw>
<status endtime="20170824 16:46:58.093" status="PASS" starttime="20170824 16:46:58.091"></status>
</kw>
<status endtime="20170824 16:46:58.093" status="PASS" starttime="20170824 16:46:58.090"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:46:58.093" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:46:58.093" status="PASS" starttime="20170824 16:46:58.093"></status>
</kw>
<msg timestamp="20170824 16:46:58.094" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:46:58.094" status="PASS" starttime="20170824 16:46:57.672"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:46:58.094" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:46:58.094" status="PASS" starttime="20170824 16:46:58.094"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:46:58.095" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:46:58.095" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:46:58.095" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170824 16:46:58.095" status="PASS" starttime="20170824 16:46:58.095"></status>
</kw>
<msg timestamp="20170824 16:46:58.095" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170824 16:46:58.095" status="PASS" starttime="20170824 16:46:57.671"></status>
</kw>
<msg timestamp="20170824 16:46:58.096" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170824 16:46:58.096" status="PASS" starttime="20170824 16:46:57.671"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170824 16:46:58.096" level="FAIL">Running != Quiesced</msg>
<status endtime="20170824 16:46:58.096" status="FAIL" starttime="20170824 16:46:58.096"></status>
</kw>
<status endtime="20170824 16:46:58.097" status="FAIL" starttime="20170824 16:46:57.393"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:47:08.102" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:47:08.102" status="PASS" starttime="20170824 16:47:08.102"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:47:08.103" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:47:08.103" status="PASS" starttime="20170824 16:47:08.103"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:47:08.103" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:47:08.104" status="PASS" starttime="20170824 16:47:08.103"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:47:08.105" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:47:08.105" status="PASS" starttime="20170824 16:47:08.104"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:47:08.311" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:47:08.311" status="PASS" starttime="20170824 16:47:08.105"></status>
</kw>
<msg timestamp="20170824 16:47:08.312" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:47:08.312" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:47:08.312" status="PASS" starttime="20170824 16:47:08.105"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:47:08.312" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:47:08.313" status="PASS" starttime="20170824 16:47:08.312"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:47:08.313" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:47:08.313" status="PASS" starttime="20170824 16:47:08.313"></status>
</kw>
<status endtime="20170824 16:47:08.313" status="PASS" starttime="20170824 16:47:08.101"></status>
</kw>
<status endtime="20170824 16:47:08.313" status="PASS" starttime="20170824 16:47:08.101"></status>
</kw>
<status endtime="20170824 16:47:08.314" status="PASS" starttime="20170824 16:47:08.100"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:47:08.314" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:47:08.314" status="PASS" starttime="20170824 16:47:08.314"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:47:08.316" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:47:08.317" status="PASS" starttime="20170824 16:47:08.316"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:47:08.318" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:47:08.318" status="PASS" starttime="20170824 16:47:08.318"></status>
</kw>
<status endtime="20170824 16:47:08.318" status="PASS" starttime="20170824 16:47:08.317"></status>
</kw>
<status endtime="20170824 16:47:08.318" status="PASS" starttime="20170824 16:47:08.315"></status>
</kw>
<status endtime="20170824 16:47:08.318" status="PASS" starttime="20170824 16:47:08.314"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:47:08.393" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:47:08.393" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:47:08.393" status="PASS" starttime="20170824 16:47:08.319"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:47:08.395" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:47:08.395" status="PASS" starttime="20170824 16:47:08.395"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:47:08.396" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:47:08.396" status="PASS" starttime="20170824 16:47:08.396"></status>
</kw>
<status endtime="20170824 16:47:08.396" status="PASS" starttime="20170824 16:47:08.395"></status>
</kw>
<status endtime="20170824 16:47:08.397" status="PASS" starttime="20170824 16:47:08.394"></status>
</kw>
<status endtime="20170824 16:47:08.397" status="PASS" starttime="20170824 16:47:08.394"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:47:08.397" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:47:08.397" status="PASS" starttime="20170824 16:47:08.397"></status>
</kw>
<msg timestamp="20170824 16:47:08.397" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:47:08.397" status="PASS" starttime="20170824 16:47:08.099"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:47:08.398" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:47:08.398" status="PASS" starttime="20170824 16:47:08.398"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:47:08.399" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:47:08.399" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:47:08.399" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170824 16:47:08.399" status="PASS" starttime="20170824 16:47:08.398"></status>
</kw>
<msg timestamp="20170824 16:47:08.399" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 16:47:08.399" status="PASS" starttime="20170824 16:47:08.099"></status>
</kw>
<msg timestamp="20170824 16:47:08.399" level="INFO">${power_state} = On</msg>
<status endtime="20170824 16:47:08.399" status="PASS" starttime="20170824 16:47:08.098"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:47:08.400" status="PASS" starttime="20170824 16:47:08.400"></status>
</kw>
<status endtime="20170824 16:47:08.400" status="PASS" starttime="20170824 16:47:08.098"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:47:08.404" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:47:08.404" status="PASS" starttime="20170824 16:47:08.404"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:47:08.405" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:47:08.405" status="PASS" starttime="20170824 16:47:08.405"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:47:08.406" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:47:08.406" status="PASS" starttime="20170824 16:47:08.405"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:47:08.406" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:47:08.406" status="PASS" starttime="20170824 16:47:08.406"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:47:08.585" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:47:08.585" status="PASS" starttime="20170824 16:47:08.407"></status>
</kw>
<msg timestamp="20170824 16:47:08.585" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:47:08.585" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:47:08.585" status="PASS" starttime="20170824 16:47:08.407"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:47:08.586" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:47:08.586" status="PASS" starttime="20170824 16:47:08.585"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:47:08.586" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:47:08.587" status="PASS" starttime="20170824 16:47:08.586"></status>
</kw>
<status endtime="20170824 16:47:08.587" status="PASS" starttime="20170824 16:47:08.403"></status>
</kw>
<status endtime="20170824 16:47:08.587" status="PASS" starttime="20170824 16:47:08.402"></status>
</kw>
<status endtime="20170824 16:47:08.587" status="PASS" starttime="20170824 16:47:08.402"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:47:08.588" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:47:08.588" status="PASS" starttime="20170824 16:47:08.587"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:47:08.590" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:47:08.590" status="PASS" starttime="20170824 16:47:08.589"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:47:08.591" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:47:08.591" status="PASS" starttime="20170824 16:47:08.590"></status>
</kw>
<status endtime="20170824 16:47:08.591" status="PASS" starttime="20170824 16:47:08.590"></status>
</kw>
<status endtime="20170824 16:47:08.591" status="PASS" starttime="20170824 16:47:08.588"></status>
</kw>
<status endtime="20170824 16:47:08.591" status="PASS" starttime="20170824 16:47:08.588"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:47:08.682" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:47:08.682" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:47:08.682" status="PASS" starttime="20170824 16:47:08.591"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:47:08.684" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:47:08.684" status="PASS" starttime="20170824 16:47:08.683"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:47:08.685" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:47:08.685" status="PASS" starttime="20170824 16:47:08.685"></status>
</kw>
<status endtime="20170824 16:47:08.685" status="PASS" starttime="20170824 16:47:08.684"></status>
</kw>
<status endtime="20170824 16:47:08.685" status="PASS" starttime="20170824 16:47:08.683"></status>
</kw>
<status endtime="20170824 16:47:08.685" status="PASS" starttime="20170824 16:47:08.682"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:47:08.686" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:47:08.686" status="PASS" starttime="20170824 16:47:08.686"></status>
</kw>
<msg timestamp="20170824 16:47:08.686" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:47:08.686" status="PASS" starttime="20170824 16:47:08.401"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:47:08.687" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:47:08.687" status="PASS" starttime="20170824 16:47:08.686"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:47:08.687" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:47:08.688" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:47:08.688" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170824 16:47:08.688" status="PASS" starttime="20170824 16:47:08.687"></status>
</kw>
<msg timestamp="20170824 16:47:08.688" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170824 16:47:08.688" status="PASS" starttime="20170824 16:47:08.401"></status>
</kw>
<msg timestamp="20170824 16:47:08.688" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170824 16:47:08.688" status="PASS" starttime="20170824 16:47:08.400"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170824 16:47:08.689" level="FAIL">Running != Quiesced</msg>
<status endtime="20170824 16:47:08.689" status="FAIL" starttime="20170824 16:47:08.689"></status>
</kw>
<status endtime="20170824 16:47:08.689" status="FAIL" starttime="20170824 16:47:08.097"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:47:18.695" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:47:18.695" status="PASS" starttime="20170824 16:47:18.694"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:47:18.696" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:47:18.696" status="PASS" starttime="20170824 16:47:18.696"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:47:18.697" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:47:18.697" status="PASS" starttime="20170824 16:47:18.697"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:47:18.698" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:47:18.698" status="PASS" starttime="20170824 16:47:18.698"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:47:18.877" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:47:18.877" status="PASS" starttime="20170824 16:47:18.699"></status>
</kw>
<msg timestamp="20170824 16:47:18.877" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:47:18.877" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:47:18.877" status="PASS" starttime="20170824 16:47:18.699"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:47:18.878" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:47:18.878" status="PASS" starttime="20170824 16:47:18.878"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:47:18.879" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:47:18.879" status="PASS" starttime="20170824 16:47:18.878"></status>
</kw>
<status endtime="20170824 16:47:18.879" status="PASS" starttime="20170824 16:47:18.694"></status>
</kw>
<status endtime="20170824 16:47:18.879" status="PASS" starttime="20170824 16:47:18.693"></status>
</kw>
<status endtime="20170824 16:47:18.879" status="PASS" starttime="20170824 16:47:18.692"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:47:18.880" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:47:18.880" status="PASS" starttime="20170824 16:47:18.879"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:47:18.882" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:47:18.882" status="PASS" starttime="20170824 16:47:18.881"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:47:18.882" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:47:18.883" status="PASS" starttime="20170824 16:47:18.882"></status>
</kw>
<status endtime="20170824 16:47:18.883" status="PASS" starttime="20170824 16:47:18.882"></status>
</kw>
<status endtime="20170824 16:47:18.883" status="PASS" starttime="20170824 16:47:18.880"></status>
</kw>
<status endtime="20170824 16:47:18.883" status="PASS" starttime="20170824 16:47:18.880"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:47:18.947" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:47:18.947" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:47:18.947" status="PASS" starttime="20170824 16:47:18.883"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:47:18.949" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:47:18.949" status="PASS" starttime="20170824 16:47:18.948"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:47:18.950" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:47:18.950" status="PASS" starttime="20170824 16:47:18.950"></status>
</kw>
<status endtime="20170824 16:47:18.950" status="PASS" starttime="20170824 16:47:18.949"></status>
</kw>
<status endtime="20170824 16:47:18.950" status="PASS" starttime="20170824 16:47:18.948"></status>
</kw>
<status endtime="20170824 16:47:18.950" status="PASS" starttime="20170824 16:47:18.947"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:47:18.951" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:47:18.951" status="PASS" starttime="20170824 16:47:18.951"></status>
</kw>
<msg timestamp="20170824 16:47:18.951" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:47:18.951" status="PASS" starttime="20170824 16:47:18.692"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:47:18.952" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:47:18.952" status="PASS" starttime="20170824 16:47:18.951"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:47:18.952" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:47:18.952" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:47:18.952" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170824 16:47:18.952" status="PASS" starttime="20170824 16:47:18.952"></status>
</kw>
<msg timestamp="20170824 16:47:18.953" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 16:47:18.953" status="PASS" starttime="20170824 16:47:18.691"></status>
</kw>
<msg timestamp="20170824 16:47:18.953" level="INFO">${power_state} = On</msg>
<status endtime="20170824 16:47:18.953" status="PASS" starttime="20170824 16:47:18.691"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:47:18.954" status="PASS" starttime="20170824 16:47:18.954"></status>
</kw>
<status endtime="20170824 16:47:18.954" status="PASS" starttime="20170824 16:47:18.690"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:47:18.958" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:47:18.958" status="PASS" starttime="20170824 16:47:18.957"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:47:18.959" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:47:18.959" status="PASS" starttime="20170824 16:47:18.959"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:47:18.960" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:47:18.960" status="PASS" starttime="20170824 16:47:18.959"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:47:18.960" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:47:18.960" status="PASS" starttime="20170824 16:47:18.960"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:47:19.155" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:47:19.155" status="PASS" starttime="20170824 16:47:18.961"></status>
</kw>
<msg timestamp="20170824 16:47:19.155" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:47:19.155" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:47:19.155" status="PASS" starttime="20170824 16:47:18.961"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:47:19.156" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:47:19.156" status="PASS" starttime="20170824 16:47:19.155"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:47:19.156" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:47:19.156" status="PASS" starttime="20170824 16:47:19.156"></status>
</kw>
<status endtime="20170824 16:47:19.157" status="PASS" starttime="20170824 16:47:18.957"></status>
</kw>
<status endtime="20170824 16:47:19.157" status="PASS" starttime="20170824 16:47:18.956"></status>
</kw>
<status endtime="20170824 16:47:19.157" status="PASS" starttime="20170824 16:47:18.956"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:47:19.157" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:47:19.157" status="PASS" starttime="20170824 16:47:19.157"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:47:19.159" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:47:19.159" status="PASS" starttime="20170824 16:47:19.159"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:47:19.160" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:47:19.160" status="PASS" starttime="20170824 16:47:19.160"></status>
</kw>
<status endtime="20170824 16:47:19.161" status="PASS" starttime="20170824 16:47:19.160"></status>
</kw>
<status endtime="20170824 16:47:19.161" status="PASS" starttime="20170824 16:47:19.158"></status>
</kw>
<status endtime="20170824 16:47:19.161" status="PASS" starttime="20170824 16:47:19.158"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:47:19.251" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:47:19.252" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:47:19.252" status="PASS" starttime="20170824 16:47:19.161"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:47:19.254" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:47:19.254" status="PASS" starttime="20170824 16:47:19.253"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:47:19.255" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:47:19.255" status="PASS" starttime="20170824 16:47:19.254"></status>
</kw>
<status endtime="20170824 16:47:19.255" status="PASS" starttime="20170824 16:47:19.254"></status>
</kw>
<status endtime="20170824 16:47:19.255" status="PASS" starttime="20170824 16:47:19.253"></status>
</kw>
<status endtime="20170824 16:47:19.255" status="PASS" starttime="20170824 16:47:19.252"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:47:19.255" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:47:19.255" status="PASS" starttime="20170824 16:47:19.255"></status>
</kw>
<msg timestamp="20170824 16:47:19.256" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:47:19.256" status="PASS" starttime="20170824 16:47:18.955"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:47:19.256" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:47:19.256" status="PASS" starttime="20170824 16:47:19.256"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:47:19.257" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:47:19.257" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:47:19.257" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170824 16:47:19.257" status="PASS" starttime="20170824 16:47:19.257"></status>
</kw>
<msg timestamp="20170824 16:47:19.258" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170824 16:47:19.258" status="PASS" starttime="20170824 16:47:18.955"></status>
</kw>
<msg timestamp="20170824 16:47:19.258" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170824 16:47:19.258" status="PASS" starttime="20170824 16:47:18.954"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170824 16:47:19.259" level="FAIL">Running != Quiesced</msg>
<status endtime="20170824 16:47:19.259" status="FAIL" starttime="20170824 16:47:19.258"></status>
</kw>
<status endtime="20170824 16:47:19.259" status="FAIL" starttime="20170824 16:47:18.690"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:47:29.264" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:47:29.265" status="PASS" starttime="20170824 16:47:29.264"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:47:29.265" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:47:29.265" status="PASS" starttime="20170824 16:47:29.265"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:47:29.266" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:47:29.266" status="PASS" starttime="20170824 16:47:29.265"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:47:29.266" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:47:29.266" status="PASS" starttime="20170824 16:47:29.266"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:47:29.455" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:47:29.455" status="PASS" starttime="20170824 16:47:29.267"></status>
</kw>
<msg timestamp="20170824 16:47:29.455" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:47:29.455" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:47:29.455" status="PASS" starttime="20170824 16:47:29.267"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:47:29.456" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:47:29.456" status="PASS" starttime="20170824 16:47:29.455"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:47:29.456" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:47:29.456" status="PASS" starttime="20170824 16:47:29.456"></status>
</kw>
<status endtime="20170824 16:47:29.457" status="PASS" starttime="20170824 16:47:29.263"></status>
</kw>
<status endtime="20170824 16:47:29.457" status="PASS" starttime="20170824 16:47:29.263"></status>
</kw>
<status endtime="20170824 16:47:29.457" status="PASS" starttime="20170824 16:47:29.262"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:47:29.457" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:47:29.457" status="PASS" starttime="20170824 16:47:29.457"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:47:29.460" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:47:29.460" status="PASS" starttime="20170824 16:47:29.459"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:47:29.461" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:47:29.461" status="PASS" starttime="20170824 16:47:29.460"></status>
</kw>
<status endtime="20170824 16:47:29.461" status="PASS" starttime="20170824 16:47:29.460"></status>
</kw>
<status endtime="20170824 16:47:29.461" status="PASS" starttime="20170824 16:47:29.458"></status>
</kw>
<status endtime="20170824 16:47:29.461" status="PASS" starttime="20170824 16:47:29.458"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:47:29.536" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:47:29.536" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:47:29.536" status="PASS" starttime="20170824 16:47:29.462"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:47:29.538" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:47:29.538" status="PASS" starttime="20170824 16:47:29.537"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:47:29.539" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:47:29.539" status="PASS" starttime="20170824 16:47:29.538"></status>
</kw>
<status endtime="20170824 16:47:29.539" status="PASS" starttime="20170824 16:47:29.538"></status>
</kw>
<status endtime="20170824 16:47:29.539" status="PASS" starttime="20170824 16:47:29.537"></status>
</kw>
<status endtime="20170824 16:47:29.539" status="PASS" starttime="20170824 16:47:29.536"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:47:29.539" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:47:29.540" status="PASS" starttime="20170824 16:47:29.539"></status>
</kw>
<msg timestamp="20170824 16:47:29.540" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:47:29.540" status="PASS" starttime="20170824 16:47:29.262"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:47:29.540" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:47:29.540" status="PASS" starttime="20170824 16:47:29.540"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:47:29.541" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:47:29.541" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:47:29.541" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170824 16:47:29.541" status="PASS" starttime="20170824 16:47:29.541"></status>
</kw>
<msg timestamp="20170824 16:47:29.541" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 16:47:29.541" status="PASS" starttime="20170824 16:47:29.261"></status>
</kw>
<msg timestamp="20170824 16:47:29.542" level="INFO">${power_state} = On</msg>
<status endtime="20170824 16:47:29.542" status="PASS" starttime="20170824 16:47:29.260"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:47:29.542" status="PASS" starttime="20170824 16:47:29.542"></status>
</kw>
<status endtime="20170824 16:47:29.542" status="PASS" starttime="20170824 16:47:29.260"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:47:29.546" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:47:29.547" status="PASS" starttime="20170824 16:47:29.546"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:47:29.548" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:47:29.548" status="PASS" starttime="20170824 16:47:29.547"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:47:29.548" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:47:29.549" status="PASS" starttime="20170824 16:47:29.548"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:47:29.549" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:47:29.549" status="PASS" starttime="20170824 16:47:29.549"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:47:29.729" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:47:29.729" status="PASS" starttime="20170824 16:47:29.550"></status>
</kw>
<msg timestamp="20170824 16:47:29.729" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:47:29.729" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:47:29.729" status="PASS" starttime="20170824 16:47:29.550"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:47:29.730" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:47:29.730" status="PASS" starttime="20170824 16:47:29.730"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:47:29.731" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:47:29.731" status="PASS" starttime="20170824 16:47:29.731"></status>
</kw>
<status endtime="20170824 16:47:29.731" status="PASS" starttime="20170824 16:47:29.545"></status>
</kw>
<status endtime="20170824 16:47:29.731" status="PASS" starttime="20170824 16:47:29.545"></status>
</kw>
<status endtime="20170824 16:47:29.731" status="PASS" starttime="20170824 16:47:29.544"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:47:29.732" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:47:29.732" status="PASS" starttime="20170824 16:47:29.731"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:47:29.734" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:47:29.734" status="PASS" starttime="20170824 16:47:29.733"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:47:29.735" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:47:29.735" status="PASS" starttime="20170824 16:47:29.735"></status>
</kw>
<status endtime="20170824 16:47:29.735" status="PASS" starttime="20170824 16:47:29.734"></status>
</kw>
<status endtime="20170824 16:47:29.735" status="PASS" starttime="20170824 16:47:29.733"></status>
</kw>
<status endtime="20170824 16:47:29.735" status="PASS" starttime="20170824 16:47:29.732"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:47:29.836" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:47:29.836" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:47:29.836" status="PASS" starttime="20170824 16:47:29.736"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:47:29.838" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:47:29.838" status="PASS" starttime="20170824 16:47:29.837"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:47:29.839" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:47:29.839" status="PASS" starttime="20170824 16:47:29.839"></status>
</kw>
<status endtime="20170824 16:47:29.839" status="PASS" starttime="20170824 16:47:29.838"></status>
</kw>
<status endtime="20170824 16:47:29.839" status="PASS" starttime="20170824 16:47:29.837"></status>
</kw>
<status endtime="20170824 16:47:29.839" status="PASS" starttime="20170824 16:47:29.836"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:47:29.840" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:47:29.840" status="PASS" starttime="20170824 16:47:29.840"></status>
</kw>
<msg timestamp="20170824 16:47:29.840" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:47:29.840" status="PASS" starttime="20170824 16:47:29.543"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:47:29.841" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:47:29.841" status="PASS" starttime="20170824 16:47:29.840"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:47:29.841" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:47:29.841" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:47:29.842" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170824 16:47:29.842" status="PASS" starttime="20170824 16:47:29.841"></status>
</kw>
<msg timestamp="20170824 16:47:29.842" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170824 16:47:29.842" status="PASS" starttime="20170824 16:47:29.543"></status>
</kw>
<msg timestamp="20170824 16:47:29.842" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170824 16:47:29.842" status="PASS" starttime="20170824 16:47:29.543"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170824 16:47:29.843" level="FAIL">Running != Quiesced</msg>
<status endtime="20170824 16:47:29.843" status="FAIL" starttime="20170824 16:47:29.842"></status>
</kw>
<status endtime="20170824 16:47:29.843" status="FAIL" starttime="20170824 16:47:29.259"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:47:39.849" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:47:39.849" status="PASS" starttime="20170824 16:47:39.848"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:47:39.850" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:47:39.850" status="PASS" starttime="20170824 16:47:39.849"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:47:39.850" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:47:39.850" status="PASS" starttime="20170824 16:47:39.850"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:47:39.851" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:47:39.851" status="PASS" starttime="20170824 16:47:39.851"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:47:40.044" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:47:40.044" status="PASS" starttime="20170824 16:47:39.852"></status>
</kw>
<msg timestamp="20170824 16:47:40.044" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:47:40.044" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:47:40.044" status="PASS" starttime="20170824 16:47:39.851"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:47:40.045" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:47:40.045" status="PASS" starttime="20170824 16:47:40.045"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:47:40.046" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:47:40.046" status="PASS" starttime="20170824 16:47:40.045"></status>
</kw>
<status endtime="20170824 16:47:40.046" status="PASS" starttime="20170824 16:47:39.847"></status>
</kw>
<status endtime="20170824 16:47:40.046" status="PASS" starttime="20170824 16:47:39.847"></status>
</kw>
<status endtime="20170824 16:47:40.046" status="PASS" starttime="20170824 16:47:39.846"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:47:40.047" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:47:40.047" status="PASS" starttime="20170824 16:47:40.046"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:47:40.049" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:47:40.049" status="PASS" starttime="20170824 16:47:40.048"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:47:40.050" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:47:40.050" status="PASS" starttime="20170824 16:47:40.050"></status>
</kw>
<status endtime="20170824 16:47:40.050" status="PASS" starttime="20170824 16:47:40.049"></status>
</kw>
<status endtime="20170824 16:47:40.050" status="PASS" starttime="20170824 16:47:40.047"></status>
</kw>
<status endtime="20170824 16:47:40.050" status="PASS" starttime="20170824 16:47:40.047"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:47:40.125" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:47:40.125" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:47:40.126" status="PASS" starttime="20170824 16:47:40.050"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:47:40.127" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:47:40.127" status="PASS" starttime="20170824 16:47:40.127"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:47:40.129" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:47:40.129" status="PASS" starttime="20170824 16:47:40.128"></status>
</kw>
<status endtime="20170824 16:47:40.129" status="PASS" starttime="20170824 16:47:40.127"></status>
</kw>
<status endtime="20170824 16:47:40.129" status="PASS" starttime="20170824 16:47:40.126"></status>
</kw>
<status endtime="20170824 16:47:40.129" status="PASS" starttime="20170824 16:47:40.126"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:47:40.130" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:47:40.130" status="PASS" starttime="20170824 16:47:40.130"></status>
</kw>
<msg timestamp="20170824 16:47:40.130" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:47:40.130" status="PASS" starttime="20170824 16:47:39.845"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:47:40.131" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:47:40.131" status="PASS" starttime="20170824 16:47:40.130"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:47:40.131" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:47:40.131" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:47:40.131" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170824 16:47:40.132" status="PASS" starttime="20170824 16:47:40.131"></status>
</kw>
<msg timestamp="20170824 16:47:40.132" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 16:47:40.132" status="PASS" starttime="20170824 16:47:39.845"></status>
</kw>
<msg timestamp="20170824 16:47:40.132" level="INFO">${power_state} = On</msg>
<status endtime="20170824 16:47:40.132" status="PASS" starttime="20170824 16:47:39.844"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:47:40.133" status="PASS" starttime="20170824 16:47:40.132"></status>
</kw>
<status endtime="20170824 16:47:40.133" status="PASS" starttime="20170824 16:47:39.844"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:47:40.136" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:47:40.137" status="PASS" starttime="20170824 16:47:40.136"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:47:40.137" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:47:40.137" status="PASS" starttime="20170824 16:47:40.137"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:47:40.138" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:47:40.138" status="PASS" starttime="20170824 16:47:40.138"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:47:40.139" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:47:40.139" status="PASS" starttime="20170824 16:47:40.138"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:47:40.410" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:47:40.410" status="PASS" starttime="20170824 16:47:40.139"></status>
</kw>
<msg timestamp="20170824 16:47:40.410" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:47:40.410" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:47:40.410" status="PASS" starttime="20170824 16:47:40.139"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:47:40.411" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:47:40.411" status="PASS" starttime="20170824 16:47:40.410"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:47:40.411" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:47:40.412" status="PASS" starttime="20170824 16:47:40.411"></status>
</kw>
<status endtime="20170824 16:47:40.412" status="PASS" starttime="20170824 16:47:40.135"></status>
</kw>
<status endtime="20170824 16:47:40.412" status="PASS" starttime="20170824 16:47:40.135"></status>
</kw>
<status endtime="20170824 16:47:40.412" status="PASS" starttime="20170824 16:47:40.134"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:47:40.412" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:47:40.412" status="PASS" starttime="20170824 16:47:40.412"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:47:40.418" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:47:40.418" status="PASS" starttime="20170824 16:47:40.414"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:47:40.419" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:47:40.419" status="PASS" starttime="20170824 16:47:40.419"></status>
</kw>
<status endtime="20170824 16:47:40.419" status="PASS" starttime="20170824 16:47:40.418"></status>
</kw>
<status endtime="20170824 16:47:40.419" status="PASS" starttime="20170824 16:47:40.413"></status>
</kw>
<status endtime="20170824 16:47:40.419" status="PASS" starttime="20170824 16:47:40.413"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:47:40.515" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:47:40.515" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:47:40.515" status="PASS" starttime="20170824 16:47:40.420"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:47:40.517" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:47:40.517" status="PASS" starttime="20170824 16:47:40.516"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:47:40.517" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:47:40.518" status="PASS" starttime="20170824 16:47:40.517"></status>
</kw>
<status endtime="20170824 16:47:40.518" status="PASS" starttime="20170824 16:47:40.517"></status>
</kw>
<status endtime="20170824 16:47:40.518" status="PASS" starttime="20170824 16:47:40.516"></status>
</kw>
<status endtime="20170824 16:47:40.518" status="PASS" starttime="20170824 16:47:40.515"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:47:40.518" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:47:40.519" status="PASS" starttime="20170824 16:47:40.518"></status>
</kw>
<msg timestamp="20170824 16:47:40.519" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:47:40.519" status="PASS" starttime="20170824 16:47:40.134"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:47:40.519" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:47:40.519" status="PASS" starttime="20170824 16:47:40.519"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:47:40.520" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:47:40.520" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:47:40.520" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170824 16:47:40.520" status="PASS" starttime="20170824 16:47:40.520"></status>
</kw>
<msg timestamp="20170824 16:47:40.521" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170824 16:47:40.521" status="PASS" starttime="20170824 16:47:40.133"></status>
</kw>
<msg timestamp="20170824 16:47:40.521" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170824 16:47:40.521" status="PASS" starttime="20170824 16:47:40.133"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170824 16:47:40.522" level="FAIL">Running != Quiesced</msg>
<status endtime="20170824 16:47:40.522" status="FAIL" starttime="20170824 16:47:40.521"></status>
</kw>
<status endtime="20170824 16:47:40.522" status="FAIL" starttime="20170824 16:47:39.844"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:47:50.527" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:47:50.527" status="PASS" starttime="20170824 16:47:50.526"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:47:50.528" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:47:50.528" status="PASS" starttime="20170824 16:47:50.527"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:47:50.528" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:47:50.529" status="PASS" starttime="20170824 16:47:50.528"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:47:50.530" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:47:50.530" status="PASS" starttime="20170824 16:47:50.529"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:47:50.722" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:47:50.722" status="PASS" starttime="20170824 16:47:50.530"></status>
</kw>
<msg timestamp="20170824 16:47:50.722" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:47:50.722" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:47:50.722" status="PASS" starttime="20170824 16:47:50.530"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:47:50.723" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:47:50.723" status="PASS" starttime="20170824 16:47:50.723"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:47:50.724" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:47:50.724" status="PASS" starttime="20170824 16:47:50.723"></status>
</kw>
<status endtime="20170824 16:47:50.724" status="PASS" starttime="20170824 16:47:50.526"></status>
</kw>
<status endtime="20170824 16:47:50.724" status="PASS" starttime="20170824 16:47:50.525"></status>
</kw>
<status endtime="20170824 16:47:50.724" status="PASS" starttime="20170824 16:47:50.525"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:47:50.725" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:47:50.725" status="PASS" starttime="20170824 16:47:50.724"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:47:50.727" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:47:50.727" status="PASS" starttime="20170824 16:47:50.726"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:47:50.728" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:47:50.728" status="PASS" starttime="20170824 16:47:50.728"></status>
</kw>
<status endtime="20170824 16:47:50.728" status="PASS" starttime="20170824 16:47:50.727"></status>
</kw>
<status endtime="20170824 16:47:50.728" status="PASS" starttime="20170824 16:47:50.725"></status>
</kw>
<status endtime="20170824 16:47:50.728" status="PASS" starttime="20170824 16:47:50.725"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:47:50.802" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:47:50.802" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:47:50.802" status="PASS" starttime="20170824 16:47:50.728"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:47:50.804" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:47:50.804" status="PASS" starttime="20170824 16:47:50.803"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:47:50.805" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:47:50.805" status="PASS" starttime="20170824 16:47:50.804"></status>
</kw>
<status endtime="20170824 16:47:50.805" status="PASS" starttime="20170824 16:47:50.804"></status>
</kw>
<status endtime="20170824 16:47:50.805" status="PASS" starttime="20170824 16:47:50.803"></status>
</kw>
<status endtime="20170824 16:47:50.805" status="PASS" starttime="20170824 16:47:50.802"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:47:50.805" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:47:50.805" status="PASS" starttime="20170824 16:47:50.805"></status>
</kw>
<msg timestamp="20170824 16:47:50.806" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:47:50.806" status="PASS" starttime="20170824 16:47:50.524"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:47:50.806" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:47:50.806" status="PASS" starttime="20170824 16:47:50.806"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:47:50.807" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:47:50.807" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:47:50.807" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170824 16:47:50.807" status="PASS" starttime="20170824 16:47:50.807"></status>
</kw>
<msg timestamp="20170824 16:47:50.807" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 16:47:50.807" status="PASS" starttime="20170824 16:47:50.524"></status>
</kw>
<msg timestamp="20170824 16:47:50.808" level="INFO">${power_state} = On</msg>
<status endtime="20170824 16:47:50.808" status="PASS" starttime="20170824 16:47:50.523"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:47:50.808" status="PASS" starttime="20170824 16:47:50.808"></status>
</kw>
<status endtime="20170824 16:47:50.808" status="PASS" starttime="20170824 16:47:50.523"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:47:50.813" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:47:50.813" status="PASS" starttime="20170824 16:47:50.812"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:47:50.814" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:47:50.814" status="PASS" starttime="20170824 16:47:50.813"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:47:50.814" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:47:50.814" status="PASS" starttime="20170824 16:47:50.814"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:47:50.815" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:47:50.815" status="PASS" starttime="20170824 16:47:50.815"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:47:51.039" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:47:51.039" status="PASS" starttime="20170824 16:47:50.816"></status>
</kw>
<msg timestamp="20170824 16:47:51.039" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:47:51.039" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:47:51.039" status="PASS" starttime="20170824 16:47:50.816"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:47:51.040" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:47:51.040" status="PASS" starttime="20170824 16:47:51.039"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:47:51.040" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:47:51.040" status="PASS" starttime="20170824 16:47:51.040"></status>
</kw>
<status endtime="20170824 16:47:51.040" status="PASS" starttime="20170824 16:47:50.812"></status>
</kw>
<status endtime="20170824 16:47:51.041" status="PASS" starttime="20170824 16:47:50.811"></status>
</kw>
<status endtime="20170824 16:47:51.041" status="PASS" starttime="20170824 16:47:50.810"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:47:51.041" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:47:51.041" status="PASS" starttime="20170824 16:47:51.041"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:47:51.044" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:47:51.044" status="PASS" starttime="20170824 16:47:51.043"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:47:51.045" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:47:51.045" status="PASS" starttime="20170824 16:47:51.045"></status>
</kw>
<status endtime="20170824 16:47:51.045" status="PASS" starttime="20170824 16:47:51.044"></status>
</kw>
<status endtime="20170824 16:47:51.045" status="PASS" starttime="20170824 16:47:51.042"></status>
</kw>
<status endtime="20170824 16:47:51.045" status="PASS" starttime="20170824 16:47:51.042"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:47:51.195" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:47:51.195" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:47:51.196" status="PASS" starttime="20170824 16:47:51.046"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:47:51.197" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:47:51.198" status="PASS" starttime="20170824 16:47:51.197"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:47:51.199" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:47:51.199" status="PASS" starttime="20170824 16:47:51.199"></status>
</kw>
<status endtime="20170824 16:47:51.199" status="PASS" starttime="20170824 16:47:51.198"></status>
</kw>
<status endtime="20170824 16:47:51.199" status="PASS" starttime="20170824 16:47:51.196"></status>
</kw>
<status endtime="20170824 16:47:51.199" status="PASS" starttime="20170824 16:47:51.196"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:47:51.200" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:47:51.200" status="PASS" starttime="20170824 16:47:51.200"></status>
</kw>
<msg timestamp="20170824 16:47:51.200" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:47:51.200" status="PASS" starttime="20170824 16:47:50.810"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:47:51.201" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:47:51.201" status="PASS" starttime="20170824 16:47:51.200"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:47:51.201" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:47:51.201" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:47:51.201" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170824 16:47:51.201" status="PASS" starttime="20170824 16:47:51.201"></status>
</kw>
<msg timestamp="20170824 16:47:51.202" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170824 16:47:51.202" status="PASS" starttime="20170824 16:47:50.809"></status>
</kw>
<msg timestamp="20170824 16:47:51.202" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170824 16:47:51.202" status="PASS" starttime="20170824 16:47:50.809"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170824 16:47:51.203" level="FAIL">Running != Quiesced</msg>
<status endtime="20170824 16:47:51.203" status="FAIL" starttime="20170824 16:47:51.202"></status>
</kw>
<status endtime="20170824 16:47:51.203" status="FAIL" starttime="20170824 16:47:50.522"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:48:01.208" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:48:01.209" status="PASS" starttime="20170824 16:48:01.208"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:48:01.209" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:48:01.209" status="PASS" starttime="20170824 16:48:01.209"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:48:01.210" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:48:01.210" status="PASS" starttime="20170824 16:48:01.209"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:48:01.210" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:48:01.210" status="PASS" starttime="20170824 16:48:01.210"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:48:01.412" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:48:01.412" status="PASS" starttime="20170824 16:48:01.211"></status>
</kw>
<msg timestamp="20170824 16:48:01.412" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:48:01.412" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:01.412" status="PASS" starttime="20170824 16:48:01.211"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:48:01.413" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:01.413" status="PASS" starttime="20170824 16:48:01.413"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:48:01.414" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:01.414" status="PASS" starttime="20170824 16:48:01.413"></status>
</kw>
<status endtime="20170824 16:48:01.414" status="PASS" starttime="20170824 16:48:01.207"></status>
</kw>
<status endtime="20170824 16:48:01.414" status="PASS" starttime="20170824 16:48:01.207"></status>
</kw>
<status endtime="20170824 16:48:01.414" status="PASS" starttime="20170824 16:48:01.206"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:48:01.415" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:48:01.415" status="PASS" starttime="20170824 16:48:01.414"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:48:01.417" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:48:01.417" status="PASS" starttime="20170824 16:48:01.416"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:48:01.418" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:48:01.418" status="PASS" starttime="20170824 16:48:01.417"></status>
</kw>
<status endtime="20170824 16:48:01.418" status="PASS" starttime="20170824 16:48:01.417"></status>
</kw>
<status endtime="20170824 16:48:01.418" status="PASS" starttime="20170824 16:48:01.415"></status>
</kw>
<status endtime="20170824 16:48:01.418" status="PASS" starttime="20170824 16:48:01.415"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:48:01.494" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:48:01.494" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:01.494" status="PASS" starttime="20170824 16:48:01.418"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:48:01.496" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:48:01.496" status="PASS" starttime="20170824 16:48:01.496"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:48:01.497" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:48:01.497" status="PASS" starttime="20170824 16:48:01.497"></status>
</kw>
<status endtime="20170824 16:48:01.497" status="PASS" starttime="20170824 16:48:01.496"></status>
</kw>
<status endtime="20170824 16:48:01.497" status="PASS" starttime="20170824 16:48:01.495"></status>
</kw>
<status endtime="20170824 16:48:01.498" status="PASS" starttime="20170824 16:48:01.495"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:48:01.498" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:48:01.498" status="PASS" starttime="20170824 16:48:01.498"></status>
</kw>
<msg timestamp="20170824 16:48:01.498" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:01.498" status="PASS" starttime="20170824 16:48:01.205"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:48:01.499" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:01.499" status="PASS" starttime="20170824 16:48:01.499"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:48:01.500" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:48:01.500" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:48:01.500" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170824 16:48:01.500" status="PASS" starttime="20170824 16:48:01.499"></status>
</kw>
<msg timestamp="20170824 16:48:01.500" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 16:48:01.500" status="PASS" starttime="20170824 16:48:01.205"></status>
</kw>
<msg timestamp="20170824 16:48:01.500" level="INFO">${power_state} = On</msg>
<status endtime="20170824 16:48:01.500" status="PASS" starttime="20170824 16:48:01.204"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:48:01.501" status="PASS" starttime="20170824 16:48:01.501"></status>
</kw>
<status endtime="20170824 16:48:01.501" status="PASS" starttime="20170824 16:48:01.204"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:48:01.505" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:48:01.505" status="PASS" starttime="20170824 16:48:01.504"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:48:01.506" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:48:01.506" status="PASS" starttime="20170824 16:48:01.506"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:48:01.507" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:48:01.507" status="PASS" starttime="20170824 16:48:01.506"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:48:01.507" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:48:01.507" status="PASS" starttime="20170824 16:48:01.507"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:48:01.701" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:48:01.701" status="PASS" starttime="20170824 16:48:01.508"></status>
</kw>
<msg timestamp="20170824 16:48:01.701" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:48:01.702" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:01.702" status="PASS" starttime="20170824 16:48:01.507"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:48:01.702" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:01.702" status="PASS" starttime="20170824 16:48:01.702"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:48:01.703" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:01.703" status="PASS" starttime="20170824 16:48:01.703"></status>
</kw>
<status endtime="20170824 16:48:01.703" status="PASS" starttime="20170824 16:48:01.504"></status>
</kw>
<status endtime="20170824 16:48:01.703" status="PASS" starttime="20170824 16:48:01.503"></status>
</kw>
<status endtime="20170824 16:48:01.703" status="PASS" starttime="20170824 16:48:01.503"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:48:01.704" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:48:01.704" status="PASS" starttime="20170824 16:48:01.704"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:48:01.706" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:48:01.706" status="PASS" starttime="20170824 16:48:01.705"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:48:01.707" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:48:01.707" status="PASS" starttime="20170824 16:48:01.707"></status>
</kw>
<status endtime="20170824 16:48:01.707" status="PASS" starttime="20170824 16:48:01.706"></status>
</kw>
<status endtime="20170824 16:48:01.707" status="PASS" starttime="20170824 16:48:01.705"></status>
</kw>
<status endtime="20170824 16:48:01.707" status="PASS" starttime="20170824 16:48:01.704"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:48:01.821" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:48:01.821" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:01.821" status="PASS" starttime="20170824 16:48:01.708"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:48:01.823" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:48:01.823" status="PASS" starttime="20170824 16:48:01.822"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:48:01.824" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:48:01.824" status="PASS" starttime="20170824 16:48:01.823"></status>
</kw>
<status endtime="20170824 16:48:01.824" status="PASS" starttime="20170824 16:48:01.823"></status>
</kw>
<status endtime="20170824 16:48:01.824" status="PASS" starttime="20170824 16:48:01.822"></status>
</kw>
<status endtime="20170824 16:48:01.824" status="PASS" starttime="20170824 16:48:01.821"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:48:01.824" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:48:01.824" status="PASS" starttime="20170824 16:48:01.824"></status>
</kw>
<msg timestamp="20170824 16:48:01.825" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:01.825" status="PASS" starttime="20170824 16:48:01.502"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:48:01.825" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:01.825" status="PASS" starttime="20170824 16:48:01.825"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:48:01.826" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:48:01.826" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:48:01.826" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170824 16:48:01.826" status="PASS" starttime="20170824 16:48:01.826"></status>
</kw>
<msg timestamp="20170824 16:48:01.826" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170824 16:48:01.826" status="PASS" starttime="20170824 16:48:01.502"></status>
</kw>
<msg timestamp="20170824 16:48:01.827" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170824 16:48:01.827" status="PASS" starttime="20170824 16:48:01.501"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170824 16:48:01.828" level="FAIL">Running != Quiesced</msg>
<status endtime="20170824 16:48:01.828" status="FAIL" starttime="20170824 16:48:01.828"></status>
</kw>
<status endtime="20170824 16:48:01.829" status="FAIL" starttime="20170824 16:48:01.203"></status>
</kw>
<msg timestamp="20170824 16:48:01.829" level="FAIL">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: Running != Quiesced</msg>
<status endtime="20170824 16:48:01.829" status="FAIL" starttime="20170824 16:37:57.203"></status>
</kw>
<status endtime="20170824 16:48:01.829" status="FAIL" starttime="20170824 16:37:56.352"></status>
</kw>
<status endtime="20170824 16:48:01.829" status="FAIL" starttime="20170824 16:37:49.005"></status>
</kw>
<status endtime="20170824 16:48:01.829" status="FAIL" starttime="20170824 16:37:49.004"></status>
</kw>
<kw type="teardown" name="Test Exit Logs">
<doc>Collect FFDC and SOL log.</doc>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:48:01.837" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:48:01.837" status="PASS" starttime="20170824 16:48:01.836"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:48:01.838" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:48:01.838" status="PASS" starttime="20170824 16:48:01.837"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:48:01.839" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:48:01.839" status="PASS" starttime="20170824 16:48:01.838"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:48:01.840" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:48:01.840" status="PASS" starttime="20170824 16:48:01.839"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:48:02.085" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:48:02.085" status="PASS" starttime="20170824 16:48:01.840"></status>
</kw>
<msg timestamp="20170824 16:48:02.085" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:48:02.085" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:02.085" status="PASS" starttime="20170824 16:48:01.840"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:48:02.086" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:02.086" status="PASS" starttime="20170824 16:48:02.085"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:48:02.086" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:02.086" status="PASS" starttime="20170824 16:48:02.086"></status>
</kw>
<status endtime="20170824 16:48:02.087" status="PASS" starttime="20170824 16:48:01.835"></status>
</kw>
<status endtime="20170824 16:48:02.087" status="PASS" starttime="20170824 16:48:01.835"></status>
</kw>
<status endtime="20170824 16:48:02.087" status="PASS" starttime="20170824 16:48:01.834"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:48:02.087" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:48:02.087" status="PASS" starttime="20170824 16:48:02.087"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:48:02.090" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:48:02.090" status="PASS" starttime="20170824 16:48:02.089"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:48:02.090" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:48:02.091" status="PASS" starttime="20170824 16:48:02.090"></status>
</kw>
<status endtime="20170824 16:48:02.091" status="PASS" starttime="20170824 16:48:02.090"></status>
</kw>
<status endtime="20170824 16:48:02.091" status="PASS" starttime="20170824 16:48:02.088"></status>
</kw>
<status endtime="20170824 16:48:02.091" status="PASS" starttime="20170824 16:48:02.088"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:48:02.183" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:48:02.183" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:02.183" status="PASS" starttime="20170824 16:48:02.091"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:48:02.185" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:48:02.185" status="PASS" starttime="20170824 16:48:02.184"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:48:02.185" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:48:02.186" status="PASS" starttime="20170824 16:48:02.185"></status>
</kw>
<status endtime="20170824 16:48:02.186" status="PASS" starttime="20170824 16:48:02.185"></status>
</kw>
<status endtime="20170824 16:48:02.186" status="PASS" starttime="20170824 16:48:02.184"></status>
</kw>
<status endtime="20170824 16:48:02.186" status="PASS" starttime="20170824 16:48:02.183"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:48:02.186" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:48:02.186" status="PASS" starttime="20170824 16:48:02.186"></status>
</kw>
<msg timestamp="20170824 16:48:02.187" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:02.187" status="PASS" starttime="20170824 16:48:01.832"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:48:02.187" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:02.187" status="PASS" starttime="20170824 16:48:02.187"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:48:02.188" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:48:02.188" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:48:02.188" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170824 16:48:02.188" status="PASS" starttime="20170824 16:48:02.188"></status>
</kw>
<msg timestamp="20170824 16:48:02.189" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170824 16:48:02.189" status="PASS" starttime="20170824 16:48:01.832"></status>
</kw>
<msg timestamp="20170824 16:48:02.189" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170824 16:48:02.189" status="PASS" starttime="20170824 16:48:01.831"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<status endtime="20170824 16:48:02.190" status="PASS" starttime="20170824 16:48:02.190"></status>
</kw>
<msg timestamp="20170824 16:48:02.190" level="INFO">${status} = True</msg>
<status endtime="20170824 16:48:02.190" status="PASS" starttime="20170824 16:48:02.189"></status>
</kw>
<msg timestamp="20170824 16:48:02.190" level="INFO">${status} = True</msg>
<status endtime="20170824 16:48:02.190" status="PASS" starttime="20170824 16:48:01.830"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw library="openbmc_ffdc" name="Ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw library="utils" name="Ping Host">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170824 16:48:02.271" level="INFO">Length is 10</msg>
<status endtime="20170824 16:48:02.271" status="PASS" starttime="20170824 16:48:02.271"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170824 16:48:02.276" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170824 16:48:05.284" level="INFO">${RC} = 0</msg>
<msg timestamp="20170824 16:48:05.284" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.793 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.573 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status endtime="20170824 16:48:05.284" status="PASS" starttime="20170824 16:48:02.272"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170824 16:48:05.287" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.793 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.573 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=2.16 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.561 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3002ms
rtt min/avg/max/mdev = 0.561/1.022/2.164/0.666 ms</msg>
<status endtime="20170824 16:48:05.287" status="PASS" starttime="20170824 16:48:05.286"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170824 16:48:05.288" status="PASS" starttime="20170824 16:48:05.287"></status>
</kw>
<status endtime="20170824 16:48:05.288" status="PASS" starttime="20170824 16:48:02.270"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170824 16:48:05.306" level="INFO">${cur_time} = 2017-08-24 16:48:05:305919</msg>
<status endtime="20170824 16:48:05.306" status="PASS" starttime="20170824 16:48:05.306"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170824 16:48:05.307" level="INFO">${cur_time} = 20170824164805305919</msg>
<status endtime="20170824 16:48:05.307" status="PASS" starttime="20170824 16:48:05.307"></status>
</kw>
<status endtime="20170824 16:48:05.307" status="PASS" starttime="20170824 16:48:05.305"></status>
</kw>
<msg timestamp="20170824 16:48:05.307" level="INFO">${FFDC_TIME} = 20170824164805305919</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170824 16:48:05.320" level="INFO">${suite_name} = TestsTestBasicPoweron</msg>
<status endtime="20170824 16:48:05.320" status="PASS" starttime="20170824 16:48:05.319"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170824 16:48:05.321" level="INFO">${suite_name} = 20170824164805305919_TestsTestBasicPoweron</msg>
<status endtime="20170824 16:48:05.321" status="PASS" starttime="20170824 16:48:05.320"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170824 16:48:05.321" level="INFO">${test_name} = PowerOnTest</msg>
<status endtime="20170824 16:48:05.321" status="PASS" starttime="20170824 16:48:05.321"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170824 16:48:05.322" level="INFO">${test_name} = 20170824164805305919_PowerOnTest</msg>
<status endtime="20170824 16:48:05.322" status="PASS" starttime="20170824 16:48:05.321"></status>
</kw>
<status endtime="20170824 16:48:05.322" status="PASS" starttime="20170824 16:48:05.319"></status>
</kw>
<msg timestamp="20170824 16:48:05.323" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/</msg>
<msg timestamp="20170824 16:48:05.323" level="INFO">${FFDC_PREFIX} = 20170824164805305919_</msg>
<msg timestamp="20170824 16:48:05.354" level="INFO">${LOG_PREFIX} = /tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_</msg>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:05.356" level="INFO">Created directory '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:05.356" status="PASS" starttime="20170824 16:48:05.355"></status>
</kw>
<msg timestamp="20170824 16:48:05.361" level="INFO">${FFDC_FILE_PATH} = /tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt</msg>
<kw library="openbmc_ffdc_utils" name="Header Message">
<doc>Write header message to the report document manifest.</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:05.395" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:05.396" status="PASS" starttime="20170824 16:48:05.395"></status>
</kw>
<status endtime="20170824 16:48:05.396" status="PASS" starttime="20170824 16:48:05.394"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:05.397" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:05.397" status="PASS" starttime="20170824 16:48:05.396"></status>
</kw>
<status endtime="20170824 16:48:05.397" status="PASS" starttime="20170824 16:48:05.396"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:05.398" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:05.398" status="PASS" starttime="20170824 16:48:05.398"></status>
</kw>
<status endtime="20170824 16:48:05.398" status="PASS" starttime="20170824 16:48:05.397"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:05.399" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:05.400" status="PASS" starttime="20170824 16:48:05.399"></status>
</kw>
<status endtime="20170824 16:48:05.400" status="PASS" starttime="20170824 16:48:05.398"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:05.401" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:05.401" status="PASS" starttime="20170824 16:48:05.401"></status>
</kw>
<status endtime="20170824 16:48:05.402" status="PASS" starttime="20170824 16:48:05.400"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:05.403" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:05.403" status="PASS" starttime="20170824 16:48:05.402"></status>
</kw>
<status endtime="20170824 16:48:05.403" status="PASS" starttime="20170824 16:48:05.402"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:05.405" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:05.405" status="PASS" starttime="20170824 16:48:05.404"></status>
</kw>
<status endtime="20170824 16:48:05.405" status="PASS" starttime="20170824 16:48:05.403"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:05.407" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:05.407" status="PASS" starttime="20170824 16:48:05.406"></status>
</kw>
<status endtime="20170824 16:48:05.407" status="PASS" starttime="20170824 16:48:05.405"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:05.408" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:05.408" status="PASS" starttime="20170824 16:48:05.408"></status>
</kw>
<status endtime="20170824 16:48:05.408" status="PASS" starttime="20170824 16:48:05.407"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Test Setup Info">
<doc>BMC IP, Model and other information</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:05.410" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:05.410" status="PASS" starttime="20170824 16:48:05.409"></status>
</kw>
<status endtime="20170824 16:48:05.410" status="PASS" starttime="20170824 16:48:05.409"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:05.411" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:05.411" status="PASS" starttime="20170824 16:48:05.411"></status>
</kw>
<status endtime="20170824 16:48:05.411" status="PASS" starttime="20170824 16:48:05.410"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:05.412" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:05.413" status="PASS" starttime="20170824 16:48:05.412"></status>
</kw>
<status endtime="20170824 16:48:05.413" status="PASS" starttime="20170824 16:48:05.411"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:05.414" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:05.414" status="PASS" starttime="20170824 16:48:05.413"></status>
</kw>
<status endtime="20170824 16:48:05.414" status="PASS" starttime="20170824 16:48:05.413"></status>
</kw>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170824 16:48:05.458" level="INFO">host=9.3.86.161
width=80
timeout=25 seconds
encoding=UTF-8
path_separator=/
alias=bmc_connection
port=22
index=1
term_type=vt100
prompt=# 
newline=

height=24</msg>
<msg timestamp="20170824 16:48:05.458" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170824 16:48:05.567" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170824 16:48:05.586" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170824 16:48:05.586" level="INFO">${stderr} = </msg>
<msg timestamp="20170824 16:48:05.586" level="INFO">${rc} = 0</msg>
<status endtime="20170824 16:48:05.586" status="PASS" starttime="20170824 16:48:05.415"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170824 16:48:05.586" level="INFO">Length is 0</msg>
<status endtime="20170824 16:48:05.587" status="PASS" starttime="20170824 16:48:05.586"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170824 16:48:05.587" level="INFO">Length is 11</msg>
<status endtime="20170824 16:48:05.587" status="PASS" starttime="20170824 16:48:05.587"></status>
</kw>
<msg timestamp="20170824 16:48:05.587" level="INFO">${model_name} = Witherspoon</msg>
<status endtime="20170824 16:48:05.587" status="PASS" starttime="20170824 16:48:05.414"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:05.589" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:05.589" status="PASS" starttime="20170824 16:48:05.588"></status>
</kw>
<status endtime="20170824 16:48:05.589" status="PASS" starttime="20170824 16:48:05.588"></status>
</kw>
<status endtime="20170824 16:48:05.589" status="PASS" starttime="20170824 16:48:05.408"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:05.590" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:05.590" status="PASS" starttime="20170824 16:48:05.590"></status>
</kw>
<status endtime="20170824 16:48:05.590" status="PASS" starttime="20170824 16:48:05.589"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170824 16:48:05.591" level="INFO">@{entries} = [ APPLICATION DATA | BMC DATA | DRIVER INFO ]</msg>
<status endtime="20170824 16:48:05.591" status="PASS" starttime="20170824 16:48:05.591"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:05.593" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:05.593" status="PASS" starttime="20170824 16:48:05.593"></status>
</kw>
<status endtime="20170824 16:48:05.593" status="PASS" starttime="20170824 16:48:05.592"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:05.594" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:05.594" status="PASS" starttime="20170824 16:48:05.594"></status>
</kw>
<status endtime="20170824 16:48:05.595" status="PASS" starttime="20170824 16:48:05.593"></status>
</kw>
<status endtime="20170824 16:48:05.595" status="PASS" starttime="20170824 16:48:05.591"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:05.596" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:05.596" status="PASS" starttime="20170824 16:48:05.596"></status>
</kw>
<status endtime="20170824 16:48:05.596" status="PASS" starttime="20170824 16:48:05.595"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:05.597" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:05.597" status="PASS" starttime="20170824 16:48:05.597"></status>
</kw>
<status endtime="20170824 16:48:05.597" status="PASS" starttime="20170824 16:48:05.596"></status>
</kw>
<status endtime="20170824 16:48:05.598" status="PASS" starttime="20170824 16:48:05.595"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:05.599" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:05.599" status="PASS" starttime="20170824 16:48:05.598"></status>
</kw>
<status endtime="20170824 16:48:05.599" status="PASS" starttime="20170824 16:48:05.598"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:05.602" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:05.603" status="PASS" starttime="20170824 16:48:05.600"></status>
</kw>
<status endtime="20170824 16:48:05.603" status="PASS" starttime="20170824 16:48:05.599"></status>
</kw>
<status endtime="20170824 16:48:05.603" status="PASS" starttime="20170824 16:48:05.598"></status>
</kw>
<status endtime="20170824 16:48:05.603" status="PASS" starttime="20170824 16:48:05.591"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:05.604" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:05.604" status="PASS" starttime="20170824 16:48:05.604"></status>
</kw>
<status endtime="20170824 16:48:05.604" status="PASS" starttime="20170824 16:48:05.603"></status>
</kw>
<status endtime="20170824 16:48:05.605" status="PASS" starttime="20170824 16:48:05.394"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Call FFDC Methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170824 16:48:05.617" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status endtime="20170824 16:48:05.617" status="PASS" starttime="20170824 16:48:05.617"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw library="openbmc_ffdc_methods" name="Method Call Keyword List">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Call">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170824 16:48:05.618" level="INFO">@{method_list} = [ ('Core Files', 'SCP Coredump Files') | ('Sys Inventory Files', 'System Inventory Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('FFDC Generic R...</msg>
<status endtime="20170824 16:48:05.618" status="PASS" starttime="20170824 16:48:05.618"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Desc">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status endtime="20170824 16:48:05.619" status="PASS" starttime="20170824 16:48:05.619"></status>
</kw>
<msg timestamp="20170824 16:48:05.620" level="INFO">@{ffdc_function_list} = [ Core Files | Sys Inventory Files | BMC Specific Files | Get Request FFDC | FFDC Generic Report | SEL Log | OS FFDC ]</msg>
<status endtime="20170824 16:48:05.620" status="PASS" starttime="20170824 16:48:05.619"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170824 16:48:05.625" status="PASS" starttime="20170824 16:48:05.621"></status>
</kw>
<msg timestamp="20170824 16:48:05.625" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:48:05.625" level="INFO">${ret_values} = None</msg>
<status endtime="20170824 16:48:05.625" status="PASS" starttime="20170824 16:48:05.621"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170824 16:48:05.626" status="PASS" starttime="20170824 16:48:05.625"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="SCP Coredump Files">
<doc>Copy core dump file from BMC to local system.</doc>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170824 16:48:05.743" level="INFO">host=9.3.86.161
width=80
timeout=25 seconds
encoding=UTF-8
path_separator=/
alias=bmc_connection
port=22
index=1
term_type=vt100
prompt=# 
newline=

height=24</msg>
<msg timestamp="20170824 16:48:05.744" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170824 16:48:05.805" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170824 16:48:05.826" level="INFO">${core_files} = /tmp/core_mboxd.1067
/tmp/core_mboxd.1323
/tmp/core_mboxd.1337
/tmp/core_mboxd.1363
/tmp/core_mboxd.1396
/tmp/core_mboxd.1427</msg>
<msg timestamp="20170824 16:48:05.827" level="INFO">${stderr} = </msg>
<msg timestamp="20170824 16:48:05.827" level="INFO">${rc} = 0</msg>
<status endtime="20170824 16:48:05.827" status="PASS" starttime="20170824 16:48:05.683"></status>
</kw>
<kw library="String" name="Split String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170824 16:48:05.827" level="INFO">@{core_list} = [ /tmp/core_mboxd.1067 | /tmp/core_mboxd.1323 | /tmp/core_mboxd.1337 | /tmp/core_mboxd.1363 | /tmp/core_mboxd.1396 | /tmp/core_mboxd.1427 ]</msg>
<status endtime="20170824 16:48:05.827" status="PASS" starttime="20170824 16:48:05.827"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key U">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw library="connection_client" name="Open Connection for SCP">
<kw library="BuiltIn" name="Import Library">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status endtime="20170824 16:48:05.864" status="PASS" starttime="20170824 16:48:05.852"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="scp" name="Open Connection">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status endtime="20170824 16:48:06.535" status="PASS" starttime="20170824 16:48:05.867"></status>
</kw>
<status endtime="20170824 16:48:06.535" status="PASS" starttime="20170824 16:48:05.867"></status>
</kw>
<status endtime="20170824 16:48:06.535" status="PASS" starttime="20170824 16:48:05.866"></status>
</kw>
<status endtime="20170824 16:48:06.535" status="PASS" starttime="20170824 16:48:05.851"></status>
</kw>
<status endtime="20170824 16:48:06.535" status="PASS" starttime="20170824 16:48:05.828"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<kw type="foritem" name="${index} = /tmp/core_mboxd.1067">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170824 16:48:06.821" status="PASS" starttime="20170824 16:48:06.536"></status>
</kw>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg timestamp="20170824 16:48:06.877" level="INFO">host=9.3.86.161
width=80
timeout=25 seconds
encoding=UTF-8
path_separator=/
alias=bmc_connection
port=22
index=1
term_type=vt100
prompt=# 
newline=

height=24</msg>
<msg timestamp="20170824 16:48:06.877" level="INFO">Executing command 'rm /tmp/core_mboxd.1067'.</msg>
<msg timestamp="20170824 16:48:06.977" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170824 16:48:06.995" status="PASS" starttime="20170824 16:48:06.821"></status>
</kw>
<status endtime="20170824 16:48:06.995" status="PASS" starttime="20170824 16:48:06.535"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_mboxd.1323">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170824 16:48:07.229" status="PASS" starttime="20170824 16:48:06.995"></status>
</kw>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg timestamp="20170824 16:48:07.280" level="INFO">host=9.3.86.161
width=80
timeout=25 seconds
encoding=UTF-8
path_separator=/
alias=bmc_connection
port=22
index=1
term_type=vt100
prompt=# 
newline=

height=24</msg>
<msg timestamp="20170824 16:48:07.280" level="INFO">Executing command 'rm /tmp/core_mboxd.1323'.</msg>
<msg timestamp="20170824 16:48:07.343" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170824 16:48:07.361" status="PASS" starttime="20170824 16:48:07.230"></status>
</kw>
<status endtime="20170824 16:48:07.361" status="PASS" starttime="20170824 16:48:06.995"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_mboxd.1337">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170824 16:48:07.617" status="PASS" starttime="20170824 16:48:07.361"></status>
</kw>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg timestamp="20170824 16:48:07.669" level="INFO">host=9.3.86.161
width=80
timeout=25 seconds
encoding=UTF-8
path_separator=/
alias=bmc_connection
port=22
index=1
term_type=vt100
prompt=# 
newline=

height=24</msg>
<msg timestamp="20170824 16:48:07.670" level="INFO">Executing command 'rm /tmp/core_mboxd.1337'.</msg>
<msg timestamp="20170824 16:48:07.716" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170824 16:48:07.733" status="PASS" starttime="20170824 16:48:07.618"></status>
</kw>
<status endtime="20170824 16:48:07.733" status="PASS" starttime="20170824 16:48:07.361"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_mboxd.1363">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170824 16:48:07.976" status="PASS" starttime="20170824 16:48:07.734"></status>
</kw>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg timestamp="20170824 16:48:08.030" level="INFO">host=9.3.86.161
width=80
timeout=25 seconds
encoding=UTF-8
path_separator=/
alias=bmc_connection
port=22
index=1
term_type=vt100
prompt=# 
newline=

height=24</msg>
<msg timestamp="20170824 16:48:08.031" level="INFO">Executing command 'rm /tmp/core_mboxd.1363'.</msg>
<msg timestamp="20170824 16:48:08.099" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170824 16:48:08.116" status="PASS" starttime="20170824 16:48:07.977"></status>
</kw>
<status endtime="20170824 16:48:08.117" status="PASS" starttime="20170824 16:48:07.734"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_mboxd.1396">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170824 16:48:08.430" status="PASS" starttime="20170824 16:48:08.117"></status>
</kw>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg timestamp="20170824 16:48:08.479" level="INFO">host=9.3.86.161
width=80
timeout=25 seconds
encoding=UTF-8
path_separator=/
alias=bmc_connection
port=22
index=1
term_type=vt100
prompt=# 
newline=

height=24</msg>
<msg timestamp="20170824 16:48:08.479" level="INFO">Executing command 'rm /tmp/core_mboxd.1396'.</msg>
<msg timestamp="20170824 16:48:08.536" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170824 16:48:08.555" status="PASS" starttime="20170824 16:48:08.431"></status>
</kw>
<status endtime="20170824 16:48:08.555" status="PASS" starttime="20170824 16:48:08.117"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_mboxd.1427">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170824 16:48:08.818" status="PASS" starttime="20170824 16:48:08.555"></status>
</kw>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg timestamp="20170824 16:48:08.875" level="INFO">host=9.3.86.161
width=80
timeout=25 seconds
encoding=UTF-8
path_separator=/
alias=bmc_connection
port=22
index=1
term_type=vt100
prompt=# 
newline=

height=24</msg>
<msg timestamp="20170824 16:48:08.875" level="INFO">Executing command 'rm /tmp/core_mboxd.1427'.</msg>
<msg timestamp="20170824 16:48:08.922" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170824 16:48:08.940" status="PASS" starttime="20170824 16:48:08.818"></status>
</kw>
<status endtime="20170824 16:48:08.940" status="PASS" starttime="20170824 16:48:08.555"></status>
</kw>
<status endtime="20170824 16:48:08.940" status="PASS" starttime="20170824 16:48:06.535"></status>
</kw>
<status endtime="20170824 16:48:08.940" status="PASS" starttime="20170824 16:48:05.683"></status>
</kw>
<status endtime="20170824 16:48:08.940" status="PASS" starttime="20170824 16:48:05.626"></status>
</kw>
<status endtime="20170824 16:48:08.941" status="PASS" starttime="20170824 16:48:05.620"></status>
</kw>
<status endtime="20170824 16:48:08.941" status="PASS" starttime="20170824 16:48:05.620"></status>
</kw>
<kw type="foritem" name="${method} = ('Sys Inventory Files', 'System Inventory Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170824 16:48:08.943" status="PASS" starttime="20170824 16:48:08.942"></status>
</kw>
<msg timestamp="20170824 16:48:08.943" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:48:08.943" level="INFO">${ret_values} = None</msg>
<status endtime="20170824 16:48:08.943" status="PASS" starttime="20170824 16:48:08.942"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170824 16:48:08.943" status="PASS" starttime="20170824 16:48:08.943"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="System Inventory Files">
<doc>Copy systest os_inventory files.</doc>
<kw library="OperatingSystem" name="Copy Files">
<doc>Copies specified files to the target directory.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
<arg>${ffdc_dir_path}</arg>
</arguments>
<status endtime="20170824 16:48:08.987" status="PASS" starttime="20170824 16:48:08.986"></status>
</kw>
<kw library="OperatingSystem" name="Remove Files">
<doc>Uses `Remove File` to remove multiple files one-by-one.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:08.987" level="INFO">File '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/os_inventory_*.json"&gt;/tmp/fspcibld/70/obmc-robot/os_inventory_*.json&lt;/a&gt;' does not exist.</msg>
<status endtime="20170824 16:48:08.987" status="PASS" starttime="20170824 16:48:08.987"></status>
</kw>
<status endtime="20170824 16:48:08.987" status="PASS" starttime="20170824 16:48:08.985"></status>
</kw>
<status endtime="20170824 16:48:08.987" status="PASS" starttime="20170824 16:48:08.944"></status>
</kw>
<status endtime="20170824 16:48:08.988" status="PASS" starttime="20170824 16:48:08.941"></status>
</kw>
<status endtime="20170824 16:48:08.988" status="PASS" starttime="20170824 16:48:08.941"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170824 16:48:08.995" status="PASS" starttime="20170824 16:48:08.995"></status>
</kw>
<msg timestamp="20170824 16:48:08.995" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:48:08.995" level="INFO">${ret_values} = None</msg>
<status endtime="20170824 16:48:08.995" status="PASS" starttime="20170824 16:48:08.994"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170824 16:48:08.996" status="PASS" starttime="20170824 16:48:08.996"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc File Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170824 16:48:09.041" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status endtime="20170824 16:48:09.041" status="PASS" starttime="20170824 16:48:09.041"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw library="openbmc_ffdc_methods" name="Create File and Write Data">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc File">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170824 16:48:09.043" level="INFO">@{cmd_list} = [ ('BMC_dmesg', 'dmesg') | ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_j...</msg>
<status endtime="20170824 16:48:09.043" status="PASS" starttime="20170824 16:48:09.042"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170824 16:48:09.044" level="INFO">${logpath} = /tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_dmesg.txt</msg>
<status endtime="20170824 16:48:09.044" status="PASS" starttime="20170824 16:48:09.043"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170824 16:48:09.045" status="PASS" starttime="20170824 16:48:09.045"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170824 16:48:09.046" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status endtime="20170824 16:48:09.046" status="PASS" starttime="20170824 16:48:09.046"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170824 16:48:09.161" level="INFO">host=9.3.86.161
width=80
timeout=25 seconds
encoding=UTF-8
path_separator=/
alias=bmc_connection
port=22
index=1
term_type=vt100
prompt=# 
newline=

height=24</msg>
<msg timestamp="20170824 16:48:09.162" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170824 16:48:09.239" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170824 16:48:09.239" status="PASS" starttime="20170824 16:48:09.101"></status>
</kw>
<msg timestamp="20170824 16:48:09.239" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:48:09.239" level="INFO">${ret_values} = (u'[    0.090000] Calibrating delay loop... 789.70 BogoMIPS (lpj=3948544)\n[    0.090000] pid_max: default: 32768 minimum: 301\n[    0.090000] Mount-cache hash table entries: 1024 (order: 0, 4096 byte...</msg>
<status endtime="20170824 16:48:09.239" status="PASS" starttime="20170824 16:48:09.046"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170824 16:48:09.240" level="INFO">${stdout} = [    0.090000] Calibrating delay loop... 789.70 BogoMIPS (lpj=3948544)
[    0.090000] pid_max: default: 32768 minimum: 301
[    0.090000] Mount-cache hash table entries: 1024 (order: 0, 4096 bytes)
[ ...</msg>
<status endtime="20170824 16:48:09.240" status="PASS" starttime="20170824 16:48:09.240"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170824 16:48:09.241" level="INFO">${stderr} = </msg>
<status endtime="20170824 16:48:09.241" status="PASS" starttime="20170824 16:48:09.241"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:09.251" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_dmesg.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:09.251" status="PASS" starttime="20170824 16:48:09.251"></status>
</kw>
<status endtime="20170824 16:48:09.252" status="PASS" starttime="20170824 16:48:09.250"></status>
</kw>
<status endtime="20170824 16:48:09.252" status="PASS" starttime="20170824 16:48:09.242"></status>
</kw>
<status endtime="20170824 16:48:09.252" status="PASS" starttime="20170824 16:48:09.044"></status>
</kw>
<status endtime="20170824 16:48:09.252" status="PASS" starttime="20170824 16:48:09.043"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170824 16:48:09.253" level="INFO">${logpath} = /tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_proc_fd_active_list.txt</msg>
<status endtime="20170824 16:48:09.253" status="PASS" starttime="20170824 16:48:09.252"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170824 16:48:09.254" status="PASS" starttime="20170824 16:48:09.254"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170824 16:48:09.255" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status endtime="20170824 16:48:09.255" status="PASS" starttime="20170824 16:48:09.254"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170824 16:48:09.373" level="INFO">host=9.3.86.161
width=80
timeout=25 seconds
encoding=UTF-8
path_separator=/
alias=bmc_connection
port=22
index=1
term_type=vt100
prompt=# 
newline=

height=24</msg>
<msg timestamp="20170824 16:48:09.374" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170824 16:48:09.937" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170824 16:48:09.938" status="PASS" starttime="20170824 16:48:09.301"></status>
</kw>
<msg timestamp="20170824 16:48:09.938" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:48:09.939" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Aug 24 16:48 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Aug 24 16:48 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status endtime="20170824 16:48:09.939" status="PASS" starttime="20170824 16:48:09.255"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170824 16:48:09.940" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Aug 24 16:48 0 -&gt; /dev/null
lrwx------    1 root     root            64 Aug 24 16:48 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status endtime="20170824 16:48:09.940" status="PASS" starttime="20170824 16:48:09.939"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170824 16:48:09.941" level="INFO">${stderr} = ls: /proc/3062/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status endtime="20170824 16:48:09.941" status="PASS" starttime="20170824 16:48:09.940"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:09.948" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_proc_fd_active_list.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:09.948" status="PASS" starttime="20170824 16:48:09.947"></status>
</kw>
<status endtime="20170824 16:48:09.949" status="PASS" starttime="20170824 16:48:09.946"></status>
</kw>
<status endtime="20170824 16:48:09.949" status="PASS" starttime="20170824 16:48:09.941"></status>
</kw>
<status endtime="20170824 16:48:09.949" status="PASS" starttime="20170824 16:48:09.253"></status>
</kw>
<status endtime="20170824 16:48:09.949" status="PASS" starttime="20170824 16:48:09.252"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170824 16:48:09.950" level="INFO">${logpath} = /tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_procinfo.txt</msg>
<status endtime="20170824 16:48:09.950" status="PASS" starttime="20170824 16:48:09.949"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170824 16:48:09.951" status="PASS" starttime="20170824 16:48:09.951"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170824 16:48:09.952" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status endtime="20170824 16:48:09.952" status="PASS" starttime="20170824 16:48:09.951"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170824 16:48:10.062" level="INFO">host=9.3.86.161
width=80
timeout=25 seconds
encoding=UTF-8
path_separator=/
alias=bmc_connection
port=22
index=1
term_type=vt100
prompt=# 
newline=

height=24</msg>
<msg timestamp="20170824 16:48:10.063" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170824 16:48:10.108" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170824 16:48:10.108" status="PASS" starttime="20170824 16:48:10.003"></status>
</kw>
<msg timestamp="20170824 16:48:10.109" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:48:10.109" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status endtime="20170824 16:48:10.109" status="PASS" starttime="20170824 16:48:09.952"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170824 16:48:10.109" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status endtime="20170824 16:48:10.109" status="PASS" starttime="20170824 16:48:10.109"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170824 16:48:10.110" level="INFO">${stderr} = </msg>
<status endtime="20170824 16:48:10.110" status="PASS" starttime="20170824 16:48:10.110"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:10.117" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_procinfo.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:10.117" status="PASS" starttime="20170824 16:48:10.116"></status>
</kw>
<status endtime="20170824 16:48:10.117" status="PASS" starttime="20170824 16:48:10.116"></status>
</kw>
<status endtime="20170824 16:48:10.117" status="PASS" starttime="20170824 16:48:10.110"></status>
</kw>
<status endtime="20170824 16:48:10.117" status="PASS" starttime="20170824 16:48:09.950"></status>
</kw>
<status endtime="20170824 16:48:10.117" status="PASS" starttime="20170824 16:48:09.949"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170824 16:48:10.118" level="INFO">${logpath} = /tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_meminfo.txt</msg>
<status endtime="20170824 16:48:10.118" status="PASS" starttime="20170824 16:48:10.118"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170824 16:48:10.119" status="PASS" starttime="20170824 16:48:10.119"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170824 16:48:10.121" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status endtime="20170824 16:48:10.121" status="PASS" starttime="20170824 16:48:10.120"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170824 16:48:10.233" level="INFO">host=9.3.86.161
width=80
timeout=25 seconds
encoding=UTF-8
path_separator=/
alias=bmc_connection
port=22
index=1
term_type=vt100
prompt=# 
newline=

height=24</msg>
<msg timestamp="20170824 16:48:10.234" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170824 16:48:10.280" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170824 16:48:10.280" status="PASS" starttime="20170824 16:48:10.171"></status>
</kw>
<msg timestamp="20170824 16:48:10.281" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:48:10.281" level="INFO">${ret_values} = (u'MemTotal:         432248 kB\nMemFree:          271028 kB\nMemAvailable:     320196 kB\nBuffers:           11788 kB\nCached:            53924 kB\nSwapCached:            0 kB\nActive:           10113...</msg>
<status endtime="20170824 16:48:10.281" status="PASS" starttime="20170824 16:48:10.121"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170824 16:48:10.281" level="INFO">${stdout} = MemTotal:         432248 kB
MemFree:          271028 kB
MemAvailable:     320196 kB
Buffers:           11788 kB
Cached:            53924 kB
SwapCached:            0 kB
Active:           101132 kB
Inac...</msg>
<status endtime="20170824 16:48:10.282" status="PASS" starttime="20170824 16:48:10.281"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170824 16:48:10.282" level="INFO">${stderr} = </msg>
<status endtime="20170824 16:48:10.282" status="PASS" starttime="20170824 16:48:10.282"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:10.289" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_meminfo.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:10.289" status="PASS" starttime="20170824 16:48:10.289"></status>
</kw>
<status endtime="20170824 16:48:10.290" status="PASS" starttime="20170824 16:48:10.288"></status>
</kw>
<status endtime="20170824 16:48:10.290" status="PASS" starttime="20170824 16:48:10.282"></status>
</kw>
<status endtime="20170824 16:48:10.290" status="PASS" starttime="20170824 16:48:10.118"></status>
</kw>
<status endtime="20170824 16:48:10.290" status="PASS" starttime="20170824 16:48:10.117"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170824 16:48:10.291" level="INFO">${logpath} = /tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_proc_list.txt</msg>
<status endtime="20170824 16:48:10.291" status="PASS" starttime="20170824 16:48:10.291"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170824 16:48:10.293" status="PASS" starttime="20170824 16:48:10.293"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170824 16:48:10.294" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status endtime="20170824 16:48:10.294" status="PASS" starttime="20170824 16:48:10.294"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170824 16:48:10.411" level="INFO">host=9.3.86.161
width=80
timeout=25 seconds
encoding=UTF-8
path_separator=/
alias=bmc_connection
port=22
index=1
term_type=vt100
prompt=# 
newline=

height=24</msg>
<msg timestamp="20170824 16:48:10.412" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170824 16:48:10.814" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170824 16:48:10.814" status="PASS" starttime="20170824 16:48:10.351"></status>
</kw>
<msg timestamp="20170824 16:48:10.814" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:48:10.814" level="INFO">${ret_values} = (u'Mem: 161344K used, 270904K free, 14684K shrd, 11788K buff, 53928K cached\nCPU:   0% usr  25% sys   0% nic  75% idle   0% io   0% irq   0% sirq\nLoad average: 0.49 1.25 1.20 1/153 3065\n  PID  PPID ...</msg>
<status endtime="20170824 16:48:10.814" status="PASS" starttime="20170824 16:48:10.295"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170824 16:48:10.815" level="INFO">${stdout} = Mem: 161344K used, 270904K free, 14684K shrd, 11788K buff, 53928K cached
CPU:   0% usr  25% sys   0% nic  75% idle   0% io   0% irq   0% sirq
Load average: 0.49 1.25 1.20 1/153 3065
  PID  PPID USER  ...</msg>
<status endtime="20170824 16:48:10.815" status="PASS" starttime="20170824 16:48:10.814"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170824 16:48:10.816" level="INFO">${stderr} = </msg>
<status endtime="20170824 16:48:10.816" status="PASS" starttime="20170824 16:48:10.815"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:10.823" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_proc_list.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:10.823" status="PASS" starttime="20170824 16:48:10.822"></status>
</kw>
<status endtime="20170824 16:48:10.823" status="PASS" starttime="20170824 16:48:10.821"></status>
</kw>
<status endtime="20170824 16:48:10.823" status="PASS" starttime="20170824 16:48:10.816"></status>
</kw>
<status endtime="20170824 16:48:10.823" status="PASS" starttime="20170824 16:48:10.292"></status>
</kw>
<status endtime="20170824 16:48:10.823" status="PASS" starttime="20170824 16:48:10.290"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170824 16:48:10.824" level="INFO">${logpath} = /tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_journalctl.txt</msg>
<status endtime="20170824 16:48:10.824" status="PASS" starttime="20170824 16:48:10.823"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170824 16:48:10.825" status="PASS" starttime="20170824 16:48:10.825"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170824 16:48:10.826" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status endtime="20170824 16:48:10.826" status="PASS" starttime="20170824 16:48:10.825"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170824 16:48:10.935" level="INFO">host=9.3.86.161
width=80
timeout=25 seconds
encoding=UTF-8
path_separator=/
alias=bmc_connection
port=22
index=1
term_type=vt100
prompt=# 
newline=

height=24</msg>
<msg timestamp="20170824 16:48:10.936" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170824 16:48:13.391" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170824 16:48:13.392" status="PASS" starttime="20170824 16:48:10.876"></status>
</kw>
<msg timestamp="20170824 16:48:13.392" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:48:13.396" level="INFO">${ret_values} = (u'-- Logs begin at Thu 2017-08-24 16:34:48 UTC, end at Thu 2017-08-24 16:48:14 UTC. --\nAug 24 16:34:48 witherspoon kernel: Booting Linux on physical CPU 0x0\nAug 24 16:34:48 witherspoon kernel: Linu...</msg>
<status endtime="20170824 16:48:13.396" status="PASS" starttime="20170824 16:48:10.826"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170824 16:48:13.398" level="INFO">${stdout} = -- Logs begin at Thu 2017-08-24 16:34:48 UTC, end at Thu 2017-08-24 16:48:14 UTC. --
Aug 24 16:34:48 witherspoon kernel: Booting Linux on physical CPU 0x0
Aug 24 16:34:48 witherspoon kernel: Linux ver...</msg>
<status endtime="20170824 16:48:13.398" status="PASS" starttime="20170824 16:48:13.397"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170824 16:48:13.398" level="INFO">${stderr} = </msg>
<status endtime="20170824 16:48:13.398" status="PASS" starttime="20170824 16:48:13.398"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:13.408" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_journalctl.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:13.408" status="PASS" starttime="20170824 16:48:13.406"></status>
</kw>
<status endtime="20170824 16:48:13.408" status="PASS" starttime="20170824 16:48:13.404"></status>
</kw>
<status endtime="20170824 16:48:13.408" status="PASS" starttime="20170824 16:48:13.399"></status>
</kw>
<status endtime="20170824 16:48:13.408" status="PASS" starttime="20170824 16:48:10.824"></status>
</kw>
<status endtime="20170824 16:48:13.408" status="PASS" starttime="20170824 16:48:10.823"></status>
</kw>
<status endtime="20170824 16:48:13.408" status="PASS" starttime="20170824 16:48:09.043"></status>
</kw>
<status endtime="20170824 16:48:13.408" status="PASS" starttime="20170824 16:48:09.042"></status>
</kw>
<status endtime="20170824 16:48:13.408" status="PASS" starttime="20170824 16:48:09.042"></status>
</kw>
<status endtime="20170824 16:48:13.408" status="PASS" starttime="20170824 16:48:09.041"></status>
</kw>
<status endtime="20170824 16:48:13.408" status="PASS" starttime="20170824 16:48:09.040"></status>
</kw>
<status endtime="20170824 16:48:13.409" status="PASS" starttime="20170824 16:48:08.996"></status>
</kw>
<status endtime="20170824 16:48:13.409" status="PASS" starttime="20170824 16:48:08.988"></status>
</kw>
<status endtime="20170824 16:48:13.409" status="PASS" starttime="20170824 16:48:08.988"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170824 16:48:13.411" status="PASS" starttime="20170824 16:48:13.410"></status>
</kw>
<msg timestamp="20170824 16:48:13.411" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:48:13.411" level="INFO">${ret_values} = None</msg>
<status endtime="20170824 16:48:13.411" status="PASS" starttime="20170824 16:48:13.410"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170824 16:48:13.411" status="PASS" starttime="20170824 16:48:13.411"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Get Requests">
<doc>Get the command list and iterate</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170824 16:48:13.451" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status endtime="20170824 16:48:13.451" status="PASS" starttime="20170824 16:48:13.451"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw library="openbmc_ffdc_methods" name="Log FFDC Get Requests">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170824 16:48:13.454" level="INFO">@{cmd_list} = [ ('BMC_led', '/org/openbmc/records/events/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_control_list', '/xyz/openbmc_project/control/enumerate') | ('BMC_inventory', '/xy...</msg>
<status endtime="20170824 16:48:13.454" status="PASS" starttime="20170824 16:48:13.454"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170824 16:48:13.455" level="INFO">${logpath} = /tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_led.txt</msg>
<status endtime="20170824 16:48:13.455" status="PASS" starttime="20170824 16:48:13.455"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:48:13.458" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:48:13.459" status="PASS" starttime="20170824 16:48:13.458"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:48:13.460" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:48:13.460" status="PASS" starttime="20170824 16:48:13.459"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:48:13.460" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:48:13.460" status="PASS" starttime="20170824 16:48:13.460"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:48:13.461" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:48:13.461" status="PASS" starttime="20170824 16:48:13.461"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:48:13.643" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:48:13.643" status="PASS" starttime="20170824 16:48:13.462"></status>
</kw>
<msg timestamp="20170824 16:48:13.643" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:48:13.643" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:13.643" status="PASS" starttime="20170824 16:48:13.462"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:48:13.644" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:13.644" status="PASS" starttime="20170824 16:48:13.644"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:48:13.645" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:13.645" status="PASS" starttime="20170824 16:48:13.644"></status>
</kw>
<status endtime="20170824 16:48:13.645" status="PASS" starttime="20170824 16:48:13.457"></status>
</kw>
<status endtime="20170824 16:48:13.645" status="PASS" starttime="20170824 16:48:13.457"></status>
</kw>
<status endtime="20170824 16:48:13.645" status="PASS" starttime="20170824 16:48:13.456"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:48:13.646" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status endtime="20170824 16:48:13.646" status="PASS" starttime="20170824 16:48:13.645"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170824 16:48:13.646" status="PASS" starttime="20170824 16:48:13.646"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:48:13.692" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170824 16:48:13.692" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170824 16:48:13.692" status="PASS" starttime="20170824 16:48:13.647"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170824 16:48:13.693" status="PASS" starttime="20170824 16:48:13.692"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:48:13.693" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:48:13.693" status="PASS" starttime="20170824 16:48:13.693"></status>
</kw>
<msg timestamp="20170824 16:48:13.693" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170824 16:48:13.694" status="PASS" starttime="20170824 16:48:13.455"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:48:13.695" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170824 16:48:13.695" level="FAIL">404 != 200</msg>
<status endtime="20170824 16:48:13.695" status="FAIL" starttime="20170824 16:48:13.694"></status>
</kw>
<msg timestamp="20170824 16:48:13.695" level="INFO">${status} = False</msg>
<status endtime="20170824 16:48:13.695" status="PASS" starttime="20170824 16:48:13.694"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170824 16:48:13.696" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170824 16:48:13.696" status="PASS" starttime="20170824 16:48:13.696"></status>
</kw>
<status endtime="20170824 16:48:13.696" status="PASS" starttime="20170824 16:48:13.695"></status>
</kw>
<status endtime="20170824 16:48:13.696" status="PASS" starttime="20170824 16:48:13.455"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170824 16:48:13.697" level="INFO">${logpath} = /tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_sensor_list.txt</msg>
<status endtime="20170824 16:48:13.697" status="PASS" starttime="20170824 16:48:13.696"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:48:13.700" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:48:13.701" status="PASS" starttime="20170824 16:48:13.700"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:48:13.701" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:48:13.701" status="PASS" starttime="20170824 16:48:13.701"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:48:13.702" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:48:13.702" status="PASS" starttime="20170824 16:48:13.701"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:48:13.702" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:48:13.702" status="PASS" starttime="20170824 16:48:13.702"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:48:13.895" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:48:13.895" status="PASS" starttime="20170824 16:48:13.703"></status>
</kw>
<msg timestamp="20170824 16:48:13.895" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:48:13.895" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:13.895" status="PASS" starttime="20170824 16:48:13.703"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:48:13.896" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:13.896" status="PASS" starttime="20170824 16:48:13.896"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:48:13.897" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:13.897" status="PASS" starttime="20170824 16:48:13.896"></status>
</kw>
<status endtime="20170824 16:48:13.897" status="PASS" starttime="20170824 16:48:13.699"></status>
</kw>
<status endtime="20170824 16:48:13.897" status="PASS" starttime="20170824 16:48:13.698"></status>
</kw>
<status endtime="20170824 16:48:13.897" status="PASS" starttime="20170824 16:48:13.698"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:48:13.898" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status endtime="20170824 16:48:13.898" status="PASS" starttime="20170824 16:48:13.897"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170824 16:48:13.898" status="PASS" starttime="20170824 16:48:13.898"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:48:14.119" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170824 16:48:14.120" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:14.120" status="PASS" starttime="20170824 16:48:13.899"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170824 16:48:14.120" status="PASS" starttime="20170824 16:48:14.120"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:48:14.121" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:48:14.121" status="PASS" starttime="20170824 16:48:14.121"></status>
</kw>
<msg timestamp="20170824 16:48:14.121" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:14.121" status="PASS" starttime="20170824 16:48:13.697"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:48:14.122" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:14.122" status="PASS" starttime="20170824 16:48:14.122"></status>
</kw>
<msg timestamp="20170824 16:48:14.122" level="INFO">${status} = True</msg>
<status endtime="20170824 16:48:14.122" status="PASS" starttime="20170824 16:48:14.121"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170824 16:48:14.123" status="PASS" starttime="20170824 16:48:14.123"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170824 16:48:14.124" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:48:14.124" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170824 16:48:14.124" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status endtime="20170824 16:48:14.124" status="PASS" starttime="20170824 16:48:14.123"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:14.126" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_sensor_list.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:14.126" status="PASS" starttime="20170824 16:48:14.125"></status>
</kw>
<status endtime="20170824 16:48:14.126" status="PASS" starttime="20170824 16:48:14.124"></status>
</kw>
<status endtime="20170824 16:48:14.126" status="PASS" starttime="20170824 16:48:13.696"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_control_list', '/xyz/openbmc_project/control/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170824 16:48:14.127" level="INFO">${logpath} = /tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_control_list.txt</msg>
<status endtime="20170824 16:48:14.127" status="PASS" starttime="20170824 16:48:14.126"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:48:14.129" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:48:14.131" status="PASS" starttime="20170824 16:48:14.129"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:48:14.132" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:48:14.132" status="PASS" starttime="20170824 16:48:14.131"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:48:14.132" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:48:14.132" status="PASS" starttime="20170824 16:48:14.132"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:48:14.133" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:48:14.133" status="PASS" starttime="20170824 16:48:14.133"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:48:14.421" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:48:14.421" status="PASS" starttime="20170824 16:48:14.134"></status>
</kw>
<msg timestamp="20170824 16:48:14.422" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:48:14.422" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:14.422" status="PASS" starttime="20170824 16:48:14.133"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:48:14.422" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:14.422" status="PASS" starttime="20170824 16:48:14.422"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:48:14.423" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:14.423" status="PASS" starttime="20170824 16:48:14.423"></status>
</kw>
<status endtime="20170824 16:48:14.423" status="PASS" starttime="20170824 16:48:14.128"></status>
</kw>
<status endtime="20170824 16:48:14.423" status="PASS" starttime="20170824 16:48:14.128"></status>
</kw>
<status endtime="20170824 16:48:14.423" status="PASS" starttime="20170824 16:48:14.127"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:48:14.424" level="INFO">${base_uri} = /xyz/openbmc_project/control/enumerate</msg>
<status endtime="20170824 16:48:14.424" status="PASS" starttime="20170824 16:48:14.424"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170824 16:48:14.425" status="PASS" starttime="20170824 16:48:14.424"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:48:14.664" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/enumerate, headers=None json=None</msg>
<msg timestamp="20170824 16:48:14.664" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:14.664" status="PASS" starttime="20170824 16:48:14.425"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170824 16:48:14.665" status="PASS" starttime="20170824 16:48:14.664"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:48:14.665" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:48:14.665" status="PASS" starttime="20170824 16:48:14.665"></status>
</kw>
<msg timestamp="20170824 16:48:14.665" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:14.666" status="PASS" starttime="20170824 16:48:14.127"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:48:14.667" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:14.667" status="PASS" starttime="20170824 16:48:14.666"></status>
</kw>
<msg timestamp="20170824 16:48:14.667" level="INFO">${status} = True</msg>
<status endtime="20170824 16:48:14.667" status="PASS" starttime="20170824 16:48:14.666"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170824 16:48:14.667" status="PASS" starttime="20170824 16:48:14.667"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170824 16:48:14.668" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/control/host0": {}, 
    "/xyz/openbmc_project/control/host0/TPMEnable": {
      "TPMEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/auto_reboot": {
      "AutoReboot": 1
    }, 
    "/xyz/openbmc_project/control/host0/boot_mode": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular"
    }, 
    "/xyz/openbmc_project/control/host0/boot_source": {
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default"
    }, 
    "/xyz/openbmc_project/control/host0/power_cap": {
      "PowerCap": 0, 
      "PowerCapEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/power_restore_policy": {
      "PowerRestorePolicy": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"
    }, 
    "/xyz/openbmc_project/control/host0/restriction_mode": {
      "RestrictionMode": "xyz.openbmc_project.Control.Security.RestrictionMode.Modes.None"
    }, 
    "/xyz/openbmc_project/control/minimum_ship_level_required": {
      "MinimumShipLevelRequired": 1
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:48:14.668" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170824 16:48:14.669" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/control/host0": {},
        "/xyz/openbmc_project/control/host0/TPMEnable": {
            "TPMEnable": 0
        },
        "/xyz/openbmc_project/control/...</msg>
<status endtime="20170824 16:48:14.669" status="PASS" starttime="20170824 16:48:14.668"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:14.670" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_control_list.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_control_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:14.670" status="PASS" starttime="20170824 16:48:14.669"></status>
</kw>
<status endtime="20170824 16:48:14.670" status="PASS" starttime="20170824 16:48:14.669"></status>
</kw>
<status endtime="20170824 16:48:14.670" status="PASS" starttime="20170824 16:48:14.126"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170824 16:48:14.671" level="INFO">${logpath} = /tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_inventory.txt</msg>
<status endtime="20170824 16:48:14.671" status="PASS" starttime="20170824 16:48:14.671"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:48:14.674" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:48:14.675" status="PASS" starttime="20170824 16:48:14.674"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:48:14.675" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:48:14.675" status="PASS" starttime="20170824 16:48:14.675"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:48:14.676" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:48:14.676" status="PASS" starttime="20170824 16:48:14.676"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:48:14.677" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:48:14.677" status="PASS" starttime="20170824 16:48:14.676"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:48:14.857" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:48:14.857" status="PASS" starttime="20170824 16:48:14.677"></status>
</kw>
<msg timestamp="20170824 16:48:14.857" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:48:14.857" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:14.857" status="PASS" starttime="20170824 16:48:14.677"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:48:14.858" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:14.858" status="PASS" starttime="20170824 16:48:14.858"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:48:14.859" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:14.859" status="PASS" starttime="20170824 16:48:14.859"></status>
</kw>
<status endtime="20170824 16:48:14.860" status="PASS" starttime="20170824 16:48:14.673"></status>
</kw>
<status endtime="20170824 16:48:14.860" status="PASS" starttime="20170824 16:48:14.673"></status>
</kw>
<status endtime="20170824 16:48:14.860" status="PASS" starttime="20170824 16:48:14.672"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:48:14.861" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status endtime="20170824 16:48:14.861" status="PASS" starttime="20170824 16:48:14.860"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170824 16:48:14.862" status="PASS" starttime="20170824 16:48:14.861"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:48:15.253" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170824 16:48:15.253" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:15.253" status="PASS" starttime="20170824 16:48:14.862"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170824 16:48:15.254" status="PASS" starttime="20170824 16:48:15.253"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:48:15.254" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:48:15.254" status="PASS" starttime="20170824 16:48:15.254"></status>
</kw>
<msg timestamp="20170824 16:48:15.255" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:15.255" status="PASS" starttime="20170824 16:48:14.671"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:48:15.256" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:15.256" status="PASS" starttime="20170824 16:48:15.255"></status>
</kw>
<msg timestamp="20170824 16:48:15.256" level="INFO">${status} = True</msg>
<status endtime="20170824 16:48:15.256" status="PASS" starttime="20170824 16:48:15.255"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170824 16:48:15.256" status="PASS" starttime="20170824 16:48:15.256"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170824 16:48:15.257" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:48:15.257" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170824 16:48:15.258" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 0
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status endtime="20170824 16:48:15.258" status="PASS" starttime="20170824 16:48:15.257"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:15.259" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_inventory.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:15.259" status="PASS" starttime="20170824 16:48:15.259"></status>
</kw>
<status endtime="20170824 16:48:15.259" status="PASS" starttime="20170824 16:48:15.258"></status>
</kw>
<status endtime="20170824 16:48:15.259" status="PASS" starttime="20170824 16:48:14.670"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170824 16:48:15.260" level="INFO">${logpath} = /tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_elog.txt</msg>
<status endtime="20170824 16:48:15.260" status="PASS" starttime="20170824 16:48:15.260"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:48:15.263" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:48:15.264" status="PASS" starttime="20170824 16:48:15.263"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:48:15.264" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:48:15.265" status="PASS" starttime="20170824 16:48:15.264"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:48:15.265" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:48:15.266" status="PASS" starttime="20170824 16:48:15.265"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:48:15.266" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:48:15.266" status="PASS" starttime="20170824 16:48:15.266"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:48:15.476" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:48:15.476" status="PASS" starttime="20170824 16:48:15.267"></status>
</kw>
<msg timestamp="20170824 16:48:15.476" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:48:15.476" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:15.476" status="PASS" starttime="20170824 16:48:15.267"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:48:15.477" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:15.477" status="PASS" starttime="20170824 16:48:15.476"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:48:15.477" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:15.477" status="PASS" starttime="20170824 16:48:15.477"></status>
</kw>
<status endtime="20170824 16:48:15.478" status="PASS" starttime="20170824 16:48:15.262"></status>
</kw>
<status endtime="20170824 16:48:15.478" status="PASS" starttime="20170824 16:48:15.262"></status>
</kw>
<status endtime="20170824 16:48:15.478" status="PASS" starttime="20170824 16:48:15.261"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:48:15.478" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status endtime="20170824 16:48:15.478" status="PASS" starttime="20170824 16:48:15.478"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170824 16:48:15.479" status="PASS" starttime="20170824 16:48:15.479"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:48:15.758" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170824 16:48:15.758" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:15.758" status="PASS" starttime="20170824 16:48:15.479"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170824 16:48:15.759" status="PASS" starttime="20170824 16:48:15.759"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:48:15.759" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:48:15.759" status="PASS" starttime="20170824 16:48:15.759"></status>
</kw>
<msg timestamp="20170824 16:48:15.760" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:15.760" status="PASS" starttime="20170824 16:48:15.260"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:48:15.761" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:15.761" status="PASS" starttime="20170824 16:48:15.760"></status>
</kw>
<msg timestamp="20170824 16:48:15.761" level="INFO">${status} = True</msg>
<status endtime="20170824 16:48:15.761" status="PASS" starttime="20170824 16:48:15.760"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170824 16:48:15.762" status="PASS" starttime="20170824 16:48:15.761"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170824 16:48:15.762" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1503592743745, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1503592809859, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [], 
      "Id": 4, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1503592877546, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [], 
      "Id": 5, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1503592944282, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [], 
      "Id": 6, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1503593052272, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:48:15.762" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170824 16:48:15.763" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/2": {
            "AdditionalData": [],
            "Id": 2,
            "Message": "org.open_power.Host.Error.WatchdogTimedOut",
          ...</msg>
<status endtime="20170824 16:48:15.763" status="PASS" starttime="20170824 16:48:15.762"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:15.764" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_elog.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_elog.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:15.764" status="PASS" starttime="20170824 16:48:15.764"></status>
</kw>
<status endtime="20170824 16:48:15.764" status="PASS" starttime="20170824 16:48:15.763"></status>
</kw>
<status endtime="20170824 16:48:15.764" status="PASS" starttime="20170824 16:48:15.259"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_xyz_list', '/xyz/openbmc_project/sensors/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170824 16:48:15.765" level="INFO">${logpath} = /tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_sensor_xyz_list.txt</msg>
<status endtime="20170824 16:48:15.765" status="PASS" starttime="20170824 16:48:15.765"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:48:15.771" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:48:15.772" status="PASS" starttime="20170824 16:48:15.770"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:48:15.772" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:48:15.772" status="PASS" starttime="20170824 16:48:15.772"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:48:15.773" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:48:15.773" status="PASS" starttime="20170824 16:48:15.773"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:48:15.774" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:48:15.774" status="PASS" starttime="20170824 16:48:15.773"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:48:15.978" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:48:15.978" status="PASS" starttime="20170824 16:48:15.775"></status>
</kw>
<msg timestamp="20170824 16:48:15.978" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:48:15.978" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:15.978" status="PASS" starttime="20170824 16:48:15.774"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:48:15.979" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:15.979" status="PASS" starttime="20170824 16:48:15.979"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:48:15.980" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:15.980" status="PASS" starttime="20170824 16:48:15.979"></status>
</kw>
<status endtime="20170824 16:48:15.980" status="PASS" starttime="20170824 16:48:15.769"></status>
</kw>
<status endtime="20170824 16:48:15.980" status="PASS" starttime="20170824 16:48:15.767"></status>
</kw>
<status endtime="20170824 16:48:15.980" status="PASS" starttime="20170824 16:48:15.766"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:48:15.981" level="INFO">${base_uri} = /xyz/openbmc_project/sensors/enumerate</msg>
<status endtime="20170824 16:48:15.981" status="PASS" starttime="20170824 16:48:15.980"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170824 16:48:15.981" status="PASS" starttime="20170824 16:48:15.981"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:48:16.394" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170824 16:48:16.394" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:16.394" status="PASS" starttime="20170824 16:48:15.982"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170824 16:48:16.395" status="PASS" starttime="20170824 16:48:16.394"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:48:16.395" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:48:16.395" status="PASS" starttime="20170824 16:48:16.395"></status>
</kw>
<msg timestamp="20170824 16:48:16.396" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:16.396" status="PASS" starttime="20170824 16:48:15.765"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:48:16.397" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:16.397" status="PASS" starttime="20170824 16:48:16.396"></status>
</kw>
<msg timestamp="20170824 16:48:16.397" level="INFO">${status} = True</msg>
<status endtime="20170824 16:48:16.397" status="PASS" starttime="20170824 16:48:16.396"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170824 16:48:16.398" status="PASS" starttime="20170824 16:48:16.397"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170824 16:48:16.399" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 9566
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 10053
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 9894
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 10273
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 9640
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 10080
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 9791
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 10302
    }, 
    "/xyz/openbmc_project/sensors/temperature/ambient": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 25970
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 29000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 29000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 28000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 28000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 28000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 28000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 26000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 26000
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:48:16.399" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170824 16:48:16.399" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
            "Scale": 0,
            "Target": 10500,
            "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS",
       ...</msg>
<status endtime="20170824 16:48:16.399" status="PASS" starttime="20170824 16:48:16.398"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:16.401" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_sensor_xyz_list.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_sensor_xyz_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:16.401" status="PASS" starttime="20170824 16:48:16.400"></status>
</kw>
<status endtime="20170824 16:48:16.401" status="PASS" starttime="20170824 16:48:16.399"></status>
</kw>
<status endtime="20170824 16:48:16.401" status="PASS" starttime="20170824 16:48:15.765"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170824 16:48:16.402" level="INFO">${logpath} = /tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_record_log.txt</msg>
<status endtime="20170824 16:48:16.402" status="PASS" starttime="20170824 16:48:16.401"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:48:16.405" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:48:16.405" status="PASS" starttime="20170824 16:48:16.404"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:48:16.406" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:48:16.406" status="PASS" starttime="20170824 16:48:16.406"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:48:16.407" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:48:16.407" status="PASS" starttime="20170824 16:48:16.406"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:48:16.407" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:48:16.407" status="PASS" starttime="20170824 16:48:16.407"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:48:16.599" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:48:16.599" status="PASS" starttime="20170824 16:48:16.408"></status>
</kw>
<msg timestamp="20170824 16:48:16.599" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:48:16.600" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:16.600" status="PASS" starttime="20170824 16:48:16.407"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:48:16.600" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:16.600" status="PASS" starttime="20170824 16:48:16.600"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:48:16.601" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:16.601" status="PASS" starttime="20170824 16:48:16.601"></status>
</kw>
<status endtime="20170824 16:48:16.601" status="PASS" starttime="20170824 16:48:16.404"></status>
</kw>
<status endtime="20170824 16:48:16.601" status="PASS" starttime="20170824 16:48:16.403"></status>
</kw>
<status endtime="20170824 16:48:16.601" status="PASS" starttime="20170824 16:48:16.402"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:48:16.602" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status endtime="20170824 16:48:16.602" status="PASS" starttime="20170824 16:48:16.602"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170824 16:48:16.603" status="PASS" starttime="20170824 16:48:16.602"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:48:16.645" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170824 16:48:16.645" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170824 16:48:16.645" status="PASS" starttime="20170824 16:48:16.603"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170824 16:48:16.646" status="PASS" starttime="20170824 16:48:16.645"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:48:16.646" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:48:16.646" status="PASS" starttime="20170824 16:48:16.646"></status>
</kw>
<msg timestamp="20170824 16:48:16.646" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170824 16:48:16.646" status="PASS" starttime="20170824 16:48:16.402"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:48:16.647" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170824 16:48:16.648" level="FAIL">404 != 200</msg>
<status endtime="20170824 16:48:16.648" status="FAIL" starttime="20170824 16:48:16.647"></status>
</kw>
<msg timestamp="20170824 16:48:16.648" level="INFO">${status} = False</msg>
<status endtime="20170824 16:48:16.648" status="PASS" starttime="20170824 16:48:16.647"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170824 16:48:16.649" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170824 16:48:16.649" status="PASS" starttime="20170824 16:48:16.649"></status>
</kw>
<status endtime="20170824 16:48:16.649" status="PASS" starttime="20170824 16:48:16.648"></status>
</kw>
<status endtime="20170824 16:48:16.649" status="PASS" starttime="20170824 16:48:16.401"></status>
</kw>
<status endtime="20170824 16:48:16.649" status="PASS" starttime="20170824 16:48:13.454"></status>
</kw>
<status endtime="20170824 16:48:16.649" status="PASS" starttime="20170824 16:48:13.452"></status>
</kw>
<status endtime="20170824 16:48:16.649" status="PASS" starttime="20170824 16:48:13.452"></status>
</kw>
<status endtime="20170824 16:48:16.649" status="PASS" starttime="20170824 16:48:13.451"></status>
</kw>
<status endtime="20170824 16:48:16.650" status="PASS" starttime="20170824 16:48:13.450"></status>
</kw>
<status endtime="20170824 16:48:16.650" status="PASS" starttime="20170824 16:48:13.412"></status>
</kw>
<status endtime="20170824 16:48:16.650" status="PASS" starttime="20170824 16:48:13.409"></status>
</kw>
<status endtime="20170824 16:48:16.650" status="PASS" starttime="20170824 16:48:13.409"></status>
</kw>
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170824 16:48:16.652" status="PASS" starttime="20170824 16:48:16.651"></status>
</kw>
<msg timestamp="20170824 16:48:16.652" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:48:16.652" level="INFO">${ret_values} = None</msg>
<status endtime="20170824 16:48:16.652" status="PASS" starttime="20170824 16:48:16.651"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170824 16:48:16.652" status="PASS" starttime="20170824 16:48:16.652"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Manifest">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170824 16:48:16.699" level="INFO">@{entries} = [ APPLICATION DATA | BMC DATA | DRIVER INFO ]</msg>
<status endtime="20170824 16:48:16.699" status="PASS" starttime="20170824 16:48:16.699"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170824 16:48:16.701" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status endtime="20170824 16:48:16.701" status="PASS" starttime="20170824 16:48:16.700"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170824 16:48:16.707" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status endtime="20170824 16:48:16.707" status="PASS" starttime="20170824 16:48:16.701"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:16.710" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:16.710" status="PASS" starttime="20170824 16:48:16.709"></status>
</kw>
<status endtime="20170824 16:48:16.710" status="PASS" starttime="20170824 16:48:16.709"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:16.711" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:16.711" status="PASS" starttime="20170824 16:48:16.711"></status>
</kw>
<status endtime="20170824 16:48:16.712" status="PASS" starttime="20170824 16:48:16.710"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:16.713" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:16.713" status="PASS" starttime="20170824 16:48:16.712"></status>
</kw>
<status endtime="20170824 16:48:16.713" status="PASS" starttime="20170824 16:48:16.712"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:16.714" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:16.714" status="PASS" starttime="20170824 16:48:16.714"></status>
</kw>
<status endtime="20170824 16:48:16.714" status="PASS" starttime="20170824 16:48:16.713"></status>
</kw>
<status endtime="20170824 16:48:16.714" status="PASS" starttime="20170824 16:48:16.708"></status>
</kw>
<status endtime="20170824 16:48:16.714" status="PASS" starttime="20170824 16:48:16.708"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170824 16:48:16.715" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status endtime="20170824 16:48:16.715" status="PASS" starttime="20170824 16:48:16.715"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170824 16:48:16.841" level="INFO">host=9.3.86.161
width=80
timeout=25 seconds
encoding=UTF-8
path_separator=/
alias=bmc_connection
port=22
index=1
term_type=vt100
prompt=# 
newline=

height=24</msg>
<msg timestamp="20170824 16:48:16.841" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170824 16:48:18.268" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170824 16:48:18.268" status="PASS" starttime="20170824 16:48:16.767"></status>
</kw>
<msg timestamp="20170824 16:48:18.268" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:48:18.268" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState.Q...</msg>
<status endtime="20170824 16:48:18.268" status="PASS" starttime="20170824 16:48:16.715"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170824 16:48:18.269" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Quiesc...</msg>
<status endtime="20170824 16:48:18.269" status="PASS" starttime="20170824 16:48:18.269"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170824 16:48:18.270" level="INFO">${stderr} = </msg>
<status endtime="20170824 16:48:18.270" status="PASS" starttime="20170824 16:48:18.270"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:18.277" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:18.277" status="PASS" starttime="20170824 16:48:18.276"></status>
</kw>
<status endtime="20170824 16:48:18.277" status="PASS" starttime="20170824 16:48:18.275"></status>
</kw>
<status endtime="20170824 16:48:18.277" status="PASS" starttime="20170824 16:48:18.270"></status>
</kw>
<status endtime="20170824 16:48:18.278" status="PASS" starttime="20170824 16:48:16.707"></status>
</kw>
<status endtime="20170824 16:48:18.278" status="PASS" starttime="20170824 16:48:16.707"></status>
</kw>
<status endtime="20170824 16:48:18.278" status="PASS" starttime="20170824 16:48:16.707"></status>
</kw>
<status endtime="20170824 16:48:18.278" status="PASS" starttime="20170824 16:48:16.699"></status>
</kw>
<status endtime="20170824 16:48:18.278" status="PASS" starttime="20170824 16:48:16.699"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170824 16:48:18.279" level="INFO">@{cmd_list} = [ ('BMC OS', 'uname -a') | ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') ]</msg>
<status endtime="20170824 16:48:18.279" status="PASS" starttime="20170824 16:48:18.279"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170824 16:48:18.280" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status endtime="20170824 16:48:18.280" status="PASS" starttime="20170824 16:48:18.279"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:18.283" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:18.283" status="PASS" starttime="20170824 16:48:18.283"></status>
</kw>
<status endtime="20170824 16:48:18.283" status="PASS" starttime="20170824 16:48:18.282"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:18.285" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:18.285" status="PASS" starttime="20170824 16:48:18.284"></status>
</kw>
<status endtime="20170824 16:48:18.285" status="PASS" starttime="20170824 16:48:18.283"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:18.286" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:18.286" status="PASS" starttime="20170824 16:48:18.285"></status>
</kw>
<status endtime="20170824 16:48:18.286" status="PASS" starttime="20170824 16:48:18.285"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:18.287" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:18.287" status="PASS" starttime="20170824 16:48:18.287"></status>
</kw>
<status endtime="20170824 16:48:18.287" status="PASS" starttime="20170824 16:48:18.286"></status>
</kw>
<status endtime="20170824 16:48:18.287" status="PASS" starttime="20170824 16:48:18.282"></status>
</kw>
<status endtime="20170824 16:48:18.288" status="PASS" starttime="20170824 16:48:18.281"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170824 16:48:18.288" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status endtime="20170824 16:48:18.288" status="PASS" starttime="20170824 16:48:18.288"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170824 16:48:18.406" level="INFO">host=9.3.86.161
width=80
timeout=25 seconds
encoding=UTF-8
path_separator=/
alias=bmc_connection
port=22
index=1
term_type=vt100
prompt=# 
newline=

height=24</msg>
<msg timestamp="20170824 16:48:18.407" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170824 16:48:18.464" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170824 16:48:18.464" status="PASS" starttime="20170824 16:48:18.343"></status>
</kw>
<msg timestamp="20170824 16:48:18.464" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:48:18.465" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-1a4df30c39cf5ee0e3d2528c409787ccbb4a672a #1 Thu Aug 24 14:30:43 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status endtime="20170824 16:48:18.465" status="PASS" starttime="20170824 16:48:18.289"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170824 16:48:18.465" level="INFO">${stdout} = Linux witherspoon 4.10.17-1a4df30c39cf5ee0e3d2528c409787ccbb4a672a #1 Thu Aug 24 14:30:43 UTC 2017 armv6l GNU/Linux</msg>
<status endtime="20170824 16:48:18.465" status="PASS" starttime="20170824 16:48:18.465"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170824 16:48:18.466" level="INFO">${stderr} = </msg>
<status endtime="20170824 16:48:18.466" status="PASS" starttime="20170824 16:48:18.466"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:18.473" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:18.473" status="PASS" starttime="20170824 16:48:18.472"></status>
</kw>
<status endtime="20170824 16:48:18.473" status="PASS" starttime="20170824 16:48:18.472"></status>
</kw>
<status endtime="20170824 16:48:18.473" status="PASS" starttime="20170824 16:48:18.466"></status>
</kw>
<status endtime="20170824 16:48:18.473" status="PASS" starttime="20170824 16:48:18.280"></status>
</kw>
<status endtime="20170824 16:48:18.473" status="PASS" starttime="20170824 16:48:18.280"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:18.477" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:18.477" status="PASS" starttime="20170824 16:48:18.476"></status>
</kw>
<status endtime="20170824 16:48:18.477" status="PASS" starttime="20170824 16:48:18.476"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:18.478" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:18.479" status="PASS" starttime="20170824 16:48:18.478"></status>
</kw>
<status endtime="20170824 16:48:18.479" status="PASS" starttime="20170824 16:48:18.477"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:18.480" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:18.480" status="PASS" starttime="20170824 16:48:18.479"></status>
</kw>
<status endtime="20170824 16:48:18.480" status="PASS" starttime="20170824 16:48:18.479"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:18.481" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:18.481" status="PASS" starttime="20170824 16:48:18.481"></status>
</kw>
<status endtime="20170824 16:48:18.481" status="PASS" starttime="20170824 16:48:18.480"></status>
</kw>
<status endtime="20170824 16:48:18.481" status="PASS" starttime="20170824 16:48:18.475"></status>
</kw>
<status endtime="20170824 16:48:18.482" status="PASS" starttime="20170824 16:48:18.474"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170824 16:48:18.482" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status endtime="20170824 16:48:18.482" status="PASS" starttime="20170824 16:48:18.482"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170824 16:48:18.594" level="INFO">host=9.3.86.161
width=80
timeout=25 seconds
encoding=UTF-8
path_separator=/
alias=bmc_connection
port=22
index=1
term_type=vt100
prompt=# 
newline=

height=24</msg>
<msg timestamp="20170824 16:48:18.594" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170824 16:48:18.726" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170824 16:48:18.726" status="PASS" starttime="20170824 16:48:18.536"></status>
</kw>
<msg timestamp="20170824 16:48:18.726" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:48:18.726" level="INFO">${ret_values} = (u' 16:48:26 up 13 min,  load average: 0.84, 1.30, 1.22', u'', 0)</msg>
<status endtime="20170824 16:48:18.726" status="PASS" starttime="20170824 16:48:18.483"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170824 16:48:18.727" level="INFO">${stdout} =  16:48:26 up 13 min,  load average: 0.84, 1.30, 1.22</msg>
<status endtime="20170824 16:48:18.727" status="PASS" starttime="20170824 16:48:18.727"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170824 16:48:18.728" level="INFO">${stderr} = </msg>
<status endtime="20170824 16:48:18.728" status="PASS" starttime="20170824 16:48:18.728"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:18.735" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:18.735" status="PASS" starttime="20170824 16:48:18.734"></status>
</kw>
<status endtime="20170824 16:48:18.735" status="PASS" starttime="20170824 16:48:18.734"></status>
</kw>
<status endtime="20170824 16:48:18.735" status="PASS" starttime="20170824 16:48:18.728"></status>
</kw>
<status endtime="20170824 16:48:18.735" status="PASS" starttime="20170824 16:48:18.474"></status>
</kw>
<status endtime="20170824 16:48:18.735" status="PASS" starttime="20170824 16:48:18.473"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:18.738" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:18.738" status="PASS" starttime="20170824 16:48:18.738"></status>
</kw>
<status endtime="20170824 16:48:18.739" status="PASS" starttime="20170824 16:48:18.737"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:18.740" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:18.740" status="PASS" starttime="20170824 16:48:18.740"></status>
</kw>
<status endtime="20170824 16:48:18.741" status="PASS" starttime="20170824 16:48:18.739"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:18.742" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:18.742" status="PASS" starttime="20170824 16:48:18.741"></status>
</kw>
<status endtime="20170824 16:48:18.742" status="PASS" starttime="20170824 16:48:18.741"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:18.743" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:18.743" status="PASS" starttime="20170824 16:48:18.743"></status>
</kw>
<status endtime="20170824 16:48:18.744" status="PASS" starttime="20170824 16:48:18.742"></status>
</kw>
<status endtime="20170824 16:48:18.744" status="PASS" starttime="20170824 16:48:18.737"></status>
</kw>
<status endtime="20170824 16:48:18.744" status="PASS" starttime="20170824 16:48:18.737"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170824 16:48:18.745" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status endtime="20170824 16:48:18.745" status="PASS" starttime="20170824 16:48:18.744"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170824 16:48:18.863" level="INFO">host=9.3.86.161
width=80
timeout=25 seconds
encoding=UTF-8
path_separator=/
alias=bmc_connection
port=22
index=1
term_type=vt100
prompt=# 
newline=

height=24</msg>
<msg timestamp="20170824 16:48:18.863" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170824 16:48:18.920" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170824 16:48:18.920" status="PASS" starttime="20170824 16:48:18.799"></status>
</kw>
<msg timestamp="20170824 16:48:18.920" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:48:18.920" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status endtime="20170824 16:48:18.920" status="PASS" starttime="20170824 16:48:18.745"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170824 16:48:18.921" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.1...</msg>
<status endtime="20170824 16:48:18.921" status="PASS" starttime="20170824 16:48:18.921"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170824 16:48:18.922" level="INFO">${stderr} = </msg>
<status endtime="20170824 16:48:18.922" status="PASS" starttime="20170824 16:48:18.921"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:18.929" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:18.929" status="PASS" starttime="20170824 16:48:18.928"></status>
</kw>
<status endtime="20170824 16:48:18.929" status="PASS" starttime="20170824 16:48:18.927"></status>
</kw>
<status endtime="20170824 16:48:18.929" status="PASS" starttime="20170824 16:48:18.922"></status>
</kw>
<status endtime="20170824 16:48:18.929" status="PASS" starttime="20170824 16:48:18.736"></status>
</kw>
<status endtime="20170824 16:48:18.929" status="PASS" starttime="20170824 16:48:18.736"></status>
</kw>
<status endtime="20170824 16:48:18.929" status="PASS" starttime="20170824 16:48:18.280"></status>
</kw>
<status endtime="20170824 16:48:18.929" status="PASS" starttime="20170824 16:48:18.278"></status>
</kw>
<status endtime="20170824 16:48:18.929" status="PASS" starttime="20170824 16:48:18.278"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170824 16:48:18.930" level="INFO">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') | ('FW Timestamp', 'cat /etc/timestamp') ]</msg>
<status endtime="20170824 16:48:18.930" status="PASS" starttime="20170824 16:48:18.930"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170824 16:48:18.931" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status endtime="20170824 16:48:18.931" status="PASS" starttime="20170824 16:48:18.931"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:18.934" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:18.935" status="PASS" starttime="20170824 16:48:18.934"></status>
</kw>
<status endtime="20170824 16:48:18.935" status="PASS" starttime="20170824 16:48:18.933"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:18.936" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:18.937" status="PASS" starttime="20170824 16:48:18.936"></status>
</kw>
<status endtime="20170824 16:48:18.937" status="PASS" starttime="20170824 16:48:18.935"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:18.938" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:18.938" status="PASS" starttime="20170824 16:48:18.937"></status>
</kw>
<status endtime="20170824 16:48:18.939" status="PASS" starttime="20170824 16:48:18.937"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:18.940" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:18.940" status="PASS" starttime="20170824 16:48:18.939"></status>
</kw>
<status endtime="20170824 16:48:18.940" status="PASS" starttime="20170824 16:48:18.939"></status>
</kw>
<status endtime="20170824 16:48:18.940" status="PASS" starttime="20170824 16:48:18.933"></status>
</kw>
<status endtime="20170824 16:48:18.940" status="PASS" starttime="20170824 16:48:18.933"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170824 16:48:18.941" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status endtime="20170824 16:48:18.941" status="PASS" starttime="20170824 16:48:18.940"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170824 16:48:19.058" level="INFO">host=9.3.86.161
width=80
timeout=25 seconds
encoding=UTF-8
path_separator=/
alias=bmc_connection
port=22
index=1
term_type=vt100
prompt=# 
newline=

height=24</msg>
<msg timestamp="20170824 16:48:19.059" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170824 16:48:19.115" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170824 16:48:19.115" status="PASS" starttime="20170824 16:48:18.992"></status>
</kw>
<msg timestamp="20170824 16:48:19.115" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:48:19.115" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.8-259"\nVERSION_ID="v1.99.8-259-g68f4dc1"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status endtime="20170824 16:48:19.115" status="PASS" starttime="20170824 16:48:18.941"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170824 16:48:19.116" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.8-259"
VERSION_ID="v1.99.8-259-g68f4dc1"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status endtime="20170824 16:48:19.116" status="PASS" starttime="20170824 16:48:19.116"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170824 16:48:19.117" level="INFO">${stderr} = </msg>
<status endtime="20170824 16:48:19.117" status="PASS" starttime="20170824 16:48:19.117"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:19.124" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:19.124" status="PASS" starttime="20170824 16:48:19.123"></status>
</kw>
<status endtime="20170824 16:48:19.124" status="PASS" starttime="20170824 16:48:19.123"></status>
</kw>
<status endtime="20170824 16:48:19.124" status="PASS" starttime="20170824 16:48:19.117"></status>
</kw>
<status endtime="20170824 16:48:19.124" status="PASS" starttime="20170824 16:48:18.932"></status>
</kw>
<status endtime="20170824 16:48:19.124" status="PASS" starttime="20170824 16:48:18.932"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Timestamp', 'cat /etc/timestamp')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:19.128" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:19.128" status="PASS" starttime="20170824 16:48:19.127"></status>
</kw>
<status endtime="20170824 16:48:19.128" status="PASS" starttime="20170824 16:48:19.127"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:19.130" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:19.130" status="PASS" starttime="20170824 16:48:19.129"></status>
</kw>
<status endtime="20170824 16:48:19.130" status="PASS" starttime="20170824 16:48:19.128"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:19.131" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:19.131" status="PASS" starttime="20170824 16:48:19.131"></status>
</kw>
<status endtime="20170824 16:48:19.132" status="PASS" starttime="20170824 16:48:19.130"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:19.133" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:19.133" status="PASS" starttime="20170824 16:48:19.132"></status>
</kw>
<status endtime="20170824 16:48:19.133" status="PASS" starttime="20170824 16:48:19.132"></status>
</kw>
<status endtime="20170824 16:48:19.133" status="PASS" starttime="20170824 16:48:19.126"></status>
</kw>
<status endtime="20170824 16:48:19.133" status="PASS" starttime="20170824 16:48:19.125"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170824 16:48:19.134" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/timestamp  ignore_err=1</msg>
<status endtime="20170824 16:48:19.134" status="PASS" starttime="20170824 16:48:19.133"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/timestamp</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170824 16:48:19.254" level="INFO">host=9.3.86.161
width=80
timeout=25 seconds
encoding=UTF-8
path_separator=/
alias=bmc_connection
port=22
index=1
term_type=vt100
prompt=# 
newline=

height=24</msg>
<msg timestamp="20170824 16:48:19.255" level="INFO">Executing command 'cat /etc/timestamp'.</msg>
<msg timestamp="20170824 16:48:19.334" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170824 16:48:19.334" status="PASS" starttime="20170824 16:48:19.191"></status>
</kw>
<msg timestamp="20170824 16:48:19.335" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:48:19.335" level="INFO">${ret_values} = (u'20170824143157', u'', 0)</msg>
<status endtime="20170824 16:48:19.335" status="PASS" starttime="20170824 16:48:19.134"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170824 16:48:19.335" level="INFO">${stdout} = 20170824143157</msg>
<status endtime="20170824 16:48:19.335" status="PASS" starttime="20170824 16:48:19.335"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170824 16:48:19.336" level="INFO">${stderr} = </msg>
<status endtime="20170824 16:48:19.336" status="PASS" starttime="20170824 16:48:19.336"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:19.343" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:19.343" status="PASS" starttime="20170824 16:48:19.342"></status>
</kw>
<status endtime="20170824 16:48:19.343" status="PASS" starttime="20170824 16:48:19.342"></status>
</kw>
<status endtime="20170824 16:48:19.343" status="PASS" starttime="20170824 16:48:19.336"></status>
</kw>
<status endtime="20170824 16:48:19.343" status="PASS" starttime="20170824 16:48:19.125"></status>
</kw>
<status endtime="20170824 16:48:19.343" status="PASS" starttime="20170824 16:48:19.124"></status>
</kw>
<status endtime="20170824 16:48:19.344" status="PASS" starttime="20170824 16:48:18.931"></status>
</kw>
<status endtime="20170824 16:48:19.344" status="PASS" starttime="20170824 16:48:18.929"></status>
</kw>
<status endtime="20170824 16:48:19.344" status="PASS" starttime="20170824 16:48:18.929"></status>
</kw>
<status endtime="20170824 16:48:19.344" status="PASS" starttime="20170824 16:48:16.699"></status>
</kw>
<status endtime="20170824 16:48:19.344" status="PASS" starttime="20170824 16:48:16.698"></status>
</kw>
<status endtime="20170824 16:48:19.344" status="PASS" starttime="20170824 16:48:16.653"></status>
</kw>
<status endtime="20170824 16:48:19.344" status="PASS" starttime="20170824 16:48:16.650"></status>
</kw>
<status endtime="20170824 16:48:19.344" status="PASS" starttime="20170824 16:48:16.650"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170824 16:48:19.346" status="PASS" starttime="20170824 16:48:19.346"></status>
</kw>
<msg timestamp="20170824 16:48:19.346" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:48:19.346" level="INFO">${ret_values} = None</msg>
<status endtime="20170824 16:48:19.346" status="PASS" starttime="20170824 16:48:19.345"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170824 16:48:19.347" status="PASS" starttime="20170824 16:48:19.346"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="Collect eSEL Log">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:48:19.392" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:48:19.393" status="PASS" starttime="20170824 16:48:19.391"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:48:19.394" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:48:19.394" status="PASS" starttime="20170824 16:48:19.393"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:48:19.395" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:48:19.395" status="PASS" starttime="20170824 16:48:19.394"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:48:19.396" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:48:19.396" status="PASS" starttime="20170824 16:48:19.395"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:48:19.605" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:48:19.605" status="PASS" starttime="20170824 16:48:19.397"></status>
</kw>
<msg timestamp="20170824 16:48:19.605" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:48:19.605" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:19.605" status="PASS" starttime="20170824 16:48:19.396"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:48:19.606" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:19.606" status="PASS" starttime="20170824 16:48:19.605"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:48:19.606" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:19.606" status="PASS" starttime="20170824 16:48:19.606"></status>
</kw>
<status endtime="20170824 16:48:19.607" status="PASS" starttime="20170824 16:48:19.388"></status>
</kw>
<status endtime="20170824 16:48:19.607" status="PASS" starttime="20170824 16:48:19.387"></status>
</kw>
<status endtime="20170824 16:48:19.607" status="PASS" starttime="20170824 16:48:19.386"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:48:19.607" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status endtime="20170824 16:48:19.608" status="PASS" starttime="20170824 16:48:19.607"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170824 16:48:19.608" status="PASS" starttime="20170824 16:48:19.608"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:48:19.812" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170824 16:48:19.812" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:19.812" status="PASS" starttime="20170824 16:48:19.608"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170824 16:48:19.812" status="PASS" starttime="20170824 16:48:19.812"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:48:19.813" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:48:19.813" status="PASS" starttime="20170824 16:48:19.813"></status>
</kw>
<msg timestamp="20170824 16:48:19.813" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:19.813" status="PASS" starttime="20170824 16:48:19.386"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:48:19.814" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:19.814" status="PASS" starttime="20170824 16:48:19.814"></status>
</kw>
<msg timestamp="20170824 16:48:19.814" level="INFO">${status} = True</msg>
<status endtime="20170824 16:48:19.814" status="PASS" starttime="20170824 16:48:19.813"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status endtime="20170824 16:48:19.815" status="PASS" starttime="20170824 16:48:19.815"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:48:19.816" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1503592743745, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1503592809859, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [], 
      "Id": 4, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1503592877546, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [], 
      "Id": 5, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1503592944282, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [], 
      "Id": 6, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1503593052272, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:48:19.816" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:48:19.816" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': {u'/xyz/openbmc_project/logging/entry/3': {u'Resolved': 0, u'Severity': u'xyz.openbmc_project.Logging.Entry.Level.Error', u'Id': 3, u'associations': ...</msg>
<status endtime="20170824 16:48:19.816" status="PASS" starttime="20170824 16:48:19.815"></status>
</kw>
<kw library="Collections" name="Get Dictionary Keys">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg timestamp="20170824 16:48:19.816" level="INFO">${esel_list} = [u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/4', u'/xyz/openbmc_project/logging/entry/5', u'/xyz/openbmc_project/logging/entr...</msg>
<status endtime="20170824 16:48:19.817" status="PASS" starttime="20170824 16:48:19.816"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170824 16:48:19.817" level="INFO">${logpath} = /tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_esel</msg>
<status endtime="20170824 16:48:19.817" status="PASS" starttime="20170824 16:48:19.817"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:19.818" level="INFO">Created file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_esel"&gt;/tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/20170824164805305919_esel&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:19.818" status="PASS" starttime="20170824 16:48:19.817"></status>
</kw>
<kw type="for" name="${entry_path} IN [ @{esel_list} ]">
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/2">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170824 16:48:19.819" status="PASS" starttime="20170824 16:48:19.818"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:48:19.822" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:48:19.823" status="PASS" starttime="20170824 16:48:19.822"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:48:19.823" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:48:19.823" status="PASS" starttime="20170824 16:48:19.823"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:48:19.824" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:48:19.824" status="PASS" starttime="20170824 16:48:19.824"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:48:19.825" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:48:19.825" status="PASS" starttime="20170824 16:48:19.824"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:48:20.099" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:48:20.099" status="PASS" starttime="20170824 16:48:19.826"></status>
</kw>
<msg timestamp="20170824 16:48:20.099" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:48:20.099" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:20.099" status="PASS" starttime="20170824 16:48:19.825"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:48:20.100" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:20.100" status="PASS" starttime="20170824 16:48:20.100"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:48:20.101" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:20.101" status="PASS" starttime="20170824 16:48:20.100"></status>
</kw>
<status endtime="20170824 16:48:20.101" status="PASS" starttime="20170824 16:48:19.822"></status>
</kw>
<status endtime="20170824 16:48:20.101" status="PASS" starttime="20170824 16:48:19.821"></status>
</kw>
<status endtime="20170824 16:48:20.101" status="PASS" starttime="20170824 16:48:19.820"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:48:20.102" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status endtime="20170824 16:48:20.102" status="PASS" starttime="20170824 16:48:20.102"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170824 16:48:20.103" status="PASS" starttime="20170824 16:48:20.103"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:48:20.201" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170824 16:48:20.201" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:20.201" status="PASS" starttime="20170824 16:48:20.104"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170824 16:48:20.202" status="PASS" starttime="20170824 16:48:20.201"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:48:20.202" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:48:20.202" status="PASS" starttime="20170824 16:48:20.202"></status>
</kw>
<msg timestamp="20170824 16:48:20.202" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:20.202" status="PASS" starttime="20170824 16:48:19.820"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:48:20.203" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:20.203" status="PASS" starttime="20170824 16:48:20.203"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:48:20.204" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:48:20.204" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:48:20.204" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status endtime="20170824 16:48:20.204" status="PASS" starttime="20170824 16:48:20.203"></status>
</kw>
<msg timestamp="20170824 16:48:20.204" level="INFO">${esel_data} = []</msg>
<status endtime="20170824 16:48:20.204" status="PASS" starttime="20170824 16:48:19.819"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170824 16:48:20.205" level="INFO">Length is 0</msg>
<msg timestamp="20170824 16:48:20.205" level="INFO">${length} = 0</msg>
<status endtime="20170824 16:48:20.205" status="PASS" starttime="20170824 16:48:20.205"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170824 16:48:20.206" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170824 16:48:20.206" status="PASS" starttime="20170824 16:48:20.206"></status>
</kw>
<status endtime="20170824 16:48:20.206" status="PASS" starttime="20170824 16:48:19.818"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/3">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170824 16:48:20.208" status="PASS" starttime="20170824 16:48:20.207"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:48:20.213" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:48:20.213" status="PASS" starttime="20170824 16:48:20.212"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:48:20.214" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:48:20.214" status="PASS" starttime="20170824 16:48:20.214"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:48:20.215" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:48:20.215" status="PASS" starttime="20170824 16:48:20.215"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:48:20.216" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:48:20.216" status="PASS" starttime="20170824 16:48:20.216"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:48:20.403" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:48:20.403" status="PASS" starttime="20170824 16:48:20.217"></status>
</kw>
<msg timestamp="20170824 16:48:20.403" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:48:20.403" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:20.403" status="PASS" starttime="20170824 16:48:20.217"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:48:20.404" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:20.404" status="PASS" starttime="20170824 16:48:20.404"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:48:20.405" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:20.405" status="PASS" starttime="20170824 16:48:20.404"></status>
</kw>
<status endtime="20170824 16:48:20.405" status="PASS" starttime="20170824 16:48:20.211"></status>
</kw>
<status endtime="20170824 16:48:20.405" status="PASS" starttime="20170824 16:48:20.211"></status>
</kw>
<status endtime="20170824 16:48:20.405" status="PASS" starttime="20170824 16:48:20.210"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:48:20.406" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/3/attr/AdditionalData</msg>
<status endtime="20170824 16:48:20.406" status="PASS" starttime="20170824 16:48:20.405"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170824 16:48:20.406" status="PASS" starttime="20170824 16:48:20.406"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:48:20.532" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170824 16:48:20.533" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:20.533" status="PASS" starttime="20170824 16:48:20.407"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170824 16:48:20.533" status="PASS" starttime="20170824 16:48:20.533"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:48:20.534" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:48:20.534" status="PASS" starttime="20170824 16:48:20.534"></status>
</kw>
<msg timestamp="20170824 16:48:20.534" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:20.534" status="PASS" starttime="20170824 16:48:20.209"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:48:20.535" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:20.535" status="PASS" starttime="20170824 16:48:20.534"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:48:20.535" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:48:20.535" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:48:20.535" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status endtime="20170824 16:48:20.535" status="PASS" starttime="20170824 16:48:20.535"></status>
</kw>
<msg timestamp="20170824 16:48:20.536" level="INFO">${esel_data} = []</msg>
<status endtime="20170824 16:48:20.536" status="PASS" starttime="20170824 16:48:20.208"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170824 16:48:20.537" level="INFO">Length is 0</msg>
<msg timestamp="20170824 16:48:20.537" level="INFO">${length} = 0</msg>
<status endtime="20170824 16:48:20.537" status="PASS" starttime="20170824 16:48:20.536"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170824 16:48:20.538" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170824 16:48:20.538" status="PASS" starttime="20170824 16:48:20.537"></status>
</kw>
<status endtime="20170824 16:48:20.538" status="PASS" starttime="20170824 16:48:20.207"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/4">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170824 16:48:20.539" status="PASS" starttime="20170824 16:48:20.538"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:48:20.544" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:48:20.545" status="PASS" starttime="20170824 16:48:20.543"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:48:20.546" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:48:20.546" status="PASS" starttime="20170824 16:48:20.545"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:48:20.547" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:48:20.547" status="PASS" starttime="20170824 16:48:20.546"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:48:20.548" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:48:20.548" status="PASS" starttime="20170824 16:48:20.547"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:48:20.748" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:48:20.748" status="PASS" starttime="20170824 16:48:20.549"></status>
</kw>
<msg timestamp="20170824 16:48:20.748" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:48:20.748" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:20.749" status="PASS" starttime="20170824 16:48:20.548"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:48:20.749" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:20.749" status="PASS" starttime="20170824 16:48:20.749"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:48:20.750" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:20.750" status="PASS" starttime="20170824 16:48:20.750"></status>
</kw>
<status endtime="20170824 16:48:20.750" status="PASS" starttime="20170824 16:48:20.543"></status>
</kw>
<status endtime="20170824 16:48:20.750" status="PASS" starttime="20170824 16:48:20.542"></status>
</kw>
<status endtime="20170824 16:48:20.750" status="PASS" starttime="20170824 16:48:20.541"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:48:20.751" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/4/attr/AdditionalData</msg>
<status endtime="20170824 16:48:20.751" status="PASS" starttime="20170824 16:48:20.751"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170824 16:48:20.752" status="PASS" starttime="20170824 16:48:20.751"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:48:20.835" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/4/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170824 16:48:20.835" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:20.836" status="PASS" starttime="20170824 16:48:20.752"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170824 16:48:20.836" status="PASS" starttime="20170824 16:48:20.836"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:48:20.837" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:48:20.837" status="PASS" starttime="20170824 16:48:20.836"></status>
</kw>
<msg timestamp="20170824 16:48:20.837" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:20.837" status="PASS" starttime="20170824 16:48:20.540"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:48:20.838" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:20.838" status="PASS" starttime="20170824 16:48:20.837"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:48:20.838" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:48:20.838" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:48:20.838" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status endtime="20170824 16:48:20.838" status="PASS" starttime="20170824 16:48:20.838"></status>
</kw>
<msg timestamp="20170824 16:48:20.839" level="INFO">${esel_data} = []</msg>
<status endtime="20170824 16:48:20.839" status="PASS" starttime="20170824 16:48:20.539"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170824 16:48:20.839" level="INFO">Length is 0</msg>
<msg timestamp="20170824 16:48:20.839" level="INFO">${length} = 0</msg>
<status endtime="20170824 16:48:20.839" status="PASS" starttime="20170824 16:48:20.839"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170824 16:48:20.840" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170824 16:48:20.840" status="PASS" starttime="20170824 16:48:20.840"></status>
</kw>
<status endtime="20170824 16:48:20.840" status="PASS" starttime="20170824 16:48:20.538"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/5">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170824 16:48:20.841" status="PASS" starttime="20170824 16:48:20.840"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:48:20.844" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:48:20.847" status="PASS" starttime="20170824 16:48:20.844"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:48:20.847" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:48:20.847" status="PASS" starttime="20170824 16:48:20.847"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:48:20.848" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:48:20.848" status="PASS" starttime="20170824 16:48:20.848"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:48:20.849" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:48:20.849" status="PASS" starttime="20170824 16:48:20.848"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:48:21.062" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:48:21.062" status="PASS" starttime="20170824 16:48:20.850"></status>
</kw>
<msg timestamp="20170824 16:48:21.062" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:48:21.062" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:21.062" status="PASS" starttime="20170824 16:48:20.849"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:48:21.063" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:21.063" status="PASS" starttime="20170824 16:48:21.062"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:48:21.063" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:21.064" status="PASS" starttime="20170824 16:48:21.063"></status>
</kw>
<status endtime="20170824 16:48:21.064" status="PASS" starttime="20170824 16:48:20.843"></status>
</kw>
<status endtime="20170824 16:48:21.064" status="PASS" starttime="20170824 16:48:20.843"></status>
</kw>
<status endtime="20170824 16:48:21.064" status="PASS" starttime="20170824 16:48:20.842"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:48:21.064" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/5/attr/AdditionalData</msg>
<status endtime="20170824 16:48:21.065" status="PASS" starttime="20170824 16:48:21.064"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170824 16:48:21.065" status="PASS" starttime="20170824 16:48:21.065"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:48:21.180" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/5/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170824 16:48:21.180" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:21.181" status="PASS" starttime="20170824 16:48:21.065"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170824 16:48:21.181" status="PASS" starttime="20170824 16:48:21.181"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:48:21.182" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:48:21.182" status="PASS" starttime="20170824 16:48:21.181"></status>
</kw>
<msg timestamp="20170824 16:48:21.182" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:21.182" status="PASS" starttime="20170824 16:48:20.842"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:48:21.183" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:21.183" status="PASS" starttime="20170824 16:48:21.182"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:48:21.183" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:48:21.183" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:48:21.183" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status endtime="20170824 16:48:21.183" status="PASS" starttime="20170824 16:48:21.183"></status>
</kw>
<msg timestamp="20170824 16:48:21.184" level="INFO">${esel_data} = []</msg>
<status endtime="20170824 16:48:21.184" status="PASS" starttime="20170824 16:48:20.841"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170824 16:48:21.184" level="INFO">Length is 0</msg>
<msg timestamp="20170824 16:48:21.184" level="INFO">${length} = 0</msg>
<status endtime="20170824 16:48:21.184" status="PASS" starttime="20170824 16:48:21.184"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170824 16:48:21.185" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170824 16:48:21.185" status="PASS" starttime="20170824 16:48:21.185"></status>
</kw>
<status endtime="20170824 16:48:21.185" status="PASS" starttime="20170824 16:48:20.840"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/6">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170824 16:48:21.186" status="PASS" starttime="20170824 16:48:21.185"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:48:21.189" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:48:21.190" status="PASS" starttime="20170824 16:48:21.189"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:48:21.191" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:48:21.191" status="PASS" starttime="20170824 16:48:21.190"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:48:21.191" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:48:21.191" status="PASS" starttime="20170824 16:48:21.191"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:48:21.192" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:48:21.192" status="PASS" starttime="20170824 16:48:21.192"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:48:21.459" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:48:21.459" status="PASS" starttime="20170824 16:48:21.193"></status>
</kw>
<msg timestamp="20170824 16:48:21.459" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:48:21.459" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:21.459" status="PASS" starttime="20170824 16:48:21.192"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:48:21.460" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:21.460" status="PASS" starttime="20170824 16:48:21.459"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:48:21.460" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:21.461" status="PASS" starttime="20170824 16:48:21.460"></status>
</kw>
<status endtime="20170824 16:48:21.461" status="PASS" starttime="20170824 16:48:21.188"></status>
</kw>
<status endtime="20170824 16:48:21.461" status="PASS" starttime="20170824 16:48:21.188"></status>
</kw>
<status endtime="20170824 16:48:21.461" status="PASS" starttime="20170824 16:48:21.187"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:48:21.461" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/6/attr/AdditionalData</msg>
<status endtime="20170824 16:48:21.461" status="PASS" starttime="20170824 16:48:21.461"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170824 16:48:21.462" status="PASS" starttime="20170824 16:48:21.462"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:48:21.579" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/6/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170824 16:48:21.579" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:21.579" status="PASS" starttime="20170824 16:48:21.462"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170824 16:48:21.580" status="PASS" starttime="20170824 16:48:21.579"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:48:21.580" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:48:21.580" status="PASS" starttime="20170824 16:48:21.580"></status>
</kw>
<msg timestamp="20170824 16:48:21.580" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:21.580" status="PASS" starttime="20170824 16:48:21.187"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:48:21.581" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:21.581" status="PASS" starttime="20170824 16:48:21.581"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:48:21.582" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:48:21.582" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:48:21.582" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status endtime="20170824 16:48:21.582" status="PASS" starttime="20170824 16:48:21.581"></status>
</kw>
<msg timestamp="20170824 16:48:21.582" level="INFO">${esel_data} = []</msg>
<status endtime="20170824 16:48:21.582" status="PASS" starttime="20170824 16:48:21.186"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170824 16:48:21.583" level="INFO">Length is 0</msg>
<msg timestamp="20170824 16:48:21.583" level="INFO">${length} = 0</msg>
<status endtime="20170824 16:48:21.583" status="PASS" starttime="20170824 16:48:21.582"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170824 16:48:21.583" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170824 16:48:21.584" status="PASS" starttime="20170824 16:48:21.583"></status>
</kw>
<status endtime="20170824 16:48:21.584" status="PASS" starttime="20170824 16:48:21.185"></status>
</kw>
<status endtime="20170824 16:48:21.584" status="PASS" starttime="20170824 16:48:19.818"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20170824 16:48:21.588" level="INFO">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg timestamp="20170824 16:48:21.594" level="INFO">${out} = </msg>
<status endtime="20170824 16:48:21.594" status="PASS" starttime="20170824 16:48:21.584"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg timestamp="20170824 16:48:21.598" level="FAIL">'' does not contain 'eSEL.pl'</msg>
<status endtime="20170824 16:48:21.598" status="FAIL" starttime="20170824 16:48:21.597"></status>
</kw>
<msg timestamp="20170824 16:48:21.598" level="INFO">${status} = False</msg>
<status endtime="20170824 16:48:21.598" status="PASS" starttime="20170824 16:48:21.596"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170824 16:48:21.599" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170824 16:48:21.599" status="PASS" starttime="20170824 16:48:21.599"></status>
</kw>
<status endtime="20170824 16:48:21.599" status="PASS" starttime="20170824 16:48:19.385"></status>
</kw>
<status endtime="20170824 16:48:21.600" status="PASS" starttime="20170824 16:48:19.347"></status>
</kw>
<status endtime="20170824 16:48:21.600" status="PASS" starttime="20170824 16:48:19.344"></status>
</kw>
<status endtime="20170824 16:48:21.600" status="PASS" starttime="20170824 16:48:19.344"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170824 16:48:21.605" status="PASS" starttime="20170824 16:48:21.604"></status>
</kw>
<msg timestamp="20170824 16:48:21.605" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:48:21.605" level="INFO">${ret_values} = None</msg>
<status endtime="20170824 16:48:21.605" status="PASS" starttime="20170824 16:48:21.604"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170824 16:48:21.606" status="PASS" starttime="20170824 16:48:21.605"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="OS FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170824 16:48:21.651" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170824 16:48:21.652" status="PASS" starttime="20170824 16:48:21.651"></status>
</kw>
<status endtime="20170824 16:48:21.652" status="PASS" starttime="20170824 16:48:21.650"></status>
</kw>
<status endtime="20170824 16:48:21.652" status="PASS" starttime="20170824 16:48:21.606"></status>
</kw>
<status endtime="20170824 16:48:21.652" status="PASS" starttime="20170824 16:48:21.601"></status>
</kw>
<status endtime="20170824 16:48:21.652" status="PASS" starttime="20170824 16:48:21.601"></status>
</kw>
<status endtime="20170824 16:48:21.652" status="PASS" starttime="20170824 16:48:05.620"></status>
</kw>
<status endtime="20170824 16:48:21.653" status="PASS" starttime="20170824 16:48:05.617"></status>
</kw>
<status endtime="20170824 16:48:21.653" status="PASS" starttime="20170824 16:48:05.617"></status>
</kw>
<status endtime="20170824 16:48:21.653" status="PASS" starttime="20170824 16:48:05.617"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key U">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw library="SSHLibrary" name="Close All Connections">
<doc>Closes all open connections.</doc>
<status endtime="20170824 16:48:21.664" status="PASS" starttime="20170824 16:48:21.664"></status>
</kw>
<status endtime="20170824 16:48:21.664" status="PASS" starttime="20170824 16:48:21.653"></status>
</kw>
<status endtime="20170824 16:48:21.665" status="PASS" starttime="20170824 16:48:05.616"></status>
</kw>
<status endtime="20170824 16:48:21.665" status="PASS" starttime="20170824 16:48:02.191"></status>
</kw>
<status endtime="20170824 16:48:21.665" status="PASS" starttime="20170824 16:48:02.190"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<kw library="state_manager" name="Recover Quiesced Host">
<doc>Recover host from quisced state.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is Host Quiesced</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:48:21.671" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:48:21.672" status="PASS" starttime="20170824 16:48:21.670"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:48:21.672" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:48:21.672" status="PASS" starttime="20170824 16:48:21.672"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:48:21.673" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:48:21.673" status="PASS" starttime="20170824 16:48:21.673"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:48:21.674" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:48:21.674" status="PASS" starttime="20170824 16:48:21.673"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:48:21.866" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:48:21.866" status="PASS" starttime="20170824 16:48:21.674"></status>
</kw>
<msg timestamp="20170824 16:48:21.866" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:48:21.866" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:21.866" status="PASS" starttime="20170824 16:48:21.674"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:48:21.867" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:21.867" status="PASS" starttime="20170824 16:48:21.866"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:48:21.867" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:21.867" status="PASS" starttime="20170824 16:48:21.867"></status>
</kw>
<status endtime="20170824 16:48:21.868" status="PASS" starttime="20170824 16:48:21.670"></status>
</kw>
<status endtime="20170824 16:48:21.868" status="PASS" starttime="20170824 16:48:21.669"></status>
</kw>
<status endtime="20170824 16:48:21.868" status="PASS" starttime="20170824 16:48:21.669"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:48:21.868" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:48:21.868" status="PASS" starttime="20170824 16:48:21.868"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:48:21.871" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:48:21.871" status="PASS" starttime="20170824 16:48:21.870"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:48:21.872" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:48:21.872" status="PASS" starttime="20170824 16:48:21.871"></status>
</kw>
<status endtime="20170824 16:48:21.872" status="PASS" starttime="20170824 16:48:21.871"></status>
</kw>
<status endtime="20170824 16:48:21.872" status="PASS" starttime="20170824 16:48:21.869"></status>
</kw>
<status endtime="20170824 16:48:21.872" status="PASS" starttime="20170824 16:48:21.869"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:48:21.962" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:48:21.962" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:21.962" status="PASS" starttime="20170824 16:48:21.872"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:48:21.964" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:48:21.964" status="PASS" starttime="20170824 16:48:21.964"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:48:21.965" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:48:21.965" status="PASS" starttime="20170824 16:48:21.965"></status>
</kw>
<status endtime="20170824 16:48:21.965" status="PASS" starttime="20170824 16:48:21.964"></status>
</kw>
<status endtime="20170824 16:48:21.966" status="PASS" starttime="20170824 16:48:21.963"></status>
</kw>
<status endtime="20170824 16:48:21.966" status="PASS" starttime="20170824 16:48:21.963"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:48:21.966" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:48:21.966" status="PASS" starttime="20170824 16:48:21.966"></status>
</kw>
<msg timestamp="20170824 16:48:21.966" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:21.966" status="PASS" starttime="20170824 16:48:21.668"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:48:21.967" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:21.967" status="PASS" starttime="20170824 16:48:21.967"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:48:21.968" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:48:21.968" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:48:21.968" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170824 16:48:21.968" status="PASS" starttime="20170824 16:48:21.967"></status>
</kw>
<msg timestamp="20170824 16:48:21.968" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170824 16:48:21.968" status="PASS" starttime="20170824 16:48:21.667"></status>
</kw>
<msg timestamp="20170824 16:48:21.968" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170824 16:48:21.968" status="PASS" starttime="20170824 16:48:21.667"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<status endtime="20170824 16:48:21.969" status="PASS" starttime="20170824 16:48:21.969"></status>
</kw>
<msg timestamp="20170824 16:48:21.970" level="INFO">${status} = True</msg>
<status endtime="20170824 16:48:21.970" status="PASS" starttime="20170824 16:48:21.969"></status>
</kw>
<status endtime="20170824 16:48:21.970" status="PASS" starttime="20170824 16:48:21.667"></status>
</kw>
<msg timestamp="20170824 16:48:21.970" level="INFO">${resp} = True</msg>
<status endtime="20170824 16:48:21.970" status="PASS" starttime="20170824 16:48:21.666"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${resp}' == 'True'</arg>
<arg>Run Keywords</arg>
<arg>Initiate Host PowerOff</arg>
<arg>AND</arg>
<arg>Log</arg>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Initiate Host PowerOff</arg>
<arg>AND</arg>
<arg>Log</arg>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170824 16:48:21.972" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status endtime="20170824 16:48:21.972" status="PASS" starttime="20170824 16:48:21.972"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:48:21.973" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170824 16:48:21.973" status="PASS" starttime="20170824 16:48:21.973"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:48:21.976" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:48:21.977" status="PASS" starttime="20170824 16:48:21.976"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:48:21.977" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:48:21.977" status="PASS" starttime="20170824 16:48:21.977"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:48:21.978" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:48:21.978" status="PASS" starttime="20170824 16:48:21.978"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:48:21.979" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:48:21.979" status="PASS" starttime="20170824 16:48:21.978"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:48:22.162" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:48:22.162" status="PASS" starttime="20170824 16:48:21.979"></status>
</kw>
<msg timestamp="20170824 16:48:22.162" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:48:22.162" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:22.162" status="PASS" starttime="20170824 16:48:21.979"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:48:22.163" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:22.163" status="PASS" starttime="20170824 16:48:22.162"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:48:22.163" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:22.163" status="PASS" starttime="20170824 16:48:22.163"></status>
</kw>
<status endtime="20170824 16:48:22.163" status="PASS" starttime="20170824 16:48:21.975"></status>
</kw>
<status endtime="20170824 16:48:22.164" status="PASS" starttime="20170824 16:48:21.975"></status>
</kw>
<status endtime="20170824 16:48:22.164" status="PASS" starttime="20170824 16:48:21.974"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:48:22.164" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170824 16:48:22.164" status="PASS" starttime="20170824 16:48:22.164"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:48:22.165" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:48:22.165" status="PASS" starttime="20170824 16:48:22.165"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170824 16:48:22.165" status="PASS" starttime="20170824 16:48:22.165"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:48:22.167" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status endtime="20170824 16:48:22.167" status="PASS" starttime="20170824 16:48:22.166"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:48:22.168" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170824 16:48:22.168" status="PASS" starttime="20170824 16:48:22.168"></status>
</kw>
<status endtime="20170824 16:48:22.168" status="PASS" starttime="20170824 16:48:22.167"></status>
</kw>
<status endtime="20170824 16:48:22.168" status="PASS" starttime="20170824 16:48:22.166"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:48:22.739" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170824 16:48:22.739" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:22.739" status="PASS" starttime="20170824 16:48:22.169"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:48:22.740" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:48:22.740" status="PASS" starttime="20170824 16:48:22.740"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:48:22.741" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:48:22.742" status="PASS" starttime="20170824 16:48:22.741"></status>
</kw>
<status endtime="20170824 16:48:22.742" status="PASS" starttime="20170824 16:48:22.740"></status>
</kw>
<status endtime="20170824 16:48:22.742" status="PASS" starttime="20170824 16:48:22.739"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:48:22.742" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:48:22.742" status="PASS" starttime="20170824 16:48:22.742"></status>
</kw>
<msg timestamp="20170824 16:48:22.743" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:22.743" status="PASS" starttime="20170824 16:48:21.973"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:48:22.743" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:22.743" status="PASS" starttime="20170824 16:48:22.743"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170824 16:48:22.744" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:48:22.744" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:48:22.744" level="INFO">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': None}</msg>
<status endtime="20170824 16:48:22.744" status="PASS" starttime="20170824 16:48:22.744"></status>
</kw>
<status endtime="20170824 16:48:22.744" status="PASS" starttime="20170824 16:48:21.972"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170824 16:48:22.745" status="PASS" starttime="20170824 16:48:22.744"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Wait For PowerOff</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Wait For PowerOff">
<doc>Wait for power off state.</doc>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:48:22.750" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:48:22.751" status="PASS" starttime="20170824 16:48:22.750"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:48:22.752" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:48:22.752" status="PASS" starttime="20170824 16:48:22.751"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:48:22.752" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:48:22.752" status="PASS" starttime="20170824 16:48:22.752"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:48:22.753" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:48:22.753" status="PASS" starttime="20170824 16:48:22.753"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:48:23.957" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:48:23.957" status="PASS" starttime="20170824 16:48:22.754"></status>
</kw>
<msg timestamp="20170824 16:48:23.957" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:48:23.957" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:23.957" status="PASS" starttime="20170824 16:48:22.753"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:48:23.958" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:23.959" status="PASS" starttime="20170824 16:48:23.958"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:48:23.960" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:23.960" status="PASS" starttime="20170824 16:48:23.959"></status>
</kw>
<status endtime="20170824 16:48:23.960" status="PASS" starttime="20170824 16:48:22.749"></status>
</kw>
<status endtime="20170824 16:48:23.960" status="PASS" starttime="20170824 16:48:22.749"></status>
</kw>
<status endtime="20170824 16:48:23.960" status="PASS" starttime="20170824 16:48:22.748"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:48:23.961" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:48:23.961" status="PASS" starttime="20170824 16:48:23.961"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:48:23.963" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:48:23.963" status="PASS" starttime="20170824 16:48:23.962"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:48:23.964" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:48:23.964" status="PASS" starttime="20170824 16:48:23.964"></status>
</kw>
<status endtime="20170824 16:48:23.964" status="PASS" starttime="20170824 16:48:23.963"></status>
</kw>
<status endtime="20170824 16:48:23.964" status="PASS" starttime="20170824 16:48:23.962"></status>
</kw>
<status endtime="20170824 16:48:23.965" status="PASS" starttime="20170824 16:48:23.961"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:48:29.292" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:48:29.292" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:29.292" status="PASS" starttime="20170824 16:48:23.965"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:48:29.294" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:48:29.294" status="PASS" starttime="20170824 16:48:29.293"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:48:29.295" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:48:29.295" status="PASS" starttime="20170824 16:48:29.295"></status>
</kw>
<status endtime="20170824 16:48:29.295" status="PASS" starttime="20170824 16:48:29.294"></status>
</kw>
<status endtime="20170824 16:48:29.295" status="PASS" starttime="20170824 16:48:29.293"></status>
</kw>
<status endtime="20170824 16:48:29.295" status="PASS" starttime="20170824 16:48:29.292"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:48:29.296" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:48:29.296" status="PASS" starttime="20170824 16:48:29.296"></status>
</kw>
<msg timestamp="20170824 16:48:29.296" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:29.296" status="PASS" starttime="20170824 16:48:22.748"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:48:29.297" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:29.297" status="PASS" starttime="20170824 16:48:29.296"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:48:29.297" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:48:29.297" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:48:29.297" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170824 16:48:29.297" status="PASS" starttime="20170824 16:48:29.297"></status>
</kw>
<msg timestamp="20170824 16:48:29.298" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170824 16:48:29.298" status="PASS" starttime="20170824 16:48:22.747"></status>
</kw>
<msg timestamp="20170824 16:48:29.298" level="INFO">${power_state} = On</msg>
<status endtime="20170824 16:48:29.298" status="PASS" starttime="20170824 16:48:22.747"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170824 16:48:29.299" level="FAIL">Off != On</msg>
<status endtime="20170824 16:48:29.299" status="FAIL" starttime="20170824 16:48:29.298"></status>
</kw>
<status endtime="20170824 16:48:29.299" status="FAIL" starttime="20170824 16:48:22.746"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:48:29.303" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:48:29.304" status="PASS" starttime="20170824 16:48:29.303"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:48:29.304" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:48:29.304" status="PASS" starttime="20170824 16:48:29.304"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:48:29.305" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:48:29.305" status="PASS" starttime="20170824 16:48:29.305"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:48:29.306" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:48:29.306" status="PASS" starttime="20170824 16:48:29.305"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:48:29.747" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:48:29.747" status="PASS" starttime="20170824 16:48:29.306"></status>
</kw>
<msg timestamp="20170824 16:48:29.747" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:48:29.747" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:29.747" status="PASS" starttime="20170824 16:48:29.306"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:48:29.748" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:29.748" status="PASS" starttime="20170824 16:48:29.747"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:48:29.748" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:29.749" status="PASS" starttime="20170824 16:48:29.748"></status>
</kw>
<status endtime="20170824 16:48:29.749" status="PASS" starttime="20170824 16:48:29.302"></status>
</kw>
<status endtime="20170824 16:48:29.749" status="PASS" starttime="20170824 16:48:29.302"></status>
</kw>
<status endtime="20170824 16:48:29.749" status="PASS" starttime="20170824 16:48:29.301"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:48:29.750" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:48:29.750" status="PASS" starttime="20170824 16:48:29.749"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:48:29.752" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:48:29.752" status="PASS" starttime="20170824 16:48:29.752"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:48:29.753" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:48:29.753" status="PASS" starttime="20170824 16:48:29.753"></status>
</kw>
<status endtime="20170824 16:48:29.754" status="PASS" starttime="20170824 16:48:29.752"></status>
</kw>
<status endtime="20170824 16:48:29.754" status="PASS" starttime="20170824 16:48:29.751"></status>
</kw>
<status endtime="20170824 16:48:29.754" status="PASS" starttime="20170824 16:48:29.750"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:48:31.550" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:48:31.550" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:31.550" status="PASS" starttime="20170824 16:48:29.754"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:48:31.552" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:48:31.553" status="PASS" starttime="20170824 16:48:31.552"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:48:31.553" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:48:31.554" status="PASS" starttime="20170824 16:48:31.553"></status>
</kw>
<status endtime="20170824 16:48:31.554" status="PASS" starttime="20170824 16:48:31.553"></status>
</kw>
<status endtime="20170824 16:48:31.554" status="PASS" starttime="20170824 16:48:31.551"></status>
</kw>
<status endtime="20170824 16:48:31.554" status="PASS" starttime="20170824 16:48:31.550"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:48:31.554" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:48:31.554" status="PASS" starttime="20170824 16:48:31.554"></status>
</kw>
<msg timestamp="20170824 16:48:31.555" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:31.555" status="PASS" starttime="20170824 16:48:29.300"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:48:31.555" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:31.555" status="PASS" starttime="20170824 16:48:31.555"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:48:31.556" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:48:31.556" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:48:31.556" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170824 16:48:31.556" status="PASS" starttime="20170824 16:48:31.555"></status>
</kw>
<msg timestamp="20170824 16:48:31.556" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170824 16:48:31.556" status="PASS" starttime="20170824 16:48:29.300"></status>
</kw>
<msg timestamp="20170824 16:48:31.557" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170824 16:48:31.557" status="PASS" starttime="20170824 16:48:29.299"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170824 16:48:31.557" level="FAIL">Off != Quiesced</msg>
<status endtime="20170824 16:48:31.557" status="FAIL" starttime="20170824 16:48:31.557"></status>
</kw>
<status endtime="20170824 16:48:31.558" status="FAIL" starttime="20170824 16:48:22.746"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:48:41.563" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:48:41.563" status="PASS" starttime="20170824 16:48:41.563"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:48:41.564" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:48:41.564" status="PASS" starttime="20170824 16:48:41.564"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:48:41.565" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:48:41.565" status="PASS" starttime="20170824 16:48:41.564"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:48:41.565" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:48:41.565" status="PASS" starttime="20170824 16:48:41.565"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:48:41.755" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:48:41.755" status="PASS" starttime="20170824 16:48:41.566"></status>
</kw>
<msg timestamp="20170824 16:48:41.755" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:48:41.755" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:41.755" status="PASS" starttime="20170824 16:48:41.566"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:48:41.756" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:41.756" status="PASS" starttime="20170824 16:48:41.755"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:48:41.756" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:41.757" status="PASS" starttime="20170824 16:48:41.756"></status>
</kw>
<status endtime="20170824 16:48:41.757" status="PASS" starttime="20170824 16:48:41.562"></status>
</kw>
<status endtime="20170824 16:48:41.757" status="PASS" starttime="20170824 16:48:41.562"></status>
</kw>
<status endtime="20170824 16:48:41.757" status="PASS" starttime="20170824 16:48:41.561"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:48:41.757" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170824 16:48:41.758" status="PASS" starttime="20170824 16:48:41.757"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:48:41.760" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:48:41.760" status="PASS" starttime="20170824 16:48:41.759"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:48:41.761" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170824 16:48:41.761" status="PASS" starttime="20170824 16:48:41.760"></status>
</kw>
<status endtime="20170824 16:48:41.761" status="PASS" starttime="20170824 16:48:41.760"></status>
</kw>
<status endtime="20170824 16:48:41.761" status="PASS" starttime="20170824 16:48:41.758"></status>
</kw>
<status endtime="20170824 16:48:41.761" status="PASS" starttime="20170824 16:48:41.758"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:48:41.825" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170824 16:48:41.825" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:41.825" status="PASS" starttime="20170824 16:48:41.761"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:48:41.827" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:48:41.827" status="PASS" starttime="20170824 16:48:41.827"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:48:41.828" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:48:41.828" status="PASS" starttime="20170824 16:48:41.828"></status>
</kw>
<status endtime="20170824 16:48:41.828" status="PASS" starttime="20170824 16:48:41.827"></status>
</kw>
<status endtime="20170824 16:48:41.828" status="PASS" starttime="20170824 16:48:41.826"></status>
</kw>
<status endtime="20170824 16:48:41.829" status="PASS" starttime="20170824 16:48:41.826"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:48:41.829" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:48:41.829" status="PASS" starttime="20170824 16:48:41.829"></status>
</kw>
<msg timestamp="20170824 16:48:41.829" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:41.829" status="PASS" starttime="20170824 16:48:41.560"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:48:41.830" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:41.830" status="PASS" starttime="20170824 16:48:41.830"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:48:41.831" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:48:41.831" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:48:41.831" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170824 16:48:41.831" status="PASS" starttime="20170824 16:48:41.830"></status>
</kw>
<msg timestamp="20170824 16:48:41.831" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170824 16:48:41.831" status="PASS" starttime="20170824 16:48:41.560"></status>
</kw>
<msg timestamp="20170824 16:48:41.831" level="INFO">${power_state} = Off</msg>
<status endtime="20170824 16:48:41.831" status="PASS" starttime="20170824 16:48:41.559"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170824 16:48:41.832" status="PASS" starttime="20170824 16:48:41.832"></status>
</kw>
<status endtime="20170824 16:48:41.832" status="PASS" starttime="20170824 16:48:41.559"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170824 16:48:41.836" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170824 16:48:41.836" status="PASS" starttime="20170824 16:48:41.835"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170824 16:48:41.837" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170824 16:48:41.837" status="PASS" starttime="20170824 16:48:41.837"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170824 16:48:41.838" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170824 16:48:41.838" status="PASS" starttime="20170824 16:48:41.837"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170824 16:48:41.838" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170824 16:48:41.838" status="PASS" starttime="20170824 16:48:41.838"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170824 16:48:42.028" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170824 16:48:42.029" status="PASS" starttime="20170824 16:48:41.839"></status>
</kw>
<msg timestamp="20170824 16:48:42.029" level="INFO">${status} = PASS</msg>
<msg timestamp="20170824 16:48:42.029" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:42.029" status="PASS" starttime="20170824 16:48:41.839"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170824 16:48:42.030" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:42.030" status="PASS" starttime="20170824 16:48:42.030"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:48:42.031" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:42.031" status="PASS" starttime="20170824 16:48:42.031"></status>
</kw>
<status endtime="20170824 16:48:42.031" status="PASS" starttime="20170824 16:48:41.835"></status>
</kw>
<status endtime="20170824 16:48:42.032" status="PASS" starttime="20170824 16:48:41.834"></status>
</kw>
<status endtime="20170824 16:48:42.032" status="PASS" starttime="20170824 16:48:41.834"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170824 16:48:42.033" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170824 16:48:42.033" status="PASS" starttime="20170824 16:48:42.032"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:48:42.036" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:48:42.036" status="PASS" starttime="20170824 16:48:42.035"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:48:42.037" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170824 16:48:42.037" status="PASS" starttime="20170824 16:48:42.037"></status>
</kw>
<status endtime="20170824 16:48:42.037" status="PASS" starttime="20170824 16:48:42.036"></status>
</kw>
<status endtime="20170824 16:48:42.037" status="PASS" starttime="20170824 16:48:42.034"></status>
</kw>
<status endtime="20170824 16:48:42.038" status="PASS" starttime="20170824 16:48:42.033"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170824 16:48:42.141" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170824 16:48:42.141" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:42.141" status="PASS" starttime="20170824 16:48:42.038"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170824 16:48:42.143" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:48:42.143" status="PASS" starttime="20170824 16:48:42.143"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170824 16:48:42.144" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170824 16:48:42.144" status="PASS" starttime="20170824 16:48:42.144"></status>
</kw>
<status endtime="20170824 16:48:42.144" status="PASS" starttime="20170824 16:48:42.143"></status>
</kw>
<status endtime="20170824 16:48:42.145" status="PASS" starttime="20170824 16:48:42.142"></status>
</kw>
<status endtime="20170824 16:48:42.145" status="PASS" starttime="20170824 16:48:42.142"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170824 16:48:42.145" level="INFO">Delete All Sessions</msg>
<status endtime="20170824 16:48:42.145" status="PASS" starttime="20170824 16:48:42.145"></status>
</kw>
<msg timestamp="20170824 16:48:42.145" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170824 16:48:42.145" status="PASS" starttime="20170824 16:48:41.833"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170824 16:48:42.146" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170824 16:48:42.146" status="PASS" starttime="20170824 16:48:42.146"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170824 16:48:42.147" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170824 16:48:42.147" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170824 16:48:42.147" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status endtime="20170824 16:48:42.147" status="PASS" starttime="20170824 16:48:42.147"></status>
</kw>
<msg timestamp="20170824 16:48:42.148" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170824 16:48:42.148" status="PASS" starttime="20170824 16:48:41.833"></status>
</kw>
<msg timestamp="20170824 16:48:42.148" level="INFO">${host_state} = Off</msg>
<status endtime="20170824 16:48:42.148" status="PASS" starttime="20170824 16:48:41.832"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170824 16:48:42.149" status="PASS" starttime="20170824 16:48:42.149"></status>
</kw>
<status endtime="20170824 16:48:42.149" status="PASS" starttime="20170824 16:48:41.558"></status>
</kw>
<status endtime="20170824 16:48:42.149" status="PASS" starttime="20170824 16:48:22.746"></status>
</kw>
<status endtime="20170824 16:48:42.150" status="PASS" starttime="20170824 16:48:22.745"></status>
</kw>
<msg timestamp="20170824 16:48:42.150" level="INFO">${status} = True</msg>
<status endtime="20170824 16:48:42.150" status="PASS" starttime="20170824 16:48:22.745"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Hard Power Off</arg>
</arguments>
<status endtime="20170824 16:48:42.151" status="PASS" starttime="20170824 16:48:42.150"></status>
</kw>
<status endtime="20170824 16:48:42.151" status="PASS" starttime="20170824 16:48:21.971"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<msg timestamp="20170824 16:48:42.151" level="INFO">HOST is recovered from quiesced state</msg>
<status endtime="20170824 16:48:42.152" status="PASS" starttime="20170824 16:48:42.151"></status>
</kw>
<status endtime="20170824 16:48:42.152" status="PASS" starttime="20170824 16:48:21.971"></status>
</kw>
<status endtime="20170824 16:48:42.152" status="PASS" starttime="20170824 16:48:21.970"></status>
</kw>
<status endtime="20170824 16:48:42.152" status="PASS" starttime="20170824 16:48:21.666"></status>
</kw>
<status endtime="20170824 16:48:42.152" status="PASS" starttime="20170824 16:48:21.665"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170824 16:48:42.164" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170824 16:48:42.164" status="PASS" starttime="20170824 16:48:42.153"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170824 16:48:42.164" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/70/obmc-robot/logs/20170824164805305919_TestsTestBasicPoweron/20170824164805305919_PowerOnTest/</msg>
<status endtime="20170824 16:48:42.164" status="PASS" starttime="20170824 16:48:42.164"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status endtime="20170824 16:48:42.165" status="PASS" starttime="20170824 16:48:42.165"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170824 16:48:42.166" status="PASS" starttime="20170824 16:48:42.165"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:42.166" level="INFO">Directory '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs"&gt;/tmp/fspcibld/70/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20170824 16:48:42.166" status="PASS" starttime="20170824 16:48:42.166"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:42.167" level="INFO">File '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20170824 16:48:42.167" status="PASS" starttime="20170824 16:48:42.167"></status>
</kw>
<msg timestamp="20170824 16:48:42.167" level="INFO">${exist} = True</msg>
<status endtime="20170824 16:48:42.167" status="PASS" starttime="20170824 16:48:42.167"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20170824 16:48:42.168" status="PASS" starttime="20170824 16:48:42.168"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170824 16:48:42.169" status="PASS" starttime="20170824 16:48:42.168"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170824 16:48:42.170" level="INFO">${cur_time} = 2017-08-24 16:48:42:169417</msg>
<status endtime="20170824 16:48:42.170" status="PASS" starttime="20170824 16:48:42.169"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170824 16:48:42.171" level="INFO">${cur_time} = 20170824164842169417</msg>
<status endtime="20170824 16:48:42.171" status="PASS" starttime="20170824 16:48:42.170"></status>
</kw>
<msg timestamp="20170824 16:48:42.171" level="INFO">${cur_time} = 20170824164842169417</msg>
<status endtime="20170824 16:48:42.171" status="PASS" starttime="20170824 16:48:42.169"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:42.172" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/70/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:42.172" status="PASS" starttime="20170824 16:48:42.171"></status>
</kw>
<status endtime="20170824 16:48:42.172" status="PASS" starttime="20170824 16:48:42.152"></status>
</kw>
<status endtime="20170824 16:48:42.172" status="PASS" starttime="20170824 16:48:01.830"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170824 16:48:42.174" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170824 16:48:42.174" status="PASS" starttime="20170824 16:48:42.174"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170824 16:48:42.175" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170824 16:48:42.175" status="PASS" starttime="20170824 16:48:42.174"></status>
</kw>
<msg timestamp="20170824 16:48:42.175" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170824 16:48:42.175" status="PASS" starttime="20170824 16:48:42.173"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170824 16:48:42.176" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170824 16:48:42.176" status="PASS" starttime="20170824 16:48:42.175"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170824 16:48:42.176" status="PASS" starttime="20170824 16:48:42.176"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170824 16:48:42.181" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170824 16:48:42.185" level="INFO">${rc} = 0</msg>
<msg timestamp="20170824 16:48:42.185" level="INFO">${output} = /tmp/fspcibld/70/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170824 16:48:42.185" status="PASS" starttime="20170824 16:48:42.177"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170824 16:48:42.189" status="PASS" starttime="20170824 16:48:42.188"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170824 16:48:42.191" status="PASS" starttime="20170824 16:48:42.190"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170824 16:48:42.192" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170824 16:48:42.192" status="PASS" starttime="20170824 16:48:42.191"></status>
</kw>
<msg timestamp="20170824 16:48:42.192" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170824 16:48:42.192" status="PASS" starttime="20170824 16:48:42.175"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170824 16:48:42.193" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170824 16:48:42.193" status="PASS" starttime="20170824 16:48:42.193"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170824 16:48:42.194" status="PASS" starttime="20170824 16:48:42.194"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170824 16:48:42.201" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170824 16:48:42.218" level="INFO">${rc} = 0</msg>
<msg timestamp="20170824 16:48:42.218" level="INFO">${os_con_pid} = </msg>
<status endtime="20170824 16:48:42.218" status="PASS" starttime="20170824 16:48:42.194"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170824 16:48:42.234" status="PASS" starttime="20170824 16:48:42.231"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170824 16:48:42.234" level="INFO">${cmd_buf} = kill -9 </msg>
<status endtime="20170824 16:48:42.234" status="PASS" starttime="20170824 16:48:42.234"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170824 16:48:42.238" status="PASS" starttime="20170824 16:48:42.237"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170824 16:48:42.239" level="INFO">${rc} = None</msg>
<msg timestamp="20170824 16:48:42.239" level="INFO">${output} = None</msg>
<status endtime="20170824 16:48:42.239" status="PASS" starttime="20170824 16:48:42.239"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170824 16:48:42.240" status="PASS" starttime="20170824 16:48:42.240"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg html="yes" timestamp="20170824 16:48:42.245" level="INFO">Copied file from '&lt;a href="file:///tmp/9.3.86.161_os_console"&gt;/tmp/9.3.86.161_os_console&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/70/obmc-robot/logs/9.3.86.161_os_console"&gt;/tmp/fspcibld/70/obmc-robot/logs/9.3.86.161_os_console&lt;/a&gt;'.</msg>
<status endtime="20170824 16:48:42.245" status="PASS" starttime="20170824 16:48:42.242"></status>
</kw>
<status endtime="20170824 16:48:42.245" status="PASS" starttime="20170824 16:48:42.241"></status>
</kw>
<status endtime="20170824 16:48:42.245" status="PASS" starttime="20170824 16:48:42.240"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170824 16:48:42.246" level="INFO">${output} = </msg>
<status endtime="20170824 16:48:42.246" status="PASS" starttime="20170824 16:48:42.245"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170824 16:48:42.246" level="INFO">${loc_quiet} = 1</msg>
<status endtime="20170824 16:48:42.246" status="PASS" starttime="20170824 16:48:42.246"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170824 16:48:42.306" status="PASS" starttime="20170824 16:48:42.247"></status>
</kw>
<msg timestamp="20170824 16:48:42.308" level="INFO">${rc} = 0</msg>
<msg timestamp="20170824 16:48:42.308" level="INFO">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 
</msg>
<status endtime="20170824 16:48:42.308" status="PASS" starttime="20170824 16:48:42.247"></status>
</kw>
<msg timestamp="20170824 16:48:42.309" level="INFO">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 
</msg>
<status endtime="20170824 16:48:42.309" status="PASS" starttime="20170824 16:48:42.172"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg timestamp="20170824 16:48:42.311" level="INFO">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 
</msg>
<status endtime="20170824 16:48:42.311" status="PASS" starttime="20170824 16:48:42.310"></status>
</kw>
<status endtime="20170824 16:48:42.311" status="PASS" starttime="20170824 16:48:01.829"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status endtime="20170824 16:48:42.311" status="FAIL" starttime="20170824 16:37:48.843" critical="yes">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: Running != Quiesced</status>
</test>
<doc>Test power on for HW CI.</doc>
<status endtime="20170824 16:48:42.313" status="FAIL" starttime="20170824 16:37:48.804"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status endtime="20170824 16:48:42.316" status="FAIL" starttime="20170824 16:37:42.606"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="1">Critical Tests</stat>
<stat fail="1" pass="1">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">chassisboot</stat>
<stat fail="1" pass="0">Power_On_Test</stat>
<stat fail="0" pass="1">Test_SSL_Connection</stat>
</tag>
<suite>
<stat fail="1" id="s1" pass="1" name="Tests">Tests</stat>
<stat fail="0" id="s1-s1" pass="1" name="Security">Tests.Security</stat>
<stat fail="0" id="s1-s1-s1" pass="1" name="Test Ssl">Tests.Security.Test Ssl</stat>
<stat fail="1" id="s1-s2" pass="0" name="Test Basic Poweron">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
