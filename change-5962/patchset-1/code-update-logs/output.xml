<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170812 20:44:56.501" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/update_bmc.robot" id="s1" name="Update Bmc">
<test id="s1-t1" name="Initiate Code Update BMC">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${LAST_KNOWN_GOOD_VERSION}' != '${EMPTY}'</arg>
<arg>Run Keyword And Return Status</arg>
<arg>Validate BMC Version</arg>
<arg>${LAST_KNOWN_GOOD_VERSION}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20170812 20:44:57.650" level="INFO">${status} = None</msg>
<status status="PASS" endtime="20170812 20:44:57.650" starttime="20170812 20:44:57.650"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>Pass Execution</arg>
<arg>The BMC already has the requested build loaded so no further action will be taken.</arg>
</arguments>
<status status="PASS" endtime="20170812 20:44:57.651" starttime="20170812 20:44:57.651"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${FORCE_UPDATE} == ${0}</arg>
<arg>Prepare BMC For Update</arg>
</arguments>
<kw name="Prepare BMC For Update">
<doc>Prerequisite operation before code update.</doc>
<kw name="Check Boot Count And Time">
<doc>Check for unexpected reboots.</doc>
<kw name="Set BMC Reset Reference Time" library="utils">
<doc>Set current boot time as a reference and increment</doc>
<kw name="Get BMC Boot Time" library="utils">
<doc>Get boot time from /proc/stat.</doc>
<assign>
<var>${cur_btime}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170812 20:44:57.655" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170812 20:44:57.655" starttime="20170812 20:44:57.655"></status>
</kw>
<msg timestamp="20170812 20:44:57.655" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170812 20:44:57.655" starttime="20170812 20:44:57.654"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:44:57.657" starttime="20170812 20:44:57.656"></status>
</kw>
<status status="PASS" endtime="20170812 20:44:57.657" starttime="20170812 20:44:57.656"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170812 20:44:57.657" starttime="20170812 20:44:57.657"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170812 20:44:57.658" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170812 20:44:57.659" starttime="20170812 20:44:57.658"></status>
</kw>
<msg timestamp="20170812 20:44:57.659" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170812 20:44:57.659" starttime="20170812 20:44:57.658"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:44:57.661" starttime="20170812 20:44:57.660"></status>
</kw>
<status status="PASS" endtime="20170812 20:44:57.661" starttime="20170812 20:44:57.660"></status>
</kw>
<status status="PASS" endtime="20170812 20:44:57.661" starttime="20170812 20:44:57.659"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170812 20:44:57.661" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170812 20:44:59.406" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170812 20:44:59.407" starttime="20170812 20:44:57.661"></status>
</kw>
<status status="PASS" endtime="20170812 20:44:59.407" starttime="20170812 20:44:57.654"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>egrep '^btime ' /proc/stat | cut -f 2 -d ' '</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170812 20:44:59.408" level="INFO">Executing command 'egrep '^btime ' /proc/stat | cut -f 2 -d ' ''.</msg>
<msg timestamp="20170812 20:44:59.496" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170812 20:44:59.497" level="INFO">${output} = 1500635611</msg>
<msg timestamp="20170812 20:44:59.497" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170812 20:44:59.497" starttime="20170812 20:44:59.407"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170812 20:44:59.497" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170812 20:44:59.497" starttime="20170812 20:44:59.497"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${btime}</var>
</assign>
<msg timestamp="20170812 20:44:59.498" level="INFO">${btime} = 1500635611</msg>
<status status="PASS" endtime="20170812 20:44:59.498" starttime="20170812 20:44:59.498"></status>
</kw>
<msg timestamp="20170812 20:44:59.498" level="INFO">${cur_btime} = 1500635611</msg>
<status status="PASS" endtime="20170812 20:44:59.498" starttime="20170812 20:44:57.653"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_TIME} == ${0} and ${BOOT_COUNT} == ${0}</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>ELSE IF</arg>
<arg>${cur_btime} &gt; ${BOOT_TIME}</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
</arguments>
<msg timestamp="20170812 20:44:59.500" level="INFO">${BOOT_TIME} = 1500635611</msg>
<status status="PASS" endtime="20170812 20:44:59.500" starttime="20170812 20:44:59.500"></status>
</kw>
<status status="PASS" endtime="20170812 20:44:59.500" starttime="20170812 20:44:59.499"></status>
</kw>
<status status="PASS" endtime="20170812 20:44:59.500" starttime="20170812 20:44:57.653"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Count: ${BOOT_COUNT}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:44:59.501" starttime="20170812 20:44:59.500"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Time: ${BOOT_TIME}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:44:59.502" starttime="20170812 20:44:59.501"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_COUNT} &gt; ${MAX_BOOT_COUNT}</arg>
<arg>Log</arg>
<arg>Phantom Reboot!!! Unexpected reboot detected</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20170812 20:44:59.503" starttime="20170812 20:44:59.502"></status>
</kw>
<status status="PASS" endtime="20170812 20:44:59.503" starttime="20170812 20:44:57.652"></status>
</kw>
<kw name="Prune Journal Log" library="utils">
<doc>Prune archived journal logs.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170812 20:44:59.505" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170812 20:44:59.505" starttime="20170812 20:44:59.505"></status>
</kw>
<msg timestamp="20170812 20:44:59.505" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170812 20:44:59.505" starttime="20170812 20:44:59.504"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:44:59.507" starttime="20170812 20:44:59.506"></status>
</kw>
<status status="PASS" endtime="20170812 20:44:59.507" starttime="20170812 20:44:59.506"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170812 20:44:59.507" starttime="20170812 20:44:59.507"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170812 20:44:59.508" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170812 20:44:59.508" starttime="20170812 20:44:59.508"></status>
</kw>
<msg timestamp="20170812 20:44:59.509" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170812 20:44:59.509" starttime="20170812 20:44:59.508"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:44:59.511" starttime="20170812 20:44:59.510"></status>
</kw>
<status status="PASS" endtime="20170812 20:44:59.511" starttime="20170812 20:44:59.510"></status>
</kw>
<status status="PASS" endtime="20170812 20:44:59.511" starttime="20170812 20:44:59.509"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170812 20:44:59.511" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170812 20:45:01.192" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170812 20:45:01.192" starttime="20170812 20:44:59.511"></status>
</kw>
<status status="PASS" endtime="20170812 20:45:01.193" starttime="20170812 20:44:59.503"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>journalctl --vacuum-size=${vacuum_size}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170812 20:45:01.193" level="INFO">Executing command 'journalctl --vacuum-size=1M'.</msg>
<msg timestamp="20170812 20:45:01.281" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170812 20:45:01.281" level="INFO">${output} = </msg>
<msg timestamp="20170812 20:45:01.281" level="INFO">${stderr} = Vacuuming done, freed 0B of archived journals from /run/log/journal/98da6a547f8141998b98e23f5894fd04.</msg>
<msg timestamp="20170812 20:45:01.281" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170812 20:45:01.281" starttime="20170812 20:45:01.193"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${stderr}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:45:01.282" starttime="20170812 20:45:01.281"></status>
</kw>
<status status="PASS" endtime="20170812 20:45:01.282" starttime="20170812 20:44:59.503"></status>
</kw>
<kw name="Power Off Request" library="state_manager">
<doc>Select appropriate poweroff keyword.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OBMC_STATES_VERSION}' == '${0}'</arg>
<arg>Initiate Power Off</arg>
<arg>ELSE</arg>
<arg>Initiate Host PowerOff</arg>
</arguments>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170812 20:45:01.284" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" endtime="20170812 20:45:01.284" starttime="20170812 20:45:01.284"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170812 20:45:01.286" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" endtime="20170812 20:45:01.286" starttime="20170812 20:45:01.285"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170812 20:45:01.289" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170812 20:45:01.289" starttime="20170812 20:45:01.288"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 20:45:01.290" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 20:45:01.290" starttime="20170812 20:45:01.290"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170812 20:45:01.291" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170812 20:45:01.291" starttime="20170812 20:45:01.290"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170812 20:45:01.292" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170812 20:45:01.292" starttime="20170812 20:45:01.291"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170812 20:45:01.531" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170812 20:45:01.532" starttime="20170812 20:45:01.293"></status>
</kw>
<msg timestamp="20170812 20:45:01.532" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 20:45:01.532" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:45:01.532" starttime="20170812 20:45:01.292"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170812 20:45:01.532" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:45:01.533" starttime="20170812 20:45:01.532"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 20:45:01.533" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:45:01.533" starttime="20170812 20:45:01.533"></status>
</kw>
<status status="PASS" endtime="20170812 20:45:01.533" starttime="20170812 20:45:01.288"></status>
</kw>
<status status="PASS" endtime="20170812 20:45:01.533" starttime="20170812 20:45:01.287"></status>
</kw>
<status status="PASS" endtime="20170812 20:45:01.534" starttime="20170812 20:45:01.287"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170812 20:45:01.534" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" endtime="20170812 20:45:01.534" starttime="20170812 20:45:01.534"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 20:45:01.535" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 20:45:01.535" starttime="20170812 20:45:01.534"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:45:01.535" starttime="20170812 20:45:01.535"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170812 20:45:01.537" level="INFO">${msg} = URI:https://9.41.166.169/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Ty...</msg>
<status status="PASS" endtime="20170812 20:45:01.537" starttime="20170812 20:45:01.536"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170812 20:45:01.538" level="INFO">URI:https://9.41.166.169/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170812 20:45:01.538" starttime="20170812 20:45:01.538"></status>
</kw>
<status status="PASS" endtime="20170812 20:45:01.538" starttime="20170812 20:45:01.537"></status>
</kw>
<status status="PASS" endtime="20170812 20:45:01.538" starttime="20170812 20:45:01.536"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170812 20:45:01.719" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170812 20:45:01.719" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:45:01.719" starttime="20170812 20:45:01.539"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170812 20:45:01.720" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170812 20:45:01.720" starttime="20170812 20:45:01.719"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170812 20:45:01.721" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170812 20:45:01.721" starttime="20170812 20:45:01.721"></status>
</kw>
<status status="PASS" endtime="20170812 20:45:01.721" starttime="20170812 20:45:01.720"></status>
</kw>
<status status="PASS" endtime="20170812 20:45:01.721" starttime="20170812 20:45:01.719"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170812 20:45:01.722" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170812 20:45:01.722" starttime="20170812 20:45:01.722"></status>
</kw>
<msg timestamp="20170812 20:45:01.722" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:45:01.722" starttime="20170812 20:45:01.286"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 20:45:01.723" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:45:01.723" starttime="20170812 20:45:01.723"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170812 20:45:01.724" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170812 20:45:01.724" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170812 20:45:01.724" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170812 20:45:01.724" starttime="20170812 20:45:01.723"></status>
</kw>
<status status="PASS" endtime="20170812 20:45:01.724" starttime="20170812 20:45:01.285"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" endtime="20170812 20:45:01.725" starttime="20170812 20:45:01.724"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170812 20:45:01.730" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170812 20:45:01.730" starttime="20170812 20:45:01.730"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 20:45:01.731" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 20:45:01.731" starttime="20170812 20:45:01.731"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170812 20:45:01.732" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170812 20:45:01.732" starttime="20170812 20:45:01.732"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170812 20:45:01.733" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170812 20:45:01.733" starttime="20170812 20:45:01.732"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170812 20:45:02.128" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170812 20:45:02.128" starttime="20170812 20:45:01.733"></status>
</kw>
<msg timestamp="20170812 20:45:02.128" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 20:45:02.128" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:45:02.128" starttime="20170812 20:45:01.733"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170812 20:45:02.129" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:45:02.129" starttime="20170812 20:45:02.128"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 20:45:02.129" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:45:02.129" starttime="20170812 20:45:02.129"></status>
</kw>
<status status="PASS" endtime="20170812 20:45:02.129" starttime="20170812 20:45:01.729"></status>
</kw>
<status status="PASS" endtime="20170812 20:45:02.130" starttime="20170812 20:45:01.729"></status>
</kw>
<status status="PASS" endtime="20170812 20:45:02.130" starttime="20170812 20:45:01.728"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170812 20:45:02.130" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170812 20:45:02.130" starttime="20170812 20:45:02.130"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:45:02.131" starttime="20170812 20:45:02.131"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170812 20:45:02.203" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170812 20:45:02.204" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:45:02.204" starttime="20170812 20:45:02.131"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:45:02.204" starttime="20170812 20:45:02.204"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170812 20:45:02.205" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170812 20:45:02.205" starttime="20170812 20:45:02.205"></status>
</kw>
<msg timestamp="20170812 20:45:02.205" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:45:02.205" starttime="20170812 20:45:01.727"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 20:45:02.206" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:45:02.206" starttime="20170812 20:45:02.205"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170812 20:45:02.206" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170812 20:45:02.206" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170812 20:45:02.206" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170812 20:45:02.206" starttime="20170812 20:45:02.206"></status>
</kw>
<msg timestamp="20170812 20:45:02.207" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170812 20:45:02.207" starttime="20170812 20:45:01.727"></status>
</kw>
<msg timestamp="20170812 20:45:02.207" level="INFO">${power_state} = Off</msg>
<status status="PASS" endtime="20170812 20:45:02.207" starttime="20170812 20:45:01.726"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:45:02.208" starttime="20170812 20:45:02.207"></status>
</kw>
<status status="PASS" endtime="20170812 20:45:02.208" starttime="20170812 20:45:01.726"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170812 20:45:02.212" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170812 20:45:02.212" starttime="20170812 20:45:02.212"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 20:45:02.213" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 20:45:02.213" starttime="20170812 20:45:02.212"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170812 20:45:02.213" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170812 20:45:02.213" starttime="20170812 20:45:02.213"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170812 20:45:02.214" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170812 20:45:02.214" starttime="20170812 20:45:02.214"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170812 20:45:02.721" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170812 20:45:02.721" starttime="20170812 20:45:02.215"></status>
</kw>
<msg timestamp="20170812 20:45:02.722" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 20:45:02.722" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:45:02.722" starttime="20170812 20:45:02.214"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170812 20:45:02.722" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:45:02.722" starttime="20170812 20:45:02.722"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 20:45:02.723" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:45:02.723" starttime="20170812 20:45:02.723"></status>
</kw>
<status status="PASS" endtime="20170812 20:45:02.723" starttime="20170812 20:45:02.211"></status>
</kw>
<status status="PASS" endtime="20170812 20:45:02.723" starttime="20170812 20:45:02.211"></status>
</kw>
<status status="PASS" endtime="20170812 20:45:02.723" starttime="20170812 20:45:02.210"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170812 20:45:02.724" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170812 20:45:02.724" starttime="20170812 20:45:02.724"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:45:02.725" starttime="20170812 20:45:02.724"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170812 20:45:02.968" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170812 20:45:02.968" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:45:02.968" starttime="20170812 20:45:02.725"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:45:02.969" starttime="20170812 20:45:02.968"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170812 20:45:02.969" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170812 20:45:02.969" starttime="20170812 20:45:02.969"></status>
</kw>
<msg timestamp="20170812 20:45:02.969" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:45:02.969" starttime="20170812 20:45:02.209"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 20:45:02.970" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:45:02.970" starttime="20170812 20:45:02.970"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170812 20:45:02.971" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170812 20:45:02.971" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170812 20:45:02.971" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170812 20:45:02.971" starttime="20170812 20:45:02.970"></status>
</kw>
<msg timestamp="20170812 20:45:02.971" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170812 20:45:02.971" starttime="20170812 20:45:02.208"></status>
</kw>
<msg timestamp="20170812 20:45:02.971" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170812 20:45:02.972" starttime="20170812 20:45:02.208"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:45:02.972" starttime="20170812 20:45:02.972"></status>
</kw>
<status status="PASS" endtime="20170812 20:45:02.972" starttime="20170812 20:45:01.725"></status>
</kw>
<status status="PASS" endtime="20170812 20:45:02.972" starttime="20170812 20:45:01.725"></status>
</kw>
<status status="PASS" endtime="20170812 20:45:02.972" starttime="20170812 20:45:01.283"></status>
</kw>
<status status="PASS" endtime="20170812 20:45:02.972" starttime="20170812 20:45:01.283"></status>
</kw>
<status status="PASS" endtime="20170812 20:45:02.973" starttime="20170812 20:45:01.282"></status>
</kw>
<kw name="Set Policy Setting" library="code_update_utils">
<doc>Set the given test policy</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170812 20:45:02.974" level="INFO">${valueDict} = {u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170812 20:45:02.974" starttime="20170812 20:45:02.973"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170812 20:45:02.975" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20170812 20:45:02.975" starttime="20170812 20:45:02.974"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170812 20:45:02.979" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170812 20:45:02.980" starttime="20170812 20:45:02.979"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 20:45:02.981" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 20:45:02.981" starttime="20170812 20:45:02.981"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170812 20:45:02.982" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170812 20:45:02.982" starttime="20170812 20:45:02.982"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170812 20:45:02.983" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170812 20:45:02.983" starttime="20170812 20:45:02.983"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170812 20:45:03.263" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170812 20:45:03.264" starttime="20170812 20:45:02.984"></status>
</kw>
<msg timestamp="20170812 20:45:03.264" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 20:45:03.264" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:45:03.264" starttime="20170812 20:45:02.984"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170812 20:45:03.264" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:45:03.265" starttime="20170812 20:45:03.264"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 20:45:03.265" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:45:03.265" starttime="20170812 20:45:03.265"></status>
</kw>
<status status="PASS" endtime="20170812 20:45:03.265" starttime="20170812 20:45:02.978"></status>
</kw>
<status status="PASS" endtime="20170812 20:45:03.265" starttime="20170812 20:45:02.978"></status>
</kw>
<status status="PASS" endtime="20170812 20:45:03.266" starttime="20170812 20:45:02.976"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170812 20:45:03.266" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170812 20:45:03.266" starttime="20170812 20:45:03.266"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 20:45:03.267" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 20:45:03.267" starttime="20170812 20:45:03.266"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:45:03.267" starttime="20170812 20:45:03.267"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170812 20:45:03.269" level="INFO">${msg} = URI:https://9.41.166.169/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170812 20:45:03.269" starttime="20170812 20:45:03.268"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170812 20:45:03.270" level="INFO">URI:https://9.41.166.169/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170812 20:45:03.270" starttime="20170812 20:45:03.270"></status>
</kw>
<status status="PASS" endtime="20170812 20:45:03.270" starttime="20170812 20:45:03.269"></status>
</kw>
<status status="PASS" endtime="20170812 20:45:03.270" starttime="20170812 20:45:03.268"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170812 20:45:03.471" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170812 20:45:03.471" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:45:03.471" starttime="20170812 20:45:03.271"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170812 20:45:03.474" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170812 20:45:03.474" starttime="20170812 20:45:03.472"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170812 20:45:03.475" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170812 20:45:03.475" starttime="20170812 20:45:03.475"></status>
</kw>
<status status="PASS" endtime="20170812 20:45:03.475" starttime="20170812 20:45:03.474"></status>
</kw>
<status status="PASS" endtime="20170812 20:45:03.476" starttime="20170812 20:45:03.471"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170812 20:45:03.476" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170812 20:45:03.476" starttime="20170812 20:45:03.476"></status>
</kw>
<msg timestamp="20170812 20:45:03.477" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:45:03.477" starttime="20170812 20:45:02.975"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 20:45:03.477" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:45:03.477" starttime="20170812 20:45:03.477"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170812 20:45:03.478" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170812 20:45:03.478" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170812 20:45:03.478" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170812 20:45:03.478" starttime="20170812 20:45:03.478"></status>
</kw>
<status status="PASS" endtime="20170812 20:45:03.478" starttime="20170812 20:45:02.974"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170812 20:45:03.482" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170812 20:45:03.482" starttime="20170812 20:45:03.481"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 20:45:03.483" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 20:45:03.483" starttime="20170812 20:45:03.482"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170812 20:45:03.484" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170812 20:45:03.484" starttime="20170812 20:45:03.483"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170812 20:45:03.484" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170812 20:45:03.484" starttime="20170812 20:45:03.484"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170812 20:45:03.669" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170812 20:45:03.669" starttime="20170812 20:45:03.485"></status>
</kw>
<msg timestamp="20170812 20:45:03.669" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 20:45:03.669" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:45:03.669" starttime="20170812 20:45:03.485"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170812 20:45:03.670" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:45:03.670" starttime="20170812 20:45:03.670"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 20:45:03.671" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:45:03.671" starttime="20170812 20:45:03.670"></status>
</kw>
<status status="PASS" endtime="20170812 20:45:03.671" starttime="20170812 20:45:03.481"></status>
</kw>
<status status="PASS" endtime="20170812 20:45:03.671" starttime="20170812 20:45:03.480"></status>
</kw>
<status status="PASS" endtime="20170812 20:45:03.671" starttime="20170812 20:45:03.480"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170812 20:45:03.672" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170812 20:45:03.672" starttime="20170812 20:45:03.671"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:45:03.672" starttime="20170812 20:45:03.672"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170812 20:45:03.785" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None json=None</msg>
<msg timestamp="20170812 20:45:03.785" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:45:03.785" starttime="20170812 20:45:03.673"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:45:03.786" starttime="20170812 20:45:03.786"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170812 20:45:03.787" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170812 20:45:03.787" starttime="20170812 20:45:03.787"></status>
</kw>
<msg timestamp="20170812 20:45:03.787" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:45:03.787" starttime="20170812 20:45:03.479"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 20:45:03.788" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:45:03.788" starttime="20170812 20:45:03.788"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170812 20:45:03.789" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170812 20:45:03.789" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170812 20:45:03.790" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170812 20:45:03.790" starttime="20170812 20:45:03.789"></status>
</kw>
<msg timestamp="20170812 20:45:03.790" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20170812 20:45:03.790" starttime="20170812 20:45:03.478"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:45:03.791" starttime="20170812 20:45:03.791"></status>
</kw>
<status status="PASS" endtime="20170812 20:45:03.791" starttime="20170812 20:45:02.973"></status>
</kw>
<kw name="Prepare For Update" library="code_update_utils">
<doc>Switch to update mode in progress. This method calls</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170812 20:45:03.793" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20170812 20:45:03.793" starttime="20170812 20:45:03.792"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${BMC_PREP_METHOD}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170812 20:45:03.795" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170812 20:45:03.796" starttime="20170812 20:45:03.795"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 20:45:03.796" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 20:45:03.796" starttime="20170812 20:45:03.796"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170812 20:45:03.797" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170812 20:45:03.797" starttime="20170812 20:45:03.797"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170812 20:45:03.798" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170812 20:45:03.798" starttime="20170812 20:45:03.797"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170812 20:45:04.040" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170812 20:45:04.041" starttime="20170812 20:45:03.798"></status>
</kw>
<msg timestamp="20170812 20:45:04.041" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 20:45:04.041" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:45:04.041" starttime="20170812 20:45:03.798"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170812 20:45:04.041" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:45:04.042" starttime="20170812 20:45:04.041"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 20:45:04.042" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:45:04.042" starttime="20170812 20:45:04.042"></status>
</kw>
<status status="PASS" endtime="20170812 20:45:04.042" starttime="20170812 20:45:03.794"></status>
</kw>
<status status="PASS" endtime="20170812 20:45:04.042" starttime="20170812 20:45:03.794"></status>
</kw>
<status status="PASS" endtime="20170812 20:45:04.043" starttime="20170812 20:45:03.793"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170812 20:45:04.043" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/action/PrepareForUpdate</msg>
<status status="PASS" endtime="20170812 20:45:04.043" starttime="20170812 20:45:04.043"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 20:45:04.044" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 20:45:04.044" starttime="20170812 20:45:04.044"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:45:04.044" starttime="20170812 20:45:04.044"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:45:04.045" starttime="20170812 20:45:04.045"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170812 20:45:04.396" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/action/PrepareForUpdate, data={"data": []}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170812 20:45:04.396" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:45:04.396" starttime="20170812 20:45:04.045"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:45:04.397" starttime="20170812 20:45:04.396"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170812 20:45:04.397" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170812 20:45:04.397" starttime="20170812 20:45:04.397"></status>
</kw>
<msg timestamp="20170812 20:45:04.397" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:45:04.397" starttime="20170812 20:45:03.793"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 20:45:04.398" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:45:04.398" starttime="20170812 20:45:04.398"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
</arguments>
<msg timestamp="20170812 20:45:14.399" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20170812 20:45:14.399" starttime="20170812 20:45:04.398"></status>
</kw>
<status status="PASS" endtime="20170812 20:45:14.399" starttime="20170812 20:45:03.792"></status>
</kw>
<kw name="Check If BMC is Up" library="utils">
<doc>Wait for Host to be online. Checks every X seconds</doc>
<arguments>
<arg>20 min</arg>
<arg>10 sec</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${max_timeout}</arg>
<arg>${interval}</arg>
<arg>Verify Ping and REST Authentication</arg>
</arguments>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170812 20:45:14.402" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170812 20:45:14.402" starttime="20170812 20:45:14.402"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170812 20:45:14.406" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170812 20:45:17.411" level="INFO">${RC} = 0</msg>
<msg timestamp="20170812 20:45:17.411" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.714 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.531 ms
64 bytes from 9.41.166.16...</msg>
<status status="PASS" endtime="20170812 20:45:17.411" starttime="20170812 20:45:14.403"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170812 20:45:17.414" level="INFO">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.714 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.531 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.522 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=0.515 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.515/0.570/0.714/0.086 ms</msg>
<status status="PASS" endtime="20170812 20:45:17.414" starttime="20170812 20:45:17.413"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:45:17.415" starttime="20170812 20:45:17.414"></status>
</kw>
<status status="PASS" endtime="20170812 20:45:17.415" starttime="20170812 20:45:14.401"></status>
</kw>
<msg timestamp="20170812 20:45:17.415" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170812 20:45:17.415" starttime="20170812 20:45:14.401"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170812 20:45:17.416" starttime="20170812 20:45:17.415"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170812 20:45:17.419" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170812 20:45:17.420" starttime="20170812 20:45:17.418"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 20:45:17.420" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 20:45:17.420" starttime="20170812 20:45:17.420"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170812 20:45:17.421" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170812 20:45:17.421" starttime="20170812 20:45:17.421"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170812 20:45:17.422" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170812 20:45:17.422" starttime="20170812 20:45:17.421"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170812 20:45:18.254" level="FAIL">ConnectionError: ('Connection aborted.', error(104, 'Connection reset by peer'))</msg>
<status status="FAIL" endtime="20170812 20:45:18.254" starttime="20170812 20:45:17.423"></status>
</kw>
<msg timestamp="20170812 20:45:18.254" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170812 20:45:18.255" level="INFO">${resp} = ConnectionError: ('Connection aborted.', error(104, 'Connection reset by peer'))</msg>
<status status="PASS" endtime="20170812 20:45:18.255" starttime="20170812 20:45:17.422"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170812 20:45:18.255" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170812 20:45:18.255" level="FAIL">ConnectionError: ('Connection aborted.', error(104, 'Connection reset by peer')): FAIL != PASS</msg>
<status status="FAIL" endtime="20170812 20:45:18.256" starttime="20170812 20:45:18.255"></status>
</kw>
<status status="FAIL" endtime="20170812 20:45:18.256" starttime="20170812 20:45:17.418"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170812 20:45:38.258" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170812 20:45:38.258" starttime="20170812 20:45:38.257"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 20:45:38.259" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 20:45:38.259" starttime="20170812 20:45:38.258"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170812 20:45:38.260" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170812 20:45:38.260" starttime="20170812 20:45:38.259"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170812 20:45:38.260" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170812 20:45:38.260" starttime="20170812 20:45:38.260"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170812 20:45:56.289" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff805d0a90&gt;: Failed to establish a new connection: [Errno 113] No route to host',)': /login</msg>
<msg timestamp="20170812 20:45:59.489" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff805d0bd0&gt;: Failed to establish a new connection: [Errno 113] No route to host',)': /login</msg>
<msg timestamp="20170812 20:46:02.689" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff805d0d50&gt;: Failed to establish a new connection: [Errno 113] No route to host',)': /login</msg>
<msg timestamp="20170812 20:46:05.290" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.41.166.169', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff805d0e90&gt;: Failed to establish a new connection: [Errno 113] No route to host',))</msg>
<status status="FAIL" endtime="20170812 20:46:05.290" starttime="20170812 20:45:38.261"></status>
</kw>
<msg timestamp="20170812 20:46:05.291" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170812 20:46:05.291" level="INFO">${resp} = ConnectionError: HTTPSConnectionPool(host='9.41.166.169', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff80...</msg>
<status status="PASS" endtime="20170812 20:46:05.291" starttime="20170812 20:45:38.261"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170812 20:46:05.291" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170812 20:46:05.292" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.41.166.169', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff805d0e90&gt;: Failed to establish a new connection: [Errno 113] No route to host',)): FAIL != PASS</msg>
<status status="FAIL" endtime="20170812 20:46:05.292" starttime="20170812 20:46:05.291"></status>
</kw>
<status status="FAIL" endtime="20170812 20:46:05.292" starttime="20170812 20:45:38.256"></status>
</kw>
<msg timestamp="20170812 20:46:05.292" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ConnectionError: HTTPSConnectionPool(host='9.41.166.169', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff805d0e90&gt;: Failed to establish a new connection: [Errno 113] No route to host',)): FAIL != PASS</msg>
<status status="FAIL" endtime="20170812 20:46:05.292" starttime="20170812 20:45:17.417"></status>
</kw>
<status status="FAIL" endtime="20170812 20:46:05.292" starttime="20170812 20:45:17.417"></status>
</kw>
<msg timestamp="20170812 20:46:05.292" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20170812 20:46:05.292" starttime="20170812 20:45:17.416"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20170812 20:46:05.294" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20170812 20:46:05.294" starttime="20170812 20:46:05.293"></status>
</kw>
<status status="FAIL" endtime="20170812 20:46:05.294" starttime="20170812 20:46:05.293"></status>
</kw>
<status status="FAIL" endtime="20170812 20:46:05.294" starttime="20170812 20:45:14.401"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170812 20:46:15.297" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170812 20:46:15.297" starttime="20170812 20:46:15.297"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170812 20:46:15.322" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170812 20:46:21.338" level="INFO">${RC} = 1</msg>
<msg timestamp="20170812 20:46:21.338" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
From 9.41.165.94 icmp_seq=1 Destination Host Unreachable
From 9.41.165.94 icmp_seq=2 Destination Host Unreachable
From 9.41.165.94 icmp_seq=3 Des...</msg>
<status status="PASS" endtime="20170812 20:46:21.339" starttime="20170812 20:46:15.297"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170812 20:46:21.343" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
From 9.41.165.94 icmp_seq=1 Destination Host Unreachable
From 9.41.165.94 icmp_seq=2 Destination Host Unreachable
From 9.41.165.94 icmp_seq=3 Destination Host Unreachable
From 9.41.165.94 icmp_seq=4 Destination Host Unreachable

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, +4 errors, 100% packet loss, time 3015ms
pipe 3</msg>
<status status="PASS" endtime="20170812 20:46:21.343" starttime="20170812 20:46:21.342"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170812 20:46:21.344" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170812 20:46:21.344" starttime="20170812 20:46:21.343"></status>
</kw>
<status status="FAIL" endtime="20170812 20:46:21.344" starttime="20170812 20:46:15.296"></status>
</kw>
<msg timestamp="20170812 20:46:21.344" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170812 20:46:21.344" starttime="20170812 20:46:15.295"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170812 20:46:21.346" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170812 20:46:21.346" starttime="20170812 20:46:21.345"></status>
</kw>
<status status="FAIL" endtime="20170812 20:46:21.346" starttime="20170812 20:46:21.345"></status>
</kw>
<status status="FAIL" endtime="20170812 20:46:21.346" starttime="20170812 20:46:15.294"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170812 20:46:31.349" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170812 20:46:31.349" starttime="20170812 20:46:31.349"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170812 20:46:31.354" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170812 20:46:34.363" level="INFO">${RC} = 0</msg>
<msg timestamp="20170812 20:46:34.363" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=1.50 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.548 ms
64 bytes from 9.41.166.169...</msg>
<status status="PASS" endtime="20170812 20:46:34.363" starttime="20170812 20:46:31.349"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170812 20:46:34.367" level="INFO">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=1.50 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.548 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.614 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=0.541 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.541/0.802/1.507/0.408 ms</msg>
<status status="PASS" endtime="20170812 20:46:34.367" starttime="20170812 20:46:34.366"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:46:34.367" starttime="20170812 20:46:34.367"></status>
</kw>
<status status="PASS" endtime="20170812 20:46:34.368" starttime="20170812 20:46:31.348"></status>
</kw>
<msg timestamp="20170812 20:46:34.368" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170812 20:46:34.368" starttime="20170812 20:46:31.348"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170812 20:46:34.369" starttime="20170812 20:46:34.368"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170812 20:46:34.371" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170812 20:46:34.373" starttime="20170812 20:46:34.371"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 20:46:34.373" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 20:46:34.373" starttime="20170812 20:46:34.373"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170812 20:46:34.374" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170812 20:46:34.374" starttime="20170812 20:46:34.374"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170812 20:46:34.375" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170812 20:46:34.375" starttime="20170812 20:46:34.374"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170812 20:46:54.398" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170812 20:46:54.398" starttime="20170812 20:46:34.376"></status>
</kw>
<msg timestamp="20170812 20:46:54.398" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170812 20:46:54.398" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170812 20:46:54.398" starttime="20170812 20:46:34.375"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170812 20:46:54.399" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170812 20:46:54.399" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170812 20:46:54.399" starttime="20170812 20:46:54.399"></status>
</kw>
<status status="FAIL" endtime="20170812 20:46:54.399" starttime="20170812 20:46:34.370"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170812 20:47:14.401" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170812 20:47:14.401" starttime="20170812 20:47:14.401"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 20:47:14.402" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 20:47:14.402" starttime="20170812 20:47:14.402"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170812 20:47:14.403" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170812 20:47:14.403" starttime="20170812 20:47:14.402"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170812 20:47:14.403" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170812 20:47:14.403" starttime="20170812 20:47:14.403"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170812 20:47:25.688" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170812 20:47:25.688" starttime="20170812 20:47:14.404"></status>
</kw>
<msg timestamp="20170812 20:47:25.688" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 20:47:25.689" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:47:25.689" starttime="20170812 20:47:14.404"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170812 20:47:25.689" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:47:25.689" starttime="20170812 20:47:25.689"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 20:47:25.690" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:47:25.690" starttime="20170812 20:47:25.690"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:25.690" starttime="20170812 20:47:14.400"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:25.690" starttime="20170812 20:46:34.370"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:25.691" starttime="20170812 20:46:34.369"></status>
</kw>
<msg timestamp="20170812 20:47:25.691" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20170812 20:47:25.691" starttime="20170812 20:46:34.369"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20170812 20:47:25.691" starttime="20170812 20:47:25.691"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170812 20:47:25.693" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170812 20:47:25.693" starttime="20170812 20:47:25.693"></status>
</kw>
<msg timestamp="20170812 20:47:25.693" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170812 20:47:25.693" starttime="20170812 20:47:25.692"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:47:25.695" starttime="20170812 20:47:25.694"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:25.695" starttime="20170812 20:47:25.694"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170812 20:47:25.695" starttime="20170812 20:47:25.695"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170812 20:47:25.696" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170812 20:47:25.697" starttime="20170812 20:47:25.696"></status>
</kw>
<msg timestamp="20170812 20:47:25.697" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170812 20:47:25.697" starttime="20170812 20:47:25.696"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:47:25.699" starttime="20170812 20:47:25.698"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:25.699" starttime="20170812 20:47:25.698"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:25.699" starttime="20170812 20:47:25.697"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170812 20:47:25.699" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170812 20:47:29.212" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170812 20:47:29.212" starttime="20170812 20:47:25.699"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:29.213" starttime="20170812 20:47:25.692"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>hostname</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${system}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170812 20:47:29.213" level="INFO">Executing command 'hostname'.</msg>
<msg timestamp="20170812 20:47:29.613" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170812 20:47:29.613" level="INFO">${system} = witherspoon</msg>
<msg timestamp="20170812 20:47:29.613" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170812 20:47:29.613" starttime="20170812 20:47:29.213"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170812 20:47:29.614" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170812 20:47:29.614" starttime="20170812 20:47:29.613"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:29.614" starttime="20170812 20:46:31.346"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:29.614" starttime="20170812 20:45:14.400"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:29.614" starttime="20170812 20:45:14.400"></status>
</kw>
<kw name="Check Boot Count And Time">
<doc>Check for unexpected reboots.</doc>
<kw name="Set BMC Reset Reference Time" library="utils">
<doc>Set current boot time as a reference and increment</doc>
<kw name="Get BMC Boot Time" library="utils">
<doc>Get boot time from /proc/stat.</doc>
<assign>
<var>${cur_btime}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170812 20:47:29.617" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170812 20:47:29.617" starttime="20170812 20:47:29.617"></status>
</kw>
<msg timestamp="20170812 20:47:29.617" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170812 20:47:29.617" starttime="20170812 20:47:29.616"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:47:29.619" starttime="20170812 20:47:29.618"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:29.619" starttime="20170812 20:47:29.618"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170812 20:47:29.620" starttime="20170812 20:47:29.619"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170812 20:47:29.621" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170812 20:47:29.621" starttime="20170812 20:47:29.620"></status>
</kw>
<msg timestamp="20170812 20:47:29.621" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170812 20:47:29.621" starttime="20170812 20:47:29.620"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:47:29.623" starttime="20170812 20:47:29.622"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:29.623" starttime="20170812 20:47:29.622"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:29.623" starttime="20170812 20:47:29.621"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170812 20:47:29.623" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170812 20:47:31.807" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170812 20:47:31.807" starttime="20170812 20:47:29.623"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:31.808" starttime="20170812 20:47:29.615"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>egrep '^btime ' /proc/stat | cut -f 2 -d ' '</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170812 20:47:31.808" level="INFO">Executing command 'egrep '^btime ' /proc/stat | cut -f 2 -d ' ''.</msg>
<msg timestamp="20170812 20:47:32.026" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170812 20:47:32.026" level="INFO">${output} = 1500635606</msg>
<msg timestamp="20170812 20:47:32.026" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170812 20:47:32.026" starttime="20170812 20:47:31.808"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170812 20:47:32.027" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170812 20:47:32.027" starttime="20170812 20:47:32.027"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${btime}</var>
</assign>
<msg timestamp="20170812 20:47:32.028" level="INFO">${btime} = 1500635606</msg>
<status status="PASS" endtime="20170812 20:47:32.028" starttime="20170812 20:47:32.027"></status>
</kw>
<msg timestamp="20170812 20:47:32.028" level="INFO">${cur_btime} = 1500635606</msg>
<status status="PASS" endtime="20170812 20:47:32.028" starttime="20170812 20:47:29.615"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_TIME} == ${0} and ${BOOT_COUNT} == ${0}</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>ELSE IF</arg>
<arg>${cur_btime} &gt; ${BOOT_TIME}</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:47:32.029" starttime="20170812 20:47:32.028"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:32.029" starttime="20170812 20:47:29.615"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Count: ${BOOT_COUNT}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:47:32.030" starttime="20170812 20:47:32.030"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Time: ${BOOT_TIME}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:47:32.030" starttime="20170812 20:47:32.030"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_COUNT} &gt; ${MAX_BOOT_COUNT}</arg>
<arg>Log</arg>
<arg>Phantom Reboot!!! Unexpected reboot detected</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20170812 20:47:32.031" starttime="20170812 20:47:32.031"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:32.031" starttime="20170812 20:47:29.614"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Temp BMC URI Check</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Temp BMC URI Check">
<doc>Check for transient "BMC0" interface.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/BMC0/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170812 20:47:32.035" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170812 20:47:32.036" starttime="20170812 20:47:32.035"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 20:47:32.037" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 20:47:32.037" starttime="20170812 20:47:32.036"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170812 20:47:32.037" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170812 20:47:32.037" starttime="20170812 20:47:32.037"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170812 20:47:32.038" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170812 20:47:32.038" starttime="20170812 20:47:32.038"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170812 20:47:32.388" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170812 20:47:32.388" starttime="20170812 20:47:32.039"></status>
</kw>
<msg timestamp="20170812 20:47:32.388" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 20:47:32.388" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:47:32.388" starttime="20170812 20:47:32.038"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170812 20:47:32.389" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:47:32.389" starttime="20170812 20:47:32.389"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 20:47:32.390" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:47:32.390" starttime="20170812 20:47:32.389"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:32.390" starttime="20170812 20:47:32.034"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:32.390" starttime="20170812 20:47:32.034"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:32.390" starttime="20170812 20:47:32.033"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170812 20:47:32.391" level="INFO">${base_uri} = /xyz/openbmc_project/state/BMC0/</msg>
<status status="PASS" endtime="20170812 20:47:32.391" starttime="20170812 20:47:32.390"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:47:32.391" starttime="20170812 20:47:32.391"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170812 20:47:33.044" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/BMC0/, headers=None json=None</msg>
<msg timestamp="20170812 20:47:33.045" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170812 20:47:33.045" starttime="20170812 20:47:32.392"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:47:33.045" starttime="20170812 20:47:33.045"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170812 20:47:33.046" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170812 20:47:33.046" starttime="20170812 20:47:33.046"></status>
</kw>
<msg timestamp="20170812 20:47:33.046" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170812 20:47:33.046" starttime="20170812 20:47:32.032"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 20:47:33.047" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170812 20:47:33.047" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170812 20:47:33.047" starttime="20170812 20:47:33.047"></status>
</kw>
<status status="FAIL" endtime="20170812 20:47:33.048" starttime="20170812 20:47:32.032"></status>
</kw>
<msg timestamp="20170812 20:47:33.048" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170812 20:47:33.048" starttime="20170812 20:47:32.032"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Wait For BMC Ready</arg>
<arg>ELSE</arg>
<arg>Wait For Temp BMC Ready</arg>
</arguments>
<kw name="Wait For BMC Ready" library="state_manager">
<doc>Check BMC state and wait for BMC Ready.</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>BMC_READY</arg>
<arg>HOST_POWERED_OFF</arg>
</arguments>
<assign>
<var>@{states}</var>
</assign>
<msg timestamp="20170812 20:47:33.049" level="INFO">@{states} = [ BMC_READY | HOST_POWERED_OFF ]</msg>
<status status="PASS" endtime="20170812 20:47:33.049" starttime="20170812 20:47:33.049"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OBMC_STATES_VERSION}' == '${0}'</arg>
<arg>Wait Until Keyword Succeeds</arg>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Verify BMC State</arg>
<arg>${states}</arg>
<arg>ELSE</arg>
<arg>Wait Until Keyword Succeeds</arg>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is BMC Ready</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is BMC Ready</arg>
</arguments>
<kw name="Is BMC Ready" library="state_manager">
<doc>Check if BMC state is Ready.</doc>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170812 20:47:33.055" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170812 20:47:33.056" starttime="20170812 20:47:33.055"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 20:47:33.056" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 20:47:33.056" starttime="20170812 20:47:33.056"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170812 20:47:33.057" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170812 20:47:33.057" starttime="20170812 20:47:33.056"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170812 20:47:33.057" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170812 20:47:33.058" starttime="20170812 20:47:33.057"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170812 20:47:33.604" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170812 20:47:33.604" starttime="20170812 20:47:33.058"></status>
</kw>
<msg timestamp="20170812 20:47:33.604" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 20:47:33.604" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:47:33.604" starttime="20170812 20:47:33.058"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170812 20:47:33.605" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:47:33.605" starttime="20170812 20:47:33.605"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 20:47:33.606" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:47:33.606" starttime="20170812 20:47:33.605"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:33.606" starttime="20170812 20:47:33.054"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:33.606" starttime="20170812 20:47:33.053"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:33.606" starttime="20170812 20:47:33.053"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170812 20:47:33.607" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170812 20:47:33.607" starttime="20170812 20:47:33.606"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:47:33.607" starttime="20170812 20:47:33.607"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170812 20:47:34.713" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170812 20:47:34.713" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:47:34.713" starttime="20170812 20:47:33.608"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:47:34.714" starttime="20170812 20:47:34.714"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170812 20:47:34.715" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170812 20:47:34.715" starttime="20170812 20:47:34.715"></status>
</kw>
<msg timestamp="20170812 20:47:34.715" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:47:34.715" starttime="20170812 20:47:33.052"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 20:47:34.716" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:47:34.716" starttime="20170812 20:47:34.716"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170812 20:47:34.717" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.NotReady", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170812 20:47:34.717" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170812 20:47:34.717" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.NotReady'}</msg>
<status status="PASS" endtime="20170812 20:47:34.717" starttime="20170812 20:47:34.716"></status>
</kw>
<msg timestamp="20170812 20:47:34.717" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.NotReady</msg>
<status status="PASS" endtime="20170812 20:47:34.717" starttime="20170812 20:47:33.051"></status>
</kw>
<msg timestamp="20170812 20:47:34.717" level="INFO">${bmc_state} = NotReady</msg>
<status status="PASS" endtime="20170812 20:47:34.717" starttime="20170812 20:47:33.051"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${BMC_READY_STATE}</arg>
<arg>${bmc_state}</arg>
</arguments>
<msg timestamp="20170812 20:47:34.718" level="FAIL">Ready != NotReady</msg>
<status status="FAIL" endtime="20170812 20:47:34.718" starttime="20170812 20:47:34.718"></status>
</kw>
<status status="FAIL" endtime="20170812 20:47:34.718" starttime="20170812 20:47:33.051"></status>
</kw>
<kw name="Is BMC Ready" library="state_manager">
<doc>Check if BMC state is Ready.</doc>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170812 20:47:44.724" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170812 20:47:44.724" starttime="20170812 20:47:44.723"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 20:47:44.725" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 20:47:44.725" starttime="20170812 20:47:44.725"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170812 20:47:44.726" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170812 20:47:44.726" starttime="20170812 20:47:44.726"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170812 20:47:44.727" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170812 20:47:44.727" starttime="20170812 20:47:44.727"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170812 20:47:45.130" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170812 20:47:45.130" starttime="20170812 20:47:44.729"></status>
</kw>
<msg timestamp="20170812 20:47:45.130" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 20:47:45.130" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:47:45.130" starttime="20170812 20:47:44.728"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170812 20:47:45.131" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:47:45.131" starttime="20170812 20:47:45.130"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 20:47:45.132" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:47:45.132" starttime="20170812 20:47:45.131"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:45.132" starttime="20170812 20:47:44.723"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:45.132" starttime="20170812 20:47:44.722"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:45.132" starttime="20170812 20:47:44.721"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170812 20:47:45.133" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170812 20:47:45.133" starttime="20170812 20:47:45.133"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:47:45.134" starttime="20170812 20:47:45.134"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170812 20:47:45.917" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170812 20:47:45.917" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:47:45.917" starttime="20170812 20:47:45.135"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:47:45.918" starttime="20170812 20:47:45.918"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170812 20:47:45.918" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170812 20:47:45.919" starttime="20170812 20:47:45.918"></status>
</kw>
<msg timestamp="20170812 20:47:45.919" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:47:45.919" starttime="20170812 20:47:44.720"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 20:47:45.919" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:47:45.919" starttime="20170812 20:47:45.919"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170812 20:47:45.920" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170812 20:47:45.920" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170812 20:47:45.920" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170812 20:47:45.920" starttime="20170812 20:47:45.920"></status>
</kw>
<msg timestamp="20170812 20:47:45.921" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170812 20:47:45.921" starttime="20170812 20:47:44.720"></status>
</kw>
<msg timestamp="20170812 20:47:45.921" level="INFO">${bmc_state} = Ready</msg>
<status status="PASS" endtime="20170812 20:47:45.921" starttime="20170812 20:47:44.719"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${BMC_READY_STATE}</arg>
<arg>${bmc_state}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:47:45.922" starttime="20170812 20:47:45.921"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:45.922" starttime="20170812 20:47:44.719"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:45.922" starttime="20170812 20:47:33.050"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:45.922" starttime="20170812 20:47:33.050"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:45.922" starttime="20170812 20:47:33.049"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:45.922" starttime="20170812 20:47:33.048"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:45.922" starttime="20170812 20:44:57.652"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:45.922" starttime="20170812 20:44:57.651"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Preserve BMC Network Setting</arg>
</arguments>
<kw name="Preserve BMC Network Setting" library="code_update_utils">
<doc>Preserve Network setting</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<assign>
<var>${policy}</var>
</assign>
<msg timestamp="20170812 20:47:45.930" level="INFO">${policy} = 1</msg>
<status status="PASS" endtime="20170812 20:47:45.930" starttime="20170812 20:47:45.930"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20170812 20:47:45.931" level="INFO">${value} = {u'data': 1}</msg>
<status status="PASS" endtime="20170812 20:47:45.931" starttime="20170812 20:47:45.930"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
<arg>preserve_network_settings</arg>
<arg>data=${value}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170812 20:47:45.932" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170812 20:47:45.932" starttime="20170812 20:47:45.932"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170812 20:47:45.935" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170812 20:47:45.936" starttime="20170812 20:47:45.935"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 20:47:45.936" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 20:47:45.936" starttime="20170812 20:47:45.936"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170812 20:47:45.937" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170812 20:47:45.937" starttime="20170812 20:47:45.937"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170812 20:47:45.938" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170812 20:47:45.938" starttime="20170812 20:47:45.938"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170812 20:47:46.124" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170812 20:47:46.124" starttime="20170812 20:47:45.940"></status>
</kw>
<msg timestamp="20170812 20:47:46.124" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 20:47:46.124" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:47:46.124" starttime="20170812 20:47:45.939"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170812 20:47:46.125" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:47:46.125" starttime="20170812 20:47:46.125"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 20:47:46.126" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:47:46.126" starttime="20170812 20:47:46.125"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:46.126" starttime="20170812 20:47:45.934"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:46.126" starttime="20170812 20:47:45.933"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:46.126" starttime="20170812 20:47:45.933"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170812 20:47:46.127" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/attr/preserve_network_settings</msg>
<status status="PASS" endtime="20170812 20:47:46.127" starttime="20170812 20:47:46.126"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 20:47:46.127" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 20:47:46.128" starttime="20170812 20:47:46.127"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:47:46.128" starttime="20170812 20:47:46.128"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170812 20:47:46.130" level="INFO">${msg} = URI:https://9.41.166.169/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170812 20:47:46.130" starttime="20170812 20:47:46.129"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170812 20:47:46.131" level="INFO">URI:https://9.41.166.169/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170812 20:47:46.131" starttime="20170812 20:47:46.130"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:46.131" starttime="20170812 20:47:46.130"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:46.131" starttime="20170812 20:47:46.128"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170812 20:47:46.380" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/attr/preserve_network_settings, data={"data": 1},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170812 20:47:46.380" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:47:46.380" starttime="20170812 20:47:46.131"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170812 20:47:46.381" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170812 20:47:46.381" starttime="20170812 20:47:46.381"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170812 20:47:46.383" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170812 20:47:46.383" starttime="20170812 20:47:46.382"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:46.383" starttime="20170812 20:47:46.382"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:46.383" starttime="20170812 20:47:46.380"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170812 20:47:46.383" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170812 20:47:46.384" starttime="20170812 20:47:46.383"></status>
</kw>
<msg timestamp="20170812 20:47:46.384" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:47:46.384" starttime="20170812 20:47:45.932"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 20:47:46.384" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:47:46.384" starttime="20170812 20:47:46.384"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170812 20:47:46.385" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170812 20:47:46.385" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170812 20:47:46.385" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170812 20:47:46.385" starttime="20170812 20:47:46.385"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:46.385" starttime="20170812 20:47:45.931"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170812 20:47:46.390" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170812 20:47:46.390" starttime="20170812 20:47:46.389"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 20:47:46.391" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 20:47:46.391" starttime="20170812 20:47:46.390"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170812 20:47:46.391" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170812 20:47:46.391" starttime="20170812 20:47:46.391"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170812 20:47:46.392" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170812 20:47:46.392" starttime="20170812 20:47:46.392"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170812 20:47:46.604" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170812 20:47:46.604" starttime="20170812 20:47:46.393"></status>
</kw>
<msg timestamp="20170812 20:47:46.604" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 20:47:46.604" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:47:46.604" starttime="20170812 20:47:46.392"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170812 20:47:46.605" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:47:46.605" starttime="20170812 20:47:46.604"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 20:47:46.606" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:47:46.606" starttime="20170812 20:47:46.605"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:46.606" starttime="20170812 20:47:46.389"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:46.606" starttime="20170812 20:47:46.387"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:46.606" starttime="20170812 20:47:46.387"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170812 20:47:46.607" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170812 20:47:46.607" starttime="20170812 20:47:46.606"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:47:46.607" starttime="20170812 20:47:46.607"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170812 20:47:46.710" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc, headers=None json=None</msg>
<msg timestamp="20170812 20:47:46.710" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:47:46.711" starttime="20170812 20:47:46.607"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:47:46.711" starttime="20170812 20:47:46.711"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170812 20:47:46.714" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170812 20:47:46.714" starttime="20170812 20:47:46.711"></status>
</kw>
<msg timestamp="20170812 20:47:46.715" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:47:46.715" starttime="20170812 20:47:46.386"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 20:47:46.715" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:47:46.715" starttime="20170812 20:47:46.715"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170812 20:47:46.716" level="INFO">To JSON using : content={
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Idle", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170812 20:47:46.716" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170812 20:47:46.716" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Idle', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'preserve_network_settings': 1,...</msg>
<status status="PASS" endtime="20170812 20:47:46.716" starttime="20170812 20:47:46.716"></status>
</kw>
<msg timestamp="20170812 20:47:46.717" level="INFO">${data} = {u'status': u'Idle', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'preserve_network_settings': 1, u'restore_application_defaults': 0}</msg>
<status status="PASS" endtime="20170812 20:47:46.717" starttime="20170812 20:47:46.386"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${data['preserve_network_settings']}</arg>
<arg>${1}</arg>
<arg>msg=0 indicates network is not preserved</arg>
</arguments>
<status status="PASS" endtime="20170812 20:47:46.717" starttime="20170812 20:47:46.717"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:46.718" starttime="20170812 20:47:45.929"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:46.718" starttime="20170812 20:47:45.923"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>SCP Tar Image File To BMC \ ${FILE_PATH}</arg>
</arguments>
<kw name="SCP Tar Image File to BMC" library="code_update_utils">
<doc>Copy BMC tar image to BMC.</doc>
<arguments>
<arg>/home/fspcibld/witherspoon-20170812203734.all.tar</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170812 20:47:46.747" starttime="20170812 20:47:46.727"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:47:47.447" starttime="20170812 20:47:46.748"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:47.447" starttime="20170812 20:47:46.747"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:47.447" starttime="20170812 20:47:46.727"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170812 20:47:47.449" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170812 20:47:47.449" starttime="20170812 20:47:47.449"></status>
</kw>
<msg timestamp="20170812 20:47:47.449" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170812 20:47:47.449" starttime="20170812 20:47:47.448"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:47:47.451" starttime="20170812 20:47:47.450"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:47.451" starttime="20170812 20:47:47.449"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170812 20:47:47.452" starttime="20170812 20:47:47.451"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170812 20:47:47.453" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170812 20:47:47.453" starttime="20170812 20:47:47.453"></status>
</kw>
<msg timestamp="20170812 20:47:47.453" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170812 20:47:47.453" starttime="20170812 20:47:47.452"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:47:47.455" starttime="20170812 20:47:47.455"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:47.455" starttime="20170812 20:47:47.454"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:47.455" starttime="20170812 20:47:47.454"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170812 20:47:47.456" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170812 20:47:49.140" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170812 20:47:49.141" starttime="20170812 20:47:47.455"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:49.141" starttime="20170812 20:47:47.447"></status>
</kw>
<kw name="Loop SCP Retry" library="code_update_utils">
<doc>Try transferring the file 4 times.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<kw type="for" name="${index} IN RANGE [ 0 | 4 ]">
<kw type="foritem" name="${index} = 0">
<kw name="Retry SCP" library="code_update_utils">
<doc>Delete the incomplete file and scp file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>${targ_file_path}</var>
</assign>
<msg timestamp="20170812 20:47:49.143" level="INFO">${targ_file_path} = /tmp/flashimg</msg>
<status status="PASS" endtime="20170812 20:47:49.143" starttime="20170812 20:47:49.142"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -f /tmp/flashimg</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170812 20:47:49.144" level="INFO">Executing command 'rm -f /tmp/flashimg'.</msg>
<msg timestamp="20170812 20:47:49.190" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170812 20:47:49.190" level="INFO">${stdout} = </msg>
<msg timestamp="20170812 20:47:49.190" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170812 20:47:49.191" starttime="20170812 20:47:49.143"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170812 20:47:49.191" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170812 20:47:49.191" starttime="20170812 20:47:49.191"></status>
</kw>
<status status="PASS" endtime="20170812 20:47:49.191" starttime="20170812 20:47:49.143"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${image_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:48:05.929" starttime="20170812 20:47:49.192"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -lh ${targ_file_path}</arg>
</arguments>
<assign>
<var>${file_size}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170812 20:48:05.930" level="INFO">Executing command 'ls -lh /tmp/flashimg'.</msg>
<msg timestamp="20170812 20:48:05.987" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170812 20:48:05.987" level="INFO">${stdout} = -rw-r--r--    1 root     root       36.4M Jul 21 11:15 /tmp/flashimg</msg>
<msg timestamp="20170812 20:48:05.987" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170812 20:48:05.987" starttime="20170812 20:48:05.930"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170812 20:48:05.988" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170812 20:48:05.988" starttime="20170812 20:48:05.987"></status>
</kw>
<msg timestamp="20170812 20:48:05.988" level="INFO">${file_size} = -rw-r--r--    1 root     root       36.4M Jul 21 11:15 /tmp/flashimg</msg>
<status status="PASS" endtime="20170812 20:48:05.988" starttime="20170812 20:48:05.929"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<msg timestamp="20170812 20:48:05.989" level="FAIL">Incomplete file transfer.: '-rw-r--r--    1 root     root       36.4M Jul 21 11:15 /tmp/flashimg' does not contain '32.0M'</msg>
<status status="FAIL" endtime="20170812 20:48:05.989" starttime="20170812 20:48:05.989"></status>
</kw>
<msg timestamp="20170812 20:48:05.989" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170812 20:48:05.989" starttime="20170812 20:48:05.988"></status>
</kw>
<msg timestamp="20170812 20:48:05.989" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170812 20:48:05.990" starttime="20170812 20:47:49.142"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
</arguments>
<status status="PASS" endtime="20170812 20:48:05.990" starttime="20170812 20:48:05.990"></status>
</kw>
<status status="PASS" endtime="20170812 20:48:05.990" starttime="20170812 20:47:49.142"></status>
</kw>
<kw type="foritem" name="${index} = 1">
<kw name="Retry SCP" library="code_update_utils">
<doc>Delete the incomplete file and scp file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>${targ_file_path}</var>
</assign>
<msg timestamp="20170812 20:48:05.991" level="INFO">${targ_file_path} = /tmp/flashimg</msg>
<status status="PASS" endtime="20170812 20:48:05.991" starttime="20170812 20:48:05.991"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -f /tmp/flashimg</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170812 20:48:05.992" level="INFO">Executing command 'rm -f /tmp/flashimg'.</msg>
<msg timestamp="20170812 20:48:06.129" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170812 20:48:06.129" level="INFO">${stdout} = </msg>
<msg timestamp="20170812 20:48:06.129" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170812 20:48:06.129" starttime="20170812 20:48:05.992"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170812 20:48:06.130" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170812 20:48:06.130" starttime="20170812 20:48:06.130"></status>
</kw>
<status status="PASS" endtime="20170812 20:48:06.130" starttime="20170812 20:48:05.991"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${image_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:48:22.958" starttime="20170812 20:48:06.130"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -lh ${targ_file_path}</arg>
</arguments>
<assign>
<var>${file_size}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170812 20:48:22.960" level="INFO">Executing command 'ls -lh /tmp/flashimg'.</msg>
<msg timestamp="20170812 20:48:23.017" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170812 20:48:23.017" level="INFO">${stdout} = -rw-r--r--    1 root     root       36.4M Jul 21 11:16 /tmp/flashimg</msg>
<msg timestamp="20170812 20:48:23.017" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170812 20:48:23.017" starttime="20170812 20:48:22.959"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170812 20:48:23.018" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170812 20:48:23.018" starttime="20170812 20:48:23.017"></status>
</kw>
<msg timestamp="20170812 20:48:23.018" level="INFO">${file_size} = -rw-r--r--    1 root     root       36.4M Jul 21 11:16 /tmp/flashimg</msg>
<status status="PASS" endtime="20170812 20:48:23.018" starttime="20170812 20:48:22.958"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<msg timestamp="20170812 20:48:23.019" level="FAIL">Incomplete file transfer.: '-rw-r--r--    1 root     root       36.4M Jul 21 11:16 /tmp/flashimg' does not contain '32.0M'</msg>
<status status="FAIL" endtime="20170812 20:48:23.019" starttime="20170812 20:48:23.019"></status>
</kw>
<msg timestamp="20170812 20:48:23.019" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170812 20:48:23.019" starttime="20170812 20:48:23.018"></status>
</kw>
<msg timestamp="20170812 20:48:23.020" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170812 20:48:23.020" starttime="20170812 20:48:05.990"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
</arguments>
<status status="PASS" endtime="20170812 20:48:23.020" starttime="20170812 20:48:23.020"></status>
</kw>
<status status="PASS" endtime="20170812 20:48:23.020" starttime="20170812 20:48:05.990"></status>
</kw>
<kw type="foritem" name="${index} = 2">
<kw name="Retry SCP" library="code_update_utils">
<doc>Delete the incomplete file and scp file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>${targ_file_path}</var>
</assign>
<msg timestamp="20170812 20:48:23.021" level="INFO">${targ_file_path} = /tmp/flashimg</msg>
<status status="PASS" endtime="20170812 20:48:23.022" starttime="20170812 20:48:23.021"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -f /tmp/flashimg</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170812 20:48:23.022" level="INFO">Executing command 'rm -f /tmp/flashimg'.</msg>
<msg timestamp="20170812 20:48:23.159" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170812 20:48:23.159" level="INFO">${stdout} = </msg>
<msg timestamp="20170812 20:48:23.159" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170812 20:48:23.159" starttime="20170812 20:48:23.022"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170812 20:48:23.160" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170812 20:48:23.160" starttime="20170812 20:48:23.160"></status>
</kw>
<status status="PASS" endtime="20170812 20:48:23.161" starttime="20170812 20:48:23.022"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${image_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:48:40.490" starttime="20170812 20:48:23.161"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -lh ${targ_file_path}</arg>
</arguments>
<assign>
<var>${file_size}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170812 20:48:40.492" level="INFO">Executing command 'ls -lh /tmp/flashimg'.</msg>
<msg timestamp="20170812 20:48:40.558" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170812 20:48:40.558" level="INFO">${stdout} = -rw-r--r--    1 root     root       36.4M Jul 21 11:16 /tmp/flashimg</msg>
<msg timestamp="20170812 20:48:40.558" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170812 20:48:40.558" starttime="20170812 20:48:40.491"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170812 20:48:40.559" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170812 20:48:40.559" starttime="20170812 20:48:40.559"></status>
</kw>
<msg timestamp="20170812 20:48:40.559" level="INFO">${file_size} = -rw-r--r--    1 root     root       36.4M Jul 21 11:16 /tmp/flashimg</msg>
<status status="PASS" endtime="20170812 20:48:40.559" starttime="20170812 20:48:40.490"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<msg timestamp="20170812 20:48:40.561" level="FAIL">Incomplete file transfer.: '-rw-r--r--    1 root     root       36.4M Jul 21 11:16 /tmp/flashimg' does not contain '32.0M'</msg>
<status status="FAIL" endtime="20170812 20:48:40.561" starttime="20170812 20:48:40.560"></status>
</kw>
<msg timestamp="20170812 20:48:40.561" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170812 20:48:40.561" starttime="20170812 20:48:40.560"></status>
</kw>
<msg timestamp="20170812 20:48:40.561" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170812 20:48:40.561" starttime="20170812 20:48:23.021"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
</arguments>
<status status="PASS" endtime="20170812 20:48:40.562" starttime="20170812 20:48:40.561"></status>
</kw>
<status status="PASS" endtime="20170812 20:48:40.562" starttime="20170812 20:48:23.021"></status>
</kw>
<kw type="foritem" name="${index} = 3">
<kw name="Retry SCP" library="code_update_utils">
<doc>Delete the incomplete file and scp file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>${targ_file_path}</var>
</assign>
<msg timestamp="20170812 20:48:40.563" level="INFO">${targ_file_path} = /tmp/flashimg</msg>
<status status="PASS" endtime="20170812 20:48:40.563" starttime="20170812 20:48:40.563"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -f /tmp/flashimg</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170812 20:48:40.564" level="INFO">Executing command 'rm -f /tmp/flashimg'.</msg>
<msg timestamp="20170812 20:48:40.680" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170812 20:48:40.681" level="INFO">${stdout} = </msg>
<msg timestamp="20170812 20:48:40.681" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170812 20:48:40.681" starttime="20170812 20:48:40.564"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170812 20:48:40.681" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170812 20:48:40.682" starttime="20170812 20:48:40.681"></status>
</kw>
<status status="PASS" endtime="20170812 20:48:40.682" starttime="20170812 20:48:40.563"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${image_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:48:57.531" starttime="20170812 20:48:40.682"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -lh ${targ_file_path}</arg>
</arguments>
<assign>
<var>${file_size}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170812 20:48:57.533" level="INFO">Executing command 'ls -lh /tmp/flashimg'.</msg>
<msg timestamp="20170812 20:48:57.630" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170812 20:48:57.630" level="INFO">${stdout} = -rw-r--r--    1 root     root       36.4M Jul 21 11:16 /tmp/flashimg</msg>
<msg timestamp="20170812 20:48:57.630" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170812 20:48:57.630" starttime="20170812 20:48:57.533"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170812 20:48:57.631" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170812 20:48:57.631" starttime="20170812 20:48:57.631"></status>
</kw>
<msg timestamp="20170812 20:48:57.631" level="INFO">${file_size} = -rw-r--r--    1 root     root       36.4M Jul 21 11:16 /tmp/flashimg</msg>
<status status="PASS" endtime="20170812 20:48:57.631" starttime="20170812 20:48:57.532"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<msg timestamp="20170812 20:48:57.633" level="FAIL">Incomplete file transfer.: '-rw-r--r--    1 root     root       36.4M Jul 21 11:16 /tmp/flashimg' does not contain '32.0M'</msg>
<status status="FAIL" endtime="20170812 20:48:57.633" starttime="20170812 20:48:57.632"></status>
</kw>
<msg timestamp="20170812 20:48:57.633" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170812 20:48:57.633" starttime="20170812 20:48:57.632"></status>
</kw>
<msg timestamp="20170812 20:48:57.633" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170812 20:48:57.633" starttime="20170812 20:48:40.562"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
</arguments>
<status status="PASS" endtime="20170812 20:48:57.634" starttime="20170812 20:48:57.633"></status>
</kw>
<status status="PASS" endtime="20170812 20:48:57.634" starttime="20170812 20:48:40.562"></status>
</kw>
<status status="PASS" endtime="20170812 20:48:57.634" starttime="20170812 20:47:49.141"></status>
</kw>
<status status="PASS" endtime="20170812 20:48:57.634" starttime="20170812 20:47:49.141"></status>
</kw>
<status status="PASS" endtime="20170812 20:48:57.634" starttime="20170812 20:47:46.726"></status>
</kw>
<status status="PASS" endtime="20170812 20:48:57.634" starttime="20170812 20:47:46.718"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Activate BMC Flash Image</arg>
</arguments>
<kw name="Activate BMC flash image" library="code_update_utils">
<doc>Activate and verify the update status</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>@{img_path}</var>
</assign>
<msg timestamp="20170812 20:48:57.658" level="INFO">@{img_path} = [ /tmp/flashimg ]</msg>
<status status="PASS" endtime="20170812 20:48:57.658" starttime="20170812 20:48:57.658"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{img_path}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170812 20:48:57.659" level="INFO">${data} = {u'data': [u'/tmp/flashimg']}</msg>
<status status="PASS" endtime="20170812 20:48:57.659" starttime="20170812 20:48:57.658"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${BMC_UPD_METHOD}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170812 20:48:57.662" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170812 20:48:57.662" starttime="20170812 20:48:57.661"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 20:48:57.663" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 20:48:57.663" starttime="20170812 20:48:57.662"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170812 20:48:57.663" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170812 20:48:57.663" starttime="20170812 20:48:57.663"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170812 20:48:57.664" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170812 20:48:57.664" starttime="20170812 20:48:57.664"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170812 20:48:57.858" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170812 20:48:57.858" starttime="20170812 20:48:57.665"></status>
</kw>
<msg timestamp="20170812 20:48:57.858" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 20:48:57.858" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:48:57.858" starttime="20170812 20:48:57.665"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170812 20:48:57.859" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:48:57.859" starttime="20170812 20:48:57.858"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 20:48:57.859" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:48:57.860" starttime="20170812 20:48:57.859"></status>
</kw>
<status status="PASS" endtime="20170812 20:48:57.860" starttime="20170812 20:48:57.661"></status>
</kw>
<status status="PASS" endtime="20170812 20:48:57.860" starttime="20170812 20:48:57.660"></status>
</kw>
<status status="PASS" endtime="20170812 20:48:57.860" starttime="20170812 20:48:57.660"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170812 20:48:57.860" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/action/update</msg>
<status status="PASS" endtime="20170812 20:48:57.861" starttime="20170812 20:48:57.860"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 20:48:57.861" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 20:48:57.861" starttime="20170812 20:48:57.861"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:48:57.862" starttime="20170812 20:48:57.861"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:48:57.862" starttime="20170812 20:48:57.862"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170812 20:49:01.585" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/action/update, data={"data": ["/tmp/flashimg"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170812 20:49:01.585" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:49:01.585" starttime="20170812 20:48:57.863"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:01.586" starttime="20170812 20:49:01.585"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170812 20:49:01.586" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170812 20:49:01.586" starttime="20170812 20:49:01.586"></status>
</kw>
<msg timestamp="20170812 20:49:01.586" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:49:01.586" starttime="20170812 20:48:57.659"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 20:49:01.587" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:49:01.587" starttime="20170812 20:49:01.587"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170812 20:49:01.590" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170812 20:49:01.591" starttime="20170812 20:49:01.590"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 20:49:01.591" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 20:49:01.591" starttime="20170812 20:49:01.591"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170812 20:49:01.592" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170812 20:49:01.592" starttime="20170812 20:49:01.592"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170812 20:49:01.593" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170812 20:49:01.593" starttime="20170812 20:49:01.593"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170812 20:49:01.789" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170812 20:49:01.790" starttime="20170812 20:49:01.594"></status>
</kw>
<msg timestamp="20170812 20:49:01.790" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 20:49:01.790" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:49:01.790" starttime="20170812 20:49:01.593"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170812 20:49:01.791" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:49:01.791" starttime="20170812 20:49:01.790"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 20:49:01.791" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:49:01.791" starttime="20170812 20:49:01.791"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:01.792" starttime="20170812 20:49:01.589"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:01.792" starttime="20170812 20:49:01.589"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:01.792" starttime="20170812 20:49:01.588"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170812 20:49:01.792" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170812 20:49:01.792" starttime="20170812 20:49:01.792"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:01.793" starttime="20170812 20:49:01.793"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170812 20:49:01.887" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc, headers=None json=None</msg>
<msg timestamp="20170812 20:49:01.887" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:49:01.887" starttime="20170812 20:49:01.793"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:01.888" starttime="20170812 20:49:01.888"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170812 20:49:01.888" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170812 20:49:01.889" starttime="20170812 20:49:01.888"></status>
</kw>
<msg timestamp="20170812 20:49:01.889" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:49:01.889" starttime="20170812 20:49:01.588"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 20:49:01.889" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:49:01.890" starttime="20170812 20:49:01.889"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170812 20:49:01.890" level="INFO">To JSON using : content={
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "/tmp/flashimg", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files\nERROR: Image image-bmc too big for mtd0.\n", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170812 20:49:01.890" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170812 20:49:01.890" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files\nERROR: Image image-bmc too b...</msg>
<status status="PASS" endtime="20170812 20:49:01.890" starttime="20170812 20:49:01.890"></status>
</kw>
<msg timestamp="20170812 20:49:01.891" level="INFO">${data} = {u'status': u'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files\nERROR: Image image-bmc too big for mtd0.\n', u'update_kernel_and_apps': 0, u'cl...</msg>
<status status="PASS" endtime="20170812 20:49:01.891" starttime="20170812 20:49:01.587"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${data["filename"]}</arg>
<arg>/tmp/flashimg</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:01.891" starttime="20170812 20:49:01.891"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${data['status']}</arg>
<arg>to apply</arg>
</arguments>
<msg timestamp="20170812 20:49:01.892" level="FAIL">'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files
ERROR: Image image-bmc too big for mtd0.
' does not contain 'to apply'</msg>
<status status="FAIL" endtime="20170812 20:49:01.892" starttime="20170812 20:49:01.892"></status>
</kw>
<status status="FAIL" endtime="20170812 20:49:01.892" starttime="20170812 20:48:57.657"></status>
</kw>
<msg timestamp="20170812 20:49:01.895" level="FAIL">'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files
ERROR: Image image-bmc too big for mtd0.
' does not contain 'to apply'</msg>
<status status="FAIL" endtime="20170812 20:49:01.895" starttime="20170812 20:48:57.635"></status>
</kw>
<kw type="teardown" name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170812 20:49:01.915" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170812 20:49:01.916" starttime="20170812 20:49:01.915"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 20:49:01.917" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 20:49:01.917" starttime="20170812 20:49:01.917"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170812 20:49:01.918" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170812 20:49:01.918" starttime="20170812 20:49:01.917"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170812 20:49:01.918" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170812 20:49:01.918" starttime="20170812 20:49:01.918"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170812 20:49:02.153" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170812 20:49:02.153" starttime="20170812 20:49:01.919"></status>
</kw>
<msg timestamp="20170812 20:49:02.154" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 20:49:02.154" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:49:02.154" starttime="20170812 20:49:01.919"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170812 20:49:02.154" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:49:02.154" starttime="20170812 20:49:02.154"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 20:49:02.155" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:49:02.155" starttime="20170812 20:49:02.155"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:02.155" starttime="20170812 20:49:01.914"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:02.155" starttime="20170812 20:49:01.914"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:02.156" starttime="20170812 20:49:01.913"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170812 20:49:02.157" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170812 20:49:02.157" starttime="20170812 20:49:02.156"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:02.158" starttime="20170812 20:49:02.157"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170812 20:49:02.246" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170812 20:49:02.246" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:49:02.246" starttime="20170812 20:49:02.158"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:02.247" starttime="20170812 20:49:02.247"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170812 20:49:02.248" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170812 20:49:02.248" starttime="20170812 20:49:02.248"></status>
</kw>
<msg timestamp="20170812 20:49:02.248" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:49:02.248" starttime="20170812 20:49:01.912"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 20:49:02.249" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:49:02.249" starttime="20170812 20:49:02.248"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170812 20:49:02.249" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170812 20:49:02.249" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170812 20:49:02.250" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170812 20:49:02.250" starttime="20170812 20:49:02.249"></status>
</kw>
<msg timestamp="20170812 20:49:02.250" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170812 20:49:02.250" starttime="20170812 20:49:01.912"></status>
</kw>
<msg timestamp="20170812 20:49:02.250" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170812 20:49:02.250" starttime="20170812 20:49:01.911"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170812 20:49:02.251" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170812 20:49:02.251" starttime="20170812 20:49:02.251"></status>
</kw>
<msg timestamp="20170812 20:49:02.252" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170812 20:49:02.252" starttime="20170812 20:49:02.251"></status>
</kw>
<msg timestamp="20170812 20:49:02.252" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170812 20:49:02.252" starttime="20170812 20:49:01.911"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.41.166.169</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170812 20:49:02.266" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170812 20:49:02.266" starttime="20170812 20:49:02.266"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170812 20:49:02.271" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170812 20:49:05.275" level="INFO">${RC} = 0</msg>
<msg timestamp="20170812 20:49:05.275" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.857 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.617 ms
64 bytes from 9.41.166.16...</msg>
<status status="PASS" endtime="20170812 20:49:05.276" starttime="20170812 20:49:02.267"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170812 20:49:05.279" level="INFO">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.857 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.617 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.669 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=1.26 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.617/0.853/1.269/0.256 ms</msg>
<status status="PASS" endtime="20170812 20:49:05.279" starttime="20170812 20:49:05.278"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:05.280" starttime="20170812 20:49:05.280"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:05.280" starttime="20170812 20:49:02.265"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170812 20:49:05.308" level="INFO">${cur_time} = 2017-08-12 20:49:05:308227</msg>
<status status="PASS" endtime="20170812 20:49:05.308" starttime="20170812 20:49:05.308"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170812 20:49:05.309" level="INFO">${cur_time} = 20170812204905308227</msg>
<status status="PASS" endtime="20170812 20:49:05.309" starttime="20170812 20:49:05.309"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:05.309" starttime="20170812 20:49:05.307"></status>
</kw>
<msg timestamp="20170812 20:49:05.320" level="INFO">${FFDC_TIME} = 20170812204905308227</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170812 20:49:05.322" level="INFO">${suite_name} = UpdateBmc</msg>
<status status="PASS" endtime="20170812 20:49:05.322" starttime="20170812 20:49:05.321"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170812 20:49:05.322" level="INFO">${suite_name} = 20170812204905308227_UpdateBmc</msg>
<status status="PASS" endtime="20170812 20:49:05.322" starttime="20170812 20:49:05.322"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170812 20:49:05.323" level="INFO">${test_name} = InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170812 20:49:05.323" starttime="20170812 20:49:05.323"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170812 20:49:05.324" level="INFO">${test_name} = 20170812204905308227_InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170812 20:49:05.324" starttime="20170812 20:49:05.323"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:05.324" starttime="20170812 20:49:05.321"></status>
</kw>
<msg timestamp="20170812 20:49:05.329" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/</msg>
<msg timestamp="20170812 20:49:05.337" level="INFO">${FFDC_PREFIX} = 20170812204905308227_</msg>
<msg timestamp="20170812 20:49:05.360" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/</arg>
</arguments>
<msg timestamp="20170812 20:49:05.362" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:05.362" starttime="20170812 20:49:05.361"></status>
</kw>
<msg timestamp="20170812 20:49:05.371" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:05.386" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:05.386" starttime="20170812 20:49:05.385"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:05.386" starttime="20170812 20:49:05.384"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:05.387" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:05.387" starttime="20170812 20:49:05.387"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:05.387" starttime="20170812 20:49:05.386"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:05.388" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:05.389" starttime="20170812 20:49:05.388"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:05.389" starttime="20170812 20:49:05.387"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:05.390" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:05.390" starttime="20170812 20:49:05.390"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:05.390" starttime="20170812 20:49:05.389"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:05.391" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:05.391" starttime="20170812 20:49:05.391"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:05.392" starttime="20170812 20:49:05.390"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:05.393" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:05.393" starttime="20170812 20:49:05.392"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:05.393" starttime="20170812 20:49:05.392"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:05.394" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:05.394" starttime="20170812 20:49:05.394"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:05.394" starttime="20170812 20:49:05.393"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:05.396" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:05.396" starttime="20170812 20:49:05.395"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:05.396" starttime="20170812 20:49:05.395"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:05.397" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:05.397" starttime="20170812 20:49:05.397"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:05.397" starttime="20170812 20:49:05.396"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:05.399" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:05.399" starttime="20170812 20:49:05.398"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:05.399" starttime="20170812 20:49:05.398"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:05.400" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:05.400" starttime="20170812 20:49:05.400"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:05.400" starttime="20170812 20:49:05.399"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:05.401" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:05.402" starttime="20170812 20:49:05.401"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:05.402" starttime="20170812 20:49:05.400"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:05.403" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:05.403" starttime="20170812 20:49:05.402"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:05.403" starttime="20170812 20:49:05.402"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170812 20:49:05.428" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170812 20:49:05.429" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170812 20:49:06.215" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170812 20:49:06.216" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170812 20:49:06.312" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170812 20:49:06.326" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170812 20:49:06.326" level="INFO">${stderr} = </msg>
<msg timestamp="20170812 20:49:06.326" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170812 20:49:06.326" starttime="20170812 20:49:05.404"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170812 20:49:06.327" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170812 20:49:06.327" starttime="20170812 20:49:06.326"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170812 20:49:06.327" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170812 20:49:06.327" starttime="20170812 20:49:06.327"></status>
</kw>
<msg timestamp="20170812 20:49:06.328" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170812 20:49:06.328" starttime="20170812 20:49:05.403"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:06.329" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:06.329" starttime="20170812 20:49:06.329"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:06.329" starttime="20170812 20:49:06.328"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:06.330" starttime="20170812 20:49:05.397"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:06.331" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:06.331" starttime="20170812 20:49:06.330"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:06.331" starttime="20170812 20:49:06.330"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170812 20:49:06.332" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170812 20:49:06.332" starttime="20170812 20:49:06.331"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:06.333" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:06.333" starttime="20170812 20:49:06.333"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:06.333" starttime="20170812 20:49:06.332"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:06.334" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:06.335" starttime="20170812 20:49:06.334"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:06.335" starttime="20170812 20:49:06.333"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:06.335" starttime="20170812 20:49:06.332"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:06.336" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:06.336" starttime="20170812 20:49:06.336"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:06.336" starttime="20170812 20:49:06.335"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:06.338" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:06.338" starttime="20170812 20:49:06.337"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:06.338" starttime="20170812 20:49:06.337"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:06.338" starttime="20170812 20:49:06.335"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:06.339" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:06.339" starttime="20170812 20:49:06.339"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:06.339" starttime="20170812 20:49:06.338"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:06.341" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:06.341" starttime="20170812 20:49:06.340"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:06.341" starttime="20170812 20:49:06.339"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:06.341" starttime="20170812 20:49:06.338"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:06.341" starttime="20170812 20:49:06.332"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:06.342" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:06.342" starttime="20170812 20:49:06.342"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:06.343" starttime="20170812 20:49:06.341"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:06.343" starttime="20170812 20:49:05.384"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170812 20:49:06.350" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170812 20:49:06.350" starttime="20170812 20:49:06.350"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170812 20:49:06.352" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('SEL Log', 'Collect ...</msg>
<status status="PASS" endtime="20170812 20:49:06.352" starttime="20170812 20:49:06.351"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:06.353" starttime="20170812 20:49:06.353"></status>
</kw>
<msg timestamp="20170812 20:49:06.354" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170812 20:49:06.354" starttime="20170812 20:49:06.352"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:06.357" starttime="20170812 20:49:06.356"></status>
</kw>
<msg timestamp="20170812 20:49:06.357" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 20:49:06.357" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170812 20:49:06.357" starttime="20170812 20:49:06.356"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:06.358" starttime="20170812 20:49:06.357"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170812 20:49:06.383" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170812 20:49:06.383" starttime="20170812 20:49:06.383"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170812 20:49:06.385" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20170812 20:49:06.385" starttime="20170812 20:49:06.384"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170812 20:49:06.391" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170812 20:49:06.391" starttime="20170812 20:49:06.385"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:06.395" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:06.396" starttime="20170812 20:49:06.395"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:06.396" starttime="20170812 20:49:06.394"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:06.397" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:06.397" starttime="20170812 20:49:06.397"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:06.397" starttime="20170812 20:49:06.396"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:06.398" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:06.398" starttime="20170812 20:49:06.398"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:06.399" starttime="20170812 20:49:06.397"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:06.400" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:06.400" starttime="20170812 20:49:06.399"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:06.400" starttime="20170812 20:49:06.399"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:06.400" starttime="20170812 20:49:06.394"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:06.400" starttime="20170812 20:49:06.393"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170812 20:49:06.401" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20170812 20:49:06.401" starttime="20170812 20:49:06.400"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170812 20:49:06.463" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170812 20:49:06.464" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170812 20:49:07.815" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170812 20:49:07.815" starttime="20170812 20:49:06.429"></status>
</kw>
<msg timestamp="20170812 20:49:07.815" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 20:49:07.815" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState....</msg>
<status status="PASS" endtime="20170812 20:49:07.815" starttime="20170812 20:49:06.401"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170812 20:49:07.816" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170812 20:49:07.816" starttime="20170812 20:49:07.816"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170812 20:49:07.817" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170812 20:49:07.817" starttime="20170812 20:49:07.817"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:07.824" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:07.824" starttime="20170812 20:49:07.824"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:07.824" starttime="20170812 20:49:07.823"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:07.824" starttime="20170812 20:49:07.817"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:07.824" starttime="20170812 20:49:06.391"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:07.825" starttime="20170812 20:49:06.391"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:07.825" starttime="20170812 20:49:06.391"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:07.825" starttime="20170812 20:49:06.383"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:07.825" starttime="20170812 20:49:06.383"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170812 20:49:07.826" level="INFO">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170812 20:49:07.826" starttime="20170812 20:49:07.826"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170812 20:49:07.827" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170812 20:49:07.827" starttime="20170812 20:49:07.826"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:07.830" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:07.830" starttime="20170812 20:49:07.830"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:07.830" starttime="20170812 20:49:07.829"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:07.831" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:07.832" starttime="20170812 20:49:07.831"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:07.832" starttime="20170812 20:49:07.830"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:07.833" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:07.833" starttime="20170812 20:49:07.832"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:07.833" starttime="20170812 20:49:07.832"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:07.834" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:07.834" starttime="20170812 20:49:07.834"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:07.834" starttime="20170812 20:49:07.833"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:07.835" starttime="20170812 20:49:07.829"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:07.835" starttime="20170812 20:49:07.828"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170812 20:49:07.835" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20170812 20:49:07.835" starttime="20170812 20:49:07.835"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170812 20:49:07.916" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170812 20:49:07.917" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170812 20:49:07.964" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170812 20:49:07.964" starttime="20170812 20:49:07.877"></status>
</kw>
<msg timestamp="20170812 20:49:07.964" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 20:49:07.964" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.8-139"\nVERSION_ID="v1.99.8-139-gb3dbb28"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status status="PASS" endtime="20170812 20:49:07.964" starttime="20170812 20:49:07.836"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170812 20:49:07.965" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.8-139"
VERSION_ID="v1.99.8-139-gb3dbb28"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status status="PASS" endtime="20170812 20:49:07.965" starttime="20170812 20:49:07.965"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170812 20:49:07.965" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170812 20:49:07.966" starttime="20170812 20:49:07.965"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:07.973" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:07.973" starttime="20170812 20:49:07.972"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:07.973" starttime="20170812 20:49:07.971"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:07.973" starttime="20170812 20:49:07.966"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:07.973" starttime="20170812 20:49:07.827"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:07.973" starttime="20170812 20:49:07.827"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:07.973" starttime="20170812 20:49:07.827"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:07.973" starttime="20170812 20:49:07.825"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:07.973" starttime="20170812 20:49:07.825"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170812 20:49:07.975" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170812 20:49:07.975" starttime="20170812 20:49:07.974"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170812 20:49:07.975" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170812 20:49:07.975" starttime="20170812 20:49:07.975"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:07.979" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:07.979" starttime="20170812 20:49:07.979"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:07.979" starttime="20170812 20:49:07.978"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:07.981" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:07.981" starttime="20170812 20:49:07.980"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:07.981" starttime="20170812 20:49:07.980"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:07.982" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:07.982" starttime="20170812 20:49:07.982"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:07.982" starttime="20170812 20:49:07.981"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:07.984" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:07.984" starttime="20170812 20:49:07.983"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:07.984" starttime="20170812 20:49:07.983"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:07.984" starttime="20170812 20:49:07.977"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:07.984" starttime="20170812 20:49:07.977"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170812 20:49:07.985" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20170812 20:49:07.985" starttime="20170812 20:49:07.984"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170812 20:49:08.053" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170812 20:49:08.053" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170812 20:49:08.130" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170812 20:49:08.130" starttime="20170812 20:49:08.019"></status>
</kw>
<msg timestamp="20170812 20:49:08.130" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 20:49:08.130" level="INFO">${ret_values} = (u' 11:16:50 up 3 min,  load average: 2.20, 1.77, 0.76', u'', 0)</msg>
<status status="PASS" endtime="20170812 20:49:08.130" starttime="20170812 20:49:07.985"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170812 20:49:08.131" level="INFO">${stdout} =  11:16:50 up 3 min,  load average: 2.20, 1.77, 0.76</msg>
<status status="PASS" endtime="20170812 20:49:08.131" starttime="20170812 20:49:08.131"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170812 20:49:08.132" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170812 20:49:08.132" starttime="20170812 20:49:08.132"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:08.139" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:08.139" starttime="20170812 20:49:08.139"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:08.139" starttime="20170812 20:49:08.138"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:08.139" starttime="20170812 20:49:08.132"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:08.139" starttime="20170812 20:49:07.976"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:08.139" starttime="20170812 20:49:07.976"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:08.143" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:08.143" starttime="20170812 20:49:08.143"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:08.144" starttime="20170812 20:49:08.142"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:08.145" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:08.145" starttime="20170812 20:49:08.144"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:08.145" starttime="20170812 20:49:08.144"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:08.146" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:08.146" starttime="20170812 20:49:08.146"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:08.146" starttime="20170812 20:49:08.145"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:08.148" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:08.148" starttime="20170812 20:49:08.147"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:08.148" starttime="20170812 20:49:08.147"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:08.148" starttime="20170812 20:49:08.142"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:08.148" starttime="20170812 20:49:08.141"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170812 20:49:08.149" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20170812 20:49:08.149" starttime="20170812 20:49:08.148"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170812 20:49:08.213" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170812 20:49:08.214" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170812 20:49:08.358" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170812 20:49:08.358" starttime="20170812 20:49:08.176"></status>
</kw>
<msg timestamp="20170812 20:49:08.358" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 20:49:08.359" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status status="PASS" endtime="20170812 20:49:08.359" starttime="20170812 20:49:08.149"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170812 20:49:08.359" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     74.0...</msg>
<status status="PASS" endtime="20170812 20:49:08.359" starttime="20170812 20:49:08.359"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170812 20:49:08.360" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170812 20:49:08.360" starttime="20170812 20:49:08.360"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:08.367" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:08.367" starttime="20170812 20:49:08.367"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:08.367" starttime="20170812 20:49:08.366"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:08.367" starttime="20170812 20:49:08.360"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:08.367" starttime="20170812 20:49:08.140"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:08.367" starttime="20170812 20:49:08.140"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:08.371" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:08.371" starttime="20170812 20:49:08.370"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:08.371" starttime="20170812 20:49:08.370"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:08.372" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:08.372" starttime="20170812 20:49:08.372"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:08.372" starttime="20170812 20:49:08.371"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:08.373" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:08.374" starttime="20170812 20:49:08.373"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:08.374" starttime="20170812 20:49:08.372"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:08.375" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:08.375" starttime="20170812 20:49:08.374"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:08.375" starttime="20170812 20:49:08.374"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:08.375" starttime="20170812 20:49:08.369"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:08.375" starttime="20170812 20:49:08.369"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170812 20:49:08.376" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20170812 20:49:08.376" starttime="20170812 20:49:08.375"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170812 20:49:08.467" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170812 20:49:08.467" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170812 20:49:08.525" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170812 20:49:08.525" starttime="20170812 20:49:08.418"></status>
</kw>
<msg timestamp="20170812 20:49:08.525" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 20:49:08.526" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 #1 Tue Aug 1 17:31:09 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20170812 20:49:08.526" starttime="20170812 20:49:08.376"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170812 20:49:08.526" level="INFO">${stdout} = Linux witherspoon 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 #1 Tue Aug 1 17:31:09 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20170812 20:49:08.526" starttime="20170812 20:49:08.526"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170812 20:49:08.527" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170812 20:49:08.527" starttime="20170812 20:49:08.527"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:08.534" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:08.535" starttime="20170812 20:49:08.534"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:08.535" starttime="20170812 20:49:08.533"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:08.535" starttime="20170812 20:49:08.527"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:08.535" starttime="20170812 20:49:08.368"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:08.535" starttime="20170812 20:49:08.368"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:08.535" starttime="20170812 20:49:07.975"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:08.535" starttime="20170812 20:49:07.974"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:08.535" starttime="20170812 20:49:07.973"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:08.535" starttime="20170812 20:49:06.383"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:08.535" starttime="20170812 20:49:06.379"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:08.535" starttime="20170812 20:49:06.358"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:08.535" starttime="20170812 20:49:06.354"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:08.535" starttime="20170812 20:49:06.354"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:08.538" starttime="20170812 20:49:08.537"></status>
</kw>
<msg timestamp="20170812 20:49:08.538" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 20:49:08.538" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170812 20:49:08.538" starttime="20170812 20:49:08.537"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:08.538" starttime="20170812 20:49:08.538"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170812 20:49:08.563" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170812 20:49:08.563" starttime="20170812 20:49:08.562"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170812 20:49:08.565" level="INFO">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/o...</msg>
<status status="PASS" endtime="20170812 20:49:08.565" starttime="20170812 20:49:08.564"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170812 20:49:08.566" level="INFO">${logpath} = /home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_elog.txt</msg>
<status status="PASS" endtime="20170812 20:49:08.566" starttime="20170812 20:49:08.566"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170812 20:49:08.569" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170812 20:49:08.570" starttime="20170812 20:49:08.569"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 20:49:08.571" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 20:49:08.571" starttime="20170812 20:49:08.570"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170812 20:49:08.571" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170812 20:49:08.571" starttime="20170812 20:49:08.571"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170812 20:49:08.572" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170812 20:49:08.572" starttime="20170812 20:49:08.572"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170812 20:49:08.763" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170812 20:49:08.763" starttime="20170812 20:49:08.573"></status>
</kw>
<msg timestamp="20170812 20:49:08.764" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 20:49:08.764" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:49:08.764" starttime="20170812 20:49:08.572"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170812 20:49:08.764" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:49:08.764" starttime="20170812 20:49:08.764"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 20:49:08.765" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:49:08.765" starttime="20170812 20:49:08.765"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:08.765" starttime="20170812 20:49:08.568"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:08.766" starttime="20170812 20:49:08.568"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:08.766" starttime="20170812 20:49:08.567"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170812 20:49:08.766" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170812 20:49:08.766" starttime="20170812 20:49:08.766"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:08.767" starttime="20170812 20:49:08.767"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170812 20:49:08.892" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170812 20:49:08.893" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:49:08.893" starttime="20170812 20:49:08.767"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:08.893" starttime="20170812 20:49:08.893"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170812 20:49:08.894" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170812 20:49:08.894" starttime="20170812 20:49:08.894"></status>
</kw>
<msg timestamp="20170812 20:49:08.894" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:49:08.894" starttime="20170812 20:49:08.566"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 20:49:08.895" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:49:08.895" starttime="20170812 20:49:08.895"></status>
</kw>
<msg timestamp="20170812 20:49:08.895" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170812 20:49:08.895" starttime="20170812 20:49:08.894"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:08.896" starttime="20170812 20:49:08.896"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170812 20:49:08.897" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [], 
      "Id": 1, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1500635680548, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170812 20:49:08.897" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170812 20:49:08.897" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/1": {
            "AdditionalData": [],
            "Id": 1,
            "Message": "xyz.openbmc_project.Common.Error.InternalFailure",
    ...</msg>
<status status="PASS" endtime="20170812 20:49:08.897" starttime="20170812 20:49:08.896"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:08.898" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_elog.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_elog.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:08.899" starttime="20170812 20:49:08.898"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:08.899" starttime="20170812 20:49:08.897"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:08.899" starttime="20170812 20:49:08.565"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170812 20:49:08.899" level="INFO">${logpath} = /home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170812 20:49:08.900" starttime="20170812 20:49:08.899"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170812 20:49:08.902" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170812 20:49:08.903" starttime="20170812 20:49:08.902"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 20:49:08.904" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 20:49:08.904" starttime="20170812 20:49:08.904"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170812 20:49:08.905" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170812 20:49:08.905" starttime="20170812 20:49:08.904"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170812 20:49:08.905" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170812 20:49:08.905" starttime="20170812 20:49:08.905"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170812 20:49:09.083" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170812 20:49:09.083" starttime="20170812 20:49:08.906"></status>
</kw>
<msg timestamp="20170812 20:49:09.083" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 20:49:09.083" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:49:09.083" starttime="20170812 20:49:08.906"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170812 20:49:09.084" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:49:09.084" starttime="20170812 20:49:09.084"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 20:49:09.085" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:49:09.085" starttime="20170812 20:49:09.084"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:09.085" starttime="20170812 20:49:08.901"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:09.085" starttime="20170812 20:49:08.901"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:09.085" starttime="20170812 20:49:08.900"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170812 20:49:09.086" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" endtime="20170812 20:49:09.086" starttime="20170812 20:49:09.085"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:09.086" starttime="20170812 20:49:09.086"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170812 20:49:09.306" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170812 20:49:09.306" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:49:09.306" starttime="20170812 20:49:09.087"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:09.307" starttime="20170812 20:49:09.307"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170812 20:49:09.307" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170812 20:49:09.307" starttime="20170812 20:49:09.307"></status>
</kw>
<msg timestamp="20170812 20:49:09.308" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:49:09.308" starttime="20170812 20:49:08.900"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 20:49:09.309" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:49:09.309" starttime="20170812 20:49:09.308"></status>
</kw>
<msg timestamp="20170812 20:49:09.309" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170812 20:49:09.309" starttime="20170812 20:49:09.308"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:09.310" starttime="20170812 20:49:09.309"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170812 20:49:09.310" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170812 20:49:09.310" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170812 20:49:09.311" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" endtime="20170812 20:49:09.311" starttime="20170812 20:49:09.310"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:09.312" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:09.312" starttime="20170812 20:49:09.312"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:09.312" starttime="20170812 20:49:09.311"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:09.312" starttime="20170812 20:49:08.899"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170812 20:49:09.313" level="INFO">${logpath} = /home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170812 20:49:09.313" starttime="20170812 20:49:09.313"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170812 20:49:09.316" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170812 20:49:09.317" starttime="20170812 20:49:09.316"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 20:49:09.317" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 20:49:09.318" starttime="20170812 20:49:09.317"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170812 20:49:09.318" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170812 20:49:09.318" starttime="20170812 20:49:09.318"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170812 20:49:09.319" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170812 20:49:09.319" starttime="20170812 20:49:09.318"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170812 20:49:09.543" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170812 20:49:09.543" starttime="20170812 20:49:09.320"></status>
</kw>
<msg timestamp="20170812 20:49:09.543" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 20:49:09.543" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:49:09.544" starttime="20170812 20:49:09.319"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170812 20:49:09.544" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:49:09.544" starttime="20170812 20:49:09.544"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 20:49:09.545" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:49:09.545" starttime="20170812 20:49:09.545"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:09.545" starttime="20170812 20:49:09.315"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:09.545" starttime="20170812 20:49:09.315"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:09.546" starttime="20170812 20:49:09.314"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170812 20:49:09.547" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170812 20:49:09.547" starttime="20170812 20:49:09.546"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:09.548" starttime="20170812 20:49:09.547"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170812 20:49:09.754" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170812 20:49:09.754" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:49:09.754" starttime="20170812 20:49:09.548"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:09.755" starttime="20170812 20:49:09.754"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170812 20:49:09.755" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170812 20:49:09.755" starttime="20170812 20:49:09.755"></status>
</kw>
<msg timestamp="20170812 20:49:09.755" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:49:09.755" starttime="20170812 20:49:09.313"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 20:49:09.756" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:49:09.757" starttime="20170812 20:49:09.756"></status>
</kw>
<msg timestamp="20170812 20:49:09.757" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170812 20:49:09.757" starttime="20170812 20:49:09.756"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:09.757" starttime="20170812 20:49:09.757"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170812 20:49:09.758" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170812 20:49:09.758" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170812 20:49:09.758" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 0
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status status="PASS" endtime="20170812 20:49:09.758" starttime="20170812 20:49:09.758"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:09.760" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_inventory.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:09.760" starttime="20170812 20:49:09.759"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:09.760" starttime="20170812 20:49:09.758"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:09.760" starttime="20170812 20:49:09.313"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170812 20:49:09.761" level="INFO">${logpath} = /home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_led.txt</msg>
<status status="PASS" endtime="20170812 20:49:09.761" starttime="20170812 20:49:09.760"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170812 20:49:09.764" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170812 20:49:09.764" starttime="20170812 20:49:09.764"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 20:49:09.765" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 20:49:09.765" starttime="20170812 20:49:09.765"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170812 20:49:09.766" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170812 20:49:09.766" starttime="20170812 20:49:09.765"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170812 20:49:09.766" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170812 20:49:09.767" starttime="20170812 20:49:09.766"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170812 20:49:09.944" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170812 20:49:09.945" starttime="20170812 20:49:09.767"></status>
</kw>
<msg timestamp="20170812 20:49:09.945" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 20:49:09.945" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:49:09.945" starttime="20170812 20:49:09.767"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170812 20:49:09.946" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:49:09.946" starttime="20170812 20:49:09.945"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 20:49:09.946" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:49:09.946" starttime="20170812 20:49:09.946"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:09.947" starttime="20170812 20:49:09.763"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:09.947" starttime="20170812 20:49:09.762"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:09.947" starttime="20170812 20:49:09.762"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170812 20:49:09.947" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" endtime="20170812 20:49:09.947" starttime="20170812 20:49:09.947"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:09.948" starttime="20170812 20:49:09.948"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170812 20:49:09.991" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170812 20:49:09.991" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170812 20:49:09.991" starttime="20170812 20:49:09.948"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:09.992" starttime="20170812 20:49:09.991"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170812 20:49:09.992" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170812 20:49:09.992" starttime="20170812 20:49:09.992"></status>
</kw>
<msg timestamp="20170812 20:49:09.992" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170812 20:49:09.992" starttime="20170812 20:49:09.761"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 20:49:09.993" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170812 20:49:09.994" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170812 20:49:09.994" starttime="20170812 20:49:09.993"></status>
</kw>
<msg timestamp="20170812 20:49:09.994" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170812 20:49:09.994" starttime="20170812 20:49:09.993"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170812 20:49:09.995" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170812 20:49:09.995" starttime="20170812 20:49:09.995"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:09.995" starttime="20170812 20:49:09.994"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:09.995" starttime="20170812 20:49:09.760"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170812 20:49:09.996" level="INFO">${logpath} = /home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_record_log.txt</msg>
<status status="PASS" endtime="20170812 20:49:09.996" starttime="20170812 20:49:09.995"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170812 20:49:09.999" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170812 20:49:10.000" starttime="20170812 20:49:09.999"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 20:49:10.000" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 20:49:10.000" starttime="20170812 20:49:10.000"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170812 20:49:10.001" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170812 20:49:10.001" starttime="20170812 20:49:10.001"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170812 20:49:10.002" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170812 20:49:10.002" starttime="20170812 20:49:10.001"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170812 20:49:10.181" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170812 20:49:10.181" starttime="20170812 20:49:10.003"></status>
</kw>
<msg timestamp="20170812 20:49:10.181" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 20:49:10.181" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:49:10.181" starttime="20170812 20:49:10.002"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170812 20:49:10.182" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:49:10.182" starttime="20170812 20:49:10.181"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 20:49:10.183" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:49:10.183" starttime="20170812 20:49:10.182"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:10.183" starttime="20170812 20:49:09.998"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:10.183" starttime="20170812 20:49:09.998"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:10.183" starttime="20170812 20:49:09.997"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170812 20:49:10.184" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" endtime="20170812 20:49:10.184" starttime="20170812 20:49:10.183"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:10.184" starttime="20170812 20:49:10.184"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170812 20:49:10.228" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170812 20:49:10.228" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170812 20:49:10.228" starttime="20170812 20:49:10.185"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:10.229" starttime="20170812 20:49:10.228"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170812 20:49:10.229" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170812 20:49:10.229" starttime="20170812 20:49:10.229"></status>
</kw>
<msg timestamp="20170812 20:49:10.229" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170812 20:49:10.229" starttime="20170812 20:49:09.996"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 20:49:10.230" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170812 20:49:10.231" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170812 20:49:10.231" starttime="20170812 20:49:10.230"></status>
</kw>
<msg timestamp="20170812 20:49:10.231" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170812 20:49:10.231" starttime="20170812 20:49:10.230"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170812 20:49:10.232" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170812 20:49:10.232" starttime="20170812 20:49:10.232"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:10.232" starttime="20170812 20:49:10.231"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:10.232" starttime="20170812 20:49:09.995"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:10.232" starttime="20170812 20:49:08.565"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:10.232" starttime="20170812 20:49:08.563"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:10.232" starttime="20170812 20:49:08.563"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:10.232" starttime="20170812 20:49:08.563"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:10.233" starttime="20170812 20:49:08.562"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:10.233" starttime="20170812 20:49:08.539"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:10.233" starttime="20170812 20:49:08.536"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:10.233" starttime="20170812 20:49:08.536"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:10.235" starttime="20170812 20:49:10.234"></status>
</kw>
<msg timestamp="20170812 20:49:10.235" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 20:49:10.235" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170812 20:49:10.235" starttime="20170812 20:49:10.234"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:10.236" starttime="20170812 20:49:10.235"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170812 20:49:10.283" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170812 20:49:10.284" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170812 20:49:10.351" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170812 20:49:10.364" level="INFO">${core_files} = None</msg>
<msg timestamp="20170812 20:49:10.365" level="INFO">${stderr} = None</msg>
<msg timestamp="20170812 20:49:10.365" level="INFO">${rc} = None</msg>
<msg timestamp="20170812 20:49:10.365" level="FAIL">#(UTC) 2017/08/12 20:49:10.363369 -    4.037944 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20170812 20:49:10.365" starttime="20170812 20:49:10.256"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170812 20:49:10.366" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20170812 20:49:10.366" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status status="FAIL" endtime="20170812 20:49:10.366" starttime="20170812 20:49:10.365"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:10.380" starttime="20170812 20:49:10.379"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:11.111" starttime="20170812 20:49:10.381"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:11.111" starttime="20170812 20:49:10.380"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:11.111" starttime="20170812 20:49:10.378"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:11.111" starttime="20170812 20:49:10.366"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170812 20:49:11.111" starttime="20170812 20:49:11.111"></status>
</kw>
<status status="FAIL" endtime="20170812 20:49:11.112" starttime="20170812 20:49:10.255"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:11.112" starttime="20170812 20:49:10.236"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:11.112" starttime="20170812 20:49:10.233"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:11.112" starttime="20170812 20:49:10.233"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:11.114" starttime="20170812 20:49:11.114"></status>
</kw>
<msg timestamp="20170812 20:49:11.114" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 20:49:11.114" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170812 20:49:11.114" starttime="20170812 20:49:11.113"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:11.115" starttime="20170812 20:49:11.115"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170812 20:49:11.134" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170812 20:49:11.134" starttime="20170812 20:49:11.134"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170812 20:49:11.136" level="INFO">@{cmd_list} = [ ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_j...</msg>
<status status="PASS" endtime="20170812 20:49:11.136" starttime="20170812 20:49:11.135"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170812 20:49:11.138" level="INFO">${logpath} = /home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20170812 20:49:11.138" starttime="20170812 20:49:11.137"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:11.139" starttime="20170812 20:49:11.139"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170812 20:49:11.140" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20170812 20:49:11.140" starttime="20170812 20:49:11.139"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170812 20:49:11.201" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170812 20:49:11.202" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170812 20:49:11.733" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170812 20:49:11.733" starttime="20170812 20:49:11.169"></status>
</kw>
<msg timestamp="20170812 20:49:11.734" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 20:49:11.735" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Jul 21 11:16 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Jul 21 11:16 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20170812 20:49:11.735" starttime="20170812 20:49:11.140"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170812 20:49:11.736" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Jul 21 11:16 0 -&gt; /dev/null
lrwx------    1 root     root            64 Jul 21 11:16 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20170812 20:49:11.736" starttime="20170812 20:49:11.735"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170812 20:49:11.736" level="INFO">${stderr} = ls: /proc/1238/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20170812 20:49:11.736" starttime="20170812 20:49:11.736"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:11.746" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:11.746" starttime="20170812 20:49:11.743"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:11.746" starttime="20170812 20:49:11.742"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:11.746" starttime="20170812 20:49:11.737"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:11.746" starttime="20170812 20:49:11.138"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:11.746" starttime="20170812 20:49:11.136"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170812 20:49:11.747" level="INFO">${logpath} = /home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170812 20:49:11.747" starttime="20170812 20:49:11.746"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:11.748" starttime="20170812 20:49:11.748"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170812 20:49:11.749" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20170812 20:49:11.749" starttime="20170812 20:49:11.749"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170812 20:49:11.806" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170812 20:49:11.806" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170812 20:49:11.864" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170812 20:49:11.864" starttime="20170812 20:49:11.775"></status>
</kw>
<msg timestamp="20170812 20:49:11.864" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 20:49:11.865" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20170812 20:49:11.865" starttime="20170812 20:49:11.749"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170812 20:49:11.865" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20170812 20:49:11.865" starttime="20170812 20:49:11.865"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170812 20:49:11.866" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170812 20:49:11.866" starttime="20170812 20:49:11.866"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:11.874" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:11.874" starttime="20170812 20:49:11.873"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:11.874" starttime="20170812 20:49:11.872"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:11.874" starttime="20170812 20:49:11.866"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:11.874" starttime="20170812 20:49:11.747"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:11.874" starttime="20170812 20:49:11.746"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170812 20:49:11.875" level="INFO">${logpath} = /home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170812 20:49:11.875" starttime="20170812 20:49:11.875"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:11.877" starttime="20170812 20:49:11.876"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170812 20:49:11.878" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20170812 20:49:11.878" starttime="20170812 20:49:11.877"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170812 20:49:11.934" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170812 20:49:11.934" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170812 20:49:11.993" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170812 20:49:11.993" starttime="20170812 20:49:11.902"></status>
</kw>
<msg timestamp="20170812 20:49:11.993" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 20:49:11.993" level="INFO">${ret_values} = (u'MemTotal:         432268 kB\nMemFree:          181196 kB\nMemAvailable:     227200 kB\nBuffers:           11264 kB\nCached:           150312 kB\nSwapCached:            0 kB\nActive:           14608...</msg>
<status status="PASS" endtime="20170812 20:49:11.993" starttime="20170812 20:49:11.878"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170812 20:49:11.994" level="INFO">${stdout} = MemTotal:         432268 kB
MemFree:          181196 kB
MemAvailable:     227200 kB
Buffers:           11264 kB
Cached:           150312 kB
SwapCached:            0 kB
Active:           146088 kB
Inac...</msg>
<status status="PASS" endtime="20170812 20:49:11.994" starttime="20170812 20:49:11.994"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170812 20:49:11.995" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170812 20:49:11.995" starttime="20170812 20:49:11.994"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:12.002" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:12.002" starttime="20170812 20:49:12.001"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:12.002" starttime="20170812 20:49:12.000"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:12.002" starttime="20170812 20:49:11.995"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:12.002" starttime="20170812 20:49:11.876"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:12.002" starttime="20170812 20:49:11.875"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170812 20:49:12.003" level="INFO">${logpath} = /home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170812 20:49:12.003" starttime="20170812 20:49:12.003"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:12.005" starttime="20170812 20:49:12.004"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170812 20:49:12.005" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20170812 20:49:12.005" starttime="20170812 20:49:12.005"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170812 20:49:12.063" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170812 20:49:12.063" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170812 20:49:12.342" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170812 20:49:12.343" starttime="20170812 20:49:12.031"></status>
</kw>
<msg timestamp="20170812 20:49:12.343" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 20:49:12.343" level="INFO">${ret_values} = (u'Mem: 251104K used, 181164K free, 113168K shrd, 11264K buff, 150316K cached\nCPU:   0% usr  16% sys   0% nic  83% idle   0% io   0% irq   0% sirq\nLoad average: 2.10 1.76 0.77 1/152 1241\n  PID  PPI...</msg>
<status status="PASS" endtime="20170812 20:49:12.343" starttime="20170812 20:49:12.006"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170812 20:49:12.344" level="INFO">${stdout} = Mem: 251104K used, 181164K free, 113168K shrd, 11264K buff, 150316K cached
CPU:   0% usr  16% sys   0% nic  83% idle   0% io   0% irq   0% sirq
Load average: 2.10 1.76 0.77 1/152 1241
  PID  PPID USER...</msg>
<status status="PASS" endtime="20170812 20:49:12.344" starttime="20170812 20:49:12.344"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170812 20:49:12.344" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170812 20:49:12.345" starttime="20170812 20:49:12.344"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:12.352" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:12.352" starttime="20170812 20:49:12.351"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:12.352" starttime="20170812 20:49:12.350"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:12.352" starttime="20170812 20:49:12.345"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:12.352" starttime="20170812 20:49:12.004"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:12.352" starttime="20170812 20:49:12.002"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170812 20:49:12.353" level="INFO">${logpath} = /home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170812 20:49:12.354" starttime="20170812 20:49:12.353"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:12.355" starttime="20170812 20:49:12.355"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170812 20:49:12.357" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20170812 20:49:12.357" starttime="20170812 20:49:12.356"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170812 20:49:12.413" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170812 20:49:12.414" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170812 20:49:12.471" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170812 20:49:12.471" starttime="20170812 20:49:12.383"></status>
</kw>
<msg timestamp="20170812 20:49:12.471" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 20:49:12.471" level="INFO">${ret_values} = (u'[    0.000000] Booting Linux on physical CPU 0x0\n[    0.000000] Linux version 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 (jenkins@hudson) (gcc version 6.2.0 (GCC) ) #1 Tue Aug 1 17:31:09 UTC...</msg>
<status status="PASS" endtime="20170812 20:49:12.471" starttime="20170812 20:49:12.357"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170812 20:49:12.472" level="INFO">${stdout} = [    0.000000] Booting Linux on physical CPU 0x0
[    0.000000] Linux version 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 (jenkins@hudson) (gcc version 6.2.0 (GCC) ) #1 Tue Aug 1 17:31:09 UTC 201...</msg>
<status status="PASS" endtime="20170812 20:49:12.472" starttime="20170812 20:49:12.472"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170812 20:49:12.473" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170812 20:49:12.473" starttime="20170812 20:49:12.472"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:12.481" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:12.481" starttime="20170812 20:49:12.480"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:12.481" starttime="20170812 20:49:12.479"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:12.481" starttime="20170812 20:49:12.473"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:12.481" starttime="20170812 20:49:12.354"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:12.481" starttime="20170812 20:49:12.352"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170812 20:49:12.482" level="INFO">${logpath} = /home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_journalctl.txt</msg>
<status status="PASS" endtime="20170812 20:49:12.482" starttime="20170812 20:49:12.481"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:12.483" starttime="20170812 20:49:12.483"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170812 20:49:12.484" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20170812 20:49:12.484" starttime="20170812 20:49:12.484"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170812 20:49:12.539" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170812 20:49:12.540" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170812 20:49:13.487" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170812 20:49:13.487" starttime="20170812 20:49:12.508"></status>
</kw>
<msg timestamp="20170812 20:49:13.488" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 20:49:13.489" level="INFO">${ret_values} = (u'-- Logs begin at Fri 2017-07-21 11:13:44 UTC, end at Fri 2017-07-21 11:16:53 UTC. --\nJul 21 11:13:44 witherspoon kernel: Booting Linux on physical CPU 0x0\nJul 21 11:13:44 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20170812 20:49:13.489" starttime="20170812 20:49:12.484"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170812 20:49:13.491" level="INFO">${stdout} = -- Logs begin at Fri 2017-07-21 11:13:44 UTC, end at Fri 2017-07-21 11:16:53 UTC. --
Jul 21 11:13:44 witherspoon kernel: Booting Linux on physical CPU 0x0
Jul 21 11:13:44 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20170812 20:49:13.491" starttime="20170812 20:49:13.490"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170812 20:49:13.492" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170812 20:49:13.492" starttime="20170812 20:49:13.491"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 20:49:13.503" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_journalctl.txt"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:13.503" starttime="20170812 20:49:13.502"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:13.503" starttime="20170812 20:49:13.501"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:13.503" starttime="20170812 20:49:13.492"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:13.503" starttime="20170812 20:49:12.482"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:13.503" starttime="20170812 20:49:12.481"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:13.503" starttime="20170812 20:49:11.136"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:13.504" starttime="20170812 20:49:11.135"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:13.504" starttime="20170812 20:49:11.134"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:13.504" starttime="20170812 20:49:11.134"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:13.504" starttime="20170812 20:49:11.133"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:13.504" starttime="20170812 20:49:11.115"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:13.504" starttime="20170812 20:49:11.112"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:13.504" starttime="20170812 20:49:11.112"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:13.506" starttime="20170812 20:49:13.506"></status>
</kw>
<msg timestamp="20170812 20:49:13.506" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 20:49:13.506" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170812 20:49:13.506" starttime="20170812 20:49:13.505"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:13.507" starttime="20170812 20:49:13.506"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170812 20:49:13.528" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170812 20:49:13.529" starttime="20170812 20:49:13.528"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 20:49:13.529" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 20:49:13.529" starttime="20170812 20:49:13.529"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170812 20:49:13.530" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170812 20:49:13.530" starttime="20170812 20:49:13.530"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170812 20:49:13.531" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170812 20:49:13.531" starttime="20170812 20:49:13.530"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170812 20:49:13.726" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170812 20:49:13.726" starttime="20170812 20:49:13.532"></status>
</kw>
<msg timestamp="20170812 20:49:13.726" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 20:49:13.726" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:49:13.726" starttime="20170812 20:49:13.531"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170812 20:49:13.727" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:49:13.727" starttime="20170812 20:49:13.726"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 20:49:13.727" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:49:13.727" starttime="20170812 20:49:13.727"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:13.728" starttime="20170812 20:49:13.527"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:13.728" starttime="20170812 20:49:13.527"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:13.728" starttime="20170812 20:49:13.526"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170812 20:49:13.728" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170812 20:49:13.728" starttime="20170812 20:49:13.728"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:13.729" starttime="20170812 20:49:13.729"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170812 20:49:13.845" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170812 20:49:13.845" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:49:13.845" starttime="20170812 20:49:13.729"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:13.846" starttime="20170812 20:49:13.846"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170812 20:49:13.847" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170812 20:49:13.847" starttime="20170812 20:49:13.846"></status>
</kw>
<msg timestamp="20170812 20:49:13.847" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:49:13.847" starttime="20170812 20:49:13.525"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 20:49:13.848" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:49:13.848" starttime="20170812 20:49:13.848"></status>
</kw>
<msg timestamp="20170812 20:49:13.848" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170812 20:49:13.848" starttime="20170812 20:49:13.847"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:13.849" starttime="20170812 20:49:13.849"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170812 20:49:13.849" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [], 
      "Id": 1, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1500635680548, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170812 20:49:13.850" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170812 20:49:13.850" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/logging/entry/1': {u'Resolved': 0, u'AdditionalData': [], u'Severity': u'xyz.openbmc_project.Logging.Entry.Level.Error', u'Ti...</msg>
<status status="PASS" endtime="20170812 20:49:13.850" starttime="20170812 20:49:13.849"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg timestamp="20170812 20:49:13.850" level="INFO">${esel_list} = [u'/xyz/openbmc_project/logging/entry/1']</msg>
<status status="PASS" endtime="20170812 20:49:13.850" starttime="20170812 20:49:13.850"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170812 20:49:13.851" level="INFO">${logpath} = /home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_esel</msg>
<status status="PASS" endtime="20170812 20:49:13.851" starttime="20170812 20:49:13.851"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg timestamp="20170812 20:49:13.852" html="yes" level="INFO">Created file '&lt;a href="file:///home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_esel"&gt;/home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/20170812204905308227_esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:13.852" starttime="20170812 20:49:13.851"></status>
</kw>
<kw type="for" name="${entry_path} IN [ @{esel_list} ]">
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/1">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:13.853" starttime="20170812 20:49:13.852"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170812 20:49:13.857" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170812 20:49:13.857" starttime="20170812 20:49:13.857"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 20:49:13.858" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 20:49:13.858" starttime="20170812 20:49:13.858"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170812 20:49:13.859" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170812 20:49:13.859" starttime="20170812 20:49:13.858"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170812 20:49:13.860" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170812 20:49:13.860" starttime="20170812 20:49:13.859"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170812 20:49:14.037" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170812 20:49:14.037" starttime="20170812 20:49:13.861"></status>
</kw>
<msg timestamp="20170812 20:49:14.037" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 20:49:14.037" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:49:14.037" starttime="20170812 20:49:13.860"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170812 20:49:14.038" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:49:14.038" starttime="20170812 20:49:14.037"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 20:49:14.038" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:49:14.039" starttime="20170812 20:49:14.038"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:14.039" starttime="20170812 20:49:13.856"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:14.039" starttime="20170812 20:49:13.856"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:14.039" starttime="20170812 20:49:13.855"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170812 20:49:14.039" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/1/attr/AdditionalData</msg>
<status status="PASS" endtime="20170812 20:49:14.040" starttime="20170812 20:49:14.039"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:14.040" starttime="20170812 20:49:14.040"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170812 20:49:14.157" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/1/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170812 20:49:14.158" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:49:14.158" starttime="20170812 20:49:14.040"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:14.158" starttime="20170812 20:49:14.158"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170812 20:49:14.159" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170812 20:49:14.159" starttime="20170812 20:49:14.159"></status>
</kw>
<msg timestamp="20170812 20:49:14.159" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 20:49:14.159" starttime="20170812 20:49:13.854"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 20:49:14.160" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 20:49:14.160" starttime="20170812 20:49:14.159"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170812 20:49:14.161" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170812 20:49:14.161" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170812 20:49:14.161" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': []}</msg>
<status status="PASS" endtime="20170812 20:49:14.161" starttime="20170812 20:49:14.160"></status>
</kw>
<msg timestamp="20170812 20:49:14.161" level="INFO">${esel_data} = []</msg>
<status status="PASS" endtime="20170812 20:49:14.161" starttime="20170812 20:49:13.853"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170812 20:49:14.162" level="INFO">Length is 0</msg>
<msg timestamp="20170812 20:49:14.162" level="INFO">${length} = 0</msg>
<status status="PASS" endtime="20170812 20:49:14.162" starttime="20170812 20:49:14.161"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170812 20:49:14.162" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170812 20:49:14.163" starttime="20170812 20:49:14.162"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:14.163" starttime="20170812 20:49:13.852"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:14.163" starttime="20170812 20:49:13.852"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20170812 20:49:14.195" level="INFO">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg timestamp="20170812 20:49:14.199" level="INFO">${out} = </msg>
<status status="PASS" endtime="20170812 20:49:14.200" starttime="20170812 20:49:14.163"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg timestamp="20170812 20:49:14.205" level="FAIL">'' does not contain 'eSEL.pl'</msg>
<status status="FAIL" endtime="20170812 20:49:14.205" starttime="20170812 20:49:14.204"></status>
</kw>
<msg timestamp="20170812 20:49:14.205" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170812 20:49:14.205" starttime="20170812 20:49:14.203"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170812 20:49:14.207" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170812 20:49:14.207" starttime="20170812 20:49:14.206"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:14.207" starttime="20170812 20:49:13.525"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:14.207" starttime="20170812 20:49:13.507"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:14.208" starttime="20170812 20:49:13.504"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:14.208" starttime="20170812 20:49:13.504"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:14.213" starttime="20170812 20:49:14.211"></status>
</kw>
<msg timestamp="20170812 20:49:14.213" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 20:49:14.213" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170812 20:49:14.213" starttime="20170812 20:49:14.210"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:14.214" starttime="20170812 20:49:14.214"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170812 20:49:14.234" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170812 20:49:14.235" starttime="20170812 20:49:14.234"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:14.235" starttime="20170812 20:49:14.233"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:14.235" starttime="20170812 20:49:14.215"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:14.235" starttime="20170812 20:49:14.209"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:14.235" starttime="20170812 20:49:14.208"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:14.235" starttime="20170812 20:49:06.354"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:14.235" starttime="20170812 20:49:06.351"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:14.235" starttime="20170812 20:49:06.351"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:14.235" starttime="20170812 20:49:06.350"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170812 20:49:14.265" starttime="20170812 20:49:14.245"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:14.265" starttime="20170812 20:49:14.236"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:14.265" starttime="20170812 20:49:06.349"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:14.266" starttime="20170812 20:49:02.253"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:14.266" starttime="20170812 20:49:02.252"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:14.267" starttime="20170812 20:49:14.266"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170812 20:49:14.268" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20170812 20:49:14.268" starttime="20170812 20:49:14.267"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170812 20:49:14.268" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170812204905308227_UpdateBmc/20170812204905308227_InitiateCodeUpdateBMC/</msg>
<status status="PASS" endtime="20170812 20:49:14.268" starttime="20170812 20:49:14.268"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:14.269" starttime="20170812 20:49:14.269"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:14.270" starttime="20170812 20:49:14.269"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170812 20:49:14.270" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld/logs"&gt;/home/fspcibld/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170812 20:49:14.270" starttime="20170812 20:49:14.270"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170812 20:49:14.272" level="FAIL">File '/home/fspcibld/logs/test_history.txt' does not exist.</msg>
<status status="FAIL" endtime="20170812 20:49:14.272" starttime="20170812 20:49:14.271"></status>
</kw>
<msg timestamp="20170812 20:49:14.272" level="INFO">${exist} = False</msg>
<status status="PASS" endtime="20170812 20:49:14.272" starttime="20170812 20:49:14.271"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170812 20:49:14.274" html="yes" level="INFO">Created file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:14.274" starttime="20170812 20:49:14.273"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:14.274" starttime="20170812 20:49:14.272"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170812 20:49:14.275" starttime="20170812 20:49:14.274"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170812 20:49:14.277" level="INFO">${cur_time} = 2017-08-12 20:49:14:276349</msg>
<status status="PASS" endtime="20170812 20:49:14.277" starttime="20170812 20:49:14.276"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170812 20:49:14.277" level="INFO">${cur_time} = 20170812204914276349</msg>
<status status="PASS" endtime="20170812 20:49:14.277" starttime="20170812 20:49:14.277"></status>
</kw>
<msg timestamp="20170812 20:49:14.277" level="INFO">${cur_time} = 20170812204914276349</msg>
<status status="PASS" endtime="20170812 20:49:14.277" starttime="20170812 20:49:14.275"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170812 20:49:14.278" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 20:49:14.278" starttime="20170812 20:49:14.278"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:14.278" starttime="20170812 20:49:14.267"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:14.279" starttime="20170812 20:49:01.910"></status>
</kw>
<status status="PASS" endtime="20170812 20:49:14.279" starttime="20170812 20:49:01.896"></status>
</kw>
<doc>Initiate a code update on the BMC.</doc>
<tags>
<tag>Initiate_Code_Update_BMC</tag>
</tags>
<status status="FAIL" endtime="20170812 20:49:14.279" critical="yes" starttime="20170812 20:44:57.648">'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files
ERROR: Image image-bmc too big for mtd0.
' does not contain 'to apply'</status>
</test>
<doc>Trigger code update to a target BMC.
Execution Method :
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v FILE_PATH:&lt;path/*all.tar&gt; update_bmc.robot

Code update method BMC using REST
Update work flow sequence:
- User input BMC File existence check
- Ping Test and REST authentication
- Set Host Power host setting Policy to RESTORE_LAST_STATE
On reboot this policy would ensure the BMC comes
online and stays at HOST_POWERED_OFF state.
- Issue poweroff
- Prune archived journal logs
- Prepare for Update
- Wait for BMC to come online clean
- Wait for BMC_READY state
- Apply preserve BMC Network setting
- SCP image to BMC
- Activate the flash image
- Warm Reset BMC to activate code
- Wait for BMC to come online time out 30 minutes
- Version check post update
- Identify REST url post update</doc>
<status status="FAIL" endtime="20170812 20:49:14.280" starttime="20170812 20:44:56.503"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">Initiate_Code_Update_BMC</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Update Bmc" pass="0">Update Bmc</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20170812 20:45:56.289" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff805d0a90&gt;: Failed to establish a new connection: [Errno 113] No route to host',)': /login</msg>
<msg timestamp="20170812 20:45:59.489" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff805d0bd0&gt;: Failed to establish a new connection: [Errno 113] No route to host',)': /login</msg>
<msg timestamp="20170812 20:46:02.689" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff805d0d50&gt;: Failed to establish a new connection: [Errno 113] No route to host',)': /login</msg>
</errors>
</robot>
