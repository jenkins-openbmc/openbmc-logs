<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0.2 (Python 2.7.12 on linux2)" generated="20170825 15:11:19.381">
<suite name="Tests" source="/tmp/fspcibld/6657/obmc-robot/tests" id="s1">
<kw name="System Driver Data" type="setup">
<doc>System driver information.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:11:19.875">Dictionary does not contain key 'host'.</msg>
<status endtime="20170825 15:11:19.875" status="FAIL" starttime="20170825 15:11:19.875"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:19.876">${has_host} = False</msg>
<status endtime="20170825 15:11:19.876" status="PASS" starttime="20170825 15:11:19.875"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170825 15:11:19.877" status="PASS" starttime="20170825 15:11:19.876"></status>
</kw>
<status endtime="20170825 15:11:19.877" status="PASS" starttime="20170825 15:11:19.876"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:19.878">${port_num} = 22</msg>
<status endtime="20170825 15:11:19.878" status="PASS" starttime="20170825 15:11:19.878"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:19.879">${SSH_PORT} = 22</msg>
<status endtime="20170825 15:11:19.879" status="PASS" starttime="20170825 15:11:19.879"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:19.879">${https_num} = 443</msg>
<status endtime="20170825 15:11:19.879" status="PASS" starttime="20170825 15:11:19.879"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:19.880">${AUTH_URI} = https://9.3.21.61:443</msg>
<status endtime="20170825 15:11:19.880" status="PASS" starttime="20170825 15:11:19.880"></status>
</kw>
<status endtime="20170825 15:11:19.880" status="PASS" starttime="20170825 15:11:19.877"></status>
</kw>
<status endtime="20170825 15:11:19.880" status="PASS" starttime="20170825 15:11:19.877"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:11:19.881">Dictionary does not contain key 'port'.</msg>
<status endtime="20170825 15:11:19.881" status="FAIL" starttime="20170825 15:11:19.881"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:19.881">${has_port} = False</msg>
<status endtime="20170825 15:11:19.881" status="PASS" starttime="20170825 15:11:19.881"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170825 15:11:19.883" status="PASS" starttime="20170825 15:11:19.883"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170825 15:11:19.884" status="PASS" starttime="20170825 15:11:19.883"></status>
</kw>
<status endtime="20170825 15:11:19.884" status="PASS" starttime="20170825 15:11:19.882"></status>
</kw>
<status endtime="20170825 15:11:19.884" status="PASS" starttime="20170825 15:11:19.882"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:19.884">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170825 15:11:21.590">Read output: root@witherspoon:~#</msg>
<status endtime="20170825 15:11:21.590" status="PASS" starttime="20170825 15:11:19.884"></status>
</kw>
<status endtime="20170825 15:11:21.590" status="PASS" starttime="20170825 15:11:19.874"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:21.591">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg level="INFO" timestamp="20170825 15:11:21.678">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170825 15:11:21.678">${output} = VERSION_ID="v1.99.8-259-gee7b707"</msg>
<msg level="INFO" timestamp="20170825 15:11:21.679">${stderr} = </msg>
<status endtime="20170825 15:11:21.679" status="PASS" starttime="20170825 15:11:21.591"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:21.679">Length is 0</msg>
<status endtime="20170825 15:11:21.679" status="PASS" starttime="20170825 15:11:21.679"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:21.680">VERSION_ID="v1.99.8-259-gee7b707"</msg>
<status endtime="20170825 15:11:21.680" status="PASS" starttime="20170825 15:11:21.679"></status>
</kw>
<status endtime="20170825 15:11:21.680" status="PASS" starttime="20170825 15:11:21.591"></status>
</kw>
<status endtime="20170825 15:11:21.680" status="PASS" starttime="20170825 15:11:21.590"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:21.681">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg level="INFO" timestamp="20170825 15:11:21.821">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170825 15:11:21.821">${stdout} = </msg>
<msg level="INFO" timestamp="20170825 15:11:21.821">${stderr} = sh: /usr/sbin/pflash: No such file or directory
cat: can't open '/tmp/out.txt': No such file or directory</msg>
<status endtime="20170825 15:11:21.821" status="PASS" starttime="20170825 15:11:21.681"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:21.822">Length is 105</msg>
<msg level="FAIL" timestamp="20170825 15:11:21.822">'sh: /usr/sbin/pflash: No such file or directory
cat: can't open '/tmp/out.txt': No such file or directory' should be empty.</msg>
<status endtime="20170825 15:11:21.822" status="FAIL" starttime="20170825 15:11:21.821"></status>
</kw>
<status endtime="20170825 15:11:21.822" status="FAIL" starttime="20170825 15:11:21.681"></status>
</kw>
<status endtime="20170825 15:11:21.822" status="FAIL" starttime="20170825 15:11:21.681"></status>
</kw>
<status endtime="20170825 15:11:21.822" status="PASS" starttime="20170825 15:11:21.680"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:22.020">newline=

height=24
prompt=# 
path_separator=/
host=9.3.21.61
index=1
term_type=vt100
port=22
width=80
timeout=25 seconds
encoding=UTF-8
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170825 15:11:22.021">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170825 15:11:22.841">Read output: root@witherspoon:~#</msg>
<msg level="INFO" timestamp="20170825 15:11:22.841">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170825 15:11:22.918">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170825 15:11:22.926">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170825 15:11:22.926">${stderr} = </msg>
<msg level="INFO" timestamp="20170825 15:11:22.926">${rc} = 0</msg>
<status endtime="20170825 15:11:22.926" status="PASS" starttime="20170825 15:11:21.823"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:22.927">Length is 0</msg>
<status endtime="20170825 15:11:22.927" status="PASS" starttime="20170825 15:11:22.927"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:22.927">Length is 11</msg>
<status endtime="20170825 15:11:22.927" status="PASS" starttime="20170825 15:11:22.927"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:22.928">${bmc_model} = Witherspoon</msg>
<status endtime="20170825 15:11:22.928" status="PASS" starttime="20170825 15:11:21.823"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:22.928">BMC Model=Witherspoon</msg>
<status endtime="20170825 15:11:22.928" status="PASS" starttime="20170825 15:11:22.928"></status>
</kw>
<status endtime="20170825 15:11:22.928" status="PASS" starttime="20170825 15:11:21.823"></status>
</kw>
<status endtime="20170825 15:11:22.928" status="PASS" starttime="20170825 15:11:21.823"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw name="Enable Core Dump On BMC" library="utils">
<doc>Enable core dump collection.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:11:22.931">Dictionary does not contain key 'host'.</msg>
<status endtime="20170825 15:11:22.931" status="FAIL" starttime="20170825 15:11:22.930"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:22.931">${has_host} = False</msg>
<status endtime="20170825 15:11:22.931" status="PASS" starttime="20170825 15:11:22.930"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170825 15:11:22.932" status="PASS" starttime="20170825 15:11:22.932"></status>
</kw>
<status endtime="20170825 15:11:22.932" status="PASS" starttime="20170825 15:11:22.931"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:22.934">${port_num} = 22</msg>
<status endtime="20170825 15:11:22.934" status="PASS" starttime="20170825 15:11:22.933"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:22.934">${SSH_PORT} = 22</msg>
<status endtime="20170825 15:11:22.934" status="PASS" starttime="20170825 15:11:22.934"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:22.935">${https_num} = 443</msg>
<status endtime="20170825 15:11:22.935" status="PASS" starttime="20170825 15:11:22.934"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:22.936">${AUTH_URI} = https://9.3.21.61:443</msg>
<status endtime="20170825 15:11:22.936" status="PASS" starttime="20170825 15:11:22.935"></status>
</kw>
<status endtime="20170825 15:11:22.936" status="PASS" starttime="20170825 15:11:22.933"></status>
</kw>
<status endtime="20170825 15:11:22.936" status="PASS" starttime="20170825 15:11:22.932"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:11:22.937">Dictionary does not contain key 'port'.</msg>
<status endtime="20170825 15:11:22.937" status="FAIL" starttime="20170825 15:11:22.936"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:22.937">${has_port} = False</msg>
<status endtime="20170825 15:11:22.937" status="PASS" starttime="20170825 15:11:22.936"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170825 15:11:22.938" status="PASS" starttime="20170825 15:11:22.938"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170825 15:11:22.939" status="PASS" starttime="20170825 15:11:22.939"></status>
</kw>
<status endtime="20170825 15:11:22.939" status="PASS" starttime="20170825 15:11:22.938"></status>
</kw>
<status endtime="20170825 15:11:22.939" status="PASS" starttime="20170825 15:11:22.937"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:22.940">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170825 15:11:24.589">Read output: root@witherspoon:~#</msg>
<status endtime="20170825 15:11:24.589" status="PASS" starttime="20170825 15:11:22.939"></status>
</kw>
<status endtime="20170825 15:11:24.590" status="PASS" starttime="20170825 15:11:22.929"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:24.591">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg level="INFO" timestamp="20170825 15:11:24.687">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170825 15:11:24.688">${stdout} = /tmp/core_%e.%p</msg>
<msg level="INFO" timestamp="20170825 15:11:24.688">${stderr} = </msg>
<status endtime="20170825 15:11:24.688" status="PASS" starttime="20170825 15:11:24.590"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:24.688">Length is 0</msg>
<status endtime="20170825 15:11:24.688" status="PASS" starttime="20170825 15:11:24.688"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:24.688">${core_pattern} = /tmp/core_%e.%p</msg>
<status endtime="20170825 15:11:24.688" status="PASS" starttime="20170825 15:11:24.590"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status endtime="20170825 15:11:24.689" status="PASS" starttime="20170825 15:11:24.689"></status>
</kw>
<status endtime="20170825 15:11:24.689" status="PASS" starttime="20170825 15:11:22.929"></status>
</kw>
<status endtime="20170825 15:11:24.689" status="PASS" starttime="20170825 15:11:22.929"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status endtime="20170825 15:11:24.690" status="PASS" starttime="20170825 15:11:24.689"></status>
</kw>
<status endtime="20170825 15:11:24.690" status="PASS" starttime="20170825 15:11:19.874"></status>
</kw>
<suite name="Security" source="/tmp/fspcibld/6657/obmc-robot/tests/security" id="s1-s1">
<suite name="Test Ssl" source="/tmp/fspcibld/6657/obmc-robot/tests/security/test_ssl.robot" id="s1-s1-s1">
<test name="Test SSL Connection" id="s1-s1-s1-t1">
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:24.775">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:11:24.775" status="PASS" starttime="20170825 15:11:24.774"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:24.776">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:11:24.776" status="PASS" starttime="20170825 15:11:24.775"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:24.776">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:11:24.777" status="PASS" starttime="20170825 15:11:24.776"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:24.777">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:11:24.777" status="PASS" starttime="20170825 15:11:24.777"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:24.959">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:11:24.959" status="PASS" starttime="20170825 15:11:24.778"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:24.959">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:11:24.959">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:11:24.959" status="PASS" starttime="20170825 15:11:24.777"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:24.960">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:11:24.960" status="PASS" starttime="20170825 15:11:24.959"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:24.960">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:11:24.960" status="PASS" starttime="20170825 15:11:24.960"></status>
</kw>
<status endtime="20170825 15:11:24.961" status="PASS" starttime="20170825 15:11:24.774"></status>
</kw>
<status endtime="20170825 15:11:24.961" status="PASS" starttime="20170825 15:11:24.773"></status>
</kw>
<status endtime="20170825 15:11:24.961" status="PASS" starttime="20170825 15:11:24.773"></status>
</kw>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:24.967">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:11:24.967" status="PASS" starttime="20170825 15:11:24.966"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:24.968">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:11:24.968" status="PASS" starttime="20170825 15:11:24.967"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:24.968">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:11:24.968" status="PASS" starttime="20170825 15:11:24.968"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:24.969">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:11:24.969" status="PASS" starttime="20170825 15:11:24.969"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:25.169">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:11:25.169" status="PASS" starttime="20170825 15:11:24.970"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:25.169">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:11:25.170">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:11:25.170" status="PASS" starttime="20170825 15:11:24.969"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:25.170">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:11:25.170" status="PASS" starttime="20170825 15:11:25.170"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:25.171">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:11:25.171" status="PASS" starttime="20170825 15:11:25.171"></status>
</kw>
<status endtime="20170825 15:11:25.171" status="PASS" starttime="20170825 15:11:24.966"></status>
</kw>
<status endtime="20170825 15:11:25.171" status="PASS" starttime="20170825 15:11:24.965"></status>
</kw>
<status endtime="20170825 15:11:25.171" status="PASS" starttime="20170825 15:11:24.965"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:25.172">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:11:25.172" status="PASS" starttime="20170825 15:11:25.172"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:25.174">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:11:25.174" status="PASS" starttime="20170825 15:11:25.174"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:25.175">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:11:25.175" status="PASS" starttime="20170825 15:11:25.175"></status>
</kw>
<status endtime="20170825 15:11:25.176" status="PASS" starttime="20170825 15:11:25.175"></status>
</kw>
<status endtime="20170825 15:11:25.176" status="PASS" starttime="20170825 15:11:25.173"></status>
</kw>
<status endtime="20170825 15:11:25.176" status="PASS" starttime="20170825 15:11:25.172"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:25.303">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:11:25.303">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:11:25.303" status="PASS" starttime="20170825 15:11:25.176"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:25.305">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:11:25.305" status="PASS" starttime="20170825 15:11:25.305"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:25.306">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:11:25.306" status="PASS" starttime="20170825 15:11:25.306"></status>
</kw>
<status endtime="20170825 15:11:25.306" status="PASS" starttime="20170825 15:11:25.305"></status>
</kw>
<status endtime="20170825 15:11:25.306" status="PASS" starttime="20170825 15:11:25.304"></status>
</kw>
<status endtime="20170825 15:11:25.306" status="PASS" starttime="20170825 15:11:25.304"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:11:25.307">Delete All Sessions</msg>
<status endtime="20170825 15:11:25.307" status="PASS" starttime="20170825 15:11:25.307"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:25.308">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:11:25.308" status="PASS" starttime="20170825 15:11:24.964"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:25.308">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:11:25.308" status="PASS" starttime="20170825 15:11:25.308"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:25.309">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:11:25.309">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:11:25.309">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:11:25.309" status="PASS" starttime="20170825 15:11:25.309"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:25.309">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170825 15:11:25.309" status="PASS" starttime="20170825 15:11:24.964"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:25.310">${host_state} = Off</msg>
<status endtime="20170825 15:11:25.310" status="PASS" starttime="20170825 15:11:24.963"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:11:25.311">Off != Quiesced</msg>
<status endtime="20170825 15:11:25.311" status="FAIL" starttime="20170825 15:11:25.310"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:25.311">${status} = False</msg>
<status endtime="20170825 15:11:25.311" status="PASS" starttime="20170825 15:11:25.310"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:25.311">${status} = False</msg>
<status endtime="20170825 15:11:25.311" status="PASS" starttime="20170825 15:11:24.961"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20170825 15:11:25.312" status="PASS" starttime="20170825 15:11:25.311"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170825 15:11:25.312" status="PASS" starttime="20170825 15:11:25.312"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:25.322">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170825 15:11:25.322" status="PASS" starttime="20170825 15:11:25.313"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:25.334">${FFDC_DIR_PATH} = </msg>
<status endtime="20170825 15:11:25.334" status="PASS" starttime="20170825 15:11:25.323"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw name="Set Ffdc Defaults" library="openbmc_ffdc">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:25.335">${cur_time} = 2017-08-25 15:11:25:335289</msg>
<status endtime="20170825 15:11:25.336" status="PASS" starttime="20170825 15:11:25.335"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:25.336">${cur_time} = 20170825151125335289</msg>
<status endtime="20170825 15:11:25.336" status="PASS" starttime="20170825 15:11:25.336"></status>
</kw>
<status endtime="20170825 15:11:25.336" status="PASS" starttime="20170825 15:11:25.335"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:25.341">${FFDC_TIME} = 20170825151125335289</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:25.342">${suite_name} = TestsSecurityTestSsl</msg>
<status endtime="20170825 15:11:25.342" status="PASS" starttime="20170825 15:11:25.341"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:25.342">${suite_name} = 20170825151125335289_TestsSecurityTestSsl</msg>
<status endtime="20170825 15:11:25.343" status="PASS" starttime="20170825 15:11:25.342"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:25.343">${test_name} = TestSSLConnection</msg>
<status endtime="20170825 15:11:25.343" status="PASS" starttime="20170825 15:11:25.343"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:25.344">${test_name} = 20170825151125335289_TestSSLConnection</msg>
<status endtime="20170825 15:11:25.344" status="PASS" starttime="20170825 15:11:25.343"></status>
</kw>
<status endtime="20170825 15:11:25.344" status="PASS" starttime="20170825 15:11:25.341"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:25.344">${FFDC_DIR_PATH} = /tmp/fspcibld/6657/obmc-robot/logs/20170825151125335289_TestsSecurityTestSsl/20170825151125335289_TestSSLConnection/</msg>
<msg level="INFO" timestamp="20170825 15:11:25.349">${FFDC_PREFIX} = 20170825151125335289_</msg>
<status endtime="20170825 15:11:25.349" status="PASS" starttime="20170825 15:11:25.334"></status>
</kw>
<status endtime="20170825 15:11:25.349" status="PASS" starttime="20170825 15:11:25.334"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170825 15:11:25.350" status="PASS" starttime="20170825 15:11:25.349"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:11:25.350">Created directory '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs"&gt;/tmp/fspcibld/6657/obmc-robot/logs&lt;/a&gt;'.</msg>
<status endtime="20170825 15:11:25.351" status="PASS" starttime="20170825 15:11:25.350"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:11:25.352">File '/tmp/fspcibld/6657/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status endtime="20170825 15:11:25.352" status="FAIL" starttime="20170825 15:11:25.351"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:25.352">${exist} = False</msg>
<status endtime="20170825 15:11:25.352" status="PASS" starttime="20170825 15:11:25.351"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:11:25.353">Created file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:11:25.353" status="PASS" starttime="20170825 15:11:25.352"></status>
</kw>
<status endtime="20170825 15:11:25.353" status="PASS" starttime="20170825 15:11:25.352"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170825 15:11:25.354" status="PASS" starttime="20170825 15:11:25.353"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:25.355">${cur_time} = 2017-08-25 15:11:25:354688</msg>
<status endtime="20170825 15:11:25.355" status="PASS" starttime="20170825 15:11:25.355"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:25.355">${cur_time} = 20170825151125354688</msg>
<status endtime="20170825 15:11:25.355" status="PASS" starttime="20170825 15:11:25.355"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:25.356">${cur_time} = 20170825151125354688</msg>
<status endtime="20170825 15:11:25.356" status="PASS" starttime="20170825 15:11:25.354"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:11:25.356">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:11:25.357" status="PASS" starttime="20170825 15:11:25.356"></status>
</kw>
<status endtime="20170825 15:11:25.357" status="PASS" starttime="20170825 15:11:25.313"></status>
</kw>
<status endtime="20170825 15:11:25.357" status="PASS" starttime="20170825 15:11:24.961"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status endtime="20170825 15:11:25.357" critical="yes" status="PASS" starttime="20170825 15:11:24.772"></status>
</test>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords" type="teardown">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:11:25.358">Delete All Sessions</msg>
<status endtime="20170825 15:11:25.358" status="PASS" starttime="20170825 15:11:25.358"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status endtime="20170825 15:11:25.358" status="PASS" starttime="20170825 15:11:24.692"></status>
</suite>
<status endtime="20170825 15:11:25.360" status="PASS" starttime="20170825 15:11:24.690"></status>
</suite>
<suite name="Test Basic Poweron" source="/tmp/fspcibld/6657/obmc-robot/tests/test_basic_poweron.robot" id="s1-s2">
<test name="Power On Test" id="s1-s2-t1">
<kw name="Start SOL Console Logging" library="utils" type="setup">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:25.397">${default_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170825 15:11:25.397" status="PASS" starttime="20170825 15:11:25.397"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:25.398">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170825 15:11:25.398" status="PASS" starttime="20170825 15:11:25.397"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:25.398">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170825 15:11:25.398" status="PASS" starttime="20170825 15:11:25.396"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:25.399">${default_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170825 15:11:25.400" status="PASS" starttime="20170825 15:11:25.399"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:25.400">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170825 15:11:25.400" status="PASS" starttime="20170825 15:11:25.400"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:25.400">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170825 15:11:25.401" status="PASS" starttime="20170825 15:11:25.399"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:25.401">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170825 15:11:25.401" status="PASS" starttime="20170825 15:11:25.401"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170825 15:11:25.402" status="PASS" starttime="20170825 15:11:25.402"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:25.408">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170825 15:11:25.411">${rc} = 0</msg>
<msg level="INFO" timestamp="20170825 15:11:25.411">${output} = /tmp/fspcibld/6657/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170825 15:11:25.411" status="PASS" starttime="20170825 15:11:25.402"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170825 15:11:25.414" status="PASS" starttime="20170825 15:11:25.413"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170825 15:11:25.415" status="PASS" starttime="20170825 15:11:25.414"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:25.416">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170825 15:11:25.416" status="PASS" starttime="20170825 15:11:25.415"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:25.416">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170825 15:11:25.416" status="PASS" starttime="20170825 15:11:25.401"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:25.417">${search_string} = ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.21.61</msg>
<status endtime="20170825 15:11:25.417" status="PASS" starttime="20170825 15:11:25.416"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:25.417">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.21.61' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170825 15:11:25.418" status="PASS" starttime="20170825 15:11:25.417"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170825 15:11:25.418" status="PASS" starttime="20170825 15:11:25.418"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:25.422">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.21.61' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170825 15:11:25.429">${rc} = 0</msg>
<msg level="INFO" timestamp="20170825 15:11:25.429">${os_con_pid} = </msg>
<status endtime="20170825 15:11:25.429" status="PASS" starttime="20170825 15:11:25.418"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170825 15:11:25.432" status="PASS" starttime="20170825 15:11:25.431"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:25.433">${cmd_buf} = kill -9 </msg>
<status endtime="20170825 15:11:25.433" status="PASS" starttime="20170825 15:11:25.433"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170825 15:11:25.434" status="PASS" starttime="20170825 15:11:25.434"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:25.435">${rc} = None</msg>
<msg level="INFO" timestamp="20170825 15:11:25.435">${output} = None</msg>
<status endtime="20170825 15:11:25.435" status="PASS" starttime="20170825 15:11:25.434"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170825 15:11:25.436" status="PASS" starttime="20170825 15:11:25.435"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:11:25.439">Source file '/tmp/9.3.21.61_os_console' does not exist.</msg>
<status endtime="20170825 15:11:25.439" status="FAIL" starttime="20170825 15:11:25.438"></status>
</kw>
<status endtime="20170825 15:11:25.439" status="PASS" starttime="20170825 15:11:25.438"></status>
</kw>
<status endtime="20170825 15:11:25.439" status="PASS" starttime="20170825 15:11:25.436"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:25.439">${output} = </msg>
<status endtime="20170825 15:11:25.439" status="PASS" starttime="20170825 15:11:25.439"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:25.440">${loc_quiet} = 1</msg>
<status endtime="20170825 15:11:25.440" status="PASS" starttime="20170825 15:11:25.440"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170825 15:11:25.482" status="PASS" starttime="20170825 15:11:25.441"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:25.482">${rc} = 1</msg>
<msg level="INFO" timestamp="20170825 15:11:25.483">${output} = cat: /tmp/9.3.21.61_os_console: No such file or directory
</msg>
<status endtime="20170825 15:11:25.483" status="PASS" starttime="20170825 15:11:25.440"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:25.484">${log_output} = cat: /tmp/9.3.21.61_os_console: No such file or directory
</msg>
<status endtime="20170825 15:11:25.484" status="PASS" starttime="20170825 15:11:25.398"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:11:25.486">Created file '&lt;a href="file:///tmp/9.3.21.61_os_console"&gt;/tmp/9.3.21.61_os_console&lt;/a&gt;'.</msg>
<status endtime="20170825 15:11:25.486" status="PASS" starttime="20170825 15:11:25.485"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:25.487">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170825 15:11:25.487" status="PASS" starttime="20170825 15:11:25.487"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170825 15:11:25.488" status="PASS" starttime="20170825 15:11:25.488"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:25.491">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170825 15:11:25.494">${rc} = 0</msg>
<msg level="INFO" timestamp="20170825 15:11:25.494">${output} = /tmp/fspcibld/6657/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170825 15:11:25.494" status="PASS" starttime="20170825 15:11:25.488"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170825 15:11:25.497" status="PASS" starttime="20170825 15:11:25.497"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170825 15:11:25.498" status="PASS" starttime="20170825 15:11:25.498"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:25.499">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170825 15:11:25.499" status="PASS" starttime="20170825 15:11:25.498"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:25.499">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170825 15:11:25.499" status="PASS" starttime="20170825 15:11:25.486"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:25.500">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61 &gt; /tmp/9.3.21.61_os_console 2&gt;&amp;1 &amp;</msg>
<status endtime="20170825 15:11:25.500" status="PASS" starttime="20170825 15:11:25.500"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170825 15:11:25.501" status="PASS" starttime="20170825 15:11:25.500"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:25.504">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61 &gt; /tmp/9.3.21.61_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20170825 15:11:25.517">${rc} = 0</msg>
<msg level="INFO" timestamp="20170825 15:11:25.517">${output} = </msg>
<status endtime="20170825 15:11:25.517" status="PASS" starttime="20170825 15:11:25.501"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170825 15:11:25.531" status="PASS" starttime="20170825 15:11:25.530"></status>
</kw>
<status endtime="20170825 15:11:25.532" status="PASS" starttime="20170825 15:11:25.396"></status>
</kw>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:25.533">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:25.535">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status endtime="20170825 15:11:25.535" status="PASS" starttime="20170825 15:11:25.535"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:25.537">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170825 15:11:25.537" status="PASS" starttime="20170825 15:11:25.537"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:25.542">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:11:25.543" status="PASS" starttime="20170825 15:11:25.541"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:25.543">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:11:25.543" status="PASS" starttime="20170825 15:11:25.543"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:25.544">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:11:25.544" status="PASS" starttime="20170825 15:11:25.543"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:25.544">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:11:25.544" status="PASS" starttime="20170825 15:11:25.544"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:26.053">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:11:26.054" status="PASS" starttime="20170825 15:11:25.545"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:26.054">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:11:26.054">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:11:26.054" status="PASS" starttime="20170825 15:11:25.545"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:26.054">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:11:26.055" status="PASS" starttime="20170825 15:11:26.054"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:26.055">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:11:26.055" status="PASS" starttime="20170825 15:11:26.055"></status>
</kw>
<status endtime="20170825 15:11:26.055" status="PASS" starttime="20170825 15:11:25.541"></status>
</kw>
<status endtime="20170825 15:11:26.055" status="PASS" starttime="20170825 15:11:25.540"></status>
</kw>
<status endtime="20170825 15:11:26.056" status="PASS" starttime="20170825 15:11:25.539"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:26.056">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170825 15:11:26.056" status="PASS" starttime="20170825 15:11:26.056"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:26.057">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:11:26.057" status="PASS" starttime="20170825 15:11:26.056"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170825 15:11:26.057" status="PASS" starttime="20170825 15:11:26.057"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:26.059">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-T...</msg>
<status endtime="20170825 15:11:26.059" status="PASS" starttime="20170825 15:11:26.058"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:26.060">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170825 15:11:26.060" status="PASS" starttime="20170825 15:11:26.060"></status>
</kw>
<status endtime="20170825 15:11:26.060" status="PASS" starttime="20170825 15:11:26.059"></status>
</kw>
<status endtime="20170825 15:11:26.060" status="PASS" starttime="20170825 15:11:26.057"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:26.705">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170825 15:11:26.705">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:11:26.705" status="PASS" starttime="20170825 15:11:26.061"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:26.707">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:11:26.707" status="PASS" starttime="20170825 15:11:26.706"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:26.708">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:11:26.708" status="PASS" starttime="20170825 15:11:26.708"></status>
</kw>
<status endtime="20170825 15:11:26.708" status="PASS" starttime="20170825 15:11:26.707"></status>
</kw>
<status endtime="20170825 15:11:26.708" status="PASS" starttime="20170825 15:11:26.706"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:11:26.709">Delete All Sessions</msg>
<status endtime="20170825 15:11:26.709" status="PASS" starttime="20170825 15:11:26.708"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:26.709">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:11:26.709" status="PASS" starttime="20170825 15:11:25.538"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:26.709">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:11:26.710" status="PASS" starttime="20170825 15:11:26.709"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:26.710">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:11:26.710">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:11:26.710">${json} = {u'data': None, u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:11:26.710" status="PASS" starttime="20170825 15:11:26.710"></status>
</kw>
<status endtime="20170825 15:11:26.710" status="PASS" starttime="20170825 15:11:25.536"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170825 15:11:26.711" status="PASS" starttime="20170825 15:11:26.711"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Wait For PowerOff</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Wait For PowerOff" library="state_manager">
<doc>Wait for power off state.</doc>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:26.716">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:11:26.717" status="PASS" starttime="20170825 15:11:26.716"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:26.718">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:11:26.718" status="PASS" starttime="20170825 15:11:26.717"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:26.718">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:11:26.718" status="PASS" starttime="20170825 15:11:26.718"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:26.719">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:11:26.719" status="PASS" starttime="20170825 15:11:26.719"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:27.834">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:11:27.835" status="PASS" starttime="20170825 15:11:26.720"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:27.835">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:11:27.835">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:11:27.835" status="PASS" starttime="20170825 15:11:26.719"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:27.836">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:11:27.836" status="PASS" starttime="20170825 15:11:27.835"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:27.836">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:11:27.836" status="PASS" starttime="20170825 15:11:27.836"></status>
</kw>
<status endtime="20170825 15:11:27.837" status="PASS" starttime="20170825 15:11:26.716"></status>
</kw>
<status endtime="20170825 15:11:27.837" status="PASS" starttime="20170825 15:11:26.715"></status>
</kw>
<status endtime="20170825 15:11:27.837" status="PASS" starttime="20170825 15:11:26.715"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:27.837">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:11:27.837" status="PASS" starttime="20170825 15:11:27.837"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:27.839">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:11:27.839" status="PASS" starttime="20170825 15:11:27.839"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:27.840">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:11:27.840" status="PASS" starttime="20170825 15:11:27.840"></status>
</kw>
<status endtime="20170825 15:11:27.841" status="PASS" starttime="20170825 15:11:27.840"></status>
</kw>
<status endtime="20170825 15:11:27.841" status="PASS" starttime="20170825 15:11:27.838"></status>
</kw>
<status endtime="20170825 15:11:27.841" status="PASS" starttime="20170825 15:11:27.838"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:31.025">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:11:31.026">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:11:31.026" status="PASS" starttime="20170825 15:11:27.841"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:31.028">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:11:31.028" status="PASS" starttime="20170825 15:11:31.027"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:31.029">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:11:31.029" status="PASS" starttime="20170825 15:11:31.029"></status>
</kw>
<status endtime="20170825 15:11:31.029" status="PASS" starttime="20170825 15:11:31.028"></status>
</kw>
<status endtime="20170825 15:11:31.029" status="PASS" starttime="20170825 15:11:31.027"></status>
</kw>
<status endtime="20170825 15:11:31.029" status="PASS" starttime="20170825 15:11:31.026"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:11:31.030">Delete All Sessions</msg>
<status endtime="20170825 15:11:31.030" status="PASS" starttime="20170825 15:11:31.029"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:31.030">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:11:31.030" status="PASS" starttime="20170825 15:11:26.714"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:31.030">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:11:31.031" status="PASS" starttime="20170825 15:11:31.030"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:31.031">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:11:31.031">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:11:31.031">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:11:31.031" status="PASS" starttime="20170825 15:11:31.031"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:31.031">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 15:11:31.032" status="PASS" starttime="20170825 15:11:26.713"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:31.032">${power_state} = Off</msg>
<status endtime="20170825 15:11:31.032" status="PASS" starttime="20170825 15:11:26.713"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:11:31.032" status="PASS" starttime="20170825 15:11:31.032"></status>
</kw>
<status endtime="20170825 15:11:31.033" status="PASS" starttime="20170825 15:11:26.713"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:31.037">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:11:31.037" status="PASS" starttime="20170825 15:11:31.036"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:31.037">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:11:31.038" status="PASS" starttime="20170825 15:11:31.037"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:31.038">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:11:31.038" status="PASS" starttime="20170825 15:11:31.038"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:31.039">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:11:31.039" status="PASS" starttime="20170825 15:11:31.038"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:31.942">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:11:31.942" status="PASS" starttime="20170825 15:11:31.040"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:31.942">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:11:31.942">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:11:31.942" status="PASS" starttime="20170825 15:11:31.039"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:31.943">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:11:31.943" status="PASS" starttime="20170825 15:11:31.943"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:31.944">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:11:31.944" status="PASS" starttime="20170825 15:11:31.944"></status>
</kw>
<status endtime="20170825 15:11:31.944" status="PASS" starttime="20170825 15:11:31.036"></status>
</kw>
<status endtime="20170825 15:11:31.944" status="PASS" starttime="20170825 15:11:31.035"></status>
</kw>
<status endtime="20170825 15:11:31.945" status="PASS" starttime="20170825 15:11:31.035"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:31.946">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:11:31.946" status="PASS" starttime="20170825 15:11:31.945"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:31.949">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:11:31.949" status="PASS" starttime="20170825 15:11:31.948"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:31.950">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:11:31.950" status="PASS" starttime="20170825 15:11:31.950"></status>
</kw>
<status endtime="20170825 15:11:31.950" status="PASS" starttime="20170825 15:11:31.949"></status>
</kw>
<status endtime="20170825 15:11:31.950" status="PASS" starttime="20170825 15:11:31.947"></status>
</kw>
<status endtime="20170825 15:11:31.950" status="PASS" starttime="20170825 15:11:31.946"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:32.980">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:11:32.980">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:11:32.980" status="PASS" starttime="20170825 15:11:31.951"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:32.987">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:11:32.987" status="PASS" starttime="20170825 15:11:32.987"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:32.988">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:11:32.988" status="PASS" starttime="20170825 15:11:32.988"></status>
</kw>
<status endtime="20170825 15:11:32.988" status="PASS" starttime="20170825 15:11:32.987"></status>
</kw>
<status endtime="20170825 15:11:32.988" status="PASS" starttime="20170825 15:11:32.986"></status>
</kw>
<status endtime="20170825 15:11:32.988" status="PASS" starttime="20170825 15:11:32.981"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:11:32.989">Delete All Sessions</msg>
<status endtime="20170825 15:11:32.989" status="PASS" starttime="20170825 15:11:32.989"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:32.989">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:11:32.989" status="PASS" starttime="20170825 15:11:31.034"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:32.991">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:11:32.991" status="PASS" starttime="20170825 15:11:32.989"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:32.992">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:11:32.992">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:11:32.992">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:11:32.992" status="PASS" starttime="20170825 15:11:32.991"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:32.993">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170825 15:11:32.993" status="PASS" starttime="20170825 15:11:31.033"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:32.994">${host_state} = Off</msg>
<status endtime="20170825 15:11:32.994" status="PASS" starttime="20170825 15:11:31.033"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170825 15:11:32.995" status="PASS" starttime="20170825 15:11:32.994"></status>
</kw>
<status endtime="20170825 15:11:32.995" status="PASS" starttime="20170825 15:11:26.712"></status>
</kw>
<status endtime="20170825 15:11:32.995" status="PASS" starttime="20170825 15:11:26.712"></status>
</kw>
<status endtime="20170825 15:11:32.995" status="PASS" starttime="20170825 15:11:26.712"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:32.995">${status} = True</msg>
<status endtime="20170825 15:11:32.995" status="PASS" starttime="20170825 15:11:26.711"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Hard Power Off</arg>
</arguments>
<status endtime="20170825 15:11:32.996" status="PASS" starttime="20170825 15:11:32.996"></status>
</kw>
<status endtime="20170825 15:11:32.996" status="PASS" starttime="20170825 15:11:25.534"></status>
</kw>
<kw name="Initiate Host Boot" library="state_manager">
<doc>Initiate host power on.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:32.998">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status endtime="20170825 15:11:32.998" status="PASS" starttime="20170825 15:11:32.997"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:32.999">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170825 15:11:32.999" status="PASS" starttime="20170825 15:11:32.999"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:33.003">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:11:33.004" status="PASS" starttime="20170825 15:11:33.003"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:33.004">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:11:33.005" status="PASS" starttime="20170825 15:11:33.004"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:33.005">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:11:33.005" status="PASS" starttime="20170825 15:11:33.005"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:33.006">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:11:33.006" status="PASS" starttime="20170825 15:11:33.006"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:33.380">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:11:33.380" status="PASS" starttime="20170825 15:11:33.007"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:33.380">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:11:33.380">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:11:33.380" status="PASS" starttime="20170825 15:11:33.006"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:33.381">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:11:33.381" status="PASS" starttime="20170825 15:11:33.380"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:33.381">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:11:33.381" status="PASS" starttime="20170825 15:11:33.381"></status>
</kw>
<status endtime="20170825 15:11:33.382" status="PASS" starttime="20170825 15:11:33.002"></status>
</kw>
<status endtime="20170825 15:11:33.382" status="PASS" starttime="20170825 15:11:33.002"></status>
</kw>
<status endtime="20170825 15:11:33.382" status="PASS" starttime="20170825 15:11:33.001"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:33.382">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170825 15:11:33.382" status="PASS" starttime="20170825 15:11:33.382"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:33.383">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:11:33.383" status="PASS" starttime="20170825 15:11:33.383"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170825 15:11:33.383" status="PASS" starttime="20170825 15:11:33.383"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:33.385">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Ty...</msg>
<status endtime="20170825 15:11:33.385" status="PASS" starttime="20170825 15:11:33.385"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:33.386">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170825 15:11:33.386" status="PASS" starttime="20170825 15:11:33.386"></status>
</kw>
<status endtime="20170825 15:11:33.387" status="PASS" starttime="20170825 15:11:33.386"></status>
</kw>
<status endtime="20170825 15:11:33.387" status="PASS" starttime="20170825 15:11:33.384"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:34.732">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170825 15:11:34.732">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:11:34.732" status="PASS" starttime="20170825 15:11:33.387"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:34.734">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:11:34.734" status="PASS" starttime="20170825 15:11:34.733"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:34.735">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:11:34.735" status="PASS" starttime="20170825 15:11:34.734"></status>
</kw>
<status endtime="20170825 15:11:34.735" status="PASS" starttime="20170825 15:11:34.734"></status>
</kw>
<status endtime="20170825 15:11:34.735" status="PASS" starttime="20170825 15:11:34.733"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:11:34.735">Delete All Sessions</msg>
<status endtime="20170825 15:11:34.735" status="PASS" starttime="20170825 15:11:34.735"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:34.736">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:11:34.736" status="PASS" starttime="20170825 15:11:33.000"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:34.736">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:11:34.736" status="PASS" starttime="20170825 15:11:34.736"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:34.737">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:11:34.737">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:11:34.737">${json} = {u'data': None, u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:11:34.737" status="PASS" starttime="20170825 15:11:34.737"></status>
</kw>
<status endtime="20170825 15:11:34.737" status="PASS" starttime="20170825 15:11:32.998"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170825 15:11:34.738" status="PASS" starttime="20170825 15:11:34.737"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:34.742">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:11:34.743" status="PASS" starttime="20170825 15:11:34.742"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:34.744">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:11:34.744" status="PASS" starttime="20170825 15:11:34.743"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:34.744">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:11:34.744" status="PASS" starttime="20170825 15:11:34.744"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:34.745">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:11:34.745" status="PASS" starttime="20170825 15:11:34.745"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:36.170">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:11:36.171" status="PASS" starttime="20170825 15:11:34.746"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:36.171">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:11:36.171">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:11:36.171" status="PASS" starttime="20170825 15:11:34.745"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:36.171">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:11:36.171" status="PASS" starttime="20170825 15:11:36.171"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:36.172">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:11:36.172" status="PASS" starttime="20170825 15:11:36.172"></status>
</kw>
<status endtime="20170825 15:11:36.172" status="PASS" starttime="20170825 15:11:34.742"></status>
</kw>
<status endtime="20170825 15:11:36.172" status="PASS" starttime="20170825 15:11:34.741"></status>
</kw>
<status endtime="20170825 15:11:36.173" status="PASS" starttime="20170825 15:11:34.741"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:36.173">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:11:36.173" status="PASS" starttime="20170825 15:11:36.173"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:36.175">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:11:36.175" status="PASS" starttime="20170825 15:11:36.175"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:36.176">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:11:36.176" status="PASS" starttime="20170825 15:11:36.176"></status>
</kw>
<status endtime="20170825 15:11:36.176" status="PASS" starttime="20170825 15:11:36.175"></status>
</kw>
<status endtime="20170825 15:11:36.177" status="PASS" starttime="20170825 15:11:36.174"></status>
</kw>
<status endtime="20170825 15:11:36.177" status="PASS" starttime="20170825 15:11:36.173"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:38.936">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:11:38.936">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:11:38.936" status="PASS" starttime="20170825 15:11:36.177"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:38.938">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:11:38.938" status="PASS" starttime="20170825 15:11:38.938"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:38.939">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:11:38.939" status="PASS" starttime="20170825 15:11:38.939"></status>
</kw>
<status endtime="20170825 15:11:38.939" status="PASS" starttime="20170825 15:11:38.938"></status>
</kw>
<status endtime="20170825 15:11:38.939" status="PASS" starttime="20170825 15:11:38.937"></status>
</kw>
<status endtime="20170825 15:11:38.940" status="PASS" starttime="20170825 15:11:38.937"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:11:38.940">Delete All Sessions</msg>
<status endtime="20170825 15:11:38.940" status="PASS" starttime="20170825 15:11:38.940"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:38.940">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:11:38.940" status="PASS" starttime="20170825 15:11:34.740"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:38.941">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:11:38.941" status="PASS" starttime="20170825 15:11:38.941"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:38.942">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:11:38.942">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:11:38.942">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:11:38.942" status="PASS" starttime="20170825 15:11:38.941"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:38.943">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 15:11:38.943" status="PASS" starttime="20170825 15:11:34.739"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:38.944">${power_state} = Off</msg>
<status endtime="20170825 15:11:38.944" status="PASS" starttime="20170825 15:11:34.739"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:11:38.944">On != Off</msg>
<status endtime="20170825 15:11:38.944" status="FAIL" starttime="20170825 15:11:38.944"></status>
</kw>
<status endtime="20170825 15:11:38.944" status="FAIL" starttime="20170825 15:11:34.739"></status>
</kw>
<status endtime="20170825 15:11:38.945" status="FAIL" starttime="20170825 15:11:34.738"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:48.950">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:11:48.950" status="PASS" starttime="20170825 15:11:48.949"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:48.951">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:11:48.951" status="PASS" starttime="20170825 15:11:48.950"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:48.951">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:11:48.951" status="PASS" starttime="20170825 15:11:48.951"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:48.952">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:11:48.952" status="PASS" starttime="20170825 15:11:48.952"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:49.756">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:11:49.756" status="PASS" starttime="20170825 15:11:48.953"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:49.756">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:11:49.756">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:11:49.756" status="PASS" starttime="20170825 15:11:48.952"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:49.757">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:11:49.757" status="PASS" starttime="20170825 15:11:49.757"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:49.758">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:11:49.758" status="PASS" starttime="20170825 15:11:49.757"></status>
</kw>
<status endtime="20170825 15:11:49.758" status="PASS" starttime="20170825 15:11:48.949"></status>
</kw>
<status endtime="20170825 15:11:49.758" status="PASS" starttime="20170825 15:11:48.949"></status>
</kw>
<status endtime="20170825 15:11:49.758" status="PASS" starttime="20170825 15:11:48.948"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:49.759">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:11:49.759" status="PASS" starttime="20170825 15:11:49.758"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:49.761">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:11:49.761" status="PASS" starttime="20170825 15:11:49.760"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:49.762">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:11:49.762" status="PASS" starttime="20170825 15:11:49.761"></status>
</kw>
<status endtime="20170825 15:11:49.762" status="PASS" starttime="20170825 15:11:49.761"></status>
</kw>
<status endtime="20170825 15:11:49.762" status="PASS" starttime="20170825 15:11:49.759"></status>
</kw>
<status endtime="20170825 15:11:49.762" status="PASS" starttime="20170825 15:11:49.759"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:50.483">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:11:50.483">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:11:50.483" status="PASS" starttime="20170825 15:11:49.763"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:50.485">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:11:50.485" status="PASS" starttime="20170825 15:11:50.484"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:50.486">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:11:50.486" status="PASS" starttime="20170825 15:11:50.485"></status>
</kw>
<status endtime="20170825 15:11:50.486" status="PASS" starttime="20170825 15:11:50.485"></status>
</kw>
<status endtime="20170825 15:11:50.486" status="PASS" starttime="20170825 15:11:50.484"></status>
</kw>
<status endtime="20170825 15:11:50.486" status="PASS" starttime="20170825 15:11:50.483"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:11:50.486">Delete All Sessions</msg>
<status endtime="20170825 15:11:50.487" status="PASS" starttime="20170825 15:11:50.486"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:50.487">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:11:50.487" status="PASS" starttime="20170825 15:11:48.947"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:50.487">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:11:50.487" status="PASS" starttime="20170825 15:11:50.487"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:50.488">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:11:50.488">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:11:50.488">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:11:50.488" status="PASS" starttime="20170825 15:11:50.488"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:50.488">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:11:50.489" status="PASS" starttime="20170825 15:11:48.946"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:50.489">${power_state} = On</msg>
<status endtime="20170825 15:11:50.489" status="PASS" starttime="20170825 15:11:48.946"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:11:50.489" status="PASS" starttime="20170825 15:11:50.489"></status>
</kw>
<status endtime="20170825 15:11:50.489" status="PASS" starttime="20170825 15:11:48.946"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:50.493">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:11:50.493" status="PASS" starttime="20170825 15:11:50.493"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:50.494">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:11:50.494" status="PASS" starttime="20170825 15:11:50.494"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:50.494">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:11:50.495" status="PASS" starttime="20170825 15:11:50.494"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:50.495">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:11:50.495" status="PASS" starttime="20170825 15:11:50.495"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:50.825">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:11:50.826" status="PASS" starttime="20170825 15:11:50.496"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:50.826">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:11:50.826">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:11:50.826" status="PASS" starttime="20170825 15:11:50.495"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:50.827">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:11:50.827" status="PASS" starttime="20170825 15:11:50.826"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:50.828">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:11:50.828" status="PASS" starttime="20170825 15:11:50.827"></status>
</kw>
<status endtime="20170825 15:11:50.828" status="PASS" starttime="20170825 15:11:50.492"></status>
</kw>
<status endtime="20170825 15:11:50.828" status="PASS" starttime="20170825 15:11:50.492"></status>
</kw>
<status endtime="20170825 15:11:50.828" status="PASS" starttime="20170825 15:11:50.491"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:50.829">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:11:50.829" status="PASS" starttime="20170825 15:11:50.829"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:50.832">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:11:50.832" status="PASS" starttime="20170825 15:11:50.831"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:50.833">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:11:50.834" status="PASS" starttime="20170825 15:11:50.833"></status>
</kw>
<status endtime="20170825 15:11:50.834" status="PASS" starttime="20170825 15:11:50.832"></status>
</kw>
<status endtime="20170825 15:11:50.834" status="PASS" starttime="20170825 15:11:50.830"></status>
</kw>
<status endtime="20170825 15:11:50.834" status="PASS" starttime="20170825 15:11:50.830"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:51.741">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:11:51.741">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:11:51.741" status="PASS" starttime="20170825 15:11:50.834"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:51.743">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:11:51.743" status="PASS" starttime="20170825 15:11:51.743"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:51.744">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:11:51.744" status="PASS" starttime="20170825 15:11:51.744"></status>
</kw>
<status endtime="20170825 15:11:51.744" status="PASS" starttime="20170825 15:11:51.743"></status>
</kw>
<status endtime="20170825 15:11:51.744" status="PASS" starttime="20170825 15:11:51.742"></status>
</kw>
<status endtime="20170825 15:11:51.744" status="PASS" starttime="20170825 15:11:51.742"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:11:51.745">Delete All Sessions</msg>
<status endtime="20170825 15:11:51.745" status="PASS" starttime="20170825 15:11:51.745"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:51.745">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:11:51.745" status="PASS" starttime="20170825 15:11:50.490"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:51.746">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:11:51.746" status="PASS" starttime="20170825 15:11:51.746"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:51.746">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:11:51.747">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:11:51.747">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:11:51.747" status="PASS" starttime="20170825 15:11:51.746"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:51.747">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170825 15:11:51.747" status="PASS" starttime="20170825 15:11:50.490"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:51.747">${host_state} = Running</msg>
<status endtime="20170825 15:11:51.747" status="PASS" starttime="20170825 15:11:50.490"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170825 15:11:51.748" status="PASS" starttime="20170825 15:11:51.748"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<doc>Get the boot progress and return it.</doc>
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Set Boot Progress Method" library="utils">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170825 15:11:51.750" status="PASS" starttime="20170825 15:11:51.750"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>New Get Boot Progress</arg>
</arguments>
<assign>
<var>${new_status}</var>
<var>${new_value}</var>
</assign>
<kw name="New Get Boot Progress" library="utils">
<doc>Get the boot progress the new way (via xyz location).</doc>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:51.755">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:11:51.755" status="PASS" starttime="20170825 15:11:51.754"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:51.755">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:11:51.756" status="PASS" starttime="20170825 15:11:51.755"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:51.756">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:11:51.756" status="PASS" starttime="20170825 15:11:51.756"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:51.757">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:11:51.757" status="PASS" starttime="20170825 15:11:51.756"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:52.130">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:11:52.130" status="PASS" starttime="20170825 15:11:51.757"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:52.130">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:11:52.130">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:11:52.131" status="PASS" starttime="20170825 15:11:51.757"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:52.131">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:11:52.131" status="PASS" starttime="20170825 15:11:52.131"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:52.132">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:11:52.132" status="PASS" starttime="20170825 15:11:52.132"></status>
</kw>
<status endtime="20170825 15:11:52.132" status="PASS" starttime="20170825 15:11:51.754"></status>
</kw>
<status endtime="20170825 15:11:52.132" status="PASS" starttime="20170825 15:11:51.753"></status>
</kw>
<status endtime="20170825 15:11:52.132" status="PASS" starttime="20170825 15:11:51.753"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:52.133">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170825 15:11:52.133" status="PASS" starttime="20170825 15:11:52.133"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:52.135">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:11:52.135" status="PASS" starttime="20170825 15:11:52.134"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:52.136">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:11:52.137" status="PASS" starttime="20170825 15:11:52.136"></status>
</kw>
<status endtime="20170825 15:11:52.137" status="PASS" starttime="20170825 15:11:52.135"></status>
</kw>
<status endtime="20170825 15:11:52.137" status="PASS" starttime="20170825 15:11:52.134"></status>
</kw>
<status endtime="20170825 15:11:52.137" status="PASS" starttime="20170825 15:11:52.133"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:52.471">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:11:52.471">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:11:52.471" status="PASS" starttime="20170825 15:11:52.137"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:52.473">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:11:52.473" status="PASS" starttime="20170825 15:11:52.473"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:52.474">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:11:52.474" status="PASS" starttime="20170825 15:11:52.474"></status>
</kw>
<status endtime="20170825 15:11:52.474" status="PASS" starttime="20170825 15:11:52.473"></status>
</kw>
<status endtime="20170825 15:11:52.474" status="PASS" starttime="20170825 15:11:52.472"></status>
</kw>
<status endtime="20170825 15:11:52.474" status="PASS" starttime="20170825 15:11:52.472"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:11:52.475">Delete All Sessions</msg>
<status endtime="20170825 15:11:52.475" status="PASS" starttime="20170825 15:11:52.475"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:52.475">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:11:52.475" status="PASS" starttime="20170825 15:11:51.752"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:52.476">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:11:52.476" status="PASS" starttime="20170825 15:11:52.475"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:52.476">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:11:52.476">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:11:52.477">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:11:52.477" status="PASS" starttime="20170825 15:11:52.476"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:52.477">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:11:52.477" status="PASS" starttime="20170825 15:11:51.751"></status>
</kw>
<status endtime="20170825 15:11:52.477" status="PASS" starttime="20170825 15:11:51.751"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:52.477">${new_status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:11:52.477">${new_value} = Unspecified</msg>
<status endtime="20170825 15:11:52.477" status="PASS" starttime="20170825 15:11:51.751"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${new_status}' == 'PASS'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${boot_prog_method}</arg>
<arg>New</arg>
<arg>AND</arg>
<arg>Rqpvars</arg>
<arg>boot_prog_method</arg>
<arg>AND</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${boot_prog_method}</arg>
<arg>New</arg>
<arg>AND</arg>
<arg>Rqpvars</arg>
<arg>boot_prog_method</arg>
<arg>AND</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${boot_prog_method}</arg>
<arg>New</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:52.480">${boot_prog_method} = New</msg>
<status endtime="20170825 15:11:52.480" status="PASS" starttime="20170825 15:11:52.479"></status>
</kw>
<kw name="Rqpvars" library="gen_robot_print">
<arguments>
<arg>boot_prog_method</arg>
</arguments>
<status endtime="20170825 15:11:52.481" status="PASS" starttime="20170825 15:11:52.481"></status>
</kw>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg level="INFO" timestamp="20170825 15:11:52.482">Returning from the enclosing user keyword.</msg>
<status endtime="20170825 15:11:52.482" status="PASS" starttime="20170825 15:11:52.481"></status>
</kw>
<status endtime="20170825 15:11:52.482" status="PASS" starttime="20170825 15:11:52.479"></status>
</kw>
<status endtime="20170825 15:11:52.482" status="PASS" starttime="20170825 15:11:52.478"></status>
</kw>
<status endtime="20170825 15:11:52.482" status="PASS" starttime="20170825 15:11:51.750"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="New Get Boot Progress" library="utils">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:52.486">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:11:52.487" status="PASS" starttime="20170825 15:11:52.486"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:52.487">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:11:52.487" status="PASS" starttime="20170825 15:11:52.487"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:52.488">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:11:52.488" status="PASS" starttime="20170825 15:11:52.487"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:52.489">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:11:52.489" status="PASS" starttime="20170825 15:11:52.488"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:52.664">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:11:52.664" status="PASS" starttime="20170825 15:11:52.490"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:52.664">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:11:52.665">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:11:52.665" status="PASS" starttime="20170825 15:11:52.489"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:52.665">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:11:52.665" status="PASS" starttime="20170825 15:11:52.665"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:52.666">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:11:52.666" status="PASS" starttime="20170825 15:11:52.666"></status>
</kw>
<status endtime="20170825 15:11:52.666" status="PASS" starttime="20170825 15:11:52.485"></status>
</kw>
<status endtime="20170825 15:11:52.666" status="PASS" starttime="20170825 15:11:52.485"></status>
</kw>
<status endtime="20170825 15:11:52.666" status="PASS" starttime="20170825 15:11:52.484"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:52.667">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170825 15:11:52.667" status="PASS" starttime="20170825 15:11:52.667"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:52.669">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:11:52.669" status="PASS" starttime="20170825 15:11:52.668"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:52.670">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:11:52.670" status="PASS" starttime="20170825 15:11:52.670"></status>
</kw>
<status endtime="20170825 15:11:52.670" status="PASS" starttime="20170825 15:11:52.669"></status>
</kw>
<status endtime="20170825 15:11:52.670" status="PASS" starttime="20170825 15:11:52.668"></status>
</kw>
<status endtime="20170825 15:11:52.670" status="PASS" starttime="20170825 15:11:52.667"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:53.267">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:11:53.268">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:11:53.268" status="PASS" starttime="20170825 15:11:52.671"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:53.270">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:11:53.270" status="PASS" starttime="20170825 15:11:53.269"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:53.270">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:11:53.271" status="PASS" starttime="20170825 15:11:53.270"></status>
</kw>
<status endtime="20170825 15:11:53.271" status="PASS" starttime="20170825 15:11:53.270"></status>
</kw>
<status endtime="20170825 15:11:53.271" status="PASS" starttime="20170825 15:11:53.269"></status>
</kw>
<status endtime="20170825 15:11:53.271" status="PASS" starttime="20170825 15:11:53.268"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:11:53.271">Delete All Sessions</msg>
<status endtime="20170825 15:11:53.271" status="PASS" starttime="20170825 15:11:53.271"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:53.272">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:11:53.272" status="PASS" starttime="20170825 15:11:52.484"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:53.272">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:11:53.272" status="PASS" starttime="20170825 15:11:53.272"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:53.273">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:11:53.273">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:11:53.273">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:11:53.273" status="PASS" starttime="20170825 15:11:53.272"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:53.273">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:11:53.273" status="PASS" starttime="20170825 15:11:52.483"></status>
</kw>
<status endtime="20170825 15:11:53.273" status="PASS" starttime="20170825 15:11:52.483"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:53.274">${state} = Unspecified</msg>
<status endtime="20170825 15:11:53.274" status="PASS" starttime="20170825 15:11:52.482"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:53.274">${boot_progress} = Unspecified</msg>
<status endtime="20170825 15:11:53.274" status="PASS" starttime="20170825 15:11:51.749"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>OSStart</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:11:53.274">Unspecified != OSStart</msg>
<status endtime="20170825 15:11:53.275" status="FAIL" starttime="20170825 15:11:53.274"></status>
</kw>
<status endtime="20170825 15:11:53.275" status="FAIL" starttime="20170825 15:11:51.749"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:53.275">${status} = False</msg>
<status endtime="20170825 15:11:53.275" status="PASS" starttime="20170825 15:11:51.748"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170825 15:11:53.275" status="PASS" starttime="20170825 15:11:53.275"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:53.280">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:11:53.280" status="PASS" starttime="20170825 15:11:53.279"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:53.281">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:11:53.281" status="PASS" starttime="20170825 15:11:53.280"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:53.281">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:11:53.281" status="PASS" starttime="20170825 15:11:53.281"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:53.282">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:11:53.282" status="PASS" starttime="20170825 15:11:53.282"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:53.546">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:11:53.547" status="PASS" starttime="20170825 15:11:53.283"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:53.547">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:11:53.547">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:11:53.547" status="PASS" starttime="20170825 15:11:53.282"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:53.547">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:11:53.548" status="PASS" starttime="20170825 15:11:53.547"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:53.548">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:11:53.548" status="PASS" starttime="20170825 15:11:53.548"></status>
</kw>
<status endtime="20170825 15:11:53.548" status="PASS" starttime="20170825 15:11:53.279"></status>
</kw>
<status endtime="20170825 15:11:53.548" status="PASS" starttime="20170825 15:11:53.278"></status>
</kw>
<status endtime="20170825 15:11:53.549" status="PASS" starttime="20170825 15:11:53.277"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:53.549">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170825 15:11:53.549" status="PASS" starttime="20170825 15:11:53.549"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:53.551">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:11:53.551" status="PASS" starttime="20170825 15:11:53.551"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:53.552">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:11:53.552" status="PASS" starttime="20170825 15:11:53.552"></status>
</kw>
<status endtime="20170825 15:11:53.552" status="PASS" starttime="20170825 15:11:53.551"></status>
</kw>
<status endtime="20170825 15:11:53.552" status="PASS" starttime="20170825 15:11:53.550"></status>
</kw>
<status endtime="20170825 15:11:53.552" status="PASS" starttime="20170825 15:11:53.549"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:53.643">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:11:53.643">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:11:53.643" status="PASS" starttime="20170825 15:11:53.553"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:53.645">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:11:53.645" status="PASS" starttime="20170825 15:11:53.645"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:53.646">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:11:53.646" status="PASS" starttime="20170825 15:11:53.646"></status>
</kw>
<status endtime="20170825 15:11:53.647" status="PASS" starttime="20170825 15:11:53.645"></status>
</kw>
<status endtime="20170825 15:11:53.647" status="PASS" starttime="20170825 15:11:53.644"></status>
</kw>
<status endtime="20170825 15:11:53.647" status="PASS" starttime="20170825 15:11:53.644"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:11:53.647">Delete All Sessions</msg>
<status endtime="20170825 15:11:53.647" status="PASS" starttime="20170825 15:11:53.647"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:53.647">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:11:53.647" status="PASS" starttime="20170825 15:11:53.277"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:53.648">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:11:53.648" status="PASS" starttime="20170825 15:11:53.648"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:11:53.649">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:11:53.649">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:11:53.649">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:11:53.649" status="PASS" starttime="20170825 15:11:53.648"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:53.649">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:11:53.649" status="PASS" starttime="20170825 15:11:53.276"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:11:53.649">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:11:53.649" status="PASS" starttime="20170825 15:11:53.276"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:11:53.650">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170825 15:11:53.650">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:11:53.650" status="FAIL" starttime="20170825 15:11:53.650"></status>
</kw>
<status endtime="20170825 15:11:53.650" status="FAIL" starttime="20170825 15:11:51.748"></status>
</kw>
<status endtime="20170825 15:11:53.651" status="FAIL" starttime="20170825 15:11:48.945"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:03.655">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:12:03.656" status="PASS" starttime="20170825 15:12:03.655"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:03.656">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:12:03.656" status="PASS" starttime="20170825 15:12:03.656"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:03.657">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:12:03.657" status="PASS" starttime="20170825 15:12:03.657"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:03.658">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:12:03.658" status="PASS" starttime="20170825 15:12:03.657"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:03.851">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:12:03.851" status="PASS" starttime="20170825 15:12:03.658"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:03.852">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:12:03.852">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:12:03.852" status="PASS" starttime="20170825 15:12:03.658"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:03.853">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:12:03.853" status="PASS" starttime="20170825 15:12:03.852"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:03.854">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:12:03.854" status="PASS" starttime="20170825 15:12:03.853"></status>
</kw>
<status endtime="20170825 15:12:03.854" status="PASS" starttime="20170825 15:12:03.654"></status>
</kw>
<status endtime="20170825 15:12:03.854" status="PASS" starttime="20170825 15:12:03.654"></status>
</kw>
<status endtime="20170825 15:12:03.854" status="PASS" starttime="20170825 15:12:03.653"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:03.855">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:12:03.855" status="PASS" starttime="20170825 15:12:03.855"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:03.857">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:12:03.858" status="PASS" starttime="20170825 15:12:03.857"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:03.858">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:12:03.859" status="PASS" starttime="20170825 15:12:03.858"></status>
</kw>
<status endtime="20170825 15:12:03.859" status="PASS" starttime="20170825 15:12:03.858"></status>
</kw>
<status endtime="20170825 15:12:03.859" status="PASS" starttime="20170825 15:12:03.856"></status>
</kw>
<status endtime="20170825 15:12:03.859" status="PASS" starttime="20170825 15:12:03.856"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:03.922">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:12:03.922">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:12:03.922" status="PASS" starttime="20170825 15:12:03.859"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:03.924">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:12:03.924" status="PASS" starttime="20170825 15:12:03.923"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:03.925">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:12:03.925" status="PASS" starttime="20170825 15:12:03.924"></status>
</kw>
<status endtime="20170825 15:12:03.925" status="PASS" starttime="20170825 15:12:03.924"></status>
</kw>
<status endtime="20170825 15:12:03.925" status="PASS" starttime="20170825 15:12:03.923"></status>
</kw>
<status endtime="20170825 15:12:03.925" status="PASS" starttime="20170825 15:12:03.922"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:12:03.925">Delete All Sessions</msg>
<status endtime="20170825 15:12:03.925" status="PASS" starttime="20170825 15:12:03.925"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:03.926">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:12:03.926" status="PASS" starttime="20170825 15:12:03.653"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:03.926">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:12:03.926" status="PASS" starttime="20170825 15:12:03.926"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:03.927">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:12:03.927">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:12:03.927">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:12:03.927" status="PASS" starttime="20170825 15:12:03.927"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:03.927">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:12:03.927" status="PASS" starttime="20170825 15:12:03.652"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:03.928">${power_state} = On</msg>
<status endtime="20170825 15:12:03.928" status="PASS" starttime="20170825 15:12:03.652"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:12:03.928" status="PASS" starttime="20170825 15:12:03.928"></status>
</kw>
<status endtime="20170825 15:12:03.928" status="PASS" starttime="20170825 15:12:03.651"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:03.932">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:12:03.935" status="PASS" starttime="20170825 15:12:03.932"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:03.936">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:12:03.936" status="PASS" starttime="20170825 15:12:03.935"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:03.936">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:12:03.937" status="PASS" starttime="20170825 15:12:03.936"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:03.937">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:12:03.937" status="PASS" starttime="20170825 15:12:03.937"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:04.144">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:12:04.144" status="PASS" starttime="20170825 15:12:03.938"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:04.144">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:12:04.144">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:12:04.144" status="PASS" starttime="20170825 15:12:03.938"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:04.144">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:12:04.145" status="PASS" starttime="20170825 15:12:04.144"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:04.145">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:12:04.145" status="PASS" starttime="20170825 15:12:04.145"></status>
</kw>
<status endtime="20170825 15:12:04.145" status="PASS" starttime="20170825 15:12:03.931"></status>
</kw>
<status endtime="20170825 15:12:04.145" status="PASS" starttime="20170825 15:12:03.931"></status>
</kw>
<status endtime="20170825 15:12:04.146" status="PASS" starttime="20170825 15:12:03.930"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:04.146">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:12:04.146" status="PASS" starttime="20170825 15:12:04.146"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:04.148">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:12:04.148" status="PASS" starttime="20170825 15:12:04.148"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:04.149">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:12:04.149" status="PASS" starttime="20170825 15:12:04.149"></status>
</kw>
<status endtime="20170825 15:12:04.149" status="PASS" starttime="20170825 15:12:04.148"></status>
</kw>
<status endtime="20170825 15:12:04.149" status="PASS" starttime="20170825 15:12:04.147"></status>
</kw>
<status endtime="20170825 15:12:04.150" status="PASS" starttime="20170825 15:12:04.146"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:04.239">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:12:04.239">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:12:04.239" status="PASS" starttime="20170825 15:12:04.150"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:04.240">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:12:04.241" status="PASS" starttime="20170825 15:12:04.240"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:04.241">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:12:04.242" status="PASS" starttime="20170825 15:12:04.241"></status>
</kw>
<status endtime="20170825 15:12:04.242" status="PASS" starttime="20170825 15:12:04.241"></status>
</kw>
<status endtime="20170825 15:12:04.242" status="PASS" starttime="20170825 15:12:04.239"></status>
</kw>
<status endtime="20170825 15:12:04.242" status="PASS" starttime="20170825 15:12:04.239"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:12:04.242">Delete All Sessions</msg>
<status endtime="20170825 15:12:04.242" status="PASS" starttime="20170825 15:12:04.242"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:04.242">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:12:04.243" status="PASS" starttime="20170825 15:12:03.929"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:04.243">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:12:04.243" status="PASS" starttime="20170825 15:12:04.243"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:04.244">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:12:04.244">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:12:04.244">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:12:04.244" status="PASS" starttime="20170825 15:12:04.243"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:04.244">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170825 15:12:04.244" status="PASS" starttime="20170825 15:12:03.929"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:04.244">${host_state} = Running</msg>
<status endtime="20170825 15:12:04.245" status="PASS" starttime="20170825 15:12:03.929"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170825 15:12:04.245" status="PASS" starttime="20170825 15:12:04.245"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<doc>Get the boot progress and return it.</doc>
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Set Boot Progress Method" library="utils">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg level="INFO" timestamp="20170825 15:12:04.248">Returning from the enclosing user keyword.</msg>
<status endtime="20170825 15:12:04.248" status="PASS" starttime="20170825 15:12:04.248"></status>
</kw>
<status endtime="20170825 15:12:04.248" status="PASS" starttime="20170825 15:12:04.247"></status>
</kw>
<status endtime="20170825 15:12:04.248" status="PASS" starttime="20170825 15:12:04.247"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="New Get Boot Progress" library="utils">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:04.252">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:12:04.253" status="PASS" starttime="20170825 15:12:04.252"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:04.253">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:12:04.253" status="PASS" starttime="20170825 15:12:04.253"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:04.254">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:12:04.254" status="PASS" starttime="20170825 15:12:04.254"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:04.254">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:12:04.255" status="PASS" starttime="20170825 15:12:04.254"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:04.475">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:12:04.475" status="PASS" starttime="20170825 15:12:04.255"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:04.475">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:12:04.475">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:12:04.475" status="PASS" starttime="20170825 15:12:04.255"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:04.476">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:12:04.476" status="PASS" starttime="20170825 15:12:04.475"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:04.477">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:12:04.477" status="PASS" starttime="20170825 15:12:04.476"></status>
</kw>
<status endtime="20170825 15:12:04.477" status="PASS" starttime="20170825 15:12:04.251"></status>
</kw>
<status endtime="20170825 15:12:04.477" status="PASS" starttime="20170825 15:12:04.251"></status>
</kw>
<status endtime="20170825 15:12:04.477" status="PASS" starttime="20170825 15:12:04.251"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:04.478">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170825 15:12:04.478" status="PASS" starttime="20170825 15:12:04.477"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:04.480">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:12:04.480" status="PASS" starttime="20170825 15:12:04.479"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:04.480">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:12:04.481" status="PASS" starttime="20170825 15:12:04.480"></status>
</kw>
<status endtime="20170825 15:12:04.481" status="PASS" starttime="20170825 15:12:04.480"></status>
</kw>
<status endtime="20170825 15:12:04.481" status="PASS" starttime="20170825 15:12:04.478"></status>
</kw>
<status endtime="20170825 15:12:04.481" status="PASS" starttime="20170825 15:12:04.478"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:04.630">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:12:04.630">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:12:04.631" status="PASS" starttime="20170825 15:12:04.481"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:04.632">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:12:04.632" status="PASS" starttime="20170825 15:12:04.632"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:04.633">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:12:04.633" status="PASS" starttime="20170825 15:12:04.633"></status>
</kw>
<status endtime="20170825 15:12:04.633" status="PASS" starttime="20170825 15:12:04.632"></status>
</kw>
<status endtime="20170825 15:12:04.633" status="PASS" starttime="20170825 15:12:04.631"></status>
</kw>
<status endtime="20170825 15:12:04.634" status="PASS" starttime="20170825 15:12:04.631"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:12:04.634">Delete All Sessions</msg>
<status endtime="20170825 15:12:04.634" status="PASS" starttime="20170825 15:12:04.634"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:04.634">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:12:04.634" status="PASS" starttime="20170825 15:12:04.250"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:04.635">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:12:04.635" status="PASS" starttime="20170825 15:12:04.634"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:04.636">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:12:04.636">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:12:04.636">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:12:04.636" status="PASS" starttime="20170825 15:12:04.635"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:04.636">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:12:04.636" status="PASS" starttime="20170825 15:12:04.249"></status>
</kw>
<status endtime="20170825 15:12:04.637" status="PASS" starttime="20170825 15:12:04.249"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:04.637">${state} = Unspecified</msg>
<status endtime="20170825 15:12:04.637" status="PASS" starttime="20170825 15:12:04.249"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:04.637">${boot_progress} = Unspecified</msg>
<status endtime="20170825 15:12:04.637" status="PASS" starttime="20170825 15:12:04.246"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>OSStart</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:12:04.638">Unspecified != OSStart</msg>
<status endtime="20170825 15:12:04.638" status="FAIL" starttime="20170825 15:12:04.637"></status>
</kw>
<status endtime="20170825 15:12:04.638" status="FAIL" starttime="20170825 15:12:04.246"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:04.638">${status} = False</msg>
<status endtime="20170825 15:12:04.638" status="PASS" starttime="20170825 15:12:04.246"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170825 15:12:04.639" status="PASS" starttime="20170825 15:12:04.638"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:04.642">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:12:04.643" status="PASS" starttime="20170825 15:12:04.642"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:04.643">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:12:04.643" status="PASS" starttime="20170825 15:12:04.643"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:04.644">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:12:04.644" status="PASS" starttime="20170825 15:12:04.644"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:04.645">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:12:04.645" status="PASS" starttime="20170825 15:12:04.644"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:04.844">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:12:04.844" status="PASS" starttime="20170825 15:12:04.645"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:04.844">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:12:04.844">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:12:04.844" status="PASS" starttime="20170825 15:12:04.645"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:04.845">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:12:04.845" status="PASS" starttime="20170825 15:12:04.845"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:04.846">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:12:04.846" status="PASS" starttime="20170825 15:12:04.845"></status>
</kw>
<status endtime="20170825 15:12:04.846" status="PASS" starttime="20170825 15:12:04.641"></status>
</kw>
<status endtime="20170825 15:12:04.846" status="PASS" starttime="20170825 15:12:04.641"></status>
</kw>
<status endtime="20170825 15:12:04.846" status="PASS" starttime="20170825 15:12:04.640"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:04.847">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170825 15:12:04.847" status="PASS" starttime="20170825 15:12:04.846"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:04.849">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:12:04.849" status="PASS" starttime="20170825 15:12:04.848"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:04.850">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:12:04.850" status="PASS" starttime="20170825 15:12:04.849"></status>
</kw>
<status endtime="20170825 15:12:04.850" status="PASS" starttime="20170825 15:12:04.849"></status>
</kw>
<status endtime="20170825 15:12:04.850" status="PASS" starttime="20170825 15:12:04.847"></status>
</kw>
<status endtime="20170825 15:12:04.850" status="PASS" starttime="20170825 15:12:04.847"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:04.940">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:12:04.941">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:12:04.941" status="PASS" starttime="20170825 15:12:04.850"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:04.942">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:12:04.942" status="PASS" starttime="20170825 15:12:04.942"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:04.943">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:12:04.943" status="PASS" starttime="20170825 15:12:04.943"></status>
</kw>
<status endtime="20170825 15:12:04.943" status="PASS" starttime="20170825 15:12:04.942"></status>
</kw>
<status endtime="20170825 15:12:04.943" status="PASS" starttime="20170825 15:12:04.941"></status>
</kw>
<status endtime="20170825 15:12:04.944" status="PASS" starttime="20170825 15:12:04.941"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:12:04.944">Delete All Sessions</msg>
<status endtime="20170825 15:12:04.944" status="PASS" starttime="20170825 15:12:04.944"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:04.944">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:12:04.944" status="PASS" starttime="20170825 15:12:04.640"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:04.945">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:12:04.945" status="PASS" starttime="20170825 15:12:04.944"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:04.945">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:12:04.945">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:12:04.946">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:12:04.946" status="PASS" starttime="20170825 15:12:04.945"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:04.946">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:12:04.946" status="PASS" starttime="20170825 15:12:04.639"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:04.946">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:12:04.946" status="PASS" starttime="20170825 15:12:04.639"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:04.947">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170825 15:12:04.947">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:12:04.947" status="FAIL" starttime="20170825 15:12:04.946"></status>
</kw>
<status endtime="20170825 15:12:04.947" status="FAIL" starttime="20170825 15:12:04.245"></status>
</kw>
<status endtime="20170825 15:12:04.947" status="FAIL" starttime="20170825 15:12:03.651"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:14.953">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:12:14.953" status="PASS" starttime="20170825 15:12:14.952"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:14.954">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:12:14.954" status="PASS" starttime="20170825 15:12:14.953"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:14.954">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:12:14.954" status="PASS" starttime="20170825 15:12:14.954"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:14.955">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:12:14.955" status="PASS" starttime="20170825 15:12:14.955"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:15.133">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:12:15.133" status="PASS" starttime="20170825 15:12:14.956"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:15.133">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:12:15.133">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:12:15.133" status="PASS" starttime="20170825 15:12:14.955"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:15.134">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:12:15.134" status="PASS" starttime="20170825 15:12:15.133"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:15.134">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:12:15.134" status="PASS" starttime="20170825 15:12:15.134"></status>
</kw>
<status endtime="20170825 15:12:15.135" status="PASS" starttime="20170825 15:12:14.952"></status>
</kw>
<status endtime="20170825 15:12:15.135" status="PASS" starttime="20170825 15:12:14.951"></status>
</kw>
<status endtime="20170825 15:12:15.135" status="PASS" starttime="20170825 15:12:14.951"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:15.135">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:12:15.135" status="PASS" starttime="20170825 15:12:15.135"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:15.137">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:12:15.138" status="PASS" starttime="20170825 15:12:15.137"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:15.138">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:12:15.138" status="PASS" starttime="20170825 15:12:15.138"></status>
</kw>
<status endtime="20170825 15:12:15.139" status="PASS" starttime="20170825 15:12:15.138"></status>
</kw>
<status endtime="20170825 15:12:15.139" status="PASS" starttime="20170825 15:12:15.136"></status>
</kw>
<status endtime="20170825 15:12:15.139" status="PASS" starttime="20170825 15:12:15.136"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:15.208">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:12:15.209">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:12:15.209" status="PASS" starttime="20170825 15:12:15.139"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:15.211">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:12:15.211" status="PASS" starttime="20170825 15:12:15.210"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:15.212">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:12:15.212" status="PASS" starttime="20170825 15:12:15.212"></status>
</kw>
<status endtime="20170825 15:12:15.212" status="PASS" starttime="20170825 15:12:15.211"></status>
</kw>
<status endtime="20170825 15:12:15.212" status="PASS" starttime="20170825 15:12:15.209"></status>
</kw>
<status endtime="20170825 15:12:15.212" status="PASS" starttime="20170825 15:12:15.209"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:12:15.213">Delete All Sessions</msg>
<status endtime="20170825 15:12:15.213" status="PASS" starttime="20170825 15:12:15.213"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:15.213">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:12:15.213" status="PASS" starttime="20170825 15:12:14.950"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:15.214">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:12:15.214" status="PASS" starttime="20170825 15:12:15.213"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:15.214">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:12:15.214">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:12:15.214">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:12:15.214" status="PASS" starttime="20170825 15:12:15.214"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:15.215">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:12:15.215" status="PASS" starttime="20170825 15:12:14.949"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:15.215">${power_state} = On</msg>
<status endtime="20170825 15:12:15.215" status="PASS" starttime="20170825 15:12:14.949"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:12:15.216" status="PASS" starttime="20170825 15:12:15.215"></status>
</kw>
<status endtime="20170825 15:12:15.216" status="PASS" starttime="20170825 15:12:14.948"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:15.219">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:12:15.220" status="PASS" starttime="20170825 15:12:15.219"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:15.220">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:12:15.220" status="PASS" starttime="20170825 15:12:15.220"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:15.221">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:12:15.221" status="PASS" starttime="20170825 15:12:15.220"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:15.221">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:12:15.221" status="PASS" starttime="20170825 15:12:15.221"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:15.494">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:12:15.494" status="PASS" starttime="20170825 15:12:15.222"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:15.494">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:12:15.494">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:12:15.494" status="PASS" starttime="20170825 15:12:15.222"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:15.495">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:12:15.495" status="PASS" starttime="20170825 15:12:15.495"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:15.496">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:12:15.496" status="PASS" starttime="20170825 15:12:15.495"></status>
</kw>
<status endtime="20170825 15:12:15.496" status="PASS" starttime="20170825 15:12:15.218"></status>
</kw>
<status endtime="20170825 15:12:15.496" status="PASS" starttime="20170825 15:12:15.218"></status>
</kw>
<status endtime="20170825 15:12:15.497" status="PASS" starttime="20170825 15:12:15.217"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:15.497">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:12:15.497" status="PASS" starttime="20170825 15:12:15.497"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:15.499">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:12:15.499" status="PASS" starttime="20170825 15:12:15.498"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:15.500">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:12:15.500" status="PASS" starttime="20170825 15:12:15.500"></status>
</kw>
<status endtime="20170825 15:12:15.500" status="PASS" starttime="20170825 15:12:15.499"></status>
</kw>
<status endtime="20170825 15:12:15.500" status="PASS" starttime="20170825 15:12:15.498"></status>
</kw>
<status endtime="20170825 15:12:15.500" status="PASS" starttime="20170825 15:12:15.497"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:15.590">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:12:15.590">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:12:15.590" status="PASS" starttime="20170825 15:12:15.501"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:15.592">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:12:15.592" status="PASS" starttime="20170825 15:12:15.591"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:15.593">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:12:15.593" status="PASS" starttime="20170825 15:12:15.593"></status>
</kw>
<status endtime="20170825 15:12:15.593" status="PASS" starttime="20170825 15:12:15.592"></status>
</kw>
<status endtime="20170825 15:12:15.593" status="PASS" starttime="20170825 15:12:15.591"></status>
</kw>
<status endtime="20170825 15:12:15.593" status="PASS" starttime="20170825 15:12:15.591"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:12:15.594">Delete All Sessions</msg>
<status endtime="20170825 15:12:15.594" status="PASS" starttime="20170825 15:12:15.594"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:15.594">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:12:15.594" status="PASS" starttime="20170825 15:12:15.217"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:15.595">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:12:15.595" status="PASS" starttime="20170825 15:12:15.594"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:15.595">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:12:15.595">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:12:15.595">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:12:15.595" status="PASS" starttime="20170825 15:12:15.595"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:15.596">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170825 15:12:15.596" status="PASS" starttime="20170825 15:12:15.216"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:15.596">${host_state} = Running</msg>
<status endtime="20170825 15:12:15.596" status="PASS" starttime="20170825 15:12:15.216"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170825 15:12:15.597" status="PASS" starttime="20170825 15:12:15.596"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<doc>Get the boot progress and return it.</doc>
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Set Boot Progress Method" library="utils">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg level="INFO" timestamp="20170825 15:12:15.599">Returning from the enclosing user keyword.</msg>
<status endtime="20170825 15:12:15.599" status="PASS" starttime="20170825 15:12:15.599"></status>
</kw>
<status endtime="20170825 15:12:15.599" status="PASS" starttime="20170825 15:12:15.599"></status>
</kw>
<status endtime="20170825 15:12:15.599" status="PASS" starttime="20170825 15:12:15.598"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="New Get Boot Progress" library="utils">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:15.605">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:12:15.606" status="PASS" starttime="20170825 15:12:15.605"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:15.606">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:12:15.606" status="PASS" starttime="20170825 15:12:15.606"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:15.607">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:12:15.607" status="PASS" starttime="20170825 15:12:15.606"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:15.607">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:12:15.608" status="PASS" starttime="20170825 15:12:15.607"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:15.784">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:12:15.784" status="PASS" starttime="20170825 15:12:15.608"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:15.784">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:12:15.784">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:12:15.784" status="PASS" starttime="20170825 15:12:15.608"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:15.785">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:12:15.785" status="PASS" starttime="20170825 15:12:15.785"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:15.786">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:12:15.786" status="PASS" starttime="20170825 15:12:15.785"></status>
</kw>
<status endtime="20170825 15:12:15.786" status="PASS" starttime="20170825 15:12:15.604"></status>
</kw>
<status endtime="20170825 15:12:15.786" status="PASS" starttime="20170825 15:12:15.603"></status>
</kw>
<status endtime="20170825 15:12:15.786" status="PASS" starttime="20170825 15:12:15.602"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:15.787">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170825 15:12:15.787" status="PASS" starttime="20170825 15:12:15.786"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:15.789">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:12:15.789" status="PASS" starttime="20170825 15:12:15.788"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:15.790">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:12:15.790" status="PASS" starttime="20170825 15:12:15.789"></status>
</kw>
<status endtime="20170825 15:12:15.790" status="PASS" starttime="20170825 15:12:15.789"></status>
</kw>
<status endtime="20170825 15:12:15.790" status="PASS" starttime="20170825 15:12:15.787"></status>
</kw>
<status endtime="20170825 15:12:15.790" status="PASS" starttime="20170825 15:12:15.787"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:15.880">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:12:15.880">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:12:15.880" status="PASS" starttime="20170825 15:12:15.790"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:15.882">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:12:15.882" status="PASS" starttime="20170825 15:12:15.881"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:15.883">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:12:15.883" status="PASS" starttime="20170825 15:12:15.883"></status>
</kw>
<status endtime="20170825 15:12:15.883" status="PASS" starttime="20170825 15:12:15.882"></status>
</kw>
<status endtime="20170825 15:12:15.883" status="PASS" starttime="20170825 15:12:15.881"></status>
</kw>
<status endtime="20170825 15:12:15.883" status="PASS" starttime="20170825 15:12:15.880"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:12:15.884">Delete All Sessions</msg>
<status endtime="20170825 15:12:15.884" status="PASS" starttime="20170825 15:12:15.883"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:15.884">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:12:15.884" status="PASS" starttime="20170825 15:12:15.601"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:15.884">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:12:15.885" status="PASS" starttime="20170825 15:12:15.884"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:15.885">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:12:15.885">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:12:15.885">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:12:15.885" status="PASS" starttime="20170825 15:12:15.885"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:15.886">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:12:15.886" status="PASS" starttime="20170825 15:12:15.601"></status>
</kw>
<status endtime="20170825 15:12:15.886" status="PASS" starttime="20170825 15:12:15.600"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:15.886">${state} = Unspecified</msg>
<status endtime="20170825 15:12:15.886" status="PASS" starttime="20170825 15:12:15.600"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:15.886">${boot_progress} = Unspecified</msg>
<status endtime="20170825 15:12:15.886" status="PASS" starttime="20170825 15:12:15.598"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>OSStart</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:12:15.887">Unspecified != OSStart</msg>
<status endtime="20170825 15:12:15.887" status="FAIL" starttime="20170825 15:12:15.886"></status>
</kw>
<status endtime="20170825 15:12:15.887" status="FAIL" starttime="20170825 15:12:15.597"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:15.887">${status} = False</msg>
<status endtime="20170825 15:12:15.887" status="PASS" starttime="20170825 15:12:15.597"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170825 15:12:15.888" status="PASS" starttime="20170825 15:12:15.887"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:15.891">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:12:15.892" status="PASS" starttime="20170825 15:12:15.891"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:15.892">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:12:15.892" status="PASS" starttime="20170825 15:12:15.892"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:15.893">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:12:15.893" status="PASS" starttime="20170825 15:12:15.893"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:15.894">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:12:15.894" status="PASS" starttime="20170825 15:12:15.893"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:16.081">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:12:16.081" status="PASS" starttime="20170825 15:12:15.894"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:16.081">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:12:16.081">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:12:16.081" status="PASS" starttime="20170825 15:12:15.894"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:16.082">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:12:16.082" status="PASS" starttime="20170825 15:12:16.082"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:16.083">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:12:16.083" status="PASS" starttime="20170825 15:12:16.082"></status>
</kw>
<status endtime="20170825 15:12:16.083" status="PASS" starttime="20170825 15:12:15.890"></status>
</kw>
<status endtime="20170825 15:12:16.083" status="PASS" starttime="20170825 15:12:15.890"></status>
</kw>
<status endtime="20170825 15:12:16.083" status="PASS" starttime="20170825 15:12:15.889"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:16.084">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170825 15:12:16.084" status="PASS" starttime="20170825 15:12:16.083"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:16.086">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:12:16.086" status="PASS" starttime="20170825 15:12:16.085"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:16.087">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:12:16.087" status="PASS" starttime="20170825 15:12:16.086"></status>
</kw>
<status endtime="20170825 15:12:16.087" status="PASS" starttime="20170825 15:12:16.086"></status>
</kw>
<status endtime="20170825 15:12:16.087" status="PASS" starttime="20170825 15:12:16.084"></status>
</kw>
<status endtime="20170825 15:12:16.087" status="PASS" starttime="20170825 15:12:16.084"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:16.177">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:12:16.177">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:12:16.177" status="PASS" starttime="20170825 15:12:16.087"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:16.179">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:12:16.179" status="PASS" starttime="20170825 15:12:16.178"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:16.180">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:12:16.180" status="PASS" starttime="20170825 15:12:16.180"></status>
</kw>
<status endtime="20170825 15:12:16.180" status="PASS" starttime="20170825 15:12:16.179"></status>
</kw>
<status endtime="20170825 15:12:16.180" status="PASS" starttime="20170825 15:12:16.178"></status>
</kw>
<status endtime="20170825 15:12:16.180" status="PASS" starttime="20170825 15:12:16.177"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:12:16.181">Delete All Sessions</msg>
<status endtime="20170825 15:12:16.181" status="PASS" starttime="20170825 15:12:16.181"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:16.181">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:12:16.181" status="PASS" starttime="20170825 15:12:15.889"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:16.182">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:12:16.182" status="PASS" starttime="20170825 15:12:16.181"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:16.182">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:12:16.182">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:12:16.182">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:12:16.182" status="PASS" starttime="20170825 15:12:16.182"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:16.183">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:12:16.183" status="PASS" starttime="20170825 15:12:15.888"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:16.183">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:12:16.183" status="PASS" starttime="20170825 15:12:15.888"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:16.183">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170825 15:12:16.184">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:12:16.184" status="FAIL" starttime="20170825 15:12:16.183"></status>
</kw>
<status endtime="20170825 15:12:16.184" status="FAIL" starttime="20170825 15:12:15.597"></status>
</kw>
<status endtime="20170825 15:12:16.184" status="FAIL" starttime="20170825 15:12:14.948"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:26.190">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:12:26.190" status="PASS" starttime="20170825 15:12:26.189"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:26.191">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:12:26.191" status="PASS" starttime="20170825 15:12:26.190"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:26.191">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:12:26.191" status="PASS" starttime="20170825 15:12:26.191"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:26.193">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:12:26.193" status="PASS" starttime="20170825 15:12:26.193"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:27.242">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:12:27.242" status="PASS" starttime="20170825 15:12:26.194"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:27.242">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:12:27.242">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:12:27.242" status="PASS" starttime="20170825 15:12:26.193"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:27.243">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:12:27.243" status="PASS" starttime="20170825 15:12:27.243"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:27.244">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:12:27.244" status="PASS" starttime="20170825 15:12:27.243"></status>
</kw>
<status endtime="20170825 15:12:27.244" status="PASS" starttime="20170825 15:12:26.189"></status>
</kw>
<status endtime="20170825 15:12:27.244" status="PASS" starttime="20170825 15:12:26.188"></status>
</kw>
<status endtime="20170825 15:12:27.244" status="PASS" starttime="20170825 15:12:26.187"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:27.245">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:12:27.245" status="PASS" starttime="20170825 15:12:27.244"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:27.247">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:12:27.247" status="PASS" starttime="20170825 15:12:27.246"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:27.248">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:12:27.248" status="PASS" starttime="20170825 15:12:27.248"></status>
</kw>
<status endtime="20170825 15:12:27.248" status="PASS" starttime="20170825 15:12:27.247"></status>
</kw>
<status endtime="20170825 15:12:27.248" status="PASS" starttime="20170825 15:12:27.246"></status>
</kw>
<status endtime="20170825 15:12:27.248" status="PASS" starttime="20170825 15:12:27.245"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:37.114">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:12:37.114">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:12:37.114" status="PASS" starttime="20170825 15:12:27.248"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:37.116">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:12:37.116" status="PASS" starttime="20170825 15:12:37.116"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:37.117">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:12:37.118" status="PASS" starttime="20170825 15:12:37.117"></status>
</kw>
<status endtime="20170825 15:12:37.118" status="PASS" starttime="20170825 15:12:37.116"></status>
</kw>
<status endtime="20170825 15:12:37.118" status="PASS" starttime="20170825 15:12:37.115"></status>
</kw>
<status endtime="20170825 15:12:37.118" status="PASS" starttime="20170825 15:12:37.115"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:12:37.118">Delete All Sessions</msg>
<status endtime="20170825 15:12:37.118" status="PASS" starttime="20170825 15:12:37.118"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:37.119">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:12:37.119" status="PASS" starttime="20170825 15:12:26.186"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:37.119">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:12:37.119" status="PASS" starttime="20170825 15:12:37.119"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:37.120">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:12:37.120">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:12:37.120">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:12:37.120" status="PASS" starttime="20170825 15:12:37.119"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:37.120">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 15:12:37.120" status="PASS" starttime="20170825 15:12:26.186"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:37.121">${power_state} = Off</msg>
<status endtime="20170825 15:12:37.121" status="PASS" starttime="20170825 15:12:26.185"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:12:37.121">On != Off</msg>
<status endtime="20170825 15:12:37.121" status="FAIL" starttime="20170825 15:12:37.121"></status>
</kw>
<status endtime="20170825 15:12:37.121" status="FAIL" starttime="20170825 15:12:26.185"></status>
</kw>
<status endtime="20170825 15:12:37.122" status="FAIL" starttime="20170825 15:12:26.184"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:47.126">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:12:47.127" status="PASS" starttime="20170825 15:12:47.126"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:47.127">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:12:47.127" status="PASS" starttime="20170825 15:12:47.127"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:47.128">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:12:47.128" status="PASS" starttime="20170825 15:12:47.128"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:47.129">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:12:47.129" status="PASS" starttime="20170825 15:12:47.128"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:47.468">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:12:47.468" status="PASS" starttime="20170825 15:12:47.129"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:47.468">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:12:47.468">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:12:47.468" status="PASS" starttime="20170825 15:12:47.129"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:47.469">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:12:47.469" status="PASS" starttime="20170825 15:12:47.468"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:47.469">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:12:47.469" status="PASS" starttime="20170825 15:12:47.469"></status>
</kw>
<status endtime="20170825 15:12:47.470" status="PASS" starttime="20170825 15:12:47.126"></status>
</kw>
<status endtime="20170825 15:12:47.470" status="PASS" starttime="20170825 15:12:47.125"></status>
</kw>
<status endtime="20170825 15:12:47.470" status="PASS" starttime="20170825 15:12:47.125"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:47.470">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:12:47.470" status="PASS" starttime="20170825 15:12:47.470"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:47.473">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:12:47.473" status="PASS" starttime="20170825 15:12:47.472"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:47.474">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:12:47.474" status="PASS" starttime="20170825 15:12:47.474"></status>
</kw>
<status endtime="20170825 15:12:47.474" status="PASS" starttime="20170825 15:12:47.473"></status>
</kw>
<status endtime="20170825 15:12:47.474" status="PASS" starttime="20170825 15:12:47.472"></status>
</kw>
<status endtime="20170825 15:12:47.474" status="PASS" starttime="20170825 15:12:47.471"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:47.589">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:12:47.589">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:12:47.589" status="PASS" starttime="20170825 15:12:47.475"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:47.591">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:12:47.591" status="PASS" starttime="20170825 15:12:47.590"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:47.592">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:12:47.592" status="PASS" starttime="20170825 15:12:47.592"></status>
</kw>
<status endtime="20170825 15:12:47.592" status="PASS" starttime="20170825 15:12:47.591"></status>
</kw>
<status endtime="20170825 15:12:47.592" status="PASS" starttime="20170825 15:12:47.590"></status>
</kw>
<status endtime="20170825 15:12:47.592" status="PASS" starttime="20170825 15:12:47.590"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:12:47.593">Delete All Sessions</msg>
<status endtime="20170825 15:12:47.593" status="PASS" starttime="20170825 15:12:47.593"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:47.593">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:12:47.593" status="PASS" starttime="20170825 15:12:47.124"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:47.594">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:12:47.594" status="PASS" starttime="20170825 15:12:47.593"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:47.594">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:12:47.594">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:12:47.594">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:12:47.594" status="PASS" starttime="20170825 15:12:47.594"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:47.595">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 15:12:47.595" status="PASS" starttime="20170825 15:12:47.123"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:47.595">${power_state} = Off</msg>
<status endtime="20170825 15:12:47.595" status="PASS" starttime="20170825 15:12:47.123"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:12:47.596">On != Off</msg>
<status endtime="20170825 15:12:47.596" status="FAIL" starttime="20170825 15:12:47.595"></status>
</kw>
<status endtime="20170825 15:12:47.596" status="FAIL" starttime="20170825 15:12:47.123"></status>
</kw>
<status endtime="20170825 15:12:47.596" status="FAIL" starttime="20170825 15:12:47.122"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:57.631">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:12:57.632" status="PASS" starttime="20170825 15:12:57.631"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:57.633">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:12:57.633" status="PASS" starttime="20170825 15:12:57.632"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:57.634">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:12:57.634" status="PASS" starttime="20170825 15:12:57.633"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:57.635">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:12:57.635" status="PASS" starttime="20170825 15:12:57.634"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:57.827">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:12:57.827" status="PASS" starttime="20170825 15:12:57.636"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:57.828">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:12:57.828">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:12:57.828" status="PASS" starttime="20170825 15:12:57.635"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:57.828">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:12:57.828" status="PASS" starttime="20170825 15:12:57.828"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:57.829">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:12:57.829" status="PASS" starttime="20170825 15:12:57.829"></status>
</kw>
<status endtime="20170825 15:12:57.829" status="PASS" starttime="20170825 15:12:57.600"></status>
</kw>
<status endtime="20170825 15:12:57.829" status="PASS" starttime="20170825 15:12:57.600"></status>
</kw>
<status endtime="20170825 15:12:57.829" status="PASS" starttime="20170825 15:12:57.599"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:57.830">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:12:57.830" status="PASS" starttime="20170825 15:12:57.830"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:57.832">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:12:57.832" status="PASS" starttime="20170825 15:12:57.831"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:57.833">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:12:57.833" status="PASS" starttime="20170825 15:12:57.833"></status>
</kw>
<status endtime="20170825 15:12:57.833" status="PASS" starttime="20170825 15:12:57.832"></status>
</kw>
<status endtime="20170825 15:12:57.833" status="PASS" starttime="20170825 15:12:57.831"></status>
</kw>
<status endtime="20170825 15:12:57.833" status="PASS" starttime="20170825 15:12:57.830"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:57.897">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:12:57.897">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:12:57.897" status="PASS" starttime="20170825 15:12:57.834"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:57.899">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:12:57.899" status="PASS" starttime="20170825 15:12:57.899"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:57.900">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:12:57.900" status="PASS" starttime="20170825 15:12:57.900"></status>
</kw>
<status endtime="20170825 15:12:57.900" status="PASS" starttime="20170825 15:12:57.899"></status>
</kw>
<status endtime="20170825 15:12:57.900" status="PASS" starttime="20170825 15:12:57.898"></status>
</kw>
<status endtime="20170825 15:12:57.900" status="PASS" starttime="20170825 15:12:57.897"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:12:57.901">Delete All Sessions</msg>
<status endtime="20170825 15:12:57.901" status="PASS" starttime="20170825 15:12:57.901"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:57.901">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:12:57.901" status="PASS" starttime="20170825 15:12:57.598"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:57.902">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:12:57.902" status="PASS" starttime="20170825 15:12:57.902"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:57.902">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:12:57.903">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:12:57.903">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:12:57.903" status="PASS" starttime="20170825 15:12:57.902"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:57.903">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:12:57.903" status="PASS" starttime="20170825 15:12:57.598"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:57.903">${power_state} = On</msg>
<status endtime="20170825 15:12:57.903" status="PASS" starttime="20170825 15:12:57.597"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:12:57.904" status="PASS" starttime="20170825 15:12:57.904"></status>
</kw>
<status endtime="20170825 15:12:57.904" status="PASS" starttime="20170825 15:12:57.597"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:57.908">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:12:57.908" status="PASS" starttime="20170825 15:12:57.907"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:57.908">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:12:57.908" status="PASS" starttime="20170825 15:12:57.908"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:57.909">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:12:57.909" status="PASS" starttime="20170825 15:12:57.909"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:57.910">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:12:57.910" status="PASS" starttime="20170825 15:12:57.909"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:58.091">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:12:58.091" status="PASS" starttime="20170825 15:12:57.910"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:58.091">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:12:58.091">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:12:58.091" status="PASS" starttime="20170825 15:12:57.910"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:58.092">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:12:58.092" status="PASS" starttime="20170825 15:12:58.091"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:58.093">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:12:58.093" status="PASS" starttime="20170825 15:12:58.092"></status>
</kw>
<status endtime="20170825 15:12:58.093" status="PASS" starttime="20170825 15:12:57.907"></status>
</kw>
<status endtime="20170825 15:12:58.093" status="PASS" starttime="20170825 15:12:57.906"></status>
</kw>
<status endtime="20170825 15:12:58.093" status="PASS" starttime="20170825 15:12:57.906"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:58.094">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:12:58.094" status="PASS" starttime="20170825 15:12:58.093"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:58.096">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:12:58.096" status="PASS" starttime="20170825 15:12:58.095"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:58.097">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:12:58.097" status="PASS" starttime="20170825 15:12:58.096"></status>
</kw>
<status endtime="20170825 15:12:58.097" status="PASS" starttime="20170825 15:12:58.096"></status>
</kw>
<status endtime="20170825 15:12:58.097" status="PASS" starttime="20170825 15:12:58.094"></status>
</kw>
<status endtime="20170825 15:12:58.097" status="PASS" starttime="20170825 15:12:58.094"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:58.185">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:12:58.185">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:12:58.186" status="PASS" starttime="20170825 15:12:58.097"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:58.187">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:12:58.187" status="PASS" starttime="20170825 15:12:58.187"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:58.188">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:12:58.188" status="PASS" starttime="20170825 15:12:58.188"></status>
</kw>
<status endtime="20170825 15:12:58.188" status="PASS" starttime="20170825 15:12:58.187"></status>
</kw>
<status endtime="20170825 15:12:58.189" status="PASS" starttime="20170825 15:12:58.186"></status>
</kw>
<status endtime="20170825 15:12:58.189" status="PASS" starttime="20170825 15:12:58.186"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:12:58.189">Delete All Sessions</msg>
<status endtime="20170825 15:12:58.189" status="PASS" starttime="20170825 15:12:58.189"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:58.189">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:12:58.189" status="PASS" starttime="20170825 15:12:57.905"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:58.190">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:12:58.190" status="PASS" starttime="20170825 15:12:58.190"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:58.190">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:12:58.191">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:12:58.191">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:12:58.191" status="PASS" starttime="20170825 15:12:58.190"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:58.191">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170825 15:12:58.191" status="PASS" starttime="20170825 15:12:57.905"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:58.191">${host_state} = Running</msg>
<status endtime="20170825 15:12:58.191" status="PASS" starttime="20170825 15:12:57.904"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170825 15:12:58.192" status="PASS" starttime="20170825 15:12:58.192"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<doc>Get the boot progress and return it.</doc>
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Set Boot Progress Method" library="utils">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg level="INFO" timestamp="20170825 15:12:58.194">Returning from the enclosing user keyword.</msg>
<status endtime="20170825 15:12:58.195" status="PASS" starttime="20170825 15:12:58.194"></status>
</kw>
<status endtime="20170825 15:12:58.195" status="PASS" starttime="20170825 15:12:58.194"></status>
</kw>
<status endtime="20170825 15:12:58.195" status="PASS" starttime="20170825 15:12:58.193"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="New Get Boot Progress" library="utils">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:58.199">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:12:58.200" status="PASS" starttime="20170825 15:12:58.199"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:58.200">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:12:58.200" status="PASS" starttime="20170825 15:12:58.200"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:58.201">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:12:58.201" status="PASS" starttime="20170825 15:12:58.200"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:58.201">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:12:58.201" status="PASS" starttime="20170825 15:12:58.201"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:58.383">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:12:58.383" status="PASS" starttime="20170825 15:12:58.202"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:58.383">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:12:58.383">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:12:58.383" status="PASS" starttime="20170825 15:12:58.202"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:58.384">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:12:58.384" status="PASS" starttime="20170825 15:12:58.383"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:58.384">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:12:58.384" status="PASS" starttime="20170825 15:12:58.384"></status>
</kw>
<status endtime="20170825 15:12:58.385" status="PASS" starttime="20170825 15:12:58.198"></status>
</kw>
<status endtime="20170825 15:12:58.385" status="PASS" starttime="20170825 15:12:58.198"></status>
</kw>
<status endtime="20170825 15:12:58.385" status="PASS" starttime="20170825 15:12:58.197"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:58.385">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170825 15:12:58.385" status="PASS" starttime="20170825 15:12:58.385"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:58.388">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:12:58.388" status="PASS" starttime="20170825 15:12:58.387"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:58.389">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:12:58.389" status="PASS" starttime="20170825 15:12:58.388"></status>
</kw>
<status endtime="20170825 15:12:58.389" status="PASS" starttime="20170825 15:12:58.388"></status>
</kw>
<status endtime="20170825 15:12:58.389" status="PASS" starttime="20170825 15:12:58.386"></status>
</kw>
<status endtime="20170825 15:12:58.389" status="PASS" starttime="20170825 15:12:58.386"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:58.495">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:12:58.495">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:12:58.495" status="PASS" starttime="20170825 15:12:58.389"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:58.497">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:12:58.497" status="PASS" starttime="20170825 15:12:58.496"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:58.498">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:12:58.498" status="PASS" starttime="20170825 15:12:58.497"></status>
</kw>
<status endtime="20170825 15:12:58.498" status="PASS" starttime="20170825 15:12:58.497"></status>
</kw>
<status endtime="20170825 15:12:58.498" status="PASS" starttime="20170825 15:12:58.496"></status>
</kw>
<status endtime="20170825 15:12:58.498" status="PASS" starttime="20170825 15:12:58.495"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:12:58.498">Delete All Sessions</msg>
<status endtime="20170825 15:12:58.499" status="PASS" starttime="20170825 15:12:58.498"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:58.499">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:12:58.499" status="PASS" starttime="20170825 15:12:58.197"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:58.499">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:12:58.499" status="PASS" starttime="20170825 15:12:58.499"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:58.500">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:12:58.500">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:12:58.500">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:12:58.500" status="PASS" starttime="20170825 15:12:58.500"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:58.500">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:12:58.501" status="PASS" starttime="20170825 15:12:58.196"></status>
</kw>
<status endtime="20170825 15:12:58.501" status="PASS" starttime="20170825 15:12:58.195"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:58.501">${state} = Unspecified</msg>
<status endtime="20170825 15:12:58.501" status="PASS" starttime="20170825 15:12:58.195"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:58.501">${boot_progress} = Unspecified</msg>
<status endtime="20170825 15:12:58.501" status="PASS" starttime="20170825 15:12:58.193"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>OSStart</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:12:58.502">Unspecified != OSStart</msg>
<status endtime="20170825 15:12:58.502" status="FAIL" starttime="20170825 15:12:58.502"></status>
</kw>
<status endtime="20170825 15:12:58.502" status="FAIL" starttime="20170825 15:12:58.193"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:58.502">${status} = False</msg>
<status endtime="20170825 15:12:58.502" status="PASS" starttime="20170825 15:12:58.192"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170825 15:12:58.503" status="PASS" starttime="20170825 15:12:58.503"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:58.507">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:12:58.507" status="PASS" starttime="20170825 15:12:58.506"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:58.508">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:12:58.508" status="PASS" starttime="20170825 15:12:58.507"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:58.508">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:12:58.508" status="PASS" starttime="20170825 15:12:58.508"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:58.509">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:12:58.509" status="PASS" starttime="20170825 15:12:58.508"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:58.695">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:12:58.695" status="PASS" starttime="20170825 15:12:58.510"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:58.695">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:12:58.695">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:12:58.695" status="PASS" starttime="20170825 15:12:58.509"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:58.696">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:12:58.696" status="PASS" starttime="20170825 15:12:58.695"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:58.696">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:12:58.696" status="PASS" starttime="20170825 15:12:58.696"></status>
</kw>
<status endtime="20170825 15:12:58.697" status="PASS" starttime="20170825 15:12:58.506"></status>
</kw>
<status endtime="20170825 15:12:58.697" status="PASS" starttime="20170825 15:12:58.505"></status>
</kw>
<status endtime="20170825 15:12:58.697" status="PASS" starttime="20170825 15:12:58.505"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:58.697">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170825 15:12:58.697" status="PASS" starttime="20170825 15:12:58.697"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:58.699">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:12:58.699" status="PASS" starttime="20170825 15:12:58.699"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:58.700">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:12:58.700" status="PASS" starttime="20170825 15:12:58.700"></status>
</kw>
<status endtime="20170825 15:12:58.701" status="PASS" starttime="20170825 15:12:58.700"></status>
</kw>
<status endtime="20170825 15:12:58.701" status="PASS" starttime="20170825 15:12:58.698"></status>
</kw>
<status endtime="20170825 15:12:58.701" status="PASS" starttime="20170825 15:12:58.698"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:58.811">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:12:58.811">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:12:58.811" status="PASS" starttime="20170825 15:12:58.701"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:58.813">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:12:58.813" status="PASS" starttime="20170825 15:12:58.812"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:58.814">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:12:58.814" status="PASS" starttime="20170825 15:12:58.813"></status>
</kw>
<status endtime="20170825 15:12:58.814" status="PASS" starttime="20170825 15:12:58.813"></status>
</kw>
<status endtime="20170825 15:12:58.814" status="PASS" starttime="20170825 15:12:58.812"></status>
</kw>
<status endtime="20170825 15:12:58.814" status="PASS" starttime="20170825 15:12:58.811"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:12:58.814">Delete All Sessions</msg>
<status endtime="20170825 15:12:58.814" status="PASS" starttime="20170825 15:12:58.814"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:58.815">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:12:58.815" status="PASS" starttime="20170825 15:12:58.504"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:58.815">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:12:58.815" status="PASS" starttime="20170825 15:12:58.815"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:12:58.816">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:12:58.816">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:12:58.816">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:12:58.816" status="PASS" starttime="20170825 15:12:58.816"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:58.816">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:12:58.816" status="PASS" starttime="20170825 15:12:58.504"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:12:58.817">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:12:58.817" status="PASS" starttime="20170825 15:12:58.503"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:12:58.817">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170825 15:12:58.817">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:12:58.818" status="FAIL" starttime="20170825 15:12:58.817"></status>
</kw>
<status endtime="20170825 15:12:58.818" status="FAIL" starttime="20170825 15:12:58.192"></status>
</kw>
<status endtime="20170825 15:12:58.818" status="FAIL" starttime="20170825 15:12:57.597"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:08.823">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:13:08.823" status="PASS" starttime="20170825 15:13:08.823"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:08.824">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:13:08.824" status="PASS" starttime="20170825 15:13:08.824"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:08.825">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:13:08.825" status="PASS" starttime="20170825 15:13:08.824"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:08.825">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:13:08.825" status="PASS" starttime="20170825 15:13:08.825"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:09.019">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:13:09.020" status="PASS" starttime="20170825 15:13:08.826"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:09.020">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:13:09.020">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:13:09.020" status="PASS" starttime="20170825 15:13:08.826"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:09.020">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:13:09.021" status="PASS" starttime="20170825 15:13:09.020"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:09.021">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:13:09.021" status="PASS" starttime="20170825 15:13:09.021"></status>
</kw>
<status endtime="20170825 15:13:09.021" status="PASS" starttime="20170825 15:13:08.822"></status>
</kw>
<status endtime="20170825 15:13:09.021" status="PASS" starttime="20170825 15:13:08.821"></status>
</kw>
<status endtime="20170825 15:13:09.022" status="PASS" starttime="20170825 15:13:08.821"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:09.022">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:13:09.022" status="PASS" starttime="20170825 15:13:09.022"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:09.024">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:13:09.024" status="PASS" starttime="20170825 15:13:09.024"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:09.025">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:13:09.025" status="PASS" starttime="20170825 15:13:09.025"></status>
</kw>
<status endtime="20170825 15:13:09.026" status="PASS" starttime="20170825 15:13:09.025"></status>
</kw>
<status endtime="20170825 15:13:09.026" status="PASS" starttime="20170825 15:13:09.023"></status>
</kw>
<status endtime="20170825 15:13:09.026" status="PASS" starttime="20170825 15:13:09.022"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:09.102">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:13:09.102">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:13:09.102" status="PASS" starttime="20170825 15:13:09.026"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:09.104">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:13:09.104" status="PASS" starttime="20170825 15:13:09.104"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:09.105">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:13:09.105" status="PASS" starttime="20170825 15:13:09.105"></status>
</kw>
<status endtime="20170825 15:13:09.105" status="PASS" starttime="20170825 15:13:09.104"></status>
</kw>
<status endtime="20170825 15:13:09.106" status="PASS" starttime="20170825 15:13:09.103"></status>
</kw>
<status endtime="20170825 15:13:09.106" status="PASS" starttime="20170825 15:13:09.103"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:13:09.106">Delete All Sessions</msg>
<status endtime="20170825 15:13:09.106" status="PASS" starttime="20170825 15:13:09.106"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:09.106">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:13:09.106" status="PASS" starttime="20170825 15:13:08.820"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:09.107">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:13:09.107" status="PASS" starttime="20170825 15:13:09.107"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:09.108">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:13:09.108">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:13:09.108">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:13:09.108" status="PASS" starttime="20170825 15:13:09.107"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:09.108">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:13:09.108" status="PASS" starttime="20170825 15:13:08.820"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:09.108">${power_state} = On</msg>
<status endtime="20170825 15:13:09.108" status="PASS" starttime="20170825 15:13:08.819"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:13:09.109" status="PASS" starttime="20170825 15:13:09.109"></status>
</kw>
<status endtime="20170825 15:13:09.109" status="PASS" starttime="20170825 15:13:08.819"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:09.113">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:13:09.113" status="PASS" starttime="20170825 15:13:09.112"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:09.113">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:13:09.114" status="PASS" starttime="20170825 15:13:09.113"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:09.114">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:13:09.114" status="PASS" starttime="20170825 15:13:09.114"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:09.115">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:13:09.115" status="PASS" starttime="20170825 15:13:09.114"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:09.298">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:13:09.299" status="PASS" starttime="20170825 15:13:09.116"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:09.299">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:13:09.299">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:13:09.299" status="PASS" starttime="20170825 15:13:09.115"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:09.299">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:13:09.299" status="PASS" starttime="20170825 15:13:09.299"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:09.300">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:13:09.300" status="PASS" starttime="20170825 15:13:09.300"></status>
</kw>
<status endtime="20170825 15:13:09.300" status="PASS" starttime="20170825 15:13:09.112"></status>
</kw>
<status endtime="20170825 15:13:09.300" status="PASS" starttime="20170825 15:13:09.111"></status>
</kw>
<status endtime="20170825 15:13:09.300" status="PASS" starttime="20170825 15:13:09.111"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:09.301">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:13:09.301" status="PASS" starttime="20170825 15:13:09.301"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:09.304">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:13:09.304" status="PASS" starttime="20170825 15:13:09.303"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:09.305">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:13:09.305" status="PASS" starttime="20170825 15:13:09.304"></status>
</kw>
<status endtime="20170825 15:13:09.305" status="PASS" starttime="20170825 15:13:09.304"></status>
</kw>
<status endtime="20170825 15:13:09.305" status="PASS" starttime="20170825 15:13:09.302"></status>
</kw>
<status endtime="20170825 15:13:09.305" status="PASS" starttime="20170825 15:13:09.301"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:09.395">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:13:09.395">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:13:09.395" status="PASS" starttime="20170825 15:13:09.305"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:09.397">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:13:09.397" status="PASS" starttime="20170825 15:13:09.396"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:09.398">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:13:09.398" status="PASS" starttime="20170825 15:13:09.397"></status>
</kw>
<status endtime="20170825 15:13:09.398" status="PASS" starttime="20170825 15:13:09.397"></status>
</kw>
<status endtime="20170825 15:13:09.398" status="PASS" starttime="20170825 15:13:09.396"></status>
</kw>
<status endtime="20170825 15:13:09.398" status="PASS" starttime="20170825 15:13:09.395"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:13:09.399">Delete All Sessions</msg>
<status endtime="20170825 15:13:09.399" status="PASS" starttime="20170825 15:13:09.398"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:09.399">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:13:09.399" status="PASS" starttime="20170825 15:13:09.110"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:09.399">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:13:09.400" status="PASS" starttime="20170825 15:13:09.399"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:09.400">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:13:09.400">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:13:09.400">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:13:09.400" status="PASS" starttime="20170825 15:13:09.400"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:09.401">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170825 15:13:09.401" status="PASS" starttime="20170825 15:13:09.110"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:09.401">${host_state} = Running</msg>
<status endtime="20170825 15:13:09.401" status="PASS" starttime="20170825 15:13:09.109"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170825 15:13:09.402" status="PASS" starttime="20170825 15:13:09.401"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<doc>Get the boot progress and return it.</doc>
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Set Boot Progress Method" library="utils">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg level="INFO" timestamp="20170825 15:13:09.405">Returning from the enclosing user keyword.</msg>
<status endtime="20170825 15:13:09.405" status="PASS" starttime="20170825 15:13:09.405"></status>
</kw>
<status endtime="20170825 15:13:09.405" status="PASS" starttime="20170825 15:13:09.404"></status>
</kw>
<status endtime="20170825 15:13:09.405" status="PASS" starttime="20170825 15:13:09.404"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="New Get Boot Progress" library="utils">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:09.410">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:13:09.410" status="PASS" starttime="20170825 15:13:09.410"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:09.411">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:13:09.411" status="PASS" starttime="20170825 15:13:09.410"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:09.411">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:13:09.411" status="PASS" starttime="20170825 15:13:09.411"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:09.412">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:13:09.412" status="PASS" starttime="20170825 15:13:09.412"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:09.629">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:13:09.629" status="PASS" starttime="20170825 15:13:09.413"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:09.629">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:13:09.629">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:13:09.629" status="PASS" starttime="20170825 15:13:09.412"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:09.630">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:13:09.630" status="PASS" starttime="20170825 15:13:09.630"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:09.631">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:13:09.631" status="PASS" starttime="20170825 15:13:09.630"></status>
</kw>
<status endtime="20170825 15:13:09.631" status="PASS" starttime="20170825 15:13:09.409"></status>
</kw>
<status endtime="20170825 15:13:09.631" status="PASS" starttime="20170825 15:13:09.408"></status>
</kw>
<status endtime="20170825 15:13:09.631" status="PASS" starttime="20170825 15:13:09.408"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:09.632">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170825 15:13:09.632" status="PASS" starttime="20170825 15:13:09.631"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:09.634">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:13:09.634" status="PASS" starttime="20170825 15:13:09.633"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:09.635">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:13:09.635" status="PASS" starttime="20170825 15:13:09.634"></status>
</kw>
<status endtime="20170825 15:13:09.635" status="PASS" starttime="20170825 15:13:09.634"></status>
</kw>
<status endtime="20170825 15:13:09.635" status="PASS" starttime="20170825 15:13:09.632"></status>
</kw>
<status endtime="20170825 15:13:09.635" status="PASS" starttime="20170825 15:13:09.632"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:09.818">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:13:09.818">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:13:09.818" status="PASS" starttime="20170825 15:13:09.635"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:09.820">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:13:09.820" status="PASS" starttime="20170825 15:13:09.819"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:09.821">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:13:09.821" status="PASS" starttime="20170825 15:13:09.821"></status>
</kw>
<status endtime="20170825 15:13:09.821" status="PASS" starttime="20170825 15:13:09.820"></status>
</kw>
<status endtime="20170825 15:13:09.821" status="PASS" starttime="20170825 15:13:09.819"></status>
</kw>
<status endtime="20170825 15:13:09.821" status="PASS" starttime="20170825 15:13:09.818"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:13:09.822">Delete All Sessions</msg>
<status endtime="20170825 15:13:09.822" status="PASS" starttime="20170825 15:13:09.821"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:09.822">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:13:09.822" status="PASS" starttime="20170825 15:13:09.407"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:09.822">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:13:09.823" status="PASS" starttime="20170825 15:13:09.822"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:09.823">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:13:09.823">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:13:09.823">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:13:09.823" status="PASS" starttime="20170825 15:13:09.823"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:09.824">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:13:09.824" status="PASS" starttime="20170825 15:13:09.406"></status>
</kw>
<status endtime="20170825 15:13:09.824" status="PASS" starttime="20170825 15:13:09.406"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:09.824">${state} = Unspecified</msg>
<status endtime="20170825 15:13:09.824" status="PASS" starttime="20170825 15:13:09.406"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:09.824">${boot_progress} = Unspecified</msg>
<status endtime="20170825 15:13:09.824" status="PASS" starttime="20170825 15:13:09.404"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>OSStart</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:13:09.825">Unspecified != OSStart</msg>
<status endtime="20170825 15:13:09.825" status="FAIL" starttime="20170825 15:13:09.825"></status>
</kw>
<status endtime="20170825 15:13:09.825" status="FAIL" starttime="20170825 15:13:09.403"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:09.825">${status} = False</msg>
<status endtime="20170825 15:13:09.825" status="PASS" starttime="20170825 15:13:09.403"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170825 15:13:09.826" status="PASS" starttime="20170825 15:13:09.826"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:09.829">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:13:09.830" status="PASS" starttime="20170825 15:13:09.829"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:09.830">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:13:09.830" status="PASS" starttime="20170825 15:13:09.830"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:09.831">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:13:09.831" status="PASS" starttime="20170825 15:13:09.831"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:09.832">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:13:09.832" status="PASS" starttime="20170825 15:13:09.831"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:10.045">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:13:10.045" status="PASS" starttime="20170825 15:13:09.832"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:10.045">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:13:10.045">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:13:10.045" status="PASS" starttime="20170825 15:13:09.832"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:10.046">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:13:10.046" status="PASS" starttime="20170825 15:13:10.045"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:10.046">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:13:10.046" status="PASS" starttime="20170825 15:13:10.046"></status>
</kw>
<status endtime="20170825 15:13:10.046" status="PASS" starttime="20170825 15:13:09.829"></status>
</kw>
<status endtime="20170825 15:13:10.047" status="PASS" starttime="20170825 15:13:09.828"></status>
</kw>
<status endtime="20170825 15:13:10.047" status="PASS" starttime="20170825 15:13:09.828"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:10.047">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170825 15:13:10.047" status="PASS" starttime="20170825 15:13:10.047"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:10.050">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:13:10.050" status="PASS" starttime="20170825 15:13:10.049"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:10.051">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:13:10.051" status="PASS" starttime="20170825 15:13:10.050"></status>
</kw>
<status endtime="20170825 15:13:10.051" status="PASS" starttime="20170825 15:13:10.050"></status>
</kw>
<status endtime="20170825 15:13:10.051" status="PASS" starttime="20170825 15:13:10.048"></status>
</kw>
<status endtime="20170825 15:13:10.051" status="PASS" starttime="20170825 15:13:10.048"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:10.142">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:13:10.142">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:13:10.142" status="PASS" starttime="20170825 15:13:10.051"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:10.144">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:13:10.144" status="PASS" starttime="20170825 15:13:10.144"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:10.145">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:13:10.145" status="PASS" starttime="20170825 15:13:10.145"></status>
</kw>
<status endtime="20170825 15:13:10.145" status="PASS" starttime="20170825 15:13:10.144"></status>
</kw>
<status endtime="20170825 15:13:10.145" status="PASS" starttime="20170825 15:13:10.143"></status>
</kw>
<status endtime="20170825 15:13:10.145" status="PASS" starttime="20170825 15:13:10.143"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:13:10.146">Delete All Sessions</msg>
<status endtime="20170825 15:13:10.146" status="PASS" starttime="20170825 15:13:10.146"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:10.146">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:13:10.146" status="PASS" starttime="20170825 15:13:09.827"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:10.147">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:13:10.147" status="PASS" starttime="20170825 15:13:10.146"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:10.147">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:13:10.147">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:13:10.147">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:13:10.147" status="PASS" starttime="20170825 15:13:10.147"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:10.148">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:13:10.148" status="PASS" starttime="20170825 15:13:09.826"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:10.148">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:13:10.148" status="PASS" starttime="20170825 15:13:09.826"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:10.149">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170825 15:13:10.149">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:13:10.149" status="FAIL" starttime="20170825 15:13:10.148"></status>
</kw>
<status endtime="20170825 15:13:10.149" status="FAIL" starttime="20170825 15:13:09.403"></status>
</kw>
<status endtime="20170825 15:13:10.149" status="FAIL" starttime="20170825 15:13:08.818"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:20.154">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:13:20.155" status="PASS" starttime="20170825 15:13:20.154"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:20.155">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:13:20.155" status="PASS" starttime="20170825 15:13:20.155"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:20.156">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:13:20.156" status="PASS" starttime="20170825 15:13:20.155"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:20.160">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:13:20.160" status="PASS" starttime="20170825 15:13:20.156"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:20.404">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:13:20.404" status="PASS" starttime="20170825 15:13:20.161"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:20.404">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:13:20.404">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:13:20.404" status="PASS" starttime="20170825 15:13:20.161"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:20.405">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:13:20.405" status="PASS" starttime="20170825 15:13:20.404"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:20.405">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:13:20.406" status="PASS" starttime="20170825 15:13:20.405"></status>
</kw>
<status endtime="20170825 15:13:20.406" status="PASS" starttime="20170825 15:13:20.153"></status>
</kw>
<status endtime="20170825 15:13:20.406" status="PASS" starttime="20170825 15:13:20.153"></status>
</kw>
<status endtime="20170825 15:13:20.406" status="PASS" starttime="20170825 15:13:20.152"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:20.406">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:13:20.406" status="PASS" starttime="20170825 15:13:20.406"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:20.409">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:13:20.409" status="PASS" starttime="20170825 15:13:20.408"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:20.409">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:13:20.410" status="PASS" starttime="20170825 15:13:20.409"></status>
</kw>
<status endtime="20170825 15:13:20.410" status="PASS" starttime="20170825 15:13:20.409"></status>
</kw>
<status endtime="20170825 15:13:20.410" status="PASS" starttime="20170825 15:13:20.407"></status>
</kw>
<status endtime="20170825 15:13:20.410" status="PASS" starttime="20170825 15:13:20.407"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:20.535">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:13:20.535">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:13:20.535" status="PASS" starttime="20170825 15:13:20.410"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:20.537">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:13:20.537" status="PASS" starttime="20170825 15:13:20.536"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:20.538">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:13:20.538" status="PASS" starttime="20170825 15:13:20.537"></status>
</kw>
<status endtime="20170825 15:13:20.538" status="PASS" starttime="20170825 15:13:20.537"></status>
</kw>
<status endtime="20170825 15:13:20.538" status="PASS" starttime="20170825 15:13:20.536"></status>
</kw>
<status endtime="20170825 15:13:20.538" status="PASS" starttime="20170825 15:13:20.535"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:13:20.539">Delete All Sessions</msg>
<status endtime="20170825 15:13:20.539" status="PASS" starttime="20170825 15:13:20.538"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:20.539">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:13:20.539" status="PASS" starttime="20170825 15:13:20.152"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:20.540">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:13:20.540" status="PASS" starttime="20170825 15:13:20.539"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:20.540">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:13:20.540">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:13:20.540">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:13:20.540" status="PASS" starttime="20170825 15:13:20.540"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:20.541">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:13:20.541" status="PASS" starttime="20170825 15:13:20.151"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:20.541">${power_state} = On</msg>
<status endtime="20170825 15:13:20.541" status="PASS" starttime="20170825 15:13:20.151"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:13:20.541" status="PASS" starttime="20170825 15:13:20.541"></status>
</kw>
<status endtime="20170825 15:13:20.542" status="PASS" starttime="20170825 15:13:20.150"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:20.546">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:13:20.546" status="PASS" starttime="20170825 15:13:20.545"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:20.546">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:13:20.546" status="PASS" starttime="20170825 15:13:20.546"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:20.547">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:13:20.547" status="PASS" starttime="20170825 15:13:20.547"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:20.548">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:13:20.548" status="PASS" starttime="20170825 15:13:20.547"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:20.762">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:13:20.762" status="PASS" starttime="20170825 15:13:20.548"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:20.762">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:13:20.762">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:13:20.762" status="PASS" starttime="20170825 15:13:20.548"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:20.763">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:13:20.763" status="PASS" starttime="20170825 15:13:20.763"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:20.764">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:13:20.764" status="PASS" starttime="20170825 15:13:20.763"></status>
</kw>
<status endtime="20170825 15:13:20.764" status="PASS" starttime="20170825 15:13:20.544"></status>
</kw>
<status endtime="20170825 15:13:20.764" status="PASS" starttime="20170825 15:13:20.544"></status>
</kw>
<status endtime="20170825 15:13:20.764" status="PASS" starttime="20170825 15:13:20.543"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:20.765">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:13:20.765" status="PASS" starttime="20170825 15:13:20.764"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:20.767">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:13:20.767" status="PASS" starttime="20170825 15:13:20.766"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:20.769">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:13:20.769" status="PASS" starttime="20170825 15:13:20.768"></status>
</kw>
<status endtime="20170825 15:13:20.769" status="PASS" starttime="20170825 15:13:20.768"></status>
</kw>
<status endtime="20170825 15:13:20.769" status="PASS" starttime="20170825 15:13:20.766"></status>
</kw>
<status endtime="20170825 15:13:20.769" status="PASS" starttime="20170825 15:13:20.765"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:20.860">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:13:20.860">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:13:20.860" status="PASS" starttime="20170825 15:13:20.769"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:20.862">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:13:20.862" status="PASS" starttime="20170825 15:13:20.861"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:20.863">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:13:20.863" status="PASS" starttime="20170825 15:13:20.862"></status>
</kw>
<status endtime="20170825 15:13:20.863" status="PASS" starttime="20170825 15:13:20.862"></status>
</kw>
<status endtime="20170825 15:13:20.863" status="PASS" starttime="20170825 15:13:20.861"></status>
</kw>
<status endtime="20170825 15:13:20.863" status="PASS" starttime="20170825 15:13:20.860"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:13:20.864">Delete All Sessions</msg>
<status endtime="20170825 15:13:20.864" status="PASS" starttime="20170825 15:13:20.863"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:20.864">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:13:20.864" status="PASS" starttime="20170825 15:13:20.543"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:20.864">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:13:20.865" status="PASS" starttime="20170825 15:13:20.864"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:20.865">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:13:20.865">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:13:20.865">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:13:20.865" status="PASS" starttime="20170825 15:13:20.865"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:20.866">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170825 15:13:20.866" status="PASS" starttime="20170825 15:13:20.542"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:20.866">${host_state} = Running</msg>
<status endtime="20170825 15:13:20.866" status="PASS" starttime="20170825 15:13:20.542"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170825 15:13:20.866" status="PASS" starttime="20170825 15:13:20.866"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<doc>Get the boot progress and return it.</doc>
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Set Boot Progress Method" library="utils">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg level="INFO" timestamp="20170825 15:13:20.869">Returning from the enclosing user keyword.</msg>
<status endtime="20170825 15:13:20.869" status="PASS" starttime="20170825 15:13:20.869"></status>
</kw>
<status endtime="20170825 15:13:20.869" status="PASS" starttime="20170825 15:13:20.868"></status>
</kw>
<status endtime="20170825 15:13:20.870" status="PASS" starttime="20170825 15:13:20.868"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="New Get Boot Progress" library="utils">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:20.874">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:13:20.874" status="PASS" starttime="20170825 15:13:20.873"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:20.875">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:13:20.875" status="PASS" starttime="20170825 15:13:20.875"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:20.875">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:13:20.876" status="PASS" starttime="20170825 15:13:20.875"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:20.876">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:13:20.876" status="PASS" starttime="20170825 15:13:20.876"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:21.054">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:13:21.055" status="PASS" starttime="20170825 15:13:20.877"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:21.055">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:13:21.055">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:13:21.055" status="PASS" starttime="20170825 15:13:20.876"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:21.055">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:13:21.055" status="PASS" starttime="20170825 15:13:21.055"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:21.056">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:13:21.056" status="PASS" starttime="20170825 15:13:21.056"></status>
</kw>
<status endtime="20170825 15:13:21.056" status="PASS" starttime="20170825 15:13:20.873"></status>
</kw>
<status endtime="20170825 15:13:21.056" status="PASS" starttime="20170825 15:13:20.872"></status>
</kw>
<status endtime="20170825 15:13:21.056" status="PASS" starttime="20170825 15:13:20.872"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:21.057">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170825 15:13:21.057" status="PASS" starttime="20170825 15:13:21.057"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:21.059">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:13:21.059" status="PASS" starttime="20170825 15:13:21.059"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:21.060">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:13:21.060" status="PASS" starttime="20170825 15:13:21.060"></status>
</kw>
<status endtime="20170825 15:13:21.060" status="PASS" starttime="20170825 15:13:21.059"></status>
</kw>
<status endtime="20170825 15:13:21.060" status="PASS" starttime="20170825 15:13:21.058"></status>
</kw>
<status endtime="20170825 15:13:21.061" status="PASS" starttime="20170825 15:13:21.057"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:21.151">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:13:21.151">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:13:21.151" status="PASS" starttime="20170825 15:13:21.061"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:21.153">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:13:21.153" status="PASS" starttime="20170825 15:13:21.153"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:21.154">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:13:21.154" status="PASS" starttime="20170825 15:13:21.154"></status>
</kw>
<status endtime="20170825 15:13:21.154" status="PASS" starttime="20170825 15:13:21.153"></status>
</kw>
<status endtime="20170825 15:13:21.154" status="PASS" starttime="20170825 15:13:21.152"></status>
</kw>
<status endtime="20170825 15:13:21.154" status="PASS" starttime="20170825 15:13:21.152"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:13:21.155">Delete All Sessions</msg>
<status endtime="20170825 15:13:21.155" status="PASS" starttime="20170825 15:13:21.155"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:21.155">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:13:21.155" status="PASS" starttime="20170825 15:13:20.871"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:21.156">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:13:21.156" status="PASS" starttime="20170825 15:13:21.155"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:21.156">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:13:21.156">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:13:21.156">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:13:21.156" status="PASS" starttime="20170825 15:13:21.156"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:21.157">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:13:21.157" status="PASS" starttime="20170825 15:13:20.871"></status>
</kw>
<status endtime="20170825 15:13:21.157" status="PASS" starttime="20170825 15:13:20.870"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:21.157">${state} = Unspecified</msg>
<status endtime="20170825 15:13:21.157" status="PASS" starttime="20170825 15:13:20.870"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:21.157">${boot_progress} = Unspecified</msg>
<status endtime="20170825 15:13:21.157" status="PASS" starttime="20170825 15:13:20.868"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>OSStart</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:13:21.158">Unspecified != OSStart</msg>
<status endtime="20170825 15:13:21.158" status="FAIL" starttime="20170825 15:13:21.158"></status>
</kw>
<status endtime="20170825 15:13:21.158" status="FAIL" starttime="20170825 15:13:20.867"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:21.158">${status} = False</msg>
<status endtime="20170825 15:13:21.158" status="PASS" starttime="20170825 15:13:20.867"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170825 15:13:21.159" status="PASS" starttime="20170825 15:13:21.159"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:21.163">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:13:21.163" status="PASS" starttime="20170825 15:13:21.163"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:21.164">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:13:21.164" status="PASS" starttime="20170825 15:13:21.163"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:21.164">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:13:21.165" status="PASS" starttime="20170825 15:13:21.164"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:21.165">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:13:21.165" status="PASS" starttime="20170825 15:13:21.165"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:21.366">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:13:21.367" status="PASS" starttime="20170825 15:13:21.166"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:21.367">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:13:21.367">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:13:21.367" status="PASS" starttime="20170825 15:13:21.165"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:21.367">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:13:21.367" status="PASS" starttime="20170825 15:13:21.367"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:21.368">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:13:21.368" status="PASS" starttime="20170825 15:13:21.368"></status>
</kw>
<status endtime="20170825 15:13:21.368" status="PASS" starttime="20170825 15:13:21.162"></status>
</kw>
<status endtime="20170825 15:13:21.368" status="PASS" starttime="20170825 15:13:21.161"></status>
</kw>
<status endtime="20170825 15:13:21.369" status="PASS" starttime="20170825 15:13:21.161"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:21.369">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170825 15:13:21.369" status="PASS" starttime="20170825 15:13:21.369"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:21.372">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:13:21.372" status="PASS" starttime="20170825 15:13:21.371"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:21.373">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:13:21.373" status="PASS" starttime="20170825 15:13:21.373"></status>
</kw>
<status endtime="20170825 15:13:21.373" status="PASS" starttime="20170825 15:13:21.372"></status>
</kw>
<status endtime="20170825 15:13:21.373" status="PASS" starttime="20170825 15:13:21.370"></status>
</kw>
<status endtime="20170825 15:13:21.373" status="PASS" starttime="20170825 15:13:21.369"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:21.464">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:13:21.464">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:13:21.464" status="PASS" starttime="20170825 15:13:21.374"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:21.466">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:13:21.466" status="PASS" starttime="20170825 15:13:21.465"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:21.467">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:13:21.467" status="PASS" starttime="20170825 15:13:21.467"></status>
</kw>
<status endtime="20170825 15:13:21.467" status="PASS" starttime="20170825 15:13:21.466"></status>
</kw>
<status endtime="20170825 15:13:21.468" status="PASS" starttime="20170825 15:13:21.465"></status>
</kw>
<status endtime="20170825 15:13:21.468" status="PASS" starttime="20170825 15:13:21.465"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:13:21.468">Delete All Sessions</msg>
<status endtime="20170825 15:13:21.468" status="PASS" starttime="20170825 15:13:21.468"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:21.468">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:13:21.468" status="PASS" starttime="20170825 15:13:21.160"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:21.469">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:13:21.469" status="PASS" starttime="20170825 15:13:21.469"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:21.470">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:13:21.470">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:13:21.470">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:13:21.470" status="PASS" starttime="20170825 15:13:21.469"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:21.470">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:13:21.470" status="PASS" starttime="20170825 15:13:21.159"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:21.470">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:13:21.470" status="PASS" starttime="20170825 15:13:21.159"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:21.471">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170825 15:13:21.471">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:13:21.471" status="FAIL" starttime="20170825 15:13:21.471"></status>
</kw>
<status endtime="20170825 15:13:21.471" status="FAIL" starttime="20170825 15:13:20.867"></status>
</kw>
<status endtime="20170825 15:13:21.471" status="FAIL" starttime="20170825 15:13:20.150"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:31.477">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:13:31.477" status="PASS" starttime="20170825 15:13:31.476"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:31.478">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:13:31.478" status="PASS" starttime="20170825 15:13:31.477"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:31.478">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:13:31.478" status="PASS" starttime="20170825 15:13:31.478"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:31.479">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:13:31.479" status="PASS" starttime="20170825 15:13:31.479"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:31.677">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:13:31.678" status="PASS" starttime="20170825 15:13:31.480"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:31.678">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:13:31.678">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:13:31.678" status="PASS" starttime="20170825 15:13:31.479"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:31.678">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:13:31.679" status="PASS" starttime="20170825 15:13:31.678"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:31.679">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:13:31.679" status="PASS" starttime="20170825 15:13:31.679"></status>
</kw>
<status endtime="20170825 15:13:31.679" status="PASS" starttime="20170825 15:13:31.476"></status>
</kw>
<status endtime="20170825 15:13:31.679" status="PASS" starttime="20170825 15:13:31.475"></status>
</kw>
<status endtime="20170825 15:13:31.680" status="PASS" starttime="20170825 15:13:31.475"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:31.680">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:13:31.680" status="PASS" starttime="20170825 15:13:31.680"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:31.682">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:13:31.682" status="PASS" starttime="20170825 15:13:31.682"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:31.683">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:13:31.683" status="PASS" starttime="20170825 15:13:31.683"></status>
</kw>
<status endtime="20170825 15:13:31.683" status="PASS" starttime="20170825 15:13:31.682"></status>
</kw>
<status endtime="20170825 15:13:31.684" status="PASS" starttime="20170825 15:13:31.681"></status>
</kw>
<status endtime="20170825 15:13:31.684" status="PASS" starttime="20170825 15:13:31.681"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:31.894">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:13:31.895">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:13:31.895" status="PASS" starttime="20170825 15:13:31.684"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:31.896">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:13:31.896" status="PASS" starttime="20170825 15:13:31.896"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:31.897">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:13:31.897" status="PASS" starttime="20170825 15:13:31.897"></status>
</kw>
<status endtime="20170825 15:13:31.898" status="PASS" starttime="20170825 15:13:31.897"></status>
</kw>
<status endtime="20170825 15:13:31.898" status="PASS" starttime="20170825 15:13:31.895"></status>
</kw>
<status endtime="20170825 15:13:31.898" status="PASS" starttime="20170825 15:13:31.895"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:13:31.898">Delete All Sessions</msg>
<status endtime="20170825 15:13:31.898" status="PASS" starttime="20170825 15:13:31.898"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:31.898">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:13:31.898" status="PASS" starttime="20170825 15:13:31.474"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:31.899">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:13:31.899" status="PASS" starttime="20170825 15:13:31.899"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:31.900">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:13:31.900">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:13:31.900">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:13:31.900" status="PASS" starttime="20170825 15:13:31.899"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:31.900">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:13:31.900" status="PASS" starttime="20170825 15:13:31.473"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:31.901">${power_state} = On</msg>
<status endtime="20170825 15:13:31.901" status="PASS" starttime="20170825 15:13:31.473"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:13:31.901" status="PASS" starttime="20170825 15:13:31.901"></status>
</kw>
<status endtime="20170825 15:13:31.901" status="PASS" starttime="20170825 15:13:31.473"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:31.905">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:13:31.906" status="PASS" starttime="20170825 15:13:31.905"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:31.906">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:13:31.906" status="PASS" starttime="20170825 15:13:31.906"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:31.907">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:13:31.907" status="PASS" starttime="20170825 15:13:31.906"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:31.907">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:13:31.907" status="PASS" starttime="20170825 15:13:31.907"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:32.185">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:13:32.185" status="PASS" starttime="20170825 15:13:31.908"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:32.185">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:13:32.185">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:13:32.185" status="PASS" starttime="20170825 15:13:31.908"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:32.186">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:13:32.186" status="PASS" starttime="20170825 15:13:32.185"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:32.186">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:13:32.186" status="PASS" starttime="20170825 15:13:32.186"></status>
</kw>
<status endtime="20170825 15:13:32.186" status="PASS" starttime="20170825 15:13:31.904"></status>
</kw>
<status endtime="20170825 15:13:32.187" status="PASS" starttime="20170825 15:13:31.904"></status>
</kw>
<status endtime="20170825 15:13:32.187" status="PASS" starttime="20170825 15:13:31.903"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:32.187">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:13:32.187" status="PASS" starttime="20170825 15:13:32.187"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:32.190">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:13:32.191" status="PASS" starttime="20170825 15:13:32.190"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:32.192">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:13:32.192" status="PASS" starttime="20170825 15:13:32.191"></status>
</kw>
<status endtime="20170825 15:13:32.192" status="PASS" starttime="20170825 15:13:32.191"></status>
</kw>
<status endtime="20170825 15:13:32.192" status="PASS" starttime="20170825 15:13:32.189"></status>
</kw>
<status endtime="20170825 15:13:32.192" status="PASS" starttime="20170825 15:13:32.188"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:32.501">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:13:32.501">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:13:32.501" status="PASS" starttime="20170825 15:13:32.193"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:32.503">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:13:32.503" status="PASS" starttime="20170825 15:13:32.502"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:32.504">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:13:32.504" status="PASS" starttime="20170825 15:13:32.503"></status>
</kw>
<status endtime="20170825 15:13:32.504" status="PASS" starttime="20170825 15:13:32.503"></status>
</kw>
<status endtime="20170825 15:13:32.504" status="PASS" starttime="20170825 15:13:32.502"></status>
</kw>
<status endtime="20170825 15:13:32.504" status="PASS" starttime="20170825 15:13:32.501"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:13:32.504">Delete All Sessions</msg>
<status endtime="20170825 15:13:32.504" status="PASS" starttime="20170825 15:13:32.504"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:32.505">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:13:32.505" status="PASS" starttime="20170825 15:13:31.902"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:32.505">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:13:32.505" status="PASS" starttime="20170825 15:13:32.505"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:32.506">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:13:32.506">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:13:32.506">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:13:32.506" status="PASS" starttime="20170825 15:13:32.506"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:32.506">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170825 15:13:32.506" status="PASS" starttime="20170825 15:13:31.902"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:32.507">${host_state} = Running</msg>
<status endtime="20170825 15:13:32.507" status="PASS" starttime="20170825 15:13:31.902"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170825 15:13:32.507" status="PASS" starttime="20170825 15:13:32.507"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<doc>Get the boot progress and return it.</doc>
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Set Boot Progress Method" library="utils">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg level="INFO" timestamp="20170825 15:13:32.510">Returning from the enclosing user keyword.</msg>
<status endtime="20170825 15:13:32.510" status="PASS" starttime="20170825 15:13:32.510"></status>
</kw>
<status endtime="20170825 15:13:32.510" status="PASS" starttime="20170825 15:13:32.510"></status>
</kw>
<status endtime="20170825 15:13:32.511" status="PASS" starttime="20170825 15:13:32.509"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="New Get Boot Progress" library="utils">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:32.515">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:13:32.515" status="PASS" starttime="20170825 15:13:32.514"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:32.515">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:13:32.516" status="PASS" starttime="20170825 15:13:32.515"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:32.516">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:13:32.516" status="PASS" starttime="20170825 15:13:32.516"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:32.517">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:13:32.517" status="PASS" starttime="20170825 15:13:32.516"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:32.835">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:13:32.836" status="PASS" starttime="20170825 15:13:32.518"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:32.836">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:13:32.836">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:13:32.836" status="PASS" starttime="20170825 15:13:32.517"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:32.836">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:13:32.837" status="PASS" starttime="20170825 15:13:32.836"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:32.837">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:13:32.837" status="PASS" starttime="20170825 15:13:32.837"></status>
</kw>
<status endtime="20170825 15:13:32.837" status="PASS" starttime="20170825 15:13:32.514"></status>
</kw>
<status endtime="20170825 15:13:32.837" status="PASS" starttime="20170825 15:13:32.513"></status>
</kw>
<status endtime="20170825 15:13:32.838" status="PASS" starttime="20170825 15:13:32.513"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:32.838">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170825 15:13:32.838" status="PASS" starttime="20170825 15:13:32.838"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:32.840">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:13:32.840" status="PASS" starttime="20170825 15:13:32.840"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:32.841">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:13:32.841" status="PASS" starttime="20170825 15:13:32.841"></status>
</kw>
<status endtime="20170825 15:13:32.841" status="PASS" starttime="20170825 15:13:32.840"></status>
</kw>
<status endtime="20170825 15:13:32.841" status="PASS" starttime="20170825 15:13:32.839"></status>
</kw>
<status endtime="20170825 15:13:32.842" status="PASS" starttime="20170825 15:13:32.838"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:32.933">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:13:32.933">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:13:32.933" status="PASS" starttime="20170825 15:13:32.842"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:32.935">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:13:32.935" status="PASS" starttime="20170825 15:13:32.934"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:32.936">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:13:32.936" status="PASS" starttime="20170825 15:13:32.936"></status>
</kw>
<status endtime="20170825 15:13:32.936" status="PASS" starttime="20170825 15:13:32.935"></status>
</kw>
<status endtime="20170825 15:13:32.936" status="PASS" starttime="20170825 15:13:32.934"></status>
</kw>
<status endtime="20170825 15:13:32.936" status="PASS" starttime="20170825 15:13:32.933"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:13:32.937">Delete All Sessions</msg>
<status endtime="20170825 15:13:32.937" status="PASS" starttime="20170825 15:13:32.936"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:32.937">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:13:32.937" status="PASS" starttime="20170825 15:13:32.512"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:32.937">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:13:32.938" status="PASS" starttime="20170825 15:13:32.937"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:32.938">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:13:32.938">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:13:32.938">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:13:32.938" status="PASS" starttime="20170825 15:13:32.938"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:32.939">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:13:32.939" status="PASS" starttime="20170825 15:13:32.512"></status>
</kw>
<status endtime="20170825 15:13:32.939" status="PASS" starttime="20170825 15:13:32.511"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:32.939">${state} = Unspecified</msg>
<status endtime="20170825 15:13:32.939" status="PASS" starttime="20170825 15:13:32.511"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:32.939">${boot_progress} = Unspecified</msg>
<status endtime="20170825 15:13:32.939" status="PASS" starttime="20170825 15:13:32.508"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>OSStart</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:13:32.940">Unspecified != OSStart</msg>
<status endtime="20170825 15:13:32.940" status="FAIL" starttime="20170825 15:13:32.940"></status>
</kw>
<status endtime="20170825 15:13:32.940" status="FAIL" starttime="20170825 15:13:32.508"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:32.940">${status} = False</msg>
<status endtime="20170825 15:13:32.940" status="PASS" starttime="20170825 15:13:32.508"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170825 15:13:32.941" status="PASS" starttime="20170825 15:13:32.941"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:32.945">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:13:32.945" status="PASS" starttime="20170825 15:13:32.944"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:32.946">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:13:32.946" status="PASS" starttime="20170825 15:13:32.946"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:32.947">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:13:32.947" status="PASS" starttime="20170825 15:13:32.946"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:32.947">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:13:32.947" status="PASS" starttime="20170825 15:13:32.947"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:33.126">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:13:33.126" status="PASS" starttime="20170825 15:13:32.948"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:33.127">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:13:33.127">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:13:33.127" status="PASS" starttime="20170825 15:13:32.948"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:33.127">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:13:33.127" status="PASS" starttime="20170825 15:13:33.127"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:33.128">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:13:33.128" status="PASS" starttime="20170825 15:13:33.128"></status>
</kw>
<status endtime="20170825 15:13:33.128" status="PASS" starttime="20170825 15:13:32.944"></status>
</kw>
<status endtime="20170825 15:13:33.128" status="PASS" starttime="20170825 15:13:32.943"></status>
</kw>
<status endtime="20170825 15:13:33.128" status="PASS" starttime="20170825 15:13:32.943"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:33.129">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170825 15:13:33.129" status="PASS" starttime="20170825 15:13:33.129"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:33.131">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:13:33.131" status="PASS" starttime="20170825 15:13:33.131"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:33.132">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:13:33.132" status="PASS" starttime="20170825 15:13:33.132"></status>
</kw>
<status endtime="20170825 15:13:33.132" status="PASS" starttime="20170825 15:13:33.131"></status>
</kw>
<status endtime="20170825 15:13:33.132" status="PASS" starttime="20170825 15:13:33.130"></status>
</kw>
<status endtime="20170825 15:13:33.133" status="PASS" starttime="20170825 15:13:33.129"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:33.224">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:13:33.224">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:13:33.224" status="PASS" starttime="20170825 15:13:33.133"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:33.226">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:13:33.226" status="PASS" starttime="20170825 15:13:33.225"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:33.227">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:13:33.227" status="PASS" starttime="20170825 15:13:33.226"></status>
</kw>
<status endtime="20170825 15:13:33.227" status="PASS" starttime="20170825 15:13:33.226"></status>
</kw>
<status endtime="20170825 15:13:33.227" status="PASS" starttime="20170825 15:13:33.225"></status>
</kw>
<status endtime="20170825 15:13:33.227" status="PASS" starttime="20170825 15:13:33.224"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:13:33.227">Delete All Sessions</msg>
<status endtime="20170825 15:13:33.228" status="PASS" starttime="20170825 15:13:33.227"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:33.228">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:13:33.228" status="PASS" starttime="20170825 15:13:32.942"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:33.228">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:13:33.228" status="PASS" starttime="20170825 15:13:33.228"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:33.229">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:13:33.229">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:13:33.229">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:13:33.229" status="PASS" starttime="20170825 15:13:33.229"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:33.229">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:13:33.230" status="PASS" starttime="20170825 15:13:32.942"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:33.230">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:13:33.230" status="PASS" starttime="20170825 15:13:32.941"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:33.230">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170825 15:13:33.230">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:13:33.231" status="FAIL" starttime="20170825 15:13:33.230"></status>
</kw>
<status endtime="20170825 15:13:33.231" status="FAIL" starttime="20170825 15:13:32.507"></status>
</kw>
<status endtime="20170825 15:13:33.231" status="FAIL" starttime="20170825 15:13:31.472"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:43.236">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:13:43.237" status="PASS" starttime="20170825 15:13:43.236"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:43.237">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:13:43.237" status="PASS" starttime="20170825 15:13:43.237"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:43.238">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:13:43.238" status="PASS" starttime="20170825 15:13:43.237"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:43.238">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:13:43.239" status="PASS" starttime="20170825 15:13:43.238"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:44.098">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:13:44.098" status="PASS" starttime="20170825 15:13:43.239"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:44.098">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:13:44.098">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:13:44.098" status="PASS" starttime="20170825 15:13:43.239"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:44.099">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:13:44.099" status="PASS" starttime="20170825 15:13:44.098"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:44.100">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:13:44.100" status="PASS" starttime="20170825 15:13:44.099"></status>
</kw>
<status endtime="20170825 15:13:44.100" status="PASS" starttime="20170825 15:13:43.235"></status>
</kw>
<status endtime="20170825 15:13:44.100" status="PASS" starttime="20170825 15:13:43.235"></status>
</kw>
<status endtime="20170825 15:13:44.100" status="PASS" starttime="20170825 15:13:43.234"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:44.101">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:13:44.101" status="PASS" starttime="20170825 15:13:44.100"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:44.103">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:13:44.103" status="PASS" starttime="20170825 15:13:44.102"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:44.106">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:13:44.106" status="PASS" starttime="20170825 15:13:44.103"></status>
</kw>
<status endtime="20170825 15:13:44.106" status="PASS" starttime="20170825 15:13:44.103"></status>
</kw>
<status endtime="20170825 15:13:44.106" status="PASS" starttime="20170825 15:13:44.101"></status>
</kw>
<status endtime="20170825 15:13:44.106" status="PASS" starttime="20170825 15:13:44.101"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:49.898">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:13:49.900">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:13:49.900" status="PASS" starttime="20170825 15:13:44.107"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:49.902">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:13:49.902" status="PASS" starttime="20170825 15:13:49.901"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:49.903">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:13:49.903" status="PASS" starttime="20170825 15:13:49.903"></status>
</kw>
<status endtime="20170825 15:13:49.903" status="PASS" starttime="20170825 15:13:49.902"></status>
</kw>
<status endtime="20170825 15:13:49.903" status="PASS" starttime="20170825 15:13:49.901"></status>
</kw>
<status endtime="20170825 15:13:49.903" status="PASS" starttime="20170825 15:13:49.900"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:13:49.904">Delete All Sessions</msg>
<status endtime="20170825 15:13:49.904" status="PASS" starttime="20170825 15:13:49.903"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:49.904">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:13:49.904" status="PASS" starttime="20170825 15:13:43.234"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:49.905">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:13:49.905" status="PASS" starttime="20170825 15:13:49.904"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:49.905">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:13:49.905">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:13:49.905">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:13:49.905" status="PASS" starttime="20170825 15:13:49.905"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:49.906">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 15:13:49.906" status="PASS" starttime="20170825 15:13:43.232"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:13:49.906">${power_state} = Off</msg>
<status endtime="20170825 15:13:49.906" status="PASS" starttime="20170825 15:13:43.232"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:13:49.907">On != Off</msg>
<status endtime="20170825 15:13:49.907" status="FAIL" starttime="20170825 15:13:49.907"></status>
</kw>
<status endtime="20170825 15:13:49.907" status="FAIL" starttime="20170825 15:13:43.232"></status>
</kw>
<status endtime="20170825 15:13:49.907" status="FAIL" starttime="20170825 15:13:43.231"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:13:59.912">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:13:59.913" status="PASS" starttime="20170825 15:13:59.912"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:59.913">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:13:59.913" status="PASS" starttime="20170825 15:13:59.913"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:59.914">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:13:59.914" status="PASS" starttime="20170825 15:13:59.913"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:13:59.914">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:13:59.915" status="PASS" starttime="20170825 15:13:59.914"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:00.290">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:14:00.290" status="PASS" starttime="20170825 15:13:59.915"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:00.290">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:14:00.290">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:00.291" status="PASS" starttime="20170825 15:13:59.915"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:00.291">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:00.291" status="PASS" starttime="20170825 15:14:00.291"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:00.292">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:00.292" status="PASS" starttime="20170825 15:14:00.291"></status>
</kw>
<status endtime="20170825 15:14:00.292" status="PASS" starttime="20170825 15:13:59.911"></status>
</kw>
<status endtime="20170825 15:14:00.292" status="PASS" starttime="20170825 15:13:59.911"></status>
</kw>
<status endtime="20170825 15:14:00.292" status="PASS" starttime="20170825 15:13:59.910"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:00.293">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:14:00.293" status="PASS" starttime="20170825 15:14:00.292"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:00.295">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:14:00.295" status="PASS" starttime="20170825 15:14:00.294"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:00.296">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:14:00.296" status="PASS" starttime="20170825 15:14:00.296"></status>
</kw>
<status endtime="20170825 15:14:00.296" status="PASS" starttime="20170825 15:14:00.295"></status>
</kw>
<status endtime="20170825 15:14:00.296" status="PASS" starttime="20170825 15:14:00.294"></status>
</kw>
<status endtime="20170825 15:14:00.296" status="PASS" starttime="20170825 15:14:00.293"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:00.863">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:14:00.863">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:00.863" status="PASS" starttime="20170825 15:14:00.296"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:00.865">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:14:00.865" status="PASS" starttime="20170825 15:14:00.865"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:00.866">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:14:00.866" status="PASS" starttime="20170825 15:14:00.866"></status>
</kw>
<status endtime="20170825 15:14:00.866" status="PASS" starttime="20170825 15:14:00.865"></status>
</kw>
<status endtime="20170825 15:14:00.866" status="PASS" starttime="20170825 15:14:00.864"></status>
</kw>
<status endtime="20170825 15:14:00.867" status="PASS" starttime="20170825 15:14:00.864"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:14:00.867">Delete All Sessions</msg>
<status endtime="20170825 15:14:00.867" status="PASS" starttime="20170825 15:14:00.867"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:00.867">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:00.867" status="PASS" starttime="20170825 15:13:59.910"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:00.868">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:00.868" status="PASS" starttime="20170825 15:14:00.867"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:00.868">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:14:00.868">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:14:00.869">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:14:00.869" status="PASS" starttime="20170825 15:14:00.868"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:00.869">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:14:00.869" status="PASS" starttime="20170825 15:13:59.909"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:00.869">${power_state} = On</msg>
<status endtime="20170825 15:14:00.869" status="PASS" starttime="20170825 15:13:59.909"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:14:00.870" status="PASS" starttime="20170825 15:14:00.870"></status>
</kw>
<status endtime="20170825 15:14:00.870" status="PASS" starttime="20170825 15:13:59.908"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:00.874">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:14:00.874" status="PASS" starttime="20170825 15:14:00.873"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:00.875">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:14:00.875" status="PASS" starttime="20170825 15:14:00.874"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:00.875">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:14:00.875" status="PASS" starttime="20170825 15:14:00.875"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:00.876">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:14:00.876" status="PASS" starttime="20170825 15:14:00.876"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:01.176">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:14:01.176" status="PASS" starttime="20170825 15:14:00.877"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:01.177">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:14:01.177">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:01.177" status="PASS" starttime="20170825 15:14:00.876"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:01.177">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:01.177" status="PASS" starttime="20170825 15:14:01.177"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:01.178">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:01.178" status="PASS" starttime="20170825 15:14:01.178"></status>
</kw>
<status endtime="20170825 15:14:01.178" status="PASS" starttime="20170825 15:14:00.873"></status>
</kw>
<status endtime="20170825 15:14:01.178" status="PASS" starttime="20170825 15:14:00.872"></status>
</kw>
<status endtime="20170825 15:14:01.178" status="PASS" starttime="20170825 15:14:00.872"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:01.179">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:14:01.179" status="PASS" starttime="20170825 15:14:01.179"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:01.181">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:14:01.181" status="PASS" starttime="20170825 15:14:01.180"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:01.182">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:14:01.182" status="PASS" starttime="20170825 15:14:01.182"></status>
</kw>
<status endtime="20170825 15:14:01.182" status="PASS" starttime="20170825 15:14:01.181"></status>
</kw>
<status endtime="20170825 15:14:01.182" status="PASS" starttime="20170825 15:14:01.180"></status>
</kw>
<status endtime="20170825 15:14:01.182" status="PASS" starttime="20170825 15:14:01.179"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:01.272">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:14:01.272">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:01.272" status="PASS" starttime="20170825 15:14:01.183"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:01.274">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:14:01.274" status="PASS" starttime="20170825 15:14:01.273"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:01.275">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:14:01.275" status="PASS" starttime="20170825 15:14:01.274"></status>
</kw>
<status endtime="20170825 15:14:01.275" status="PASS" starttime="20170825 15:14:01.274"></status>
</kw>
<status endtime="20170825 15:14:01.275" status="PASS" starttime="20170825 15:14:01.273"></status>
</kw>
<status endtime="20170825 15:14:01.275" status="PASS" starttime="20170825 15:14:01.272"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:14:01.275">Delete All Sessions</msg>
<status endtime="20170825 15:14:01.276" status="PASS" starttime="20170825 15:14:01.275"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:01.276">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:01.276" status="PASS" starttime="20170825 15:14:00.871"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:01.276">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:01.276" status="PASS" starttime="20170825 15:14:01.276"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:01.277">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:14:01.277">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:14:01.277">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:14:01.277" status="PASS" starttime="20170825 15:14:01.277"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:01.277">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170825 15:14:01.277" status="PASS" starttime="20170825 15:14:00.871"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:01.278">${host_state} = Running</msg>
<status endtime="20170825 15:14:01.278" status="PASS" starttime="20170825 15:14:00.870"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170825 15:14:01.278" status="PASS" starttime="20170825 15:14:01.278"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<doc>Get the boot progress and return it.</doc>
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Set Boot Progress Method" library="utils">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg level="INFO" timestamp="20170825 15:14:01.281">Returning from the enclosing user keyword.</msg>
<status endtime="20170825 15:14:01.282" status="PASS" starttime="20170825 15:14:01.281"></status>
</kw>
<status endtime="20170825 15:14:01.282" status="PASS" starttime="20170825 15:14:01.281"></status>
</kw>
<status endtime="20170825 15:14:01.282" status="PASS" starttime="20170825 15:14:01.280"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="New Get Boot Progress" library="utils">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:01.286">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:14:01.286" status="PASS" starttime="20170825 15:14:01.285"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:01.287">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:14:01.287" status="PASS" starttime="20170825 15:14:01.286"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:01.287">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:14:01.287" status="PASS" starttime="20170825 15:14:01.287"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:01.288">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:14:01.288" status="PASS" starttime="20170825 15:14:01.288"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:01.490">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:14:01.490" status="PASS" starttime="20170825 15:14:01.289"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:01.490">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:14:01.490">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:01.490" status="PASS" starttime="20170825 15:14:01.288"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:01.491">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:01.491" status="PASS" starttime="20170825 15:14:01.491"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:01.492">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:01.492" status="PASS" starttime="20170825 15:14:01.491"></status>
</kw>
<status endtime="20170825 15:14:01.492" status="PASS" starttime="20170825 15:14:01.285"></status>
</kw>
<status endtime="20170825 15:14:01.492" status="PASS" starttime="20170825 15:14:01.284"></status>
</kw>
<status endtime="20170825 15:14:01.492" status="PASS" starttime="20170825 15:14:01.284"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:01.493">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170825 15:14:01.493" status="PASS" starttime="20170825 15:14:01.492"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:01.495">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:14:01.495" status="PASS" starttime="20170825 15:14:01.494"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:01.496">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:14:01.496" status="PASS" starttime="20170825 15:14:01.495"></status>
</kw>
<status endtime="20170825 15:14:01.496" status="PASS" starttime="20170825 15:14:01.495"></status>
</kw>
<status endtime="20170825 15:14:01.496" status="PASS" starttime="20170825 15:14:01.493"></status>
</kw>
<status endtime="20170825 15:14:01.496" status="PASS" starttime="20170825 15:14:01.493"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:01.605">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:14:01.605">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:01.605" status="PASS" starttime="20170825 15:14:01.496"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:01.607">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:14:01.607" status="PASS" starttime="20170825 15:14:01.606"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:01.608">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:14:01.608" status="PASS" starttime="20170825 15:14:01.607"></status>
</kw>
<status endtime="20170825 15:14:01.608" status="PASS" starttime="20170825 15:14:01.607"></status>
</kw>
<status endtime="20170825 15:14:01.608" status="PASS" starttime="20170825 15:14:01.606"></status>
</kw>
<status endtime="20170825 15:14:01.608" status="PASS" starttime="20170825 15:14:01.605"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:14:01.609">Delete All Sessions</msg>
<status endtime="20170825 15:14:01.609" status="PASS" starttime="20170825 15:14:01.608"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:01.609">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:01.609" status="PASS" starttime="20170825 15:14:01.283"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:01.610">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:01.610" status="PASS" starttime="20170825 15:14:01.609"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:01.610">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:14:01.610">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:14:01.610">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:14:01.610" status="PASS" starttime="20170825 15:14:01.610"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:01.611">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:14:01.611" status="PASS" starttime="20170825 15:14:01.283"></status>
</kw>
<status endtime="20170825 15:14:01.611" status="PASS" starttime="20170825 15:14:01.282"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:01.611">${state} = Unspecified</msg>
<status endtime="20170825 15:14:01.611" status="PASS" starttime="20170825 15:14:01.282"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:01.611">${boot_progress} = Unspecified</msg>
<status endtime="20170825 15:14:01.611" status="PASS" starttime="20170825 15:14:01.280"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>OSStart</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:14:01.612">Unspecified != OSStart</msg>
<status endtime="20170825 15:14:01.612" status="FAIL" starttime="20170825 15:14:01.612"></status>
</kw>
<status endtime="20170825 15:14:01.612" status="FAIL" starttime="20170825 15:14:01.280"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:01.612">${status} = False</msg>
<status endtime="20170825 15:14:01.612" status="PASS" starttime="20170825 15:14:01.279"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170825 15:14:01.613" status="PASS" starttime="20170825 15:14:01.613"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:01.616">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:14:01.617" status="PASS" starttime="20170825 15:14:01.616"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:01.618">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:14:01.618" status="PASS" starttime="20170825 15:14:01.617"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:01.618">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:14:01.618" status="PASS" starttime="20170825 15:14:01.618"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:01.619">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:14:01.619" status="PASS" starttime="20170825 15:14:01.619"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:01.828">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:14:01.828" status="PASS" starttime="20170825 15:14:01.620"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:01.828">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:14:01.828">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:01.828" status="PASS" starttime="20170825 15:14:01.619"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:01.829">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:01.829" status="PASS" starttime="20170825 15:14:01.829"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:01.830">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:01.830" status="PASS" starttime="20170825 15:14:01.829"></status>
</kw>
<status endtime="20170825 15:14:01.830" status="PASS" starttime="20170825 15:14:01.616"></status>
</kw>
<status endtime="20170825 15:14:01.830" status="PASS" starttime="20170825 15:14:01.615"></status>
</kw>
<status endtime="20170825 15:14:01.830" status="PASS" starttime="20170825 15:14:01.615"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:01.831">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170825 15:14:01.831" status="PASS" starttime="20170825 15:14:01.831"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:01.834">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:14:01.834" status="PASS" starttime="20170825 15:14:01.833"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:01.836">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:14:01.836" status="PASS" starttime="20170825 15:14:01.835"></status>
</kw>
<status endtime="20170825 15:14:01.836" status="PASS" starttime="20170825 15:14:01.834"></status>
</kw>
<status endtime="20170825 15:14:01.836" status="PASS" starttime="20170825 15:14:01.832"></status>
</kw>
<status endtime="20170825 15:14:01.836" status="PASS" starttime="20170825 15:14:01.832"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:01.927">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:14:01.927">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:01.927" status="PASS" starttime="20170825 15:14:01.836"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:01.929">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:14:01.929" status="PASS" starttime="20170825 15:14:01.928"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:01.930">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:14:01.930" status="PASS" starttime="20170825 15:14:01.930"></status>
</kw>
<status endtime="20170825 15:14:01.930" status="PASS" starttime="20170825 15:14:01.929"></status>
</kw>
<status endtime="20170825 15:14:01.930" status="PASS" starttime="20170825 15:14:01.928"></status>
</kw>
<status endtime="20170825 15:14:01.930" status="PASS" starttime="20170825 15:14:01.927"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:14:01.931">Delete All Sessions</msg>
<status endtime="20170825 15:14:01.931" status="PASS" starttime="20170825 15:14:01.930"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:01.931">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:01.931" status="PASS" starttime="20170825 15:14:01.614"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:01.932">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:01.932" status="PASS" starttime="20170825 15:14:01.931"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:01.932">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:14:01.932">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:14:01.932">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:14:01.932" status="PASS" starttime="20170825 15:14:01.932"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:01.933">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:14:01.933" status="PASS" starttime="20170825 15:14:01.613"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:01.933">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:14:01.933" status="PASS" starttime="20170825 15:14:01.613"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:01.933">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170825 15:14:01.934">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:14:01.934" status="FAIL" starttime="20170825 15:14:01.933"></status>
</kw>
<status endtime="20170825 15:14:01.934" status="FAIL" starttime="20170825 15:14:01.278"></status>
</kw>
<status endtime="20170825 15:14:01.934" status="FAIL" starttime="20170825 15:13:59.908"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:11.939">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:14:11.940" status="PASS" starttime="20170825 15:14:11.939"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:11.940">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:14:11.940" status="PASS" starttime="20170825 15:14:11.940"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:11.941">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:14:11.941" status="PASS" starttime="20170825 15:14:11.940"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:11.941">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:14:11.942" status="PASS" starttime="20170825 15:14:11.941"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:12.133">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:14:12.133" status="PASS" starttime="20170825 15:14:11.942"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:12.133">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:14:12.134">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:12.134" status="PASS" starttime="20170825 15:14:11.942"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:12.134">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:12.134" status="PASS" starttime="20170825 15:14:12.134"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:12.135">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:12.135" status="PASS" starttime="20170825 15:14:12.135"></status>
</kw>
<status endtime="20170825 15:14:12.135" status="PASS" starttime="20170825 15:14:11.938"></status>
</kw>
<status endtime="20170825 15:14:12.135" status="PASS" starttime="20170825 15:14:11.938"></status>
</kw>
<status endtime="20170825 15:14:12.135" status="PASS" starttime="20170825 15:14:11.937"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:12.136">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:14:12.136" status="PASS" starttime="20170825 15:14:12.135"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:12.138">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:14:12.138" status="PASS" starttime="20170825 15:14:12.137"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:12.139">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:14:12.139" status="PASS" starttime="20170825 15:14:12.139"></status>
</kw>
<status endtime="20170825 15:14:12.139" status="PASS" starttime="20170825 15:14:12.138"></status>
</kw>
<status endtime="20170825 15:14:12.140" status="PASS" starttime="20170825 15:14:12.137"></status>
</kw>
<status endtime="20170825 15:14:12.140" status="PASS" starttime="20170825 15:14:12.136"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:12.204">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:14:12.204">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:12.204" status="PASS" starttime="20170825 15:14:12.140"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:12.205">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:14:12.205" status="PASS" starttime="20170825 15:14:12.205"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:12.206">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:14:12.206" status="PASS" starttime="20170825 15:14:12.206"></status>
</kw>
<status endtime="20170825 15:14:12.207" status="PASS" starttime="20170825 15:14:12.206"></status>
</kw>
<status endtime="20170825 15:14:12.207" status="PASS" starttime="20170825 15:14:12.204"></status>
</kw>
<status endtime="20170825 15:14:12.207" status="PASS" starttime="20170825 15:14:12.204"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:14:12.207">Delete All Sessions</msg>
<status endtime="20170825 15:14:12.207" status="PASS" starttime="20170825 15:14:12.207"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:12.207">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:12.207" status="PASS" starttime="20170825 15:14:11.937"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:12.208">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:12.208" status="PASS" starttime="20170825 15:14:12.208"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:12.209">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:14:12.209">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:14:12.209">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:14:12.209" status="PASS" starttime="20170825 15:14:12.208"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:12.209">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:14:12.209" status="PASS" starttime="20170825 15:14:11.936"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:12.209">${power_state} = On</msg>
<status endtime="20170825 15:14:12.209" status="PASS" starttime="20170825 15:14:11.935"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:14:12.210" status="PASS" starttime="20170825 15:14:12.210"></status>
</kw>
<status endtime="20170825 15:14:12.210" status="PASS" starttime="20170825 15:14:11.935"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:12.214">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:14:12.214" status="PASS" starttime="20170825 15:14:12.213"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:12.215">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:14:12.215" status="PASS" starttime="20170825 15:14:12.214"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:12.215">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:14:12.215" status="PASS" starttime="20170825 15:14:12.215"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:12.216">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:14:12.216" status="PASS" starttime="20170825 15:14:12.216"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:12.398">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:14:12.398" status="PASS" starttime="20170825 15:14:12.217"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:12.399">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:14:12.399">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:12.399" status="PASS" starttime="20170825 15:14:12.216"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:12.399">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:12.399" status="PASS" starttime="20170825 15:14:12.399"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:12.400">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:12.400" status="PASS" starttime="20170825 15:14:12.400"></status>
</kw>
<status endtime="20170825 15:14:12.400" status="PASS" starttime="20170825 15:14:12.213"></status>
</kw>
<status endtime="20170825 15:14:12.400" status="PASS" starttime="20170825 15:14:12.212"></status>
</kw>
<status endtime="20170825 15:14:12.400" status="PASS" starttime="20170825 15:14:12.212"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:12.401">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:14:12.401" status="PASS" starttime="20170825 15:14:12.401"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:12.403">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:14:12.403" status="PASS" starttime="20170825 15:14:12.402"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:12.404">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:14:12.404" status="PASS" starttime="20170825 15:14:12.404"></status>
</kw>
<status endtime="20170825 15:14:12.404" status="PASS" starttime="20170825 15:14:12.403"></status>
</kw>
<status endtime="20170825 15:14:12.404" status="PASS" starttime="20170825 15:14:12.402"></status>
</kw>
<status endtime="20170825 15:14:12.404" status="PASS" starttime="20170825 15:14:12.401"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:12.498">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:14:12.498">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:12.498" status="PASS" starttime="20170825 15:14:12.405"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:12.500">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:14:12.500" status="PASS" starttime="20170825 15:14:12.499"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:12.501">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:14:12.501" status="PASS" starttime="20170825 15:14:12.500"></status>
</kw>
<status endtime="20170825 15:14:12.501" status="PASS" starttime="20170825 15:14:12.500"></status>
</kw>
<status endtime="20170825 15:14:12.501" status="PASS" starttime="20170825 15:14:12.499"></status>
</kw>
<status endtime="20170825 15:14:12.501" status="PASS" starttime="20170825 15:14:12.498"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:14:12.501">Delete All Sessions</msg>
<status endtime="20170825 15:14:12.501" status="PASS" starttime="20170825 15:14:12.501"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:12.502">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:12.502" status="PASS" starttime="20170825 15:14:12.211"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:12.502">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:12.502" status="PASS" starttime="20170825 15:14:12.502"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:12.503">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:14:12.503">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:14:12.503">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:14:12.503" status="PASS" starttime="20170825 15:14:12.503"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:12.503">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170825 15:14:12.503" status="PASS" starttime="20170825 15:14:12.211"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:12.504">${host_state} = Running</msg>
<status endtime="20170825 15:14:12.504" status="PASS" starttime="20170825 15:14:12.210"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170825 15:14:12.504" status="PASS" starttime="20170825 15:14:12.504"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<doc>Get the boot progress and return it.</doc>
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Set Boot Progress Method" library="utils">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg level="INFO" timestamp="20170825 15:14:12.507">Returning from the enclosing user keyword.</msg>
<status endtime="20170825 15:14:12.507" status="PASS" starttime="20170825 15:14:12.507"></status>
</kw>
<status endtime="20170825 15:14:12.507" status="PASS" starttime="20170825 15:14:12.506"></status>
</kw>
<status endtime="20170825 15:14:12.507" status="PASS" starttime="20170825 15:14:12.506"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="New Get Boot Progress" library="utils">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:12.512">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:14:12.512" status="PASS" starttime="20170825 15:14:12.511"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:12.513">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:14:12.513" status="PASS" starttime="20170825 15:14:12.512"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:12.513">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:14:12.513" status="PASS" starttime="20170825 15:14:12.513"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:12.514">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:14:12.514" status="PASS" starttime="20170825 15:14:12.514"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:12.705">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:14:12.705" status="PASS" starttime="20170825 15:14:12.515"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:12.705">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:14:12.705">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:12.705" status="PASS" starttime="20170825 15:14:12.514"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:12.706">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:12.706" status="PASS" starttime="20170825 15:14:12.706"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:12.707">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:12.707" status="PASS" starttime="20170825 15:14:12.706"></status>
</kw>
<status endtime="20170825 15:14:12.707" status="PASS" starttime="20170825 15:14:12.511"></status>
</kw>
<status endtime="20170825 15:14:12.707" status="PASS" starttime="20170825 15:14:12.511"></status>
</kw>
<status endtime="20170825 15:14:12.707" status="PASS" starttime="20170825 15:14:12.510"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:12.708">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170825 15:14:12.708" status="PASS" starttime="20170825 15:14:12.707"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:12.710">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:14:12.710" status="PASS" starttime="20170825 15:14:12.709"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:12.711">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:14:12.711" status="PASS" starttime="20170825 15:14:12.711"></status>
</kw>
<status endtime="20170825 15:14:12.711" status="PASS" starttime="20170825 15:14:12.710"></status>
</kw>
<status endtime="20170825 15:14:12.711" status="PASS" starttime="20170825 15:14:12.709"></status>
</kw>
<status endtime="20170825 15:14:12.712" status="PASS" starttime="20170825 15:14:12.708"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:12.822">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:14:12.822">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:12.822" status="PASS" starttime="20170825 15:14:12.712"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:12.824">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:14:12.824" status="PASS" starttime="20170825 15:14:12.823"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:12.825">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:14:12.825" status="PASS" starttime="20170825 15:14:12.825"></status>
</kw>
<status endtime="20170825 15:14:12.825" status="PASS" starttime="20170825 15:14:12.824"></status>
</kw>
<status endtime="20170825 15:14:12.825" status="PASS" starttime="20170825 15:14:12.823"></status>
</kw>
<status endtime="20170825 15:14:12.825" status="PASS" starttime="20170825 15:14:12.822"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:14:12.826">Delete All Sessions</msg>
<status endtime="20170825 15:14:12.826" status="PASS" starttime="20170825 15:14:12.825"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:12.826">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:12.826" status="PASS" starttime="20170825 15:14:12.509"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:12.826">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:12.827" status="PASS" starttime="20170825 15:14:12.826"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:12.827">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:14:12.827">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:14:12.827">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:14:12.827" status="PASS" starttime="20170825 15:14:12.827"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:12.828">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:14:12.828" status="PASS" starttime="20170825 15:14:12.508"></status>
</kw>
<status endtime="20170825 15:14:12.828" status="PASS" starttime="20170825 15:14:12.508"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:12.828">${state} = Unspecified</msg>
<status endtime="20170825 15:14:12.828" status="PASS" starttime="20170825 15:14:12.507"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:12.828">${boot_progress} = Unspecified</msg>
<status endtime="20170825 15:14:12.828" status="PASS" starttime="20170825 15:14:12.505"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>OSStart</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:14:12.829">Unspecified != OSStart</msg>
<status endtime="20170825 15:14:12.829" status="FAIL" starttime="20170825 15:14:12.828"></status>
</kw>
<status endtime="20170825 15:14:12.829" status="FAIL" starttime="20170825 15:14:12.505"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:12.829">${status} = False</msg>
<status endtime="20170825 15:14:12.829" status="PASS" starttime="20170825 15:14:12.505"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170825 15:14:12.830" status="PASS" starttime="20170825 15:14:12.829"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:12.834">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:14:12.834" status="PASS" starttime="20170825 15:14:12.833"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:12.834">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:14:12.835" status="PASS" starttime="20170825 15:14:12.834"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:12.835">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:14:12.835" status="PASS" starttime="20170825 15:14:12.835"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:12.836">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:14:12.836" status="PASS" starttime="20170825 15:14:12.835"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:13.078">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:14:13.078" status="PASS" starttime="20170825 15:14:12.836"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:13.079">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:14:13.079">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:13.079" status="PASS" starttime="20170825 15:14:12.836"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:13.079">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:13.079" status="PASS" starttime="20170825 15:14:13.079"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:13.080">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:13.080" status="PASS" starttime="20170825 15:14:13.080"></status>
</kw>
<status endtime="20170825 15:14:13.080" status="PASS" starttime="20170825 15:14:12.833"></status>
</kw>
<status endtime="20170825 15:14:13.080" status="PASS" starttime="20170825 15:14:12.832"></status>
</kw>
<status endtime="20170825 15:14:13.080" status="PASS" starttime="20170825 15:14:12.832"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:13.081">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170825 15:14:13.081" status="PASS" starttime="20170825 15:14:13.081"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:13.083">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:14:13.083" status="PASS" starttime="20170825 15:14:13.082"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:13.084">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:14:13.084" status="PASS" starttime="20170825 15:14:13.084"></status>
</kw>
<status endtime="20170825 15:14:13.084" status="PASS" starttime="20170825 15:14:13.083"></status>
</kw>
<status endtime="20170825 15:14:13.084" status="PASS" starttime="20170825 15:14:13.082"></status>
</kw>
<status endtime="20170825 15:14:13.084" status="PASS" starttime="20170825 15:14:13.081"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:13.176">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:14:13.176">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:13.176" status="PASS" starttime="20170825 15:14:13.085"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:13.177">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:14:13.177" status="PASS" starttime="20170825 15:14:13.177"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:13.178">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:14:13.178" status="PASS" starttime="20170825 15:14:13.178"></status>
</kw>
<status endtime="20170825 15:14:13.179" status="PASS" starttime="20170825 15:14:13.178"></status>
</kw>
<status endtime="20170825 15:14:13.179" status="PASS" starttime="20170825 15:14:13.176"></status>
</kw>
<status endtime="20170825 15:14:13.179" status="PASS" starttime="20170825 15:14:13.176"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:14:13.179">Delete All Sessions</msg>
<status endtime="20170825 15:14:13.179" status="PASS" starttime="20170825 15:14:13.179"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:13.179">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:13.179" status="PASS" starttime="20170825 15:14:12.831"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:13.180">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:13.180" status="PASS" starttime="20170825 15:14:13.180"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:13.181">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:14:13.181">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:14:13.181">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:14:13.181" status="PASS" starttime="20170825 15:14:13.180"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:13.181">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:14:13.181" status="PASS" starttime="20170825 15:14:12.830"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:13.181">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:14:13.181" status="PASS" starttime="20170825 15:14:12.830"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:13.182">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170825 15:14:13.182">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:14:13.182" status="FAIL" starttime="20170825 15:14:13.182"></status>
</kw>
<status endtime="20170825 15:14:13.182" status="FAIL" starttime="20170825 15:14:12.504"></status>
</kw>
<status endtime="20170825 15:14:13.182" status="FAIL" starttime="20170825 15:14:11.934"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:23.191">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:14:23.192" status="PASS" starttime="20170825 15:14:23.190"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:23.192">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:14:23.192" status="PASS" starttime="20170825 15:14:23.192"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:23.193">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:14:23.193" status="PASS" starttime="20170825 15:14:23.193"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:23.194">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:14:23.194" status="PASS" starttime="20170825 15:14:23.194"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:23.412">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:14:23.412" status="PASS" starttime="20170825 15:14:23.195"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:23.412">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:14:23.412">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:23.412" status="PASS" starttime="20170825 15:14:23.195"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:23.413">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:23.413" status="PASS" starttime="20170825 15:14:23.413"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:23.414">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:23.414" status="PASS" starttime="20170825 15:14:23.413"></status>
</kw>
<status endtime="20170825 15:14:23.414" status="PASS" starttime="20170825 15:14:23.187"></status>
</kw>
<status endtime="20170825 15:14:23.414" status="PASS" starttime="20170825 15:14:23.186"></status>
</kw>
<status endtime="20170825 15:14:23.414" status="PASS" starttime="20170825 15:14:23.185"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:23.415">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:14:23.415" status="PASS" starttime="20170825 15:14:23.414"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:23.417">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:14:23.417" status="PASS" starttime="20170825 15:14:23.416"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:23.418">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:14:23.418" status="PASS" starttime="20170825 15:14:23.418"></status>
</kw>
<status endtime="20170825 15:14:23.418" status="PASS" starttime="20170825 15:14:23.417"></status>
</kw>
<status endtime="20170825 15:14:23.418" status="PASS" starttime="20170825 15:14:23.416"></status>
</kw>
<status endtime="20170825 15:14:23.418" status="PASS" starttime="20170825 15:14:23.415"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:23.482">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:14:23.482">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:23.482" status="PASS" starttime="20170825 15:14:23.418"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:23.483">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:14:23.484" status="PASS" starttime="20170825 15:14:23.483"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:23.484">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:14:23.485" status="PASS" starttime="20170825 15:14:23.484"></status>
</kw>
<status endtime="20170825 15:14:23.485" status="PASS" starttime="20170825 15:14:23.484"></status>
</kw>
<status endtime="20170825 15:14:23.485" status="PASS" starttime="20170825 15:14:23.483"></status>
</kw>
<status endtime="20170825 15:14:23.485" status="PASS" starttime="20170825 15:14:23.482"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:14:23.485">Delete All Sessions</msg>
<status endtime="20170825 15:14:23.486" status="PASS" starttime="20170825 15:14:23.485"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:23.486">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:23.486" status="PASS" starttime="20170825 15:14:23.185"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:23.486">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:23.487" status="PASS" starttime="20170825 15:14:23.486"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:23.487">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:14:23.487">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:14:23.487">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:14:23.487" status="PASS" starttime="20170825 15:14:23.487"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:23.488">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:14:23.488" status="PASS" starttime="20170825 15:14:23.184"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:23.488">${power_state} = On</msg>
<status endtime="20170825 15:14:23.488" status="PASS" starttime="20170825 15:14:23.184"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:14:23.488" status="PASS" starttime="20170825 15:14:23.488"></status>
</kw>
<status endtime="20170825 15:14:23.489" status="PASS" starttime="20170825 15:14:23.183"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:23.492">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:14:23.492" status="PASS" starttime="20170825 15:14:23.492"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:23.493">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:14:23.493" status="PASS" starttime="20170825 15:14:23.493"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:23.494">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:14:23.494" status="PASS" starttime="20170825 15:14:23.493"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:23.495">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:14:23.495" status="PASS" starttime="20170825 15:14:23.494"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:23.691">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:14:23.691" status="PASS" starttime="20170825 15:14:23.496"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:23.691">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:14:23.691">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:23.691" status="PASS" starttime="20170825 15:14:23.495"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:23.692">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:23.692" status="PASS" starttime="20170825 15:14:23.692"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:23.693">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:23.693" status="PASS" starttime="20170825 15:14:23.692"></status>
</kw>
<status endtime="20170825 15:14:23.693" status="PASS" starttime="20170825 15:14:23.491"></status>
</kw>
<status endtime="20170825 15:14:23.693" status="PASS" starttime="20170825 15:14:23.491"></status>
</kw>
<status endtime="20170825 15:14:23.693" status="PASS" starttime="20170825 15:14:23.490"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:23.693">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:14:23.694" status="PASS" starttime="20170825 15:14:23.693"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:23.696">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:14:23.696" status="PASS" starttime="20170825 15:14:23.695"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:23.697">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:14:23.697" status="PASS" starttime="20170825 15:14:23.697"></status>
</kw>
<status endtime="20170825 15:14:23.697" status="PASS" starttime="20170825 15:14:23.696"></status>
</kw>
<status endtime="20170825 15:14:23.697" status="PASS" starttime="20170825 15:14:23.694"></status>
</kw>
<status endtime="20170825 15:14:23.697" status="PASS" starttime="20170825 15:14:23.694"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:23.789">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:14:23.789">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:23.789" status="PASS" starttime="20170825 15:14:23.698"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:23.790">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:14:23.791" status="PASS" starttime="20170825 15:14:23.790"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:23.791">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:14:23.792" status="PASS" starttime="20170825 15:14:23.791"></status>
</kw>
<status endtime="20170825 15:14:23.792" status="PASS" starttime="20170825 15:14:23.791"></status>
</kw>
<status endtime="20170825 15:14:23.792" status="PASS" starttime="20170825 15:14:23.789"></status>
</kw>
<status endtime="20170825 15:14:23.792" status="PASS" starttime="20170825 15:14:23.789"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:14:23.792">Delete All Sessions</msg>
<status endtime="20170825 15:14:23.792" status="PASS" starttime="20170825 15:14:23.792"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:23.792">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:23.793" status="PASS" starttime="20170825 15:14:23.490"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:23.793">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:23.793" status="PASS" starttime="20170825 15:14:23.793"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:23.794">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:14:23.794">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:14:23.794">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:14:23.794" status="PASS" starttime="20170825 15:14:23.793"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:23.794">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170825 15:14:23.794" status="PASS" starttime="20170825 15:14:23.489"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:23.794">${host_state} = Running</msg>
<status endtime="20170825 15:14:23.795" status="PASS" starttime="20170825 15:14:23.489"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170825 15:14:23.795" status="PASS" starttime="20170825 15:14:23.795"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<doc>Get the boot progress and return it.</doc>
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Set Boot Progress Method" library="utils">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg level="INFO" timestamp="20170825 15:14:23.798">Returning from the enclosing user keyword.</msg>
<status endtime="20170825 15:14:23.798" status="PASS" starttime="20170825 15:14:23.798"></status>
</kw>
<status endtime="20170825 15:14:23.798" status="PASS" starttime="20170825 15:14:23.797"></status>
</kw>
<status endtime="20170825 15:14:23.798" status="PASS" starttime="20170825 15:14:23.797"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="New Get Boot Progress" library="utils">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:23.803">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:14:23.804" status="PASS" starttime="20170825 15:14:23.803"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:23.804">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:14:23.804" status="PASS" starttime="20170825 15:14:23.804"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:23.805">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:14:23.805" status="PASS" starttime="20170825 15:14:23.805"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:23.806">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:14:23.806" status="PASS" starttime="20170825 15:14:23.805"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:23.991">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:14:23.991" status="PASS" starttime="20170825 15:14:23.806"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:23.991">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:14:23.991">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:23.991" status="PASS" starttime="20170825 15:14:23.806"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:23.992">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:23.992" status="PASS" starttime="20170825 15:14:23.992"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:23.993">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:23.993" status="PASS" starttime="20170825 15:14:23.992"></status>
</kw>
<status endtime="20170825 15:14:23.993" status="PASS" starttime="20170825 15:14:23.803"></status>
</kw>
<status endtime="20170825 15:14:23.993" status="PASS" starttime="20170825 15:14:23.802"></status>
</kw>
<status endtime="20170825 15:14:23.993" status="PASS" starttime="20170825 15:14:23.801"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:23.994">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170825 15:14:23.994" status="PASS" starttime="20170825 15:14:23.993"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:23.996">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:14:23.996" status="PASS" starttime="20170825 15:14:23.995"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:23.996">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:14:23.997" status="PASS" starttime="20170825 15:14:23.996"></status>
</kw>
<status endtime="20170825 15:14:23.997" status="PASS" starttime="20170825 15:14:23.996"></status>
</kw>
<status endtime="20170825 15:14:23.997" status="PASS" starttime="20170825 15:14:23.994"></status>
</kw>
<status endtime="20170825 15:14:23.997" status="PASS" starttime="20170825 15:14:23.994"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:24.112">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:14:24.112">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:24.112" status="PASS" starttime="20170825 15:14:23.997"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:24.114">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:14:24.114" status="PASS" starttime="20170825 15:14:24.114"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:24.115">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:14:24.115" status="PASS" starttime="20170825 15:14:24.115"></status>
</kw>
<status endtime="20170825 15:14:24.115" status="PASS" starttime="20170825 15:14:24.114"></status>
</kw>
<status endtime="20170825 15:14:24.116" status="PASS" starttime="20170825 15:14:24.113"></status>
</kw>
<status endtime="20170825 15:14:24.116" status="PASS" starttime="20170825 15:14:24.113"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:14:24.116">Delete All Sessions</msg>
<status endtime="20170825 15:14:24.116" status="PASS" starttime="20170825 15:14:24.116"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:24.116">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:24.116" status="PASS" starttime="20170825 15:14:23.801"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:24.117">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:24.117" status="PASS" starttime="20170825 15:14:24.117"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:24.118">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:14:24.118">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:14:24.118">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:14:24.118" status="PASS" starttime="20170825 15:14:24.117"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:24.118">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:14:24.118" status="PASS" starttime="20170825 15:14:23.800"></status>
</kw>
<status endtime="20170825 15:14:24.118" status="PASS" starttime="20170825 15:14:23.799"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:24.118">${state} = Unspecified</msg>
<status endtime="20170825 15:14:24.118" status="PASS" starttime="20170825 15:14:23.799"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:24.119">${boot_progress} = Unspecified</msg>
<status endtime="20170825 15:14:24.119" status="PASS" starttime="20170825 15:14:23.796"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>OSStart</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:14:24.119">Unspecified != OSStart</msg>
<status endtime="20170825 15:14:24.119" status="FAIL" starttime="20170825 15:14:24.119"></status>
</kw>
<status endtime="20170825 15:14:24.119" status="FAIL" starttime="20170825 15:14:23.796"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:24.120">${status} = False</msg>
<status endtime="20170825 15:14:24.120" status="PASS" starttime="20170825 15:14:23.796"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170825 15:14:24.120" status="PASS" starttime="20170825 15:14:24.120"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:24.124">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:14:24.124" status="PASS" starttime="20170825 15:14:24.123"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:24.125">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:14:24.125" status="PASS" starttime="20170825 15:14:24.124"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:24.125">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:14:24.125" status="PASS" starttime="20170825 15:14:24.125"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:24.126">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:14:24.126" status="PASS" starttime="20170825 15:14:24.126"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:24.442">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:14:24.442" status="PASS" starttime="20170825 15:14:24.127"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:24.442">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:14:24.442">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:24.442" status="PASS" starttime="20170825 15:14:24.126"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:24.443">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:24.443" status="PASS" starttime="20170825 15:14:24.442"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:24.443">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:24.444" status="PASS" starttime="20170825 15:14:24.443"></status>
</kw>
<status endtime="20170825 15:14:24.444" status="PASS" starttime="20170825 15:14:24.123"></status>
</kw>
<status endtime="20170825 15:14:24.444" status="PASS" starttime="20170825 15:14:24.123"></status>
</kw>
<status endtime="20170825 15:14:24.444" status="PASS" starttime="20170825 15:14:24.122"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:24.444">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170825 15:14:24.444" status="PASS" starttime="20170825 15:14:24.444"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:24.447">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:14:24.447" status="PASS" starttime="20170825 15:14:24.446"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:24.448">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:14:24.448" status="PASS" starttime="20170825 15:14:24.447"></status>
</kw>
<status endtime="20170825 15:14:24.448" status="PASS" starttime="20170825 15:14:24.447"></status>
</kw>
<status endtime="20170825 15:14:24.448" status="PASS" starttime="20170825 15:14:24.445"></status>
</kw>
<status endtime="20170825 15:14:24.448" status="PASS" starttime="20170825 15:14:24.445"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:24.539">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:14:24.540">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:24.540" status="PASS" starttime="20170825 15:14:24.448"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:24.541">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:14:24.541" status="PASS" starttime="20170825 15:14:24.541"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:24.542">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:14:24.542" status="PASS" starttime="20170825 15:14:24.542"></status>
</kw>
<status endtime="20170825 15:14:24.542" status="PASS" starttime="20170825 15:14:24.542"></status>
</kw>
<status endtime="20170825 15:14:24.543" status="PASS" starttime="20170825 15:14:24.540"></status>
</kw>
<status endtime="20170825 15:14:24.543" status="PASS" starttime="20170825 15:14:24.540"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:14:24.543">Delete All Sessions</msg>
<status endtime="20170825 15:14:24.543" status="PASS" starttime="20170825 15:14:24.543"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:24.543">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:24.543" status="PASS" starttime="20170825 15:14:24.121"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:24.544">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:24.544" status="PASS" starttime="20170825 15:14:24.544"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:24.545">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:14:24.545">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:14:24.545">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:14:24.545" status="PASS" starttime="20170825 15:14:24.544"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:24.545">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:14:24.545" status="PASS" starttime="20170825 15:14:24.121"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:24.545">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:14:24.545" status="PASS" starttime="20170825 15:14:24.120"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:24.546">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170825 15:14:24.546">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:14:24.546" status="FAIL" starttime="20170825 15:14:24.546"></status>
</kw>
<status endtime="20170825 15:14:24.546" status="FAIL" starttime="20170825 15:14:23.795"></status>
</kw>
<status endtime="20170825 15:14:24.546" status="FAIL" starttime="20170825 15:14:23.183"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:34.551">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:14:34.551" status="PASS" starttime="20170825 15:14:34.551"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:34.552">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:14:34.552" status="PASS" starttime="20170825 15:14:34.552"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:34.553">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:14:34.553" status="PASS" starttime="20170825 15:14:34.552"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:34.553">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:14:34.553" status="PASS" starttime="20170825 15:14:34.553"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:34.992">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:14:34.992" status="PASS" starttime="20170825 15:14:34.554"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:34.992">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:14:34.992">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:34.992" status="PASS" starttime="20170825 15:14:34.554"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:34.993">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:34.993" status="PASS" starttime="20170825 15:14:34.993"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:34.994">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:34.994" status="PASS" starttime="20170825 15:14:34.993"></status>
</kw>
<status endtime="20170825 15:14:34.994" status="PASS" starttime="20170825 15:14:34.550"></status>
</kw>
<status endtime="20170825 15:14:34.994" status="PASS" starttime="20170825 15:14:34.550"></status>
</kw>
<status endtime="20170825 15:14:34.994" status="PASS" starttime="20170825 15:14:34.549"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:34.995">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:14:34.995" status="PASS" starttime="20170825 15:14:34.994"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:34.997">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:14:34.997" status="PASS" starttime="20170825 15:14:34.996"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:34.998">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:14:34.998" status="PASS" starttime="20170825 15:14:34.998"></status>
</kw>
<status endtime="20170825 15:14:34.998" status="PASS" starttime="20170825 15:14:34.997"></status>
</kw>
<status endtime="20170825 15:14:34.998" status="PASS" starttime="20170825 15:14:34.996"></status>
</kw>
<status endtime="20170825 15:14:34.998" status="PASS" starttime="20170825 15:14:34.995"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:38.100">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:14:38.100">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:38.100" status="PASS" starttime="20170825 15:14:34.999"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:38.102">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:14:38.102" status="PASS" starttime="20170825 15:14:38.101"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:38.103">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:14:38.103" status="PASS" starttime="20170825 15:14:38.103"></status>
</kw>
<status endtime="20170825 15:14:38.103" status="PASS" starttime="20170825 15:14:38.102"></status>
</kw>
<status endtime="20170825 15:14:38.103" status="PASS" starttime="20170825 15:14:38.101"></status>
</kw>
<status endtime="20170825 15:14:38.103" status="PASS" starttime="20170825 15:14:38.100"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:14:38.104">Delete All Sessions</msg>
<status endtime="20170825 15:14:38.104" status="PASS" starttime="20170825 15:14:38.103"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:38.104">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:38.104" status="PASS" starttime="20170825 15:14:34.548"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:38.105">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:38.105" status="PASS" starttime="20170825 15:14:38.104"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:38.105">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:14:38.105">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:14:38.105">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:14:38.105" status="PASS" starttime="20170825 15:14:38.105"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:38.106">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:14:38.106" status="PASS" starttime="20170825 15:14:34.548"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:38.106">${power_state} = On</msg>
<status endtime="20170825 15:14:38.106" status="PASS" starttime="20170825 15:14:34.548"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:14:38.106" status="PASS" starttime="20170825 15:14:38.106"></status>
</kw>
<status endtime="20170825 15:14:38.107" status="PASS" starttime="20170825 15:14:34.547"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:38.110">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:14:38.111" status="PASS" starttime="20170825 15:14:38.110"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:38.111">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:14:38.111" status="PASS" starttime="20170825 15:14:38.111"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:38.112">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:14:38.112" status="PASS" starttime="20170825 15:14:38.112"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:38.113">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:14:38.113" status="PASS" starttime="20170825 15:14:38.112"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:38.944">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:14:38.944" status="PASS" starttime="20170825 15:14:38.113"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:38.944">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:14:38.944">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:38.944" status="PASS" starttime="20170825 15:14:38.113"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:38.945">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:38.945" status="PASS" starttime="20170825 15:14:38.945"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:38.946">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:38.946" status="PASS" starttime="20170825 15:14:38.945"></status>
</kw>
<status endtime="20170825 15:14:38.946" status="PASS" starttime="20170825 15:14:38.109"></status>
</kw>
<status endtime="20170825 15:14:38.946" status="PASS" starttime="20170825 15:14:38.109"></status>
</kw>
<status endtime="20170825 15:14:38.946" status="PASS" starttime="20170825 15:14:38.108"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:38.947">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:14:38.947" status="PASS" starttime="20170825 15:14:38.946"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:38.949">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:14:38.949" status="PASS" starttime="20170825 15:14:38.948"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:38.950">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:14:38.950" status="PASS" starttime="20170825 15:14:38.949"></status>
</kw>
<status endtime="20170825 15:14:38.950" status="PASS" starttime="20170825 15:14:38.949"></status>
</kw>
<status endtime="20170825 15:14:38.950" status="PASS" starttime="20170825 15:14:38.947"></status>
</kw>
<status endtime="20170825 15:14:38.950" status="PASS" starttime="20170825 15:14:38.947"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:39.143">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:14:39.143">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:39.143" status="PASS" starttime="20170825 15:14:38.950"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:39.145">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:14:39.145" status="PASS" starttime="20170825 15:14:39.144"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:39.146">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:14:39.146" status="PASS" starttime="20170825 15:14:39.146"></status>
</kw>
<status endtime="20170825 15:14:39.146" status="PASS" starttime="20170825 15:14:39.145"></status>
</kw>
<status endtime="20170825 15:14:39.146" status="PASS" starttime="20170825 15:14:39.144"></status>
</kw>
<status endtime="20170825 15:14:39.146" status="PASS" starttime="20170825 15:14:39.143"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:14:39.147">Delete All Sessions</msg>
<status endtime="20170825 15:14:39.147" status="PASS" starttime="20170825 15:14:39.146"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:39.147">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:39.147" status="PASS" starttime="20170825 15:14:38.108"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:39.147">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:39.148" status="PASS" starttime="20170825 15:14:39.147"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:39.148">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:14:39.148">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:14:39.148">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:14:39.148" status="PASS" starttime="20170825 15:14:39.148"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:39.149">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170825 15:14:39.149" status="PASS" starttime="20170825 15:14:38.107"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:39.149">${host_state} = Running</msg>
<status endtime="20170825 15:14:39.149" status="PASS" starttime="20170825 15:14:38.107"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170825 15:14:39.149" status="PASS" starttime="20170825 15:14:39.149"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<doc>Get the boot progress and return it.</doc>
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Set Boot Progress Method" library="utils">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg level="INFO" timestamp="20170825 15:14:39.152">Returning from the enclosing user keyword.</msg>
<status endtime="20170825 15:14:39.153" status="PASS" starttime="20170825 15:14:39.152"></status>
</kw>
<status endtime="20170825 15:14:39.153" status="PASS" starttime="20170825 15:14:39.152"></status>
</kw>
<status endtime="20170825 15:14:39.153" status="PASS" starttime="20170825 15:14:39.151"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="New Get Boot Progress" library="utils">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:39.157">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:14:39.157" status="PASS" starttime="20170825 15:14:39.157"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:39.158">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:14:39.158" status="PASS" starttime="20170825 15:14:39.158"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:39.159">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:14:39.159" status="PASS" starttime="20170825 15:14:39.158"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:39.159">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:14:39.159" status="PASS" starttime="20170825 15:14:39.159"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:39.348">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:14:39.349" status="PASS" starttime="20170825 15:14:39.160"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:39.349">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:14:39.349">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:39.349" status="PASS" starttime="20170825 15:14:39.159"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:39.349">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:39.350" status="PASS" starttime="20170825 15:14:39.349"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:39.350">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:39.350" status="PASS" starttime="20170825 15:14:39.350"></status>
</kw>
<status endtime="20170825 15:14:39.350" status="PASS" starttime="20170825 15:14:39.156"></status>
</kw>
<status endtime="20170825 15:14:39.351" status="PASS" starttime="20170825 15:14:39.156"></status>
</kw>
<status endtime="20170825 15:14:39.351" status="PASS" starttime="20170825 15:14:39.155"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:39.351">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170825 15:14:39.351" status="PASS" starttime="20170825 15:14:39.351"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:39.353">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:14:39.353" status="PASS" starttime="20170825 15:14:39.353"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:39.354">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:14:39.354" status="PASS" starttime="20170825 15:14:39.354"></status>
</kw>
<status endtime="20170825 15:14:39.354" status="PASS" starttime="20170825 15:14:39.353"></status>
</kw>
<status endtime="20170825 15:14:39.355" status="PASS" starttime="20170825 15:14:39.352"></status>
</kw>
<status endtime="20170825 15:14:39.355" status="PASS" starttime="20170825 15:14:39.352"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:39.445">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:14:39.445">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:39.445" status="PASS" starttime="20170825 15:14:39.355"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:39.447">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:14:39.447" status="PASS" starttime="20170825 15:14:39.447"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:39.448">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:14:39.448" status="PASS" starttime="20170825 15:14:39.448"></status>
</kw>
<status endtime="20170825 15:14:39.448" status="PASS" starttime="20170825 15:14:39.447"></status>
</kw>
<status endtime="20170825 15:14:39.448" status="PASS" starttime="20170825 15:14:39.446"></status>
</kw>
<status endtime="20170825 15:14:39.448" status="PASS" starttime="20170825 15:14:39.446"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:14:39.449">Delete All Sessions</msg>
<status endtime="20170825 15:14:39.449" status="PASS" starttime="20170825 15:14:39.449"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:39.449">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:39.449" status="PASS" starttime="20170825 15:14:39.154"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:39.450">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:39.450" status="PASS" starttime="20170825 15:14:39.449"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:39.450">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:14:39.450">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:14:39.451">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:14:39.451" status="PASS" starttime="20170825 15:14:39.450"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:39.451">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:14:39.451" status="PASS" starttime="20170825 15:14:39.154"></status>
</kw>
<status endtime="20170825 15:14:39.451" status="PASS" starttime="20170825 15:14:39.153"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:39.451">${state} = Unspecified</msg>
<status endtime="20170825 15:14:39.451" status="PASS" starttime="20170825 15:14:39.153"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:39.452">${boot_progress} = Unspecified</msg>
<status endtime="20170825 15:14:39.452" status="PASS" starttime="20170825 15:14:39.151"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>OSStart</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:14:39.452">Unspecified != OSStart</msg>
<status endtime="20170825 15:14:39.452" status="FAIL" starttime="20170825 15:14:39.452"></status>
</kw>
<status endtime="20170825 15:14:39.452" status="FAIL" starttime="20170825 15:14:39.151"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:39.453">${status} = False</msg>
<status endtime="20170825 15:14:39.453" status="PASS" starttime="20170825 15:14:39.150"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170825 15:14:39.453" status="PASS" starttime="20170825 15:14:39.453"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:39.457">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:14:39.457" status="PASS" starttime="20170825 15:14:39.456"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:39.458">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:14:39.458" status="PASS" starttime="20170825 15:14:39.458"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:39.459">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:14:39.459" status="PASS" starttime="20170825 15:14:39.458"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:39.459">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:14:39.459" status="PASS" starttime="20170825 15:14:39.459"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:39.636">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:14:39.636" status="PASS" starttime="20170825 15:14:39.460"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:39.636">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:14:39.637">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:39.637" status="PASS" starttime="20170825 15:14:39.460"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:39.637">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:39.637" status="PASS" starttime="20170825 15:14:39.637"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:39.638">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:39.638" status="PASS" starttime="20170825 15:14:39.638"></status>
</kw>
<status endtime="20170825 15:14:39.638" status="PASS" starttime="20170825 15:14:39.456"></status>
</kw>
<status endtime="20170825 15:14:39.638" status="PASS" starttime="20170825 15:14:39.455"></status>
</kw>
<status endtime="20170825 15:14:39.638" status="PASS" starttime="20170825 15:14:39.455"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:39.639">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170825 15:14:39.639" status="PASS" starttime="20170825 15:14:39.638"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:39.641">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:14:39.641" status="PASS" starttime="20170825 15:14:39.640"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:39.642">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:14:39.642" status="PASS" starttime="20170825 15:14:39.642"></status>
</kw>
<status endtime="20170825 15:14:39.642" status="PASS" starttime="20170825 15:14:39.641"></status>
</kw>
<status endtime="20170825 15:14:39.642" status="PASS" starttime="20170825 15:14:39.640"></status>
</kw>
<status endtime="20170825 15:14:39.643" status="PASS" starttime="20170825 15:14:39.639"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:39.742">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:14:39.742">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:39.742" status="PASS" starttime="20170825 15:14:39.643"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:39.744">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:14:39.744" status="PASS" starttime="20170825 15:14:39.743"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:39.745">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:14:39.745" status="PASS" starttime="20170825 15:14:39.745"></status>
</kw>
<status endtime="20170825 15:14:39.745" status="PASS" starttime="20170825 15:14:39.744"></status>
</kw>
<status endtime="20170825 15:14:39.745" status="PASS" starttime="20170825 15:14:39.743"></status>
</kw>
<status endtime="20170825 15:14:39.745" status="PASS" starttime="20170825 15:14:39.743"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:14:39.746">Delete All Sessions</msg>
<status endtime="20170825 15:14:39.746" status="PASS" starttime="20170825 15:14:39.746"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:39.746">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:39.746" status="PASS" starttime="20170825 15:14:39.454"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:39.747">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:39.747" status="PASS" starttime="20170825 15:14:39.746"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:39.747">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:14:39.747">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:14:39.747">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:14:39.747" status="PASS" starttime="20170825 15:14:39.747"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:39.748">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:14:39.748" status="PASS" starttime="20170825 15:14:39.454"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:39.748">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:14:39.748" status="PASS" starttime="20170825 15:14:39.453"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:39.748">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170825 15:14:39.749">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:14:39.749" status="FAIL" starttime="20170825 15:14:39.748"></status>
</kw>
<status endtime="20170825 15:14:39.749" status="FAIL" starttime="20170825 15:14:39.150"></status>
</kw>
<status endtime="20170825 15:14:39.749" status="FAIL" starttime="20170825 15:14:34.547"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:49.755">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:14:49.755" status="PASS" starttime="20170825 15:14:49.754"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:49.756">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:14:49.756" status="PASS" starttime="20170825 15:14:49.755"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:49.756">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:14:49.756" status="PASS" starttime="20170825 15:14:49.756"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:49.757">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:14:49.757" status="PASS" starttime="20170825 15:14:49.757"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:50.265">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:14:50.265" status="PASS" starttime="20170825 15:14:49.758"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:50.265">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:14:50.265">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:50.265" status="PASS" starttime="20170825 15:14:49.757"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:50.266">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:50.266" status="PASS" starttime="20170825 15:14:50.266"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:50.267">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:50.267" status="PASS" starttime="20170825 15:14:50.266"></status>
</kw>
<status endtime="20170825 15:14:50.267" status="PASS" starttime="20170825 15:14:49.754"></status>
</kw>
<status endtime="20170825 15:14:50.267" status="PASS" starttime="20170825 15:14:49.753"></status>
</kw>
<status endtime="20170825 15:14:50.267" status="PASS" starttime="20170825 15:14:49.753"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:50.268">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:14:50.268" status="PASS" starttime="20170825 15:14:50.267"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:50.270">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:14:50.270" status="PASS" starttime="20170825 15:14:50.269"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:50.271">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:14:50.271" status="PASS" starttime="20170825 15:14:50.270"></status>
</kw>
<status endtime="20170825 15:14:50.271" status="PASS" starttime="20170825 15:14:50.270"></status>
</kw>
<status endtime="20170825 15:14:50.271" status="PASS" starttime="20170825 15:14:50.268"></status>
</kw>
<status endtime="20170825 15:14:50.271" status="PASS" starttime="20170825 15:14:50.268"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:55.439">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:14:55.439">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:55.439" status="PASS" starttime="20170825 15:14:50.271"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:55.441">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:14:55.441" status="PASS" starttime="20170825 15:14:55.441"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:55.442">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:14:55.442" status="PASS" starttime="20170825 15:14:55.442"></status>
</kw>
<status endtime="20170825 15:14:55.443" status="PASS" starttime="20170825 15:14:55.442"></status>
</kw>
<status endtime="20170825 15:14:55.443" status="PASS" starttime="20170825 15:14:55.440"></status>
</kw>
<status endtime="20170825 15:14:55.443" status="PASS" starttime="20170825 15:14:55.440"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:14:55.443">Delete All Sessions</msg>
<status endtime="20170825 15:14:55.443" status="PASS" starttime="20170825 15:14:55.443"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:55.444">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:14:55.444" status="PASS" starttime="20170825 15:14:49.752"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:14:55.444">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:14:55.444" status="PASS" starttime="20170825 15:14:55.444"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:14:55.445">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:14:55.445">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:14:55.445">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:14:55.445" status="PASS" starttime="20170825 15:14:55.444"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:55.445">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 15:14:55.445" status="PASS" starttime="20170825 15:14:49.751"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:14:55.446">${power_state} = Off</msg>
<status endtime="20170825 15:14:55.446" status="PASS" starttime="20170825 15:14:49.750"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:14:55.446">On != Off</msg>
<status endtime="20170825 15:14:55.446" status="FAIL" starttime="20170825 15:14:55.446"></status>
</kw>
<status endtime="20170825 15:14:55.446" status="FAIL" starttime="20170825 15:14:49.750"></status>
</kw>
<status endtime="20170825 15:14:55.447" status="FAIL" starttime="20170825 15:14:49.749"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:05.452">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:15:05.452" status="PASS" starttime="20170825 15:15:05.451"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:05.453">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:15:05.453" status="PASS" starttime="20170825 15:15:05.452"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:05.453">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:15:05.453" status="PASS" starttime="20170825 15:15:05.453"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:05.454">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:15:05.454" status="PASS" starttime="20170825 15:15:05.454"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:05.821">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:15:05.821" status="PASS" starttime="20170825 15:15:05.455"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:05.822">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:15:05.822">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:15:05.822" status="PASS" starttime="20170825 15:15:05.454"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:05.822">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:15:05.822" status="PASS" starttime="20170825 15:15:05.822"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:05.823">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:15:05.823" status="PASS" starttime="20170825 15:15:05.823"></status>
</kw>
<status endtime="20170825 15:15:05.823" status="PASS" starttime="20170825 15:15:05.451"></status>
</kw>
<status endtime="20170825 15:15:05.823" status="PASS" starttime="20170825 15:15:05.450"></status>
</kw>
<status endtime="20170825 15:15:05.824" status="PASS" starttime="20170825 15:15:05.450"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:05.824">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:15:05.824" status="PASS" starttime="20170825 15:15:05.824"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:05.826">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:15:05.826" status="PASS" starttime="20170825 15:15:05.826"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:05.827">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:15:05.827" status="PASS" starttime="20170825 15:15:05.827"></status>
</kw>
<status endtime="20170825 15:15:05.827" status="PASS" starttime="20170825 15:15:05.827"></status>
</kw>
<status endtime="20170825 15:15:05.828" status="PASS" starttime="20170825 15:15:05.825"></status>
</kw>
<status endtime="20170825 15:15:05.828" status="PASS" starttime="20170825 15:15:05.825"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:06.534">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:15:06.535">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:15:06.535" status="PASS" starttime="20170825 15:15:05.828"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:06.536">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:15:06.537" status="PASS" starttime="20170825 15:15:06.536"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:06.537">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:15:06.537" status="PASS" starttime="20170825 15:15:06.537"></status>
</kw>
<status endtime="20170825 15:15:06.538" status="PASS" starttime="20170825 15:15:06.537"></status>
</kw>
<status endtime="20170825 15:15:06.538" status="PASS" starttime="20170825 15:15:06.535"></status>
</kw>
<status endtime="20170825 15:15:06.538" status="PASS" starttime="20170825 15:15:06.535"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:15:06.538">Delete All Sessions</msg>
<status endtime="20170825 15:15:06.538" status="PASS" starttime="20170825 15:15:06.538"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:06.538">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:15:06.538" status="PASS" starttime="20170825 15:15:05.449"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:06.539">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:15:06.539" status="PASS" starttime="20170825 15:15:06.539"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:06.540">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:15:06.540">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:15:06.540">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:15:06.540" status="PASS" starttime="20170825 15:15:06.539"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:06.540">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:15:06.540" status="PASS" starttime="20170825 15:15:05.448"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:06.541">${power_state} = On</msg>
<status endtime="20170825 15:15:06.541" status="PASS" starttime="20170825 15:15:05.448"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:15:06.541" status="PASS" starttime="20170825 15:15:06.541"></status>
</kw>
<status endtime="20170825 15:15:06.541" status="PASS" starttime="20170825 15:15:05.448"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:06.545">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:15:06.546" status="PASS" starttime="20170825 15:15:06.545"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:06.546">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:15:06.546" status="PASS" starttime="20170825 15:15:06.546"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:06.547">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:15:06.547" status="PASS" starttime="20170825 15:15:06.547"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:06.548">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:15:06.548" status="PASS" starttime="20170825 15:15:06.547"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:06.861">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:15:06.861" status="PASS" starttime="20170825 15:15:06.548"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:06.861">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:15:06.861">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:15:06.861" status="PASS" starttime="20170825 15:15:06.548"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:06.862">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:15:06.862" status="PASS" starttime="20170825 15:15:06.862"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:06.863">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:15:06.863" status="PASS" starttime="20170825 15:15:06.862"></status>
</kw>
<status endtime="20170825 15:15:06.863" status="PASS" starttime="20170825 15:15:06.544"></status>
</kw>
<status endtime="20170825 15:15:06.863" status="PASS" starttime="20170825 15:15:06.544"></status>
</kw>
<status endtime="20170825 15:15:06.863" status="PASS" starttime="20170825 15:15:06.543"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:06.864">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:15:06.864" status="PASS" starttime="20170825 15:15:06.863"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:06.866">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:15:06.866" status="PASS" starttime="20170825 15:15:06.865"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:06.866">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:15:06.867" status="PASS" starttime="20170825 15:15:06.866"></status>
</kw>
<status endtime="20170825 15:15:06.867" status="PASS" starttime="20170825 15:15:06.866"></status>
</kw>
<status endtime="20170825 15:15:06.867" status="PASS" starttime="20170825 15:15:06.864"></status>
</kw>
<status endtime="20170825 15:15:06.867" status="PASS" starttime="20170825 15:15:06.864"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:07.538">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:15:07.539">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:15:07.539" status="PASS" starttime="20170825 15:15:06.867"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:07.541">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:15:07.541" status="PASS" starttime="20170825 15:15:07.540"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:07.542">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:15:07.542" status="PASS" starttime="20170825 15:15:07.541"></status>
</kw>
<status endtime="20170825 15:15:07.542" status="PASS" starttime="20170825 15:15:07.541"></status>
</kw>
<status endtime="20170825 15:15:07.542" status="PASS" starttime="20170825 15:15:07.540"></status>
</kw>
<status endtime="20170825 15:15:07.542" status="PASS" starttime="20170825 15:15:07.539"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:15:07.542">Delete All Sessions</msg>
<status endtime="20170825 15:15:07.542" status="PASS" starttime="20170825 15:15:07.542"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:07.543">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:15:07.543" status="PASS" starttime="20170825 15:15:06.542"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:07.543">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:15:07.543" status="PASS" starttime="20170825 15:15:07.543"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:07.544">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:15:07.544">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:15:07.544">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:15:07.544" status="PASS" starttime="20170825 15:15:07.544"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:07.544">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170825 15:15:07.544" status="PASS" starttime="20170825 15:15:06.542"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:07.545">${host_state} = Running</msg>
<status endtime="20170825 15:15:07.545" status="PASS" starttime="20170825 15:15:06.542"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170825 15:15:07.545" status="PASS" starttime="20170825 15:15:07.545"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<doc>Get the boot progress and return it.</doc>
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Set Boot Progress Method" library="utils">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg level="INFO" timestamp="20170825 15:15:07.548">Returning from the enclosing user keyword.</msg>
<status endtime="20170825 15:15:07.548" status="PASS" starttime="20170825 15:15:07.548"></status>
</kw>
<status endtime="20170825 15:15:07.548" status="PASS" starttime="20170825 15:15:07.548"></status>
</kw>
<status endtime="20170825 15:15:07.548" status="PASS" starttime="20170825 15:15:07.547"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="New Get Boot Progress" library="utils">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:07.553">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:15:07.553" status="PASS" starttime="20170825 15:15:07.552"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:07.553">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:15:07.554" status="PASS" starttime="20170825 15:15:07.553"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:07.554">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:15:07.554" status="PASS" starttime="20170825 15:15:07.554"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:07.555">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:15:07.555" status="PASS" starttime="20170825 15:15:07.554"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:07.990">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:15:07.990" status="PASS" starttime="20170825 15:15:07.556"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:07.990">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:15:07.990">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:15:07.990" status="PASS" starttime="20170825 15:15:07.555"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:07.991">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:15:07.991" status="PASS" starttime="20170825 15:15:07.991"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:07.992">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:15:07.992" status="PASS" starttime="20170825 15:15:07.992"></status>
</kw>
<status endtime="20170825 15:15:07.992" status="PASS" starttime="20170825 15:15:07.552"></status>
</kw>
<status endtime="20170825 15:15:07.992" status="PASS" starttime="20170825 15:15:07.551"></status>
</kw>
<status endtime="20170825 15:15:07.992" status="PASS" starttime="20170825 15:15:07.551"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:07.993">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170825 15:15:07.993" status="PASS" starttime="20170825 15:15:07.993"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:07.995">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:15:07.995" status="PASS" starttime="20170825 15:15:07.995"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:07.996">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:15:07.996" status="PASS" starttime="20170825 15:15:07.996"></status>
</kw>
<status endtime="20170825 15:15:07.996" status="PASS" starttime="20170825 15:15:07.996"></status>
</kw>
<status endtime="20170825 15:15:07.997" status="PASS" starttime="20170825 15:15:07.994"></status>
</kw>
<status endtime="20170825 15:15:07.997" status="PASS" starttime="20170825 15:15:07.993"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:08.129">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:15:08.129">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:15:08.129" status="PASS" starttime="20170825 15:15:07.997"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:08.131">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:15:08.131" status="PASS" starttime="20170825 15:15:08.130"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:08.132">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:15:08.132" status="PASS" starttime="20170825 15:15:08.131"></status>
</kw>
<status endtime="20170825 15:15:08.132" status="PASS" starttime="20170825 15:15:08.131"></status>
</kw>
<status endtime="20170825 15:15:08.132" status="PASS" starttime="20170825 15:15:08.130"></status>
</kw>
<status endtime="20170825 15:15:08.132" status="PASS" starttime="20170825 15:15:08.129"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:15:08.132">Delete All Sessions</msg>
<status endtime="20170825 15:15:08.133" status="PASS" starttime="20170825 15:15:08.132"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:08.133">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:15:08.133" status="PASS" starttime="20170825 15:15:07.550"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:08.133">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:15:08.134" status="PASS" starttime="20170825 15:15:08.133"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:08.134">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:15:08.134">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:15:08.134">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:15:08.134" status="PASS" starttime="20170825 15:15:08.134"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:08.135">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:15:08.135" status="PASS" starttime="20170825 15:15:07.550"></status>
</kw>
<status endtime="20170825 15:15:08.135" status="PASS" starttime="20170825 15:15:07.549"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:08.135">${state} = Unspecified</msg>
<status endtime="20170825 15:15:08.135" status="PASS" starttime="20170825 15:15:07.549"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:08.135">${boot_progress} = Unspecified</msg>
<status endtime="20170825 15:15:08.135" status="PASS" starttime="20170825 15:15:07.546"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>OSStart</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:15:08.136">Unspecified != OSStart</msg>
<status endtime="20170825 15:15:08.136" status="FAIL" starttime="20170825 15:15:08.135"></status>
</kw>
<status endtime="20170825 15:15:08.136" status="FAIL" starttime="20170825 15:15:07.546"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:08.136">${status} = False</msg>
<status endtime="20170825 15:15:08.136" status="PASS" starttime="20170825 15:15:07.546"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170825 15:15:08.137" status="PASS" starttime="20170825 15:15:08.136"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:08.140">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:15:08.141" status="PASS" starttime="20170825 15:15:08.140"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:08.142">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:15:08.142" status="PASS" starttime="20170825 15:15:08.141"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:08.142">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:15:08.142" status="PASS" starttime="20170825 15:15:08.142"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:08.143">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:15:08.143" status="PASS" starttime="20170825 15:15:08.143"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:08.367">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:15:08.367" status="PASS" starttime="20170825 15:15:08.144"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:08.368">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:15:08.368">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:15:08.368" status="PASS" starttime="20170825 15:15:08.143"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:08.368">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:15:08.368" status="PASS" starttime="20170825 15:15:08.368"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:08.369">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:15:08.369" status="PASS" starttime="20170825 15:15:08.369"></status>
</kw>
<status endtime="20170825 15:15:08.369" status="PASS" starttime="20170825 15:15:08.139"></status>
</kw>
<status endtime="20170825 15:15:08.369" status="PASS" starttime="20170825 15:15:08.139"></status>
</kw>
<status endtime="20170825 15:15:08.370" status="PASS" starttime="20170825 15:15:08.138"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:08.370">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170825 15:15:08.370" status="PASS" starttime="20170825 15:15:08.370"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:08.372">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:15:08.372" status="PASS" starttime="20170825 15:15:08.372"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:08.373">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:15:08.373" status="PASS" starttime="20170825 15:15:08.373"></status>
</kw>
<status endtime="20170825 15:15:08.373" status="PASS" starttime="20170825 15:15:08.372"></status>
</kw>
<status endtime="20170825 15:15:08.373" status="PASS" starttime="20170825 15:15:08.371"></status>
</kw>
<status endtime="20170825 15:15:08.374" status="PASS" starttime="20170825 15:15:08.370"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:08.524">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:15:08.524">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:15:08.524" status="PASS" starttime="20170825 15:15:08.374"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:08.526">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:15:08.526" status="PASS" starttime="20170825 15:15:08.526"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:08.527">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:15:08.527" status="PASS" starttime="20170825 15:15:08.527"></status>
</kw>
<status endtime="20170825 15:15:08.527" status="PASS" starttime="20170825 15:15:08.526"></status>
</kw>
<status endtime="20170825 15:15:08.527" status="PASS" starttime="20170825 15:15:08.525"></status>
</kw>
<status endtime="20170825 15:15:08.527" status="PASS" starttime="20170825 15:15:08.525"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:15:08.528">Delete All Sessions</msg>
<status endtime="20170825 15:15:08.528" status="PASS" starttime="20170825 15:15:08.528"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:08.528">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:15:08.528" status="PASS" starttime="20170825 15:15:08.138"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:08.529">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:15:08.529" status="PASS" starttime="20170825 15:15:08.528"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:08.529">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:15:08.529">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:15:08.529">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:15:08.530" status="PASS" starttime="20170825 15:15:08.529"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:08.530">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:15:08.530" status="PASS" starttime="20170825 15:15:08.137"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:08.530">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:15:08.530" status="PASS" starttime="20170825 15:15:08.137"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:08.531">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170825 15:15:08.531">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:15:08.531" status="FAIL" starttime="20170825 15:15:08.530"></status>
</kw>
<status endtime="20170825 15:15:08.531" status="FAIL" starttime="20170825 15:15:07.545"></status>
</kw>
<status endtime="20170825 15:15:08.531" status="FAIL" starttime="20170825 15:15:05.447"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:18.539">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:15:18.539" status="PASS" starttime="20170825 15:15:18.538"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:18.540">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:15:18.540" status="PASS" starttime="20170825 15:15:18.540"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:18.541">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:15:18.541" status="PASS" starttime="20170825 15:15:18.541"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:18.542">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:15:18.542" status="PASS" starttime="20170825 15:15:18.542"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:18.725">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:15:18.725" status="PASS" starttime="20170825 15:15:18.543"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:18.725">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:15:18.725">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:15:18.725" status="PASS" starttime="20170825 15:15:18.543"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:18.726">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:15:18.726" status="PASS" starttime="20170825 15:15:18.726"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:18.727">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:15:18.727" status="PASS" starttime="20170825 15:15:18.726"></status>
</kw>
<status endtime="20170825 15:15:18.727" status="PASS" starttime="20170825 15:15:18.538"></status>
</kw>
<status endtime="20170825 15:15:18.727" status="PASS" starttime="20170825 15:15:18.537"></status>
</kw>
<status endtime="20170825 15:15:18.727" status="PASS" starttime="20170825 15:15:18.536"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:18.728">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:15:18.728" status="PASS" starttime="20170825 15:15:18.727"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:18.730">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:15:18.730" status="PASS" starttime="20170825 15:15:18.729"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:18.731">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:15:18.731" status="PASS" starttime="20170825 15:15:18.730"></status>
</kw>
<status endtime="20170825 15:15:18.731" status="PASS" starttime="20170825 15:15:18.730"></status>
</kw>
<status endtime="20170825 15:15:18.731" status="PASS" starttime="20170825 15:15:18.728"></status>
</kw>
<status endtime="20170825 15:15:18.731" status="PASS" starttime="20170825 15:15:18.728"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:18.802">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:15:18.803">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:15:18.803" status="PASS" starttime="20170825 15:15:18.731"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:18.804">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:15:18.804" status="PASS" starttime="20170825 15:15:18.804"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:18.805">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:15:18.805" status="PASS" starttime="20170825 15:15:18.805"></status>
</kw>
<status endtime="20170825 15:15:18.806" status="PASS" starttime="20170825 15:15:18.805"></status>
</kw>
<status endtime="20170825 15:15:18.806" status="PASS" starttime="20170825 15:15:18.803"></status>
</kw>
<status endtime="20170825 15:15:18.806" status="PASS" starttime="20170825 15:15:18.803"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:15:18.806">Delete All Sessions</msg>
<status endtime="20170825 15:15:18.806" status="PASS" starttime="20170825 15:15:18.806"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:18.807">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:15:18.807" status="PASS" starttime="20170825 15:15:18.535"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:18.807">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:15:18.807" status="PASS" starttime="20170825 15:15:18.807"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:18.808">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:15:18.808">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:15:18.808">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:15:18.808" status="PASS" starttime="20170825 15:15:18.807"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:18.808">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:15:18.808" status="PASS" starttime="20170825 15:15:18.534"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:18.809">${power_state} = On</msg>
<status endtime="20170825 15:15:18.809" status="PASS" starttime="20170825 15:15:18.533"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:15:18.809" status="PASS" starttime="20170825 15:15:18.809"></status>
</kw>
<status endtime="20170825 15:15:18.809" status="PASS" starttime="20170825 15:15:18.533"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:18.813">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:15:18.813" status="PASS" starttime="20170825 15:15:18.813"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:18.814">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:15:18.814" status="PASS" starttime="20170825 15:15:18.813"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:18.814">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:15:18.814" status="PASS" starttime="20170825 15:15:18.814"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:18.815">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:15:18.815" status="PASS" starttime="20170825 15:15:18.815"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:19.016">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:15:19.016" status="PASS" starttime="20170825 15:15:18.816"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:19.016">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:15:19.016">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:15:19.017" status="PASS" starttime="20170825 15:15:18.815"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:19.017">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:15:19.017" status="PASS" starttime="20170825 15:15:19.017"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:19.018">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:15:19.018" status="PASS" starttime="20170825 15:15:19.017"></status>
</kw>
<status endtime="20170825 15:15:19.018" status="PASS" starttime="20170825 15:15:18.812"></status>
</kw>
<status endtime="20170825 15:15:19.019" status="PASS" starttime="20170825 15:15:18.812"></status>
</kw>
<status endtime="20170825 15:15:19.019" status="PASS" starttime="20170825 15:15:18.811"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:19.019">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:15:19.019" status="PASS" starttime="20170825 15:15:19.019"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:19.021">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:15:19.021" status="PASS" starttime="20170825 15:15:19.021"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:19.022">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:15:19.022" status="PASS" starttime="20170825 15:15:19.022"></status>
</kw>
<status endtime="20170825 15:15:19.023" status="PASS" starttime="20170825 15:15:19.022"></status>
</kw>
<status endtime="20170825 15:15:19.023" status="PASS" starttime="20170825 15:15:19.020"></status>
</kw>
<status endtime="20170825 15:15:19.023" status="PASS" starttime="20170825 15:15:19.020"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:19.281">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:15:19.281">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:15:19.281" status="PASS" starttime="20170825 15:15:19.023"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:19.283">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:15:19.283" status="PASS" starttime="20170825 15:15:19.283"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:19.284">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:15:19.284" status="PASS" starttime="20170825 15:15:19.284"></status>
</kw>
<status endtime="20170825 15:15:19.284" status="PASS" starttime="20170825 15:15:19.283"></status>
</kw>
<status endtime="20170825 15:15:19.285" status="PASS" starttime="20170825 15:15:19.282"></status>
</kw>
<status endtime="20170825 15:15:19.285" status="PASS" starttime="20170825 15:15:19.282"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:15:19.285">Delete All Sessions</msg>
<status endtime="20170825 15:15:19.285" status="PASS" starttime="20170825 15:15:19.285"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:19.285">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:15:19.285" status="PASS" starttime="20170825 15:15:18.810"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:19.286">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:15:19.286" status="PASS" starttime="20170825 15:15:19.286"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:19.286">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:15:19.287">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:15:19.287">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:15:19.287" status="PASS" starttime="20170825 15:15:19.286"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:19.287">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170825 15:15:19.287" status="PASS" starttime="20170825 15:15:18.810"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:19.287">${host_state} = Running</msg>
<status endtime="20170825 15:15:19.288" status="PASS" starttime="20170825 15:15:18.809"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170825 15:15:19.288" status="PASS" starttime="20170825 15:15:19.288"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<doc>Get the boot progress and return it.</doc>
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Set Boot Progress Method" library="utils">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg level="INFO" timestamp="20170825 15:15:19.292">Returning from the enclosing user keyword.</msg>
<status endtime="20170825 15:15:19.292" status="PASS" starttime="20170825 15:15:19.292"></status>
</kw>
<status endtime="20170825 15:15:19.293" status="PASS" starttime="20170825 15:15:19.291"></status>
</kw>
<status endtime="20170825 15:15:19.293" status="PASS" starttime="20170825 15:15:19.291"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="New Get Boot Progress" library="utils">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:19.299">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:15:19.300" status="PASS" starttime="20170825 15:15:19.299"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:19.300">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:15:19.300" status="PASS" starttime="20170825 15:15:19.300"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:19.301">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:15:19.301" status="PASS" starttime="20170825 15:15:19.301"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:19.302">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:15:19.302" status="PASS" starttime="20170825 15:15:19.302"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:19.494">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:15:19.494" status="PASS" starttime="20170825 15:15:19.303"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:19.494">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:15:19.495">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:15:19.495" status="PASS" starttime="20170825 15:15:19.303"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:19.495">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:15:19.495" status="PASS" starttime="20170825 15:15:19.495"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:19.496">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:15:19.496" status="PASS" starttime="20170825 15:15:19.495"></status>
</kw>
<status endtime="20170825 15:15:19.496" status="PASS" starttime="20170825 15:15:19.298"></status>
</kw>
<status endtime="20170825 15:15:19.496" status="PASS" starttime="20170825 15:15:19.297"></status>
</kw>
<status endtime="20170825 15:15:19.496" status="PASS" starttime="20170825 15:15:19.296"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:19.497">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170825 15:15:19.497" status="PASS" starttime="20170825 15:15:19.496"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:19.499">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:15:19.499" status="PASS" starttime="20170825 15:15:19.498"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:19.500">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:15:19.500" status="PASS" starttime="20170825 15:15:19.500"></status>
</kw>
<status endtime="20170825 15:15:19.501" status="PASS" starttime="20170825 15:15:19.499"></status>
</kw>
<status endtime="20170825 15:15:19.501" status="PASS" starttime="20170825 15:15:19.498"></status>
</kw>
<status endtime="20170825 15:15:19.501" status="PASS" starttime="20170825 15:15:19.497"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:19.602">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:15:19.602">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:15:19.602" status="PASS" starttime="20170825 15:15:19.501"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:19.604">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:15:19.604" status="PASS" starttime="20170825 15:15:19.603"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:19.605">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:15:19.605" status="PASS" starttime="20170825 15:15:19.604"></status>
</kw>
<status endtime="20170825 15:15:19.605" status="PASS" starttime="20170825 15:15:19.604"></status>
</kw>
<status endtime="20170825 15:15:19.605" status="PASS" starttime="20170825 15:15:19.603"></status>
</kw>
<status endtime="20170825 15:15:19.605" status="PASS" starttime="20170825 15:15:19.602"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:15:19.605">Delete All Sessions</msg>
<status endtime="20170825 15:15:19.606" status="PASS" starttime="20170825 15:15:19.605"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:19.606">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:15:19.606" status="PASS" starttime="20170825 15:15:19.295"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:19.606">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:15:19.606" status="PASS" starttime="20170825 15:15:19.606"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:19.607">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:15:19.607">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:15:19.607">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:15:19.607" status="PASS" starttime="20170825 15:15:19.607"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:19.607">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:15:19.607" status="PASS" starttime="20170825 15:15:19.294"></status>
</kw>
<status endtime="20170825 15:15:19.608" status="PASS" starttime="20170825 15:15:19.294"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:19.608">${state} = Unspecified</msg>
<status endtime="20170825 15:15:19.608" status="PASS" starttime="20170825 15:15:19.293"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:19.608">${boot_progress} = Unspecified</msg>
<status endtime="20170825 15:15:19.608" status="PASS" starttime="20170825 15:15:19.290"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>OSStart</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:15:19.609">Unspecified != OSStart</msg>
<status endtime="20170825 15:15:19.609" status="FAIL" starttime="20170825 15:15:19.608"></status>
</kw>
<status endtime="20170825 15:15:19.609" status="FAIL" starttime="20170825 15:15:19.290"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:19.609">${status} = False</msg>
<status endtime="20170825 15:15:19.609" status="PASS" starttime="20170825 15:15:19.289"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170825 15:15:19.610" status="PASS" starttime="20170825 15:15:19.609"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:19.613">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:15:19.614" status="PASS" starttime="20170825 15:15:19.613"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:19.614">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:15:19.614" status="PASS" starttime="20170825 15:15:19.614"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:19.615">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:15:19.615" status="PASS" starttime="20170825 15:15:19.615"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:19.616">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:15:19.616" status="PASS" starttime="20170825 15:15:19.615"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:19.818">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:15:19.818" status="PASS" starttime="20170825 15:15:19.616"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:19.818">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:15:19.818">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:15:19.819" status="PASS" starttime="20170825 15:15:19.616"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:19.819">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:15:19.819" status="PASS" starttime="20170825 15:15:19.819"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:19.820">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:15:19.820" status="PASS" starttime="20170825 15:15:19.819"></status>
</kw>
<status endtime="20170825 15:15:19.820" status="PASS" starttime="20170825 15:15:19.613"></status>
</kw>
<status endtime="20170825 15:15:19.820" status="PASS" starttime="20170825 15:15:19.612"></status>
</kw>
<status endtime="20170825 15:15:19.820" status="PASS" starttime="20170825 15:15:19.611"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:19.821">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170825 15:15:19.821" status="PASS" starttime="20170825 15:15:19.820"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:19.823">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:15:19.823" status="PASS" starttime="20170825 15:15:19.822"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:19.824">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:15:19.824" status="PASS" starttime="20170825 15:15:19.824"></status>
</kw>
<status endtime="20170825 15:15:19.824" status="PASS" starttime="20170825 15:15:19.823"></status>
</kw>
<status endtime="20170825 15:15:19.824" status="PASS" starttime="20170825 15:15:19.822"></status>
</kw>
<status endtime="20170825 15:15:19.824" status="PASS" starttime="20170825 15:15:19.821"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:19.926">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:15:19.926">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:15:19.926" status="PASS" starttime="20170825 15:15:19.824"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:19.928">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:15:19.928" status="PASS" starttime="20170825 15:15:19.927"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:19.929">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:15:19.929" status="PASS" starttime="20170825 15:15:19.928"></status>
</kw>
<status endtime="20170825 15:15:19.929" status="PASS" starttime="20170825 15:15:19.928"></status>
</kw>
<status endtime="20170825 15:15:19.929" status="PASS" starttime="20170825 15:15:19.927"></status>
</kw>
<status endtime="20170825 15:15:19.929" status="PASS" starttime="20170825 15:15:19.926"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:15:19.929">Delete All Sessions</msg>
<status endtime="20170825 15:15:19.930" status="PASS" starttime="20170825 15:15:19.929"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:19.930">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:15:19.930" status="PASS" starttime="20170825 15:15:19.611"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:19.930">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:15:19.931" status="PASS" starttime="20170825 15:15:19.930"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:19.931">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:15:19.931">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:15:19.931">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:15:19.931" status="PASS" starttime="20170825 15:15:19.931"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:19.932">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:15:19.932" status="PASS" starttime="20170825 15:15:19.610"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:19.932">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:15:19.932" status="PASS" starttime="20170825 15:15:19.610"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:19.932">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170825 15:15:19.933">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:15:19.933" status="FAIL" starttime="20170825 15:15:19.932"></status>
</kw>
<status endtime="20170825 15:15:19.933" status="FAIL" starttime="20170825 15:15:19.289"></status>
</kw>
<status endtime="20170825 15:15:19.933" status="FAIL" starttime="20170825 15:15:18.532"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:29.943">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:15:29.944" status="PASS" starttime="20170825 15:15:29.943"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:29.944">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:15:29.944" status="PASS" starttime="20170825 15:15:29.944"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:29.945">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:15:29.945" status="PASS" starttime="20170825 15:15:29.945"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:29.946">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:15:29.946" status="PASS" starttime="20170825 15:15:29.945"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:30.236">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:15:30.236" status="PASS" starttime="20170825 15:15:29.947"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:30.236">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:15:30.236">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:15:30.236" status="PASS" starttime="20170825 15:15:29.946"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:30.237">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:15:30.237" status="PASS" starttime="20170825 15:15:30.237"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:30.238">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:15:30.238" status="PASS" starttime="20170825 15:15:30.237"></status>
</kw>
<status endtime="20170825 15:15:30.238" status="PASS" starttime="20170825 15:15:29.937"></status>
</kw>
<status endtime="20170825 15:15:30.238" status="PASS" starttime="20170825 15:15:29.937"></status>
</kw>
<status endtime="20170825 15:15:30.238" status="PASS" starttime="20170825 15:15:29.936"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:30.239">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:15:30.239" status="PASS" starttime="20170825 15:15:30.238"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:30.241">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:15:30.241" status="PASS" starttime="20170825 15:15:30.240"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:30.242">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:15:30.242" status="PASS" starttime="20170825 15:15:30.241"></status>
</kw>
<status endtime="20170825 15:15:30.242" status="PASS" starttime="20170825 15:15:30.241"></status>
</kw>
<status endtime="20170825 15:15:30.242" status="PASS" starttime="20170825 15:15:30.239"></status>
</kw>
<status endtime="20170825 15:15:30.242" status="PASS" starttime="20170825 15:15:30.239"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:30.306">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:15:30.306">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:15:30.306" status="PASS" starttime="20170825 15:15:30.242"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:30.307">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:15:30.307" status="PASS" starttime="20170825 15:15:30.307"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:30.309">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:15:30.309" status="PASS" starttime="20170825 15:15:30.308"></status>
</kw>
<status endtime="20170825 15:15:30.309" status="PASS" starttime="20170825 15:15:30.308"></status>
</kw>
<status endtime="20170825 15:15:30.309" status="PASS" starttime="20170825 15:15:30.306"></status>
</kw>
<status endtime="20170825 15:15:30.309" status="PASS" starttime="20170825 15:15:30.306"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:15:30.309">Delete All Sessions</msg>
<status endtime="20170825 15:15:30.310" status="PASS" starttime="20170825 15:15:30.309"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:30.310">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:15:30.310" status="PASS" starttime="20170825 15:15:29.935"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:30.310">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:15:30.310" status="PASS" starttime="20170825 15:15:30.310"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:30.311">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:15:30.311">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:15:30.311">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:15:30.311" status="PASS" starttime="20170825 15:15:30.311"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:30.311">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:15:30.312" status="PASS" starttime="20170825 15:15:29.935"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:30.312">${power_state} = On</msg>
<status endtime="20170825 15:15:30.312" status="PASS" starttime="20170825 15:15:29.934"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:15:30.312" status="PASS" starttime="20170825 15:15:30.312"></status>
</kw>
<status endtime="20170825 15:15:30.313" status="PASS" starttime="20170825 15:15:29.934"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:30.316">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:15:30.316" status="PASS" starttime="20170825 15:15:30.316"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:30.317">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:15:30.317" status="PASS" starttime="20170825 15:15:30.317"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:30.318">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:15:30.318" status="PASS" starttime="20170825 15:15:30.317"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:30.318">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:15:30.318" status="PASS" starttime="20170825 15:15:30.318"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:30.519">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:15:30.520" status="PASS" starttime="20170825 15:15:30.319"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:30.520">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:15:30.520">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:15:30.520" status="PASS" starttime="20170825 15:15:30.319"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:30.520">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:15:30.521" status="PASS" starttime="20170825 15:15:30.520"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:30.521">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:15:30.522" status="PASS" starttime="20170825 15:15:30.521"></status>
</kw>
<status endtime="20170825 15:15:30.522" status="PASS" starttime="20170825 15:15:30.315"></status>
</kw>
<status endtime="20170825 15:15:30.522" status="PASS" starttime="20170825 15:15:30.315"></status>
</kw>
<status endtime="20170825 15:15:30.522" status="PASS" starttime="20170825 15:15:30.314"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:30.523">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:15:30.523" status="PASS" starttime="20170825 15:15:30.522"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:30.526">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:15:30.526" status="PASS" starttime="20170825 15:15:30.525"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:30.527">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:15:30.528" status="PASS" starttime="20170825 15:15:30.527"></status>
</kw>
<status endtime="20170825 15:15:30.528" status="PASS" starttime="20170825 15:15:30.527"></status>
</kw>
<status endtime="20170825 15:15:30.528" status="PASS" starttime="20170825 15:15:30.524"></status>
</kw>
<status endtime="20170825 15:15:30.528" status="PASS" starttime="20170825 15:15:30.523"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:30.618">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:15:30.618">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:15:30.618" status="PASS" starttime="20170825 15:15:30.528"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:30.620">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:15:30.620" status="PASS" starttime="20170825 15:15:30.619"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:30.621">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:15:30.621" status="PASS" starttime="20170825 15:15:30.621"></status>
</kw>
<status endtime="20170825 15:15:30.621" status="PASS" starttime="20170825 15:15:30.620"></status>
</kw>
<status endtime="20170825 15:15:30.621" status="PASS" starttime="20170825 15:15:30.619"></status>
</kw>
<status endtime="20170825 15:15:30.621" status="PASS" starttime="20170825 15:15:30.619"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:15:30.622">Delete All Sessions</msg>
<status endtime="20170825 15:15:30.622" status="PASS" starttime="20170825 15:15:30.622"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:30.622">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:15:30.622" status="PASS" starttime="20170825 15:15:30.314"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:30.623">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:15:30.623" status="PASS" starttime="20170825 15:15:30.622"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:30.623">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:15:30.623">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:15:30.623">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:15:30.623" status="PASS" starttime="20170825 15:15:30.623"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:30.624">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170825 15:15:30.624" status="PASS" starttime="20170825 15:15:30.313"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:30.624">${host_state} = Running</msg>
<status endtime="20170825 15:15:30.624" status="PASS" starttime="20170825 15:15:30.313"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170825 15:15:30.625" status="PASS" starttime="20170825 15:15:30.624"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<doc>Get the boot progress and return it.</doc>
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Set Boot Progress Method" library="utils">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg level="INFO" timestamp="20170825 15:15:30.627">Returning from the enclosing user keyword.</msg>
<status endtime="20170825 15:15:30.628" status="PASS" starttime="20170825 15:15:30.627"></status>
</kw>
<status endtime="20170825 15:15:30.628" status="PASS" starttime="20170825 15:15:30.627"></status>
</kw>
<status endtime="20170825 15:15:30.628" status="PASS" starttime="20170825 15:15:30.626"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="New Get Boot Progress" library="utils">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:30.634">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:15:30.634" status="PASS" starttime="20170825 15:15:30.633"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:30.635">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:15:30.635" status="PASS" starttime="20170825 15:15:30.634"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:30.635">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:15:30.635" status="PASS" starttime="20170825 15:15:30.635"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:30.636">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:15:30.636" status="PASS" starttime="20170825 15:15:30.635"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:30.828">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:15:30.828" status="PASS" starttime="20170825 15:15:30.637"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:30.828">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:15:30.828">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:15:30.828" status="PASS" starttime="20170825 15:15:30.636"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:30.829">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:15:30.829" status="PASS" starttime="20170825 15:15:30.829"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:30.830">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:15:30.830" status="PASS" starttime="20170825 15:15:30.829"></status>
</kw>
<status endtime="20170825 15:15:30.830" status="PASS" starttime="20170825 15:15:30.633"></status>
</kw>
<status endtime="20170825 15:15:30.830" status="PASS" starttime="20170825 15:15:30.632"></status>
</kw>
<status endtime="20170825 15:15:30.830" status="PASS" starttime="20170825 15:15:30.631"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:30.831">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170825 15:15:30.831" status="PASS" starttime="20170825 15:15:30.830"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:30.833">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:15:30.833" status="PASS" starttime="20170825 15:15:30.832"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:30.834">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:15:30.834" status="PASS" starttime="20170825 15:15:30.834"></status>
</kw>
<status endtime="20170825 15:15:30.834" status="PASS" starttime="20170825 15:15:30.833"></status>
</kw>
<status endtime="20170825 15:15:30.835" status="PASS" starttime="20170825 15:15:30.831"></status>
</kw>
<status endtime="20170825 15:15:30.835" status="PASS" starttime="20170825 15:15:30.831"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:30.925">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:15:30.925">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:15:30.925" status="PASS" starttime="20170825 15:15:30.835"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:30.926">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:15:30.927" status="PASS" starttime="20170825 15:15:30.926"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:30.928">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:15:30.928" status="PASS" starttime="20170825 15:15:30.927"></status>
</kw>
<status endtime="20170825 15:15:30.928" status="PASS" starttime="20170825 15:15:30.927"></status>
</kw>
<status endtime="20170825 15:15:30.928" status="PASS" starttime="20170825 15:15:30.925"></status>
</kw>
<status endtime="20170825 15:15:30.928" status="PASS" starttime="20170825 15:15:30.925"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:15:30.929">Delete All Sessions</msg>
<status endtime="20170825 15:15:30.929" status="PASS" starttime="20170825 15:15:30.928"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:30.929">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:15:30.929" status="PASS" starttime="20170825 15:15:30.630"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:30.929">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:15:30.929" status="PASS" starttime="20170825 15:15:30.929"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:30.930">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:15:30.930">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:15:30.930">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:15:30.930" status="PASS" starttime="20170825 15:15:30.930"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:30.930">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:15:30.931" status="PASS" starttime="20170825 15:15:30.629"></status>
</kw>
<status endtime="20170825 15:15:30.931" status="PASS" starttime="20170825 15:15:30.629"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:30.931">${state} = Unspecified</msg>
<status endtime="20170825 15:15:30.931" status="PASS" starttime="20170825 15:15:30.628"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:30.931">${boot_progress} = Unspecified</msg>
<status endtime="20170825 15:15:30.931" status="PASS" starttime="20170825 15:15:30.626"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>OSStart</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:15:30.932">Unspecified != OSStart</msg>
<status endtime="20170825 15:15:30.932" status="FAIL" starttime="20170825 15:15:30.931"></status>
</kw>
<status endtime="20170825 15:15:30.932" status="FAIL" starttime="20170825 15:15:30.625"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:30.932">${status} = False</msg>
<status endtime="20170825 15:15:30.932" status="PASS" starttime="20170825 15:15:30.625"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status endtime="20170825 15:15:30.933" status="PASS" starttime="20170825 15:15:30.932"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:30.937">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:15:30.938" status="PASS" starttime="20170825 15:15:30.937"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:30.938">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:15:30.939" status="PASS" starttime="20170825 15:15:30.938"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:30.939">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:15:30.940" status="PASS" starttime="20170825 15:15:30.939"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:30.940">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:15:30.940" status="PASS" starttime="20170825 15:15:30.940"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:31.142">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:15:31.142" status="PASS" starttime="20170825 15:15:30.941"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:31.142">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:15:31.142">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:15:31.142" status="PASS" starttime="20170825 15:15:30.941"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:31.143">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:15:31.143" status="PASS" starttime="20170825 15:15:31.142"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:31.144">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:15:31.144" status="PASS" starttime="20170825 15:15:31.143"></status>
</kw>
<status endtime="20170825 15:15:31.144" status="PASS" starttime="20170825 15:15:30.936"></status>
</kw>
<status endtime="20170825 15:15:31.144" status="PASS" starttime="20170825 15:15:30.935"></status>
</kw>
<status endtime="20170825 15:15:31.144" status="PASS" starttime="20170825 15:15:30.935"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:31.145">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status endtime="20170825 15:15:31.145" status="PASS" starttime="20170825 15:15:31.145"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:31.149">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:15:31.149" status="PASS" starttime="20170825 15:15:31.147"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:31.150">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status endtime="20170825 15:15:31.150" status="PASS" starttime="20170825 15:15:31.150"></status>
</kw>
<status endtime="20170825 15:15:31.150" status="PASS" starttime="20170825 15:15:31.149"></status>
</kw>
<status endtime="20170825 15:15:31.151" status="PASS" starttime="20170825 15:15:31.146"></status>
</kw>
<status endtime="20170825 15:15:31.151" status="PASS" starttime="20170825 15:15:31.146"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:31.276">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:15:31.276">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:15:31.276" status="PASS" starttime="20170825 15:15:31.151"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:31.278">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:15:31.278" status="PASS" starttime="20170825 15:15:31.277"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:31.278">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:15:31.279" status="PASS" starttime="20170825 15:15:31.278"></status>
</kw>
<status endtime="20170825 15:15:31.279" status="PASS" starttime="20170825 15:15:31.278"></status>
</kw>
<status endtime="20170825 15:15:31.279" status="PASS" starttime="20170825 15:15:31.277"></status>
</kw>
<status endtime="20170825 15:15:31.279" status="PASS" starttime="20170825 15:15:31.276"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:15:31.279">Delete All Sessions</msg>
<status endtime="20170825 15:15:31.279" status="PASS" starttime="20170825 15:15:31.279"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:31.279">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:15:31.280" status="PASS" starttime="20170825 15:15:30.934"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:31.280">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:15:31.280" status="PASS" starttime="20170825 15:15:31.280"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:31.281">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:15:31.281">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:15:31.281">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:15:31.281" status="PASS" starttime="20170825 15:15:31.280"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:31.281">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:15:31.281" status="PASS" starttime="20170825 15:15:30.933"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:31.281">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:15:31.282" status="PASS" starttime="20170825 15:15:30.933"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:31.282">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170825 15:15:31.282">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status endtime="20170825 15:15:31.282" status="FAIL" starttime="20170825 15:15:31.282"></status>
</kw>
<status endtime="20170825 15:15:31.283" status="FAIL" starttime="20170825 15:15:30.625"></status>
</kw>
<status endtime="20170825 15:15:31.283" status="FAIL" starttime="20170825 15:15:29.933"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:41.287">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:15:41.288" status="PASS" starttime="20170825 15:15:41.287"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:41.288">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:15:41.288" status="PASS" starttime="20170825 15:15:41.288"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:41.289">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:15:41.289" status="PASS" starttime="20170825 15:15:41.289"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:41.290">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:15:41.290" status="PASS" starttime="20170825 15:15:41.289"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:41.471">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:15:41.471" status="PASS" starttime="20170825 15:15:41.290"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:41.472">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:15:41.472">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:15:41.472" status="PASS" starttime="20170825 15:15:41.290"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:41.472">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:15:41.472" status="PASS" starttime="20170825 15:15:41.472"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:41.473">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:15:41.473" status="PASS" starttime="20170825 15:15:41.473"></status>
</kw>
<status endtime="20170825 15:15:41.474" status="PASS" starttime="20170825 15:15:41.287"></status>
</kw>
<status endtime="20170825 15:15:41.474" status="PASS" starttime="20170825 15:15:41.286"></status>
</kw>
<status endtime="20170825 15:15:41.474" status="PASS" starttime="20170825 15:15:41.286"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:41.475">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:15:41.475" status="PASS" starttime="20170825 15:15:41.474"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:41.478">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:15:41.478" status="PASS" starttime="20170825 15:15:41.477"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:41.479">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:15:41.479" status="PASS" starttime="20170825 15:15:41.478"></status>
</kw>
<status endtime="20170825 15:15:41.479" status="PASS" starttime="20170825 15:15:41.478"></status>
</kw>
<status endtime="20170825 15:15:41.479" status="PASS" starttime="20170825 15:15:41.476"></status>
</kw>
<status endtime="20170825 15:15:41.479" status="PASS" starttime="20170825 15:15:41.475"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:41.561">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:15:41.561">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:15:41.561" status="PASS" starttime="20170825 15:15:41.479"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:41.563">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:15:41.563" status="PASS" starttime="20170825 15:15:41.562"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:41.564">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:15:41.564" status="PASS" starttime="20170825 15:15:41.563"></status>
</kw>
<status endtime="20170825 15:15:41.564" status="PASS" starttime="20170825 15:15:41.563"></status>
</kw>
<status endtime="20170825 15:15:41.564" status="PASS" starttime="20170825 15:15:41.562"></status>
</kw>
<status endtime="20170825 15:15:41.564" status="PASS" starttime="20170825 15:15:41.561"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:15:41.564">Delete All Sessions</msg>
<status endtime="20170825 15:15:41.565" status="PASS" starttime="20170825 15:15:41.564"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:41.565">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:15:41.565" status="PASS" starttime="20170825 15:15:41.285"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:41.566">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:15:41.566" status="PASS" starttime="20170825 15:15:41.565"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:41.566">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:15:41.566">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:15:41.566">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:15:41.566" status="PASS" starttime="20170825 15:15:41.566"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:41.567">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:15:41.567" status="PASS" starttime="20170825 15:15:41.284"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:41.567">${power_state} = On</msg>
<status endtime="20170825 15:15:41.567" status="PASS" starttime="20170825 15:15:41.284"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:15:41.567" status="PASS" starttime="20170825 15:15:41.567"></status>
</kw>
<status endtime="20170825 15:15:41.568" status="PASS" starttime="20170825 15:15:41.284"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:41.571">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:15:41.572" status="PASS" starttime="20170825 15:15:41.571"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:41.572">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:15:41.572" status="PASS" starttime="20170825 15:15:41.572"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:41.573">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:15:41.573" status="PASS" starttime="20170825 15:15:41.573"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:41.574">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:15:41.574" status="PASS" starttime="20170825 15:15:41.573"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:41.780">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:15:41.781" status="PASS" starttime="20170825 15:15:41.575"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:41.781">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:15:41.781">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:15:41.781" status="PASS" starttime="20170825 15:15:41.574"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:41.781">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:15:41.781" status="PASS" starttime="20170825 15:15:41.781"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:41.782">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:15:41.782" status="PASS" starttime="20170825 15:15:41.782"></status>
</kw>
<status endtime="20170825 15:15:41.782" status="PASS" starttime="20170825 15:15:41.570"></status>
</kw>
<status endtime="20170825 15:15:41.782" status="PASS" starttime="20170825 15:15:41.570"></status>
</kw>
<status endtime="20170825 15:15:41.783" status="PASS" starttime="20170825 15:15:41.569"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:41.783">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:15:41.783" status="PASS" starttime="20170825 15:15:41.783"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:41.785">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:15:41.785" status="PASS" starttime="20170825 15:15:41.785"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:41.786">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:15:41.786" status="PASS" starttime="20170825 15:15:41.786"></status>
</kw>
<status endtime="20170825 15:15:41.786" status="PASS" starttime="20170825 15:15:41.785"></status>
</kw>
<status endtime="20170825 15:15:41.786" status="PASS" starttime="20170825 15:15:41.784"></status>
</kw>
<status endtime="20170825 15:15:41.787" status="PASS" starttime="20170825 15:15:41.783"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:41.896">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:15:41.896">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:15:41.896" status="PASS" starttime="20170825 15:15:41.787"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:41.898">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:15:41.898" status="PASS" starttime="20170825 15:15:41.897"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:41.898">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:15:41.899" status="PASS" starttime="20170825 15:15:41.898"></status>
</kw>
<status endtime="20170825 15:15:41.899" status="PASS" starttime="20170825 15:15:41.898"></status>
</kw>
<status endtime="20170825 15:15:41.899" status="PASS" starttime="20170825 15:15:41.897"></status>
</kw>
<status endtime="20170825 15:15:41.899" status="PASS" starttime="20170825 15:15:41.896"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:15:41.899">Delete All Sessions</msg>
<status endtime="20170825 15:15:41.899" status="PASS" starttime="20170825 15:15:41.899"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:41.900">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:15:41.900" status="PASS" starttime="20170825 15:15:41.569"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:41.900">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:15:41.900" status="PASS" starttime="20170825 15:15:41.900"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:41.901">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:15:41.901">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:15:41.901">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:15:41.901" status="PASS" starttime="20170825 15:15:41.901"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:41.901">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170825 15:15:41.901" status="PASS" starttime="20170825 15:15:41.568"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:41.902">${host_state} = Quiesced</msg>
<status endtime="20170825 15:15:41.902" status="PASS" starttime="20170825 15:15:41.568"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:15:41.902">Running != Quiesced</msg>
<status endtime="20170825 15:15:41.902" status="FAIL" starttime="20170825 15:15:41.902"></status>
</kw>
<status endtime="20170825 15:15:41.903" status="FAIL" starttime="20170825 15:15:41.283"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:51.908">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:15:51.908" status="PASS" starttime="20170825 15:15:51.907"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:51.909">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:15:51.909" status="PASS" starttime="20170825 15:15:51.908"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:51.909">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:15:51.909" status="PASS" starttime="20170825 15:15:51.909"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:51.910">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:15:51.910" status="PASS" starttime="20170825 15:15:51.910"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:52.138">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:15:52.138" status="PASS" starttime="20170825 15:15:51.911"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:52.139">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:15:52.139">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:15:52.139" status="PASS" starttime="20170825 15:15:51.910"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:52.139">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:15:52.140" status="PASS" starttime="20170825 15:15:52.139"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:52.140">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:15:52.140" status="PASS" starttime="20170825 15:15:52.140"></status>
</kw>
<status endtime="20170825 15:15:52.140" status="PASS" starttime="20170825 15:15:51.907"></status>
</kw>
<status endtime="20170825 15:15:52.140" status="PASS" starttime="20170825 15:15:51.906"></status>
</kw>
<status endtime="20170825 15:15:52.141" status="PASS" starttime="20170825 15:15:51.906"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:52.141">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:15:52.141" status="PASS" starttime="20170825 15:15:52.141"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:52.144">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:15:52.144" status="PASS" starttime="20170825 15:15:52.143"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:52.145">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:15:52.145" status="PASS" starttime="20170825 15:15:52.144"></status>
</kw>
<status endtime="20170825 15:15:52.145" status="PASS" starttime="20170825 15:15:52.144"></status>
</kw>
<status endtime="20170825 15:15:52.145" status="PASS" starttime="20170825 15:15:52.142"></status>
</kw>
<status endtime="20170825 15:15:52.145" status="PASS" starttime="20170825 15:15:52.141"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:52.209">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:15:52.209">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:15:52.209" status="PASS" starttime="20170825 15:15:52.145"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:52.211">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:15:52.211" status="PASS" starttime="20170825 15:15:52.211"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:52.212">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:15:52.212" status="PASS" starttime="20170825 15:15:52.212"></status>
</kw>
<status endtime="20170825 15:15:52.212" status="PASS" starttime="20170825 15:15:52.211"></status>
</kw>
<status endtime="20170825 15:15:52.212" status="PASS" starttime="20170825 15:15:52.210"></status>
</kw>
<status endtime="20170825 15:15:52.212" status="PASS" starttime="20170825 15:15:52.210"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:15:52.213">Delete All Sessions</msg>
<status endtime="20170825 15:15:52.213" status="PASS" starttime="20170825 15:15:52.213"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:52.213">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:15:52.213" status="PASS" starttime="20170825 15:15:51.905"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:52.214">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:15:52.214" status="PASS" starttime="20170825 15:15:52.213"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:52.214">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:15:52.214">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:15:52.215">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:15:52.215" status="PASS" starttime="20170825 15:15:52.214"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:52.215">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:15:52.215" status="PASS" starttime="20170825 15:15:51.905"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:52.215">${power_state} = On</msg>
<status endtime="20170825 15:15:52.215" status="PASS" starttime="20170825 15:15:51.904"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:15:52.216" status="PASS" starttime="20170825 15:15:52.215"></status>
</kw>
<status endtime="20170825 15:15:52.216" status="PASS" starttime="20170825 15:15:51.904"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:52.219">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:15:52.220" status="PASS" starttime="20170825 15:15:52.219"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:52.220">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:15:52.220" status="PASS" starttime="20170825 15:15:52.220"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:52.221">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:15:52.221" status="PASS" starttime="20170825 15:15:52.221"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:52.222">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:15:52.222" status="PASS" starttime="20170825 15:15:52.221"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:52.424">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:15:52.425" status="PASS" starttime="20170825 15:15:52.222"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:52.425">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:15:52.425">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:15:52.425" status="PASS" starttime="20170825 15:15:52.222"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:52.425">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:15:52.425" status="PASS" starttime="20170825 15:15:52.425"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:52.426">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:15:52.426" status="PASS" starttime="20170825 15:15:52.426"></status>
</kw>
<status endtime="20170825 15:15:52.426" status="PASS" starttime="20170825 15:15:52.218"></status>
</kw>
<status endtime="20170825 15:15:52.426" status="PASS" starttime="20170825 15:15:52.218"></status>
</kw>
<status endtime="20170825 15:15:52.426" status="PASS" starttime="20170825 15:15:52.217"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:52.427">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:15:52.427" status="PASS" starttime="20170825 15:15:52.427"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:52.429">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:15:52.429" status="PASS" starttime="20170825 15:15:52.428"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:52.430">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:15:52.430" status="PASS" starttime="20170825 15:15:52.430"></status>
</kw>
<status endtime="20170825 15:15:52.430" status="PASS" starttime="20170825 15:15:52.429"></status>
</kw>
<status endtime="20170825 15:15:52.430" status="PASS" starttime="20170825 15:15:52.428"></status>
</kw>
<status endtime="20170825 15:15:52.430" status="PASS" starttime="20170825 15:15:52.427"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:52.613">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:15:52.614">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:15:52.614" status="PASS" starttime="20170825 15:15:52.431"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:52.615">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:15:52.615" status="PASS" starttime="20170825 15:15:52.615"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:52.616">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:15:52.616" status="PASS" starttime="20170825 15:15:52.616"></status>
</kw>
<status endtime="20170825 15:15:52.617" status="PASS" starttime="20170825 15:15:52.616"></status>
</kw>
<status endtime="20170825 15:15:52.617" status="PASS" starttime="20170825 15:15:52.614"></status>
</kw>
<status endtime="20170825 15:15:52.617" status="PASS" starttime="20170825 15:15:52.614"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:15:52.617">Delete All Sessions</msg>
<status endtime="20170825 15:15:52.617" status="PASS" starttime="20170825 15:15:52.617"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:52.617">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:15:52.617" status="PASS" starttime="20170825 15:15:52.217"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:15:52.618">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:15:52.618" status="PASS" starttime="20170825 15:15:52.618"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:15:52.619">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:15:52.619">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:15:52.619">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:15:52.619" status="PASS" starttime="20170825 15:15:52.618"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:52.619">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170825 15:15:52.619" status="PASS" starttime="20170825 15:15:52.216"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:15:52.619">${host_state} = Quiesced</msg>
<status endtime="20170825 15:15:52.619" status="PASS" starttime="20170825 15:15:52.216"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:15:52.620">Running != Quiesced</msg>
<status endtime="20170825 15:15:52.620" status="FAIL" starttime="20170825 15:15:52.620"></status>
</kw>
<status endtime="20170825 15:15:52.620" status="FAIL" starttime="20170825 15:15:51.903"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:02.626">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:16:02.626" status="PASS" starttime="20170825 15:16:02.625"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:02.627">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:16:02.627" status="PASS" starttime="20170825 15:16:02.626"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:02.627">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:16:02.627" status="PASS" starttime="20170825 15:16:02.627"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:02.628">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:16:02.628" status="PASS" starttime="20170825 15:16:02.627"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:02.816">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:16:02.816" status="PASS" starttime="20170825 15:16:02.629"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:16:02.816">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:16:02.816">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:16:02.816" status="PASS" starttime="20170825 15:16:02.628"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:02.817">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:16:02.817" status="PASS" starttime="20170825 15:16:02.817"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:02.818">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:16:02.818" status="PASS" starttime="20170825 15:16:02.817"></status>
</kw>
<status endtime="20170825 15:16:02.818" status="PASS" starttime="20170825 15:16:02.624"></status>
</kw>
<status endtime="20170825 15:16:02.818" status="PASS" starttime="20170825 15:16:02.624"></status>
</kw>
<status endtime="20170825 15:16:02.818" status="PASS" starttime="20170825 15:16:02.623"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:02.819">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:16:02.819" status="PASS" starttime="20170825 15:16:02.818"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:02.821">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:16:02.821" status="PASS" starttime="20170825 15:16:02.820"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:02.822">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:16:02.822" status="PASS" starttime="20170825 15:16:02.821"></status>
</kw>
<status endtime="20170825 15:16:02.822" status="PASS" starttime="20170825 15:16:02.821"></status>
</kw>
<status endtime="20170825 15:16:02.822" status="PASS" starttime="20170825 15:16:02.819"></status>
</kw>
<status endtime="20170825 15:16:02.822" status="PASS" starttime="20170825 15:16:02.819"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:02.887">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:16:02.888">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:16:02.888" status="PASS" starttime="20170825 15:16:02.822"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:02.889">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:16:02.889" status="PASS" starttime="20170825 15:16:02.889"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:02.894">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:16:02.894" status="PASS" starttime="20170825 15:16:02.893"></status>
</kw>
<status endtime="20170825 15:16:02.894" status="PASS" starttime="20170825 15:16:02.890"></status>
</kw>
<status endtime="20170825 15:16:02.894" status="PASS" starttime="20170825 15:16:02.888"></status>
</kw>
<status endtime="20170825 15:16:02.894" status="PASS" starttime="20170825 15:16:02.888"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:16:02.894">Delete All Sessions</msg>
<status endtime="20170825 15:16:02.895" status="PASS" starttime="20170825 15:16:02.894"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:16:02.895">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:16:02.895" status="PASS" starttime="20170825 15:16:02.623"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:02.895">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:16:02.895" status="PASS" starttime="20170825 15:16:02.895"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:02.896">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:16:02.896">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:16:02.896">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:16:02.896" status="PASS" starttime="20170825 15:16:02.896"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:16:02.896">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:16:02.897" status="PASS" starttime="20170825 15:16:02.622"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:16:02.897">${power_state} = On</msg>
<status endtime="20170825 15:16:02.897" status="PASS" starttime="20170825 15:16:02.622"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:16:02.897" status="PASS" starttime="20170825 15:16:02.897"></status>
</kw>
<status endtime="20170825 15:16:02.897" status="PASS" starttime="20170825 15:16:02.621"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:02.902">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:16:02.902" status="PASS" starttime="20170825 15:16:02.901"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:02.903">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:16:02.903" status="PASS" starttime="20170825 15:16:02.902"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:02.903">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:16:02.904" status="PASS" starttime="20170825 15:16:02.903"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:02.904">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:16:02.904" status="PASS" starttime="20170825 15:16:02.904"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:03.094">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:16:03.094" status="PASS" starttime="20170825 15:16:02.906"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:16:03.095">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:16:03.095">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:16:03.095" status="PASS" starttime="20170825 15:16:02.905"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:03.096">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:16:03.096" status="PASS" starttime="20170825 15:16:03.095"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:03.097">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:16:03.097" status="PASS" starttime="20170825 15:16:03.096"></status>
</kw>
<status endtime="20170825 15:16:03.097" status="PASS" starttime="20170825 15:16:02.901"></status>
</kw>
<status endtime="20170825 15:16:03.097" status="PASS" starttime="20170825 15:16:02.900"></status>
</kw>
<status endtime="20170825 15:16:03.097" status="PASS" starttime="20170825 15:16:02.900"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:03.098">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:16:03.098" status="PASS" starttime="20170825 15:16:03.098"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:03.101">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:16:03.101" status="PASS" starttime="20170825 15:16:03.100"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:03.103">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:16:03.103" status="PASS" starttime="20170825 15:16:03.102"></status>
</kw>
<status endtime="20170825 15:16:03.103" status="PASS" starttime="20170825 15:16:03.102"></status>
</kw>
<status endtime="20170825 15:16:03.103" status="PASS" starttime="20170825 15:16:03.099"></status>
</kw>
<status endtime="20170825 15:16:03.103" status="PASS" starttime="20170825 15:16:03.099"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:03.235">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:16:03.235">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:16:03.235" status="PASS" starttime="20170825 15:16:03.104"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:03.237">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:16:03.237" status="PASS" starttime="20170825 15:16:03.236"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:03.238">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:16:03.238" status="PASS" starttime="20170825 15:16:03.238"></status>
</kw>
<status endtime="20170825 15:16:03.238" status="PASS" starttime="20170825 15:16:03.237"></status>
</kw>
<status endtime="20170825 15:16:03.238" status="PASS" starttime="20170825 15:16:03.236"></status>
</kw>
<status endtime="20170825 15:16:03.238" status="PASS" starttime="20170825 15:16:03.235"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:16:03.239">Delete All Sessions</msg>
<status endtime="20170825 15:16:03.239" status="PASS" starttime="20170825 15:16:03.238"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:16:03.239">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:16:03.239" status="PASS" starttime="20170825 15:16:02.899"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:03.239">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:16:03.240" status="PASS" starttime="20170825 15:16:03.239"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:03.240">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:16:03.240">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:16:03.240">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:16:03.240" status="PASS" starttime="20170825 15:16:03.240"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:16:03.241">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170825 15:16:03.241" status="PASS" starttime="20170825 15:16:02.898"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:16:03.241">${host_state} = Quiesced</msg>
<status endtime="20170825 15:16:03.241" status="PASS" starttime="20170825 15:16:02.898"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:16:03.242">Running != Quiesced</msg>
<status endtime="20170825 15:16:03.242" status="FAIL" starttime="20170825 15:16:03.241"></status>
</kw>
<status endtime="20170825 15:16:03.242" status="FAIL" starttime="20170825 15:16:02.621"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:13.247">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:16:13.247" status="PASS" starttime="20170825 15:16:13.246"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:13.248">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:16:13.248" status="PASS" starttime="20170825 15:16:13.247"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:13.248">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:16:13.248" status="PASS" starttime="20170825 15:16:13.248"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:13.249">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:16:13.249" status="PASS" starttime="20170825 15:16:13.249"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:13.437">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:16:13.437" status="PASS" starttime="20170825 15:16:13.250"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:16:13.437">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:16:13.437">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:16:13.437" status="PASS" starttime="20170825 15:16:13.250"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:13.438">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:16:13.438" status="PASS" starttime="20170825 15:16:13.438"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:13.439">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:16:13.439" status="PASS" starttime="20170825 15:16:13.438"></status>
</kw>
<status endtime="20170825 15:16:13.439" status="PASS" starttime="20170825 15:16:13.246"></status>
</kw>
<status endtime="20170825 15:16:13.439" status="PASS" starttime="20170825 15:16:13.246"></status>
</kw>
<status endtime="20170825 15:16:13.439" status="PASS" starttime="20170825 15:16:13.245"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:13.440">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:16:13.440" status="PASS" starttime="20170825 15:16:13.439"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:13.442">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:16:13.442" status="PASS" starttime="20170825 15:16:13.441"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:13.443">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:16:13.443" status="PASS" starttime="20170825 15:16:13.442"></status>
</kw>
<status endtime="20170825 15:16:13.443" status="PASS" starttime="20170825 15:16:13.442"></status>
</kw>
<status endtime="20170825 15:16:13.443" status="PASS" starttime="20170825 15:16:13.440"></status>
</kw>
<status endtime="20170825 15:16:13.443" status="PASS" starttime="20170825 15:16:13.440"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:13.509">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:16:13.510">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:16:13.510" status="PASS" starttime="20170825 15:16:13.443"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:13.512">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:16:13.512" status="PASS" starttime="20170825 15:16:13.511"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:13.513">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:16:13.513" status="PASS" starttime="20170825 15:16:13.512"></status>
</kw>
<status endtime="20170825 15:16:13.513" status="PASS" starttime="20170825 15:16:13.512"></status>
</kw>
<status endtime="20170825 15:16:13.513" status="PASS" starttime="20170825 15:16:13.510"></status>
</kw>
<status endtime="20170825 15:16:13.513" status="PASS" starttime="20170825 15:16:13.510"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:16:13.513">Delete All Sessions</msg>
<status endtime="20170825 15:16:13.513" status="PASS" starttime="20170825 15:16:13.513"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:16:13.514">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:16:13.514" status="PASS" starttime="20170825 15:16:13.244"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:13.514">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:16:13.514" status="PASS" starttime="20170825 15:16:13.514"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:13.515">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:16:13.515">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:16:13.515">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:16:13.515" status="PASS" starttime="20170825 15:16:13.515"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:16:13.515">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:16:13.517" status="PASS" starttime="20170825 15:16:13.244"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:16:13.517">${power_state} = On</msg>
<status endtime="20170825 15:16:13.517" status="PASS" starttime="20170825 15:16:13.243"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:16:13.518" status="PASS" starttime="20170825 15:16:13.517"></status>
</kw>
<status endtime="20170825 15:16:13.518" status="PASS" starttime="20170825 15:16:13.243"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:13.523">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:16:13.524" status="PASS" starttime="20170825 15:16:13.523"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:13.525">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:16:13.525" status="PASS" starttime="20170825 15:16:13.524"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:13.526">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:16:13.526" status="PASS" starttime="20170825 15:16:13.525"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:13.527">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:16:13.527" status="PASS" starttime="20170825 15:16:13.526"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:13.725">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:16:13.725" status="PASS" starttime="20170825 15:16:13.528"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:16:13.725">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:16:13.725">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:16:13.725" status="PASS" starttime="20170825 15:16:13.527"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:13.726">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:16:13.726" status="PASS" starttime="20170825 15:16:13.726"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:13.727">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:16:13.727" status="PASS" starttime="20170825 15:16:13.726"></status>
</kw>
<status endtime="20170825 15:16:13.727" status="PASS" starttime="20170825 15:16:13.522"></status>
</kw>
<status endtime="20170825 15:16:13.727" status="PASS" starttime="20170825 15:16:13.521"></status>
</kw>
<status endtime="20170825 15:16:13.727" status="PASS" starttime="20170825 15:16:13.520"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:13.727">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:16:13.728" status="PASS" starttime="20170825 15:16:13.727"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:13.730">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:16:13.730" status="PASS" starttime="20170825 15:16:13.729"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:13.731">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:16:13.731" status="PASS" starttime="20170825 15:16:13.731"></status>
</kw>
<status endtime="20170825 15:16:13.732" status="PASS" starttime="20170825 15:16:13.730"></status>
</kw>
<status endtime="20170825 15:16:13.732" status="PASS" starttime="20170825 15:16:13.728"></status>
</kw>
<status endtime="20170825 15:16:13.732" status="PASS" starttime="20170825 15:16:13.728"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:13.823">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:16:13.823">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:16:13.823" status="PASS" starttime="20170825 15:16:13.732"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:13.825">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:16:13.825" status="PASS" starttime="20170825 15:16:13.825"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:13.826">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:16:13.826" status="PASS" starttime="20170825 15:16:13.826"></status>
</kw>
<status endtime="20170825 15:16:13.827" status="PASS" starttime="20170825 15:16:13.825"></status>
</kw>
<status endtime="20170825 15:16:13.827" status="PASS" starttime="20170825 15:16:13.824"></status>
</kw>
<status endtime="20170825 15:16:13.827" status="PASS" starttime="20170825 15:16:13.824"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:16:13.827">Delete All Sessions</msg>
<status endtime="20170825 15:16:13.827" status="PASS" starttime="20170825 15:16:13.827"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:16:13.827">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:16:13.827" status="PASS" starttime="20170825 15:16:13.519"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:13.828">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:16:13.828" status="PASS" starttime="20170825 15:16:13.828"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:13.829">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:16:13.829">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:16:13.829">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:16:13.829" status="PASS" starttime="20170825 15:16:13.828"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:16:13.829">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170825 15:16:13.829" status="PASS" starttime="20170825 15:16:13.518"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:16:13.829">${host_state} = Quiesced</msg>
<status endtime="20170825 15:16:13.829" status="PASS" starttime="20170825 15:16:13.518"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:16:13.830">Running != Quiesced</msg>
<status endtime="20170825 15:16:13.830" status="FAIL" starttime="20170825 15:16:13.830"></status>
</kw>
<status endtime="20170825 15:16:13.830" status="FAIL" starttime="20170825 15:16:13.242"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:23.835">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:16:23.836" status="PASS" starttime="20170825 15:16:23.835"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:23.836">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:16:23.836" status="PASS" starttime="20170825 15:16:23.836"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:23.837">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:16:23.837" status="PASS" starttime="20170825 15:16:23.836"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:23.837">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:16:23.837" status="PASS" starttime="20170825 15:16:23.837"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:24.103">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:16:24.103" status="PASS" starttime="20170825 15:16:23.838"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:16:24.103">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:16:24.103">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:16:24.103" status="PASS" starttime="20170825 15:16:23.838"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:24.104">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:16:24.104" status="PASS" starttime="20170825 15:16:24.103"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:24.104">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:16:24.104" status="PASS" starttime="20170825 15:16:24.104"></status>
</kw>
<status endtime="20170825 15:16:24.105" status="PASS" starttime="20170825 15:16:23.834"></status>
</kw>
<status endtime="20170825 15:16:24.105" status="PASS" starttime="20170825 15:16:23.834"></status>
</kw>
<status endtime="20170825 15:16:24.105" status="PASS" starttime="20170825 15:16:23.833"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:24.105">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:16:24.105" status="PASS" starttime="20170825 15:16:24.105"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:24.107">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:16:24.107" status="PASS" starttime="20170825 15:16:24.107"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:24.108">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:16:24.108" status="PASS" starttime="20170825 15:16:24.108"></status>
</kw>
<status endtime="20170825 15:16:24.108" status="PASS" starttime="20170825 15:16:24.107"></status>
</kw>
<status endtime="20170825 15:16:24.109" status="PASS" starttime="20170825 15:16:24.106"></status>
</kw>
<status endtime="20170825 15:16:24.109" status="PASS" starttime="20170825 15:16:24.106"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:24.184">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:16:24.184">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:16:24.184" status="PASS" starttime="20170825 15:16:24.109"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:24.186">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:16:24.186" status="PASS" starttime="20170825 15:16:24.186"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:24.187">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:16:24.187" status="PASS" starttime="20170825 15:16:24.187"></status>
</kw>
<status endtime="20170825 15:16:24.187" status="PASS" starttime="20170825 15:16:24.186"></status>
</kw>
<status endtime="20170825 15:16:24.187" status="PASS" starttime="20170825 15:16:24.185"></status>
</kw>
<status endtime="20170825 15:16:24.187" status="PASS" starttime="20170825 15:16:24.185"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:16:24.188">Delete All Sessions</msg>
<status endtime="20170825 15:16:24.188" status="PASS" starttime="20170825 15:16:24.188"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:16:24.188">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:16:24.188" status="PASS" starttime="20170825 15:16:23.833"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:24.189">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:16:24.189" status="PASS" starttime="20170825 15:16:24.188"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:24.190">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:16:24.190">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:16:24.190">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:16:24.190" status="PASS" starttime="20170825 15:16:24.189"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:16:24.190">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:16:24.190" status="PASS" starttime="20170825 15:16:23.832"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:16:24.191">${power_state} = On</msg>
<status endtime="20170825 15:16:24.191" status="PASS" starttime="20170825 15:16:23.832"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:16:24.191" status="PASS" starttime="20170825 15:16:24.191"></status>
</kw>
<status endtime="20170825 15:16:24.191" status="PASS" starttime="20170825 15:16:23.831"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:24.195">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:16:24.196" status="PASS" starttime="20170825 15:16:24.195"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:24.196">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:16:24.196" status="PASS" starttime="20170825 15:16:24.196"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:24.197">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:16:24.197" status="PASS" starttime="20170825 15:16:24.196"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:24.197">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:16:24.198" status="PASS" starttime="20170825 15:16:24.197"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:24.386">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:16:24.386" status="PASS" starttime="20170825 15:16:24.198"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:16:24.386">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:16:24.386">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:16:24.386" status="PASS" starttime="20170825 15:16:24.198"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:24.387">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:16:24.387" status="PASS" starttime="20170825 15:16:24.386"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:24.387">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:16:24.387" status="PASS" starttime="20170825 15:16:24.387"></status>
</kw>
<status endtime="20170825 15:16:24.388" status="PASS" starttime="20170825 15:16:24.194"></status>
</kw>
<status endtime="20170825 15:16:24.388" status="PASS" starttime="20170825 15:16:24.194"></status>
</kw>
<status endtime="20170825 15:16:24.388" status="PASS" starttime="20170825 15:16:24.193"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:24.388">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:16:24.388" status="PASS" starttime="20170825 15:16:24.388"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:24.390">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:16:24.391" status="PASS" starttime="20170825 15:16:24.390"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:24.391">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:16:24.392" status="PASS" starttime="20170825 15:16:24.391"></status>
</kw>
<status endtime="20170825 15:16:24.392" status="PASS" starttime="20170825 15:16:24.391"></status>
</kw>
<status endtime="20170825 15:16:24.392" status="PASS" starttime="20170825 15:16:24.389"></status>
</kw>
<status endtime="20170825 15:16:24.392" status="PASS" starttime="20170825 15:16:24.389"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:24.482">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:16:24.482">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:16:24.482" status="PASS" starttime="20170825 15:16:24.392"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:24.484">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:16:24.484" status="PASS" starttime="20170825 15:16:24.484"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:24.485">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:16:24.485" status="PASS" starttime="20170825 15:16:24.485"></status>
</kw>
<status endtime="20170825 15:16:24.485" status="PASS" starttime="20170825 15:16:24.484"></status>
</kw>
<status endtime="20170825 15:16:24.485" status="PASS" starttime="20170825 15:16:24.483"></status>
</kw>
<status endtime="20170825 15:16:24.485" status="PASS" starttime="20170825 15:16:24.483"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:16:24.486">Delete All Sessions</msg>
<status endtime="20170825 15:16:24.486" status="PASS" starttime="20170825 15:16:24.486"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:16:24.486">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:16:24.486" status="PASS" starttime="20170825 15:16:24.192"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:24.487">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:16:24.487" status="PASS" starttime="20170825 15:16:24.486"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:24.487">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:16:24.487">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:16:24.487">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:16:24.487" status="PASS" starttime="20170825 15:16:24.487"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:16:24.488">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170825 15:16:24.488" status="PASS" starttime="20170825 15:16:24.192"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:16:24.488">${host_state} = Quiesced</msg>
<status endtime="20170825 15:16:24.488" status="PASS" starttime="20170825 15:16:24.191"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:16:24.489">Running != Quiesced</msg>
<status endtime="20170825 15:16:24.489" status="FAIL" starttime="20170825 15:16:24.488"></status>
</kw>
<status endtime="20170825 15:16:24.489" status="FAIL" starttime="20170825 15:16:23.831"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:34.496">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:16:34.496" status="PASS" starttime="20170825 15:16:34.495"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:34.497">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:16:34.497" status="PASS" starttime="20170825 15:16:34.497"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:34.498">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:16:34.498" status="PASS" starttime="20170825 15:16:34.498"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:34.499">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:16:34.499" status="PASS" starttime="20170825 15:16:34.498"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:34.721">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:16:34.721" status="PASS" starttime="20170825 15:16:34.499"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:16:34.722">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:16:34.722">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:16:34.722" status="PASS" starttime="20170825 15:16:34.499"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:34.722">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:16:34.722" status="PASS" starttime="20170825 15:16:34.722"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:34.723">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:16:34.723" status="PASS" starttime="20170825 15:16:34.723"></status>
</kw>
<status endtime="20170825 15:16:34.723" status="PASS" starttime="20170825 15:16:34.495"></status>
</kw>
<status endtime="20170825 15:16:34.723" status="PASS" starttime="20170825 15:16:34.494"></status>
</kw>
<status endtime="20170825 15:16:34.723" status="PASS" starttime="20170825 15:16:34.493"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:34.724">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:16:34.724" status="PASS" starttime="20170825 15:16:34.724"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:34.726">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:16:34.726" status="PASS" starttime="20170825 15:16:34.726"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:34.727">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:16:34.728" status="PASS" starttime="20170825 15:16:34.727"></status>
</kw>
<status endtime="20170825 15:16:34.728" status="PASS" starttime="20170825 15:16:34.726"></status>
</kw>
<status endtime="20170825 15:16:34.728" status="PASS" starttime="20170825 15:16:34.725"></status>
</kw>
<status endtime="20170825 15:16:34.728" status="PASS" starttime="20170825 15:16:34.724"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:34.869">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:16:34.870">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:16:34.870" status="PASS" starttime="20170825 15:16:34.728"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:34.871">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:16:34.871" status="PASS" starttime="20170825 15:16:34.871"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:34.872">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:16:34.872" status="PASS" starttime="20170825 15:16:34.872"></status>
</kw>
<status endtime="20170825 15:16:34.873" status="PASS" starttime="20170825 15:16:34.872"></status>
</kw>
<status endtime="20170825 15:16:34.873" status="PASS" starttime="20170825 15:16:34.870"></status>
</kw>
<status endtime="20170825 15:16:34.873" status="PASS" starttime="20170825 15:16:34.870"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:16:34.873">Delete All Sessions</msg>
<status endtime="20170825 15:16:34.873" status="PASS" starttime="20170825 15:16:34.873"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:16:34.874">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:16:34.874" status="PASS" starttime="20170825 15:16:34.492"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:34.874">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:16:34.874" status="PASS" starttime="20170825 15:16:34.874"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:34.875">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:16:34.875">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:16:34.875">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:16:34.875" status="PASS" starttime="20170825 15:16:34.875"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:16:34.875">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:16:34.875" status="PASS" starttime="20170825 15:16:34.491"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:16:34.876">${power_state} = On</msg>
<status endtime="20170825 15:16:34.876" status="PASS" starttime="20170825 15:16:34.490"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:16:34.876" status="PASS" starttime="20170825 15:16:34.876"></status>
</kw>
<status endtime="20170825 15:16:34.876" status="PASS" starttime="20170825 15:16:34.490"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:34.880">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:16:34.880" status="PASS" starttime="20170825 15:16:34.879"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:34.881">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:16:34.881" status="PASS" starttime="20170825 15:16:34.880"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:34.881">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:16:34.881" status="PASS" starttime="20170825 15:16:34.881"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:34.882">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:16:34.882" status="PASS" starttime="20170825 15:16:34.882"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:35.082">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:16:35.082" status="PASS" starttime="20170825 15:16:34.883"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:16:35.082">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:16:35.082">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:16:35.082" status="PASS" starttime="20170825 15:16:34.882"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:35.083">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:16:35.083" status="PASS" starttime="20170825 15:16:35.082"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:35.083">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:16:35.083" status="PASS" starttime="20170825 15:16:35.083"></status>
</kw>
<status endtime="20170825 15:16:35.084" status="PASS" starttime="20170825 15:16:34.879"></status>
</kw>
<status endtime="20170825 15:16:35.084" status="PASS" starttime="20170825 15:16:34.879"></status>
</kw>
<status endtime="20170825 15:16:35.084" status="PASS" starttime="20170825 15:16:34.878"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:35.084">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:16:35.084" status="PASS" starttime="20170825 15:16:35.084"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:35.087">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:16:35.087" status="PASS" starttime="20170825 15:16:35.086"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:35.087">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:16:35.088" status="PASS" starttime="20170825 15:16:35.087"></status>
</kw>
<status endtime="20170825 15:16:35.088" status="PASS" starttime="20170825 15:16:35.087"></status>
</kw>
<status endtime="20170825 15:16:35.088" status="PASS" starttime="20170825 15:16:35.085"></status>
</kw>
<status endtime="20170825 15:16:35.088" status="PASS" starttime="20170825 15:16:35.085"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:35.192">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:16:35.192">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:16:35.192" status="PASS" starttime="20170825 15:16:35.088"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:35.194">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:16:35.194" status="PASS" starttime="20170825 15:16:35.193"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:35.195">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:16:35.195" status="PASS" starttime="20170825 15:16:35.194"></status>
</kw>
<status endtime="20170825 15:16:35.195" status="PASS" starttime="20170825 15:16:35.194"></status>
</kw>
<status endtime="20170825 15:16:35.195" status="PASS" starttime="20170825 15:16:35.193"></status>
</kw>
<status endtime="20170825 15:16:35.195" status="PASS" starttime="20170825 15:16:35.192"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:16:35.195">Delete All Sessions</msg>
<status endtime="20170825 15:16:35.196" status="PASS" starttime="20170825 15:16:35.195"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:16:35.196">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:16:35.196" status="PASS" starttime="20170825 15:16:34.877"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:35.196">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:16:35.197" status="PASS" starttime="20170825 15:16:35.196"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:35.197">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:16:35.197">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:16:35.197">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:16:35.197" status="PASS" starttime="20170825 15:16:35.197"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:16:35.197">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170825 15:16:35.198" status="PASS" starttime="20170825 15:16:34.877"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:16:35.198">${host_state} = Quiesced</msg>
<status endtime="20170825 15:16:35.198" status="PASS" starttime="20170825 15:16:34.876"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:16:35.199">Running != Quiesced</msg>
<status endtime="20170825 15:16:35.199" status="FAIL" starttime="20170825 15:16:35.198"></status>
</kw>
<status endtime="20170825 15:16:35.199" status="FAIL" starttime="20170825 15:16:34.489"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:45.204">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:16:45.205" status="PASS" starttime="20170825 15:16:45.204"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:45.205">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:16:45.205" status="PASS" starttime="20170825 15:16:45.205"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:45.206">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:16:45.206" status="PASS" starttime="20170825 15:16:45.206"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:45.207">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:16:45.207" status="PASS" starttime="20170825 15:16:45.206"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:45.403">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:16:45.403" status="PASS" starttime="20170825 15:16:45.207"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:16:45.404">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:16:45.404">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:16:45.404" status="PASS" starttime="20170825 15:16:45.207"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:45.404">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:16:45.404" status="PASS" starttime="20170825 15:16:45.404"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:45.405">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:16:45.405" status="PASS" starttime="20170825 15:16:45.405"></status>
</kw>
<status endtime="20170825 15:16:45.405" status="PASS" starttime="20170825 15:16:45.203"></status>
</kw>
<status endtime="20170825 15:16:45.405" status="PASS" starttime="20170825 15:16:45.202"></status>
</kw>
<status endtime="20170825 15:16:45.405" status="PASS" starttime="20170825 15:16:45.202"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:45.406">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:16:45.406" status="PASS" starttime="20170825 15:16:45.406"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:45.408">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:16:45.408" status="PASS" starttime="20170825 15:16:45.407"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:45.409">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:16:45.409" status="PASS" starttime="20170825 15:16:45.409"></status>
</kw>
<status endtime="20170825 15:16:45.409" status="PASS" starttime="20170825 15:16:45.408"></status>
</kw>
<status endtime="20170825 15:16:45.409" status="PASS" starttime="20170825 15:16:45.407"></status>
</kw>
<status endtime="20170825 15:16:45.409" status="PASS" starttime="20170825 15:16:45.406"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:45.510">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:16:45.510">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:16:45.510" status="PASS" starttime="20170825 15:16:45.410"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:45.512">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:16:45.512" status="PASS" starttime="20170825 15:16:45.511"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:45.513">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:16:45.513" status="PASS" starttime="20170825 15:16:45.513"></status>
</kw>
<status endtime="20170825 15:16:45.514" status="PASS" starttime="20170825 15:16:45.512"></status>
</kw>
<status endtime="20170825 15:16:45.514" status="PASS" starttime="20170825 15:16:45.511"></status>
</kw>
<status endtime="20170825 15:16:45.514" status="PASS" starttime="20170825 15:16:45.510"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:16:45.514">Delete All Sessions</msg>
<status endtime="20170825 15:16:45.514" status="PASS" starttime="20170825 15:16:45.514"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:16:45.514">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:16:45.514" status="PASS" starttime="20170825 15:16:45.201"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:45.515">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:16:45.515" status="PASS" starttime="20170825 15:16:45.515"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:45.516">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:16:45.516">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:16:45.516">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:16:45.516" status="PASS" starttime="20170825 15:16:45.515"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:16:45.516">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:16:45.516" status="PASS" starttime="20170825 15:16:45.201"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:16:45.517">${power_state} = On</msg>
<status endtime="20170825 15:16:45.517" status="PASS" starttime="20170825 15:16:45.200"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:16:45.517" status="PASS" starttime="20170825 15:16:45.517"></status>
</kw>
<status endtime="20170825 15:16:45.517" status="PASS" starttime="20170825 15:16:45.200"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:45.521">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:16:45.521" status="PASS" starttime="20170825 15:16:45.520"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:45.522">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:16:45.522" status="PASS" starttime="20170825 15:16:45.521"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:45.522">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:16:45.522" status="PASS" starttime="20170825 15:16:45.522"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:45.523">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:16:45.523" status="PASS" starttime="20170825 15:16:45.522"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:45.805">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:16:45.805" status="PASS" starttime="20170825 15:16:45.524"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:16:45.805">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:16:45.805">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:16:45.805" status="PASS" starttime="20170825 15:16:45.523"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:45.806">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:16:45.806" status="PASS" starttime="20170825 15:16:45.805"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:45.806">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:16:45.806" status="PASS" starttime="20170825 15:16:45.806"></status>
</kw>
<status endtime="20170825 15:16:45.807" status="PASS" starttime="20170825 15:16:45.520"></status>
</kw>
<status endtime="20170825 15:16:45.807" status="PASS" starttime="20170825 15:16:45.519"></status>
</kw>
<status endtime="20170825 15:16:45.807" status="PASS" starttime="20170825 15:16:45.519"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:45.807">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:16:45.807" status="PASS" starttime="20170825 15:16:45.807"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:45.812">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:16:45.812" status="PASS" starttime="20170825 15:16:45.809"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:45.813">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:16:45.814" status="PASS" starttime="20170825 15:16:45.813"></status>
</kw>
<status endtime="20170825 15:16:45.814" status="PASS" starttime="20170825 15:16:45.813"></status>
</kw>
<status endtime="20170825 15:16:45.814" status="PASS" starttime="20170825 15:16:45.808"></status>
</kw>
<status endtime="20170825 15:16:45.814" status="PASS" starttime="20170825 15:16:45.808"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:45.922">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:16:45.922">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:16:45.922" status="PASS" starttime="20170825 15:16:45.814"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:45.924">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:16:45.924" status="PASS" starttime="20170825 15:16:45.924"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:45.925">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:16:45.925" status="PASS" starttime="20170825 15:16:45.925"></status>
</kw>
<status endtime="20170825 15:16:45.925" status="PASS" starttime="20170825 15:16:45.924"></status>
</kw>
<status endtime="20170825 15:16:45.926" status="PASS" starttime="20170825 15:16:45.923"></status>
</kw>
<status endtime="20170825 15:16:45.926" status="PASS" starttime="20170825 15:16:45.923"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:16:45.926">Delete All Sessions</msg>
<status endtime="20170825 15:16:45.926" status="PASS" starttime="20170825 15:16:45.926"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:16:45.926">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:16:45.926" status="PASS" starttime="20170825 15:16:45.518"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:45.927">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:16:45.927" status="PASS" starttime="20170825 15:16:45.927"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:45.927">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:16:45.928">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:16:45.928">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:16:45.928" status="PASS" starttime="20170825 15:16:45.927"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:16:45.928">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170825 15:16:45.928" status="PASS" starttime="20170825 15:16:45.518"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:16:45.928">${host_state} = Quiesced</msg>
<status endtime="20170825 15:16:45.928" status="PASS" starttime="20170825 15:16:45.517"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:16:45.929">Running != Quiesced</msg>
<status endtime="20170825 15:16:45.929" status="FAIL" starttime="20170825 15:16:45.929"></status>
</kw>
<status endtime="20170825 15:16:45.929" status="FAIL" starttime="20170825 15:16:45.199"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:55.934">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:16:55.935" status="PASS" starttime="20170825 15:16:55.934"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:55.935">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:16:55.935" status="PASS" starttime="20170825 15:16:55.935"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:55.936">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:16:55.936" status="PASS" starttime="20170825 15:16:55.936"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:55.937">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:16:55.937" status="PASS" starttime="20170825 15:16:55.936"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:56.161">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:16:56.161" status="PASS" starttime="20170825 15:16:55.938"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:16:56.161">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:16:56.161">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:16:56.161" status="PASS" starttime="20170825 15:16:55.937"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:56.162">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:16:56.162" status="PASS" starttime="20170825 15:16:56.162"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:56.163">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:16:56.163" status="PASS" starttime="20170825 15:16:56.162"></status>
</kw>
<status endtime="20170825 15:16:56.163" status="PASS" starttime="20170825 15:16:55.933"></status>
</kw>
<status endtime="20170825 15:16:56.163" status="PASS" starttime="20170825 15:16:55.933"></status>
</kw>
<status endtime="20170825 15:16:56.163" status="PASS" starttime="20170825 15:16:55.932"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:56.164">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:16:56.164" status="PASS" starttime="20170825 15:16:56.163"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:56.166">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:16:56.166" status="PASS" starttime="20170825 15:16:56.165"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:56.167">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:16:56.167" status="PASS" starttime="20170825 15:16:56.167"></status>
</kw>
<status endtime="20170825 15:16:56.167" status="PASS" starttime="20170825 15:16:56.166"></status>
</kw>
<status endtime="20170825 15:16:56.167" status="PASS" starttime="20170825 15:16:56.165"></status>
</kw>
<status endtime="20170825 15:16:56.167" status="PASS" starttime="20170825 15:16:56.164"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:56.231">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:16:56.231">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:16:56.231" status="PASS" starttime="20170825 15:16:56.167"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:56.233">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:16:56.233" status="PASS" starttime="20170825 15:16:56.232"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:56.234">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:16:56.234" status="PASS" starttime="20170825 15:16:56.234"></status>
</kw>
<status endtime="20170825 15:16:56.234" status="PASS" starttime="20170825 15:16:56.233"></status>
</kw>
<status endtime="20170825 15:16:56.234" status="PASS" starttime="20170825 15:16:56.232"></status>
</kw>
<status endtime="20170825 15:16:56.234" status="PASS" starttime="20170825 15:16:56.231"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:16:56.235">Delete All Sessions</msg>
<status endtime="20170825 15:16:56.235" status="PASS" starttime="20170825 15:16:56.235"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:16:56.235">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:16:56.235" status="PASS" starttime="20170825 15:16:55.932"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:56.236">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:16:56.236" status="PASS" starttime="20170825 15:16:56.235"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:56.236">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:16:56.236">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:16:56.236">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:16:56.236" status="PASS" starttime="20170825 15:16:56.236"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:16:56.237">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:16:56.237" status="PASS" starttime="20170825 15:16:55.931"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:16:56.237">${power_state} = On</msg>
<status endtime="20170825 15:16:56.237" status="PASS" starttime="20170825 15:16:55.931"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:16:56.238" status="PASS" starttime="20170825 15:16:56.237"></status>
</kw>
<status endtime="20170825 15:16:56.238" status="PASS" starttime="20170825 15:16:55.930"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:56.242">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:16:56.242" status="PASS" starttime="20170825 15:16:56.241"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:56.243">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:16:56.243" status="PASS" starttime="20170825 15:16:56.242"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:56.243">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:16:56.243" status="PASS" starttime="20170825 15:16:56.243"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:56.244">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:16:56.244" status="PASS" starttime="20170825 15:16:56.244"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:56.493">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:16:56.493" status="PASS" starttime="20170825 15:16:56.245"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:16:56.493">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:16:56.493">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:16:56.493" status="PASS" starttime="20170825 15:16:56.244"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:56.494">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:16:56.494" status="PASS" starttime="20170825 15:16:56.494"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:56.495">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:16:56.495" status="PASS" starttime="20170825 15:16:56.494"></status>
</kw>
<status endtime="20170825 15:16:56.495" status="PASS" starttime="20170825 15:16:56.241"></status>
</kw>
<status endtime="20170825 15:16:56.495" status="PASS" starttime="20170825 15:16:56.240"></status>
</kw>
<status endtime="20170825 15:16:56.495" status="PASS" starttime="20170825 15:16:56.239"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:56.496">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:16:56.496" status="PASS" starttime="20170825 15:16:56.495"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:56.498">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:16:56.498" status="PASS" starttime="20170825 15:16:56.497"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:56.499">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:16:56.499" status="PASS" starttime="20170825 15:16:56.498"></status>
</kw>
<status endtime="20170825 15:16:56.499" status="PASS" starttime="20170825 15:16:56.498"></status>
</kw>
<status endtime="20170825 15:16:56.499" status="PASS" starttime="20170825 15:16:56.496"></status>
</kw>
<status endtime="20170825 15:16:56.499" status="PASS" starttime="20170825 15:16:56.496"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:56.677">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:16:56.677">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:16:56.677" status="PASS" starttime="20170825 15:16:56.499"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:56.679">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:16:56.679" status="PASS" starttime="20170825 15:16:56.678"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:56.680">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:16:56.680" status="PASS" starttime="20170825 15:16:56.680"></status>
</kw>
<status endtime="20170825 15:16:56.680" status="PASS" starttime="20170825 15:16:56.679"></status>
</kw>
<status endtime="20170825 15:16:56.680" status="PASS" starttime="20170825 15:16:56.678"></status>
</kw>
<status endtime="20170825 15:16:56.680" status="PASS" starttime="20170825 15:16:56.677"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:16:56.681">Delete All Sessions</msg>
<status endtime="20170825 15:16:56.681" status="PASS" starttime="20170825 15:16:56.681"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:16:56.681">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:16:56.681" status="PASS" starttime="20170825 15:16:56.239"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:16:56.682">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:16:56.682" status="PASS" starttime="20170825 15:16:56.681"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:16:56.682">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:16:56.682">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:16:56.682">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:16:56.683" status="PASS" starttime="20170825 15:16:56.682"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:16:56.683">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170825 15:16:56.683" status="PASS" starttime="20170825 15:16:56.238"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:16:56.683">${host_state} = Quiesced</msg>
<status endtime="20170825 15:16:56.683" status="PASS" starttime="20170825 15:16:56.238"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:16:56.684">Running != Quiesced</msg>
<status endtime="20170825 15:16:56.684" status="FAIL" starttime="20170825 15:16:56.683"></status>
</kw>
<status endtime="20170825 15:16:56.684" status="FAIL" starttime="20170825 15:16:55.930"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:06.691">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:17:06.692" status="PASS" starttime="20170825 15:17:06.691"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:06.693">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:17:06.693" status="PASS" starttime="20170825 15:17:06.692"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:06.694">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:17:06.694" status="PASS" starttime="20170825 15:17:06.693"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:06.695">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:17:06.695" status="PASS" starttime="20170825 15:17:06.694"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:06.889">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:17:06.890" status="PASS" starttime="20170825 15:17:06.696"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:17:06.890">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:17:06.890">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:17:06.890" status="PASS" starttime="20170825 15:17:06.695"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:06.890">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:17:06.891" status="PASS" starttime="20170825 15:17:06.890"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:06.891">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:17:06.891" status="PASS" starttime="20170825 15:17:06.891"></status>
</kw>
<status endtime="20170825 15:17:06.891" status="PASS" starttime="20170825 15:17:06.690"></status>
</kw>
<status endtime="20170825 15:17:06.891" status="PASS" starttime="20170825 15:17:06.689"></status>
</kw>
<status endtime="20170825 15:17:06.892" status="PASS" starttime="20170825 15:17:06.688"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:06.892">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:17:06.892" status="PASS" starttime="20170825 15:17:06.892"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:06.894">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:17:06.894" status="PASS" starttime="20170825 15:17:06.894"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:06.895">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:17:06.895" status="PASS" starttime="20170825 15:17:06.895"></status>
</kw>
<status endtime="20170825 15:17:06.896" status="PASS" starttime="20170825 15:17:06.895"></status>
</kw>
<status endtime="20170825 15:17:06.896" status="PASS" starttime="20170825 15:17:06.893"></status>
</kw>
<status endtime="20170825 15:17:06.896" status="PASS" starttime="20170825 15:17:06.892"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:06.967">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:17:06.967">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:17:06.967" status="PASS" starttime="20170825 15:17:06.896"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:06.969">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:17:06.969" status="PASS" starttime="20170825 15:17:06.969"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:06.970">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:17:06.970" status="PASS" starttime="20170825 15:17:06.970"></status>
</kw>
<status endtime="20170825 15:17:06.970" status="PASS" starttime="20170825 15:17:06.969"></status>
</kw>
<status endtime="20170825 15:17:06.970" status="PASS" starttime="20170825 15:17:06.968"></status>
</kw>
<status endtime="20170825 15:17:06.971" status="PASS" starttime="20170825 15:17:06.968"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:17:06.971">Delete All Sessions</msg>
<status endtime="20170825 15:17:06.971" status="PASS" starttime="20170825 15:17:06.971"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:17:06.971">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:17:06.971" status="PASS" starttime="20170825 15:17:06.687"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:06.972">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:17:06.972" status="PASS" starttime="20170825 15:17:06.971"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:06.972">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:17:06.972">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:17:06.973">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:17:06.973" status="PASS" starttime="20170825 15:17:06.972"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:17:06.973">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:17:06.973" status="PASS" starttime="20170825 15:17:06.686"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:17:06.973">${power_state} = On</msg>
<status endtime="20170825 15:17:06.973" status="PASS" starttime="20170825 15:17:06.686"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:17:06.974" status="PASS" starttime="20170825 15:17:06.974"></status>
</kw>
<status endtime="20170825 15:17:06.974" status="PASS" starttime="20170825 15:17:06.685"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:06.977">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:17:06.978" status="PASS" starttime="20170825 15:17:06.977"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:06.979">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:17:06.979" status="PASS" starttime="20170825 15:17:06.978"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:06.979">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:17:06.979" status="PASS" starttime="20170825 15:17:06.979"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:06.980">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:17:06.980" status="PASS" starttime="20170825 15:17:06.980"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:07.213">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:17:07.213" status="PASS" starttime="20170825 15:17:06.981"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:17:07.213">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:17:07.213">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:17:07.213" status="PASS" starttime="20170825 15:17:06.980"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:07.214">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:17:07.214" status="PASS" starttime="20170825 15:17:07.213"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:07.215">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:17:07.215" status="PASS" starttime="20170825 15:17:07.214"></status>
</kw>
<status endtime="20170825 15:17:07.215" status="PASS" starttime="20170825 15:17:06.977"></status>
</kw>
<status endtime="20170825 15:17:07.215" status="PASS" starttime="20170825 15:17:06.976"></status>
</kw>
<status endtime="20170825 15:17:07.215" status="PASS" starttime="20170825 15:17:06.976"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:07.216">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:17:07.216" status="PASS" starttime="20170825 15:17:07.215"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:07.218">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:17:07.218" status="PASS" starttime="20170825 15:17:07.217"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:07.219">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:17:07.219" status="PASS" starttime="20170825 15:17:07.218"></status>
</kw>
<status endtime="20170825 15:17:07.219" status="PASS" starttime="20170825 15:17:07.218"></status>
</kw>
<status endtime="20170825 15:17:07.219" status="PASS" starttime="20170825 15:17:07.216"></status>
</kw>
<status endtime="20170825 15:17:07.219" status="PASS" starttime="20170825 15:17:07.216"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:07.308">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:17:07.308">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:17:07.308" status="PASS" starttime="20170825 15:17:07.219"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:07.310">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:17:07.310" status="PASS" starttime="20170825 15:17:07.310"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:07.311">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:17:07.311" status="PASS" starttime="20170825 15:17:07.311"></status>
</kw>
<status endtime="20170825 15:17:07.311" status="PASS" starttime="20170825 15:17:07.311"></status>
</kw>
<status endtime="20170825 15:17:07.312" status="PASS" starttime="20170825 15:17:07.309"></status>
</kw>
<status endtime="20170825 15:17:07.312" status="PASS" starttime="20170825 15:17:07.309"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:17:07.312">Delete All Sessions</msg>
<status endtime="20170825 15:17:07.312" status="PASS" starttime="20170825 15:17:07.312"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:17:07.312">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:17:07.312" status="PASS" starttime="20170825 15:17:06.975"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:07.313">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:17:07.313" status="PASS" starttime="20170825 15:17:07.313"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:07.314">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:17:07.314">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:17:07.314">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:17:07.314" status="PASS" starttime="20170825 15:17:07.313"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:17:07.314">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170825 15:17:07.314" status="PASS" starttime="20170825 15:17:06.974"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:17:07.314">${host_state} = Quiesced</msg>
<status endtime="20170825 15:17:07.315" status="PASS" starttime="20170825 15:17:06.974"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:17:07.315">Running != Quiesced</msg>
<status endtime="20170825 15:17:07.315" status="FAIL" starttime="20170825 15:17:07.315"></status>
</kw>
<status endtime="20170825 15:17:07.315" status="FAIL" starttime="20170825 15:17:06.685"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:17.321">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:17:17.322" status="PASS" starttime="20170825 15:17:17.321"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:17.322">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:17:17.322" status="PASS" starttime="20170825 15:17:17.322"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:17.323">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:17:17.323" status="PASS" starttime="20170825 15:17:17.323"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:17.324">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:17:17.324" status="PASS" starttime="20170825 15:17:17.323"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:17.528">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:17:17.529" status="PASS" starttime="20170825 15:17:17.325"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:17:17.529">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:17:17.529">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:17:17.529" status="PASS" starttime="20170825 15:17:17.324"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:17.529">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:17:17.530" status="PASS" starttime="20170825 15:17:17.529"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:17.530">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:17:17.530" status="PASS" starttime="20170825 15:17:17.530"></status>
</kw>
<status endtime="20170825 15:17:17.530" status="PASS" starttime="20170825 15:17:17.321"></status>
</kw>
<status endtime="20170825 15:17:17.530" status="PASS" starttime="20170825 15:17:17.320"></status>
</kw>
<status endtime="20170825 15:17:17.531" status="PASS" starttime="20170825 15:17:17.319"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:17.531">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:17:17.531" status="PASS" starttime="20170825 15:17:17.531"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:17.533">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:17:17.533" status="PASS" starttime="20170825 15:17:17.533"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:17.534">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:17:17.535" status="PASS" starttime="20170825 15:17:17.534"></status>
</kw>
<status endtime="20170825 15:17:17.535" status="PASS" starttime="20170825 15:17:17.533"></status>
</kw>
<status endtime="20170825 15:17:17.535" status="PASS" starttime="20170825 15:17:17.532"></status>
</kw>
<status endtime="20170825 15:17:17.535" status="PASS" starttime="20170825 15:17:17.531"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:17.599">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:17:17.599">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:17:17.599" status="PASS" starttime="20170825 15:17:17.535"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:17.601">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:17:17.601" status="PASS" starttime="20170825 15:17:17.600"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:17.601">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:17:17.602" status="PASS" starttime="20170825 15:17:17.601"></status>
</kw>
<status endtime="20170825 15:17:17.602" status="PASS" starttime="20170825 15:17:17.601"></status>
</kw>
<status endtime="20170825 15:17:17.602" status="PASS" starttime="20170825 15:17:17.600"></status>
</kw>
<status endtime="20170825 15:17:17.602" status="PASS" starttime="20170825 15:17:17.599"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:17:17.602">Delete All Sessions</msg>
<status endtime="20170825 15:17:17.602" status="PASS" starttime="20170825 15:17:17.602"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:17:17.603">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:17:17.603" status="PASS" starttime="20170825 15:17:17.319"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:17.603">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:17:17.603" status="PASS" starttime="20170825 15:17:17.603"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:17.604">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:17:17.604">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:17:17.604">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:17:17.604" status="PASS" starttime="20170825 15:17:17.603"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:17:17.604">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:17:17.604" status="PASS" starttime="20170825 15:17:17.318"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:17:17.605">${power_state} = On</msg>
<status endtime="20170825 15:17:17.605" status="PASS" starttime="20170825 15:17:17.317"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:17:17.605" status="PASS" starttime="20170825 15:17:17.605"></status>
</kw>
<status endtime="20170825 15:17:17.605" status="PASS" starttime="20170825 15:17:17.317"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:17.609">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:17:17.609" status="PASS" starttime="20170825 15:17:17.608"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:17.610">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:17:17.610" status="PASS" starttime="20170825 15:17:17.609"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:17.610">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:17:17.610" status="PASS" starttime="20170825 15:17:17.610"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:17.611">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:17:17.611" status="PASS" starttime="20170825 15:17:17.611"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:17.792">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:17:17.792" status="PASS" starttime="20170825 15:17:17.612"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:17:17.792">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:17:17.792">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:17:17.792" status="PASS" starttime="20170825 15:17:17.612"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:17.793">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:17:17.793" status="PASS" starttime="20170825 15:17:17.793"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:17.794">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:17:17.794" status="PASS" starttime="20170825 15:17:17.793"></status>
</kw>
<status endtime="20170825 15:17:17.794" status="PASS" starttime="20170825 15:17:17.608"></status>
</kw>
<status endtime="20170825 15:17:17.794" status="PASS" starttime="20170825 15:17:17.608"></status>
</kw>
<status endtime="20170825 15:17:17.794" status="PASS" starttime="20170825 15:17:17.607"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:17.795">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:17:17.795" status="PASS" starttime="20170825 15:17:17.794"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:17.797">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:17:17.797" status="PASS" starttime="20170825 15:17:17.796"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:17.798">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:17:17.798" status="PASS" starttime="20170825 15:17:17.798"></status>
</kw>
<status endtime="20170825 15:17:17.798" status="PASS" starttime="20170825 15:17:17.797"></status>
</kw>
<status endtime="20170825 15:17:17.798" status="PASS" starttime="20170825 15:17:17.796"></status>
</kw>
<status endtime="20170825 15:17:17.798" status="PASS" starttime="20170825 15:17:17.795"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:17.887">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:17:17.887">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:17:17.887" status="PASS" starttime="20170825 15:17:17.798"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:17.889">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:17:17.889" status="PASS" starttime="20170825 15:17:17.889"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:17.890">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:17:17.890" status="PASS" starttime="20170825 15:17:17.890"></status>
</kw>
<status endtime="20170825 15:17:17.890" status="PASS" starttime="20170825 15:17:17.889"></status>
</kw>
<status endtime="20170825 15:17:17.890" status="PASS" starttime="20170825 15:17:17.888"></status>
</kw>
<status endtime="20170825 15:17:17.891" status="PASS" starttime="20170825 15:17:17.888"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:17:17.891">Delete All Sessions</msg>
<status endtime="20170825 15:17:17.891" status="PASS" starttime="20170825 15:17:17.891"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:17:17.891">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:17:17.891" status="PASS" starttime="20170825 15:17:17.606"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:17.892">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:17:17.892" status="PASS" starttime="20170825 15:17:17.892"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:17.893">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:17:17.893">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:17:17.893">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:17:17.893" status="PASS" starttime="20170825 15:17:17.892"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:17:17.893">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170825 15:17:17.893" status="PASS" starttime="20170825 15:17:17.606"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:17:17.893">${host_state} = Quiesced</msg>
<status endtime="20170825 15:17:17.893" status="PASS" starttime="20170825 15:17:17.605"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:17:17.894">Running != Quiesced</msg>
<status endtime="20170825 15:17:17.894" status="FAIL" starttime="20170825 15:17:17.894"></status>
</kw>
<status endtime="20170825 15:17:17.894" status="FAIL" starttime="20170825 15:17:17.316"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:27.900">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:17:27.901" status="PASS" starttime="20170825 15:17:27.900"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:27.901">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:17:27.901" status="PASS" starttime="20170825 15:17:27.901"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:27.902">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:17:27.902" status="PASS" starttime="20170825 15:17:27.901"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:27.902">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:17:27.902" status="PASS" starttime="20170825 15:17:27.902"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:28.172">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:17:28.172" status="PASS" starttime="20170825 15:17:27.903"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:17:28.172">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:17:28.173">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:17:28.173" status="PASS" starttime="20170825 15:17:27.903"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:28.173">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:17:28.173" status="PASS" starttime="20170825 15:17:28.173"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:28.174">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:17:28.174" status="PASS" starttime="20170825 15:17:28.174"></status>
</kw>
<status endtime="20170825 15:17:28.174" status="PASS" starttime="20170825 15:17:27.899"></status>
</kw>
<status endtime="20170825 15:17:28.174" status="PASS" starttime="20170825 15:17:27.898"></status>
</kw>
<status endtime="20170825 15:17:28.174" status="PASS" starttime="20170825 15:17:27.898"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:28.175">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:17:28.175" status="PASS" starttime="20170825 15:17:28.174"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:28.177">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:17:28.177" status="PASS" starttime="20170825 15:17:28.176"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:28.178">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:17:28.178" status="PASS" starttime="20170825 15:17:28.178"></status>
</kw>
<status endtime="20170825 15:17:28.178" status="PASS" starttime="20170825 15:17:28.177"></status>
</kw>
<status endtime="20170825 15:17:28.178" status="PASS" starttime="20170825 15:17:28.176"></status>
</kw>
<status endtime="20170825 15:17:28.178" status="PASS" starttime="20170825 15:17:28.175"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:28.241">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:17:28.241">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:17:28.242" status="PASS" starttime="20170825 15:17:28.179"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:28.243">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:17:28.243" status="PASS" starttime="20170825 15:17:28.243"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:28.244">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:17:28.245" status="PASS" starttime="20170825 15:17:28.244"></status>
</kw>
<status endtime="20170825 15:17:28.245" status="PASS" starttime="20170825 15:17:28.243"></status>
</kw>
<status endtime="20170825 15:17:28.245" status="PASS" starttime="20170825 15:17:28.242"></status>
</kw>
<status endtime="20170825 15:17:28.245" status="PASS" starttime="20170825 15:17:28.242"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:17:28.245">Delete All Sessions</msg>
<status endtime="20170825 15:17:28.245" status="PASS" starttime="20170825 15:17:28.245"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:17:28.246">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:17:28.246" status="PASS" starttime="20170825 15:17:27.897"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:28.246">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:17:28.246" status="PASS" starttime="20170825 15:17:28.246"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:28.247">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:17:28.247">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:17:28.247">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:17:28.247" status="PASS" starttime="20170825 15:17:28.247"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:17:28.247">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:17:28.247" status="PASS" starttime="20170825 15:17:27.896"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:17:28.248">${power_state} = On</msg>
<status endtime="20170825 15:17:28.248" status="PASS" starttime="20170825 15:17:27.896"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:17:28.248" status="PASS" starttime="20170825 15:17:28.248"></status>
</kw>
<status endtime="20170825 15:17:28.248" status="PASS" starttime="20170825 15:17:27.896"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:28.252">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:17:28.252" status="PASS" starttime="20170825 15:17:28.252"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:28.253">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:17:28.253" status="PASS" starttime="20170825 15:17:28.252"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:28.253">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:17:28.253" status="PASS" starttime="20170825 15:17:28.253"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:28.254">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:17:28.254" status="PASS" starttime="20170825 15:17:28.254"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:28.440">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:17:28.440" status="PASS" starttime="20170825 15:17:28.255"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:17:28.440">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:17:28.440">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:17:28.440" status="PASS" starttime="20170825 15:17:28.254"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:28.441">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:17:28.441" status="PASS" starttime="20170825 15:17:28.440"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:28.441">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:17:28.442" status="PASS" starttime="20170825 15:17:28.441"></status>
</kw>
<status endtime="20170825 15:17:28.442" status="PASS" starttime="20170825 15:17:28.251"></status>
</kw>
<status endtime="20170825 15:17:28.442" status="PASS" starttime="20170825 15:17:28.251"></status>
</kw>
<status endtime="20170825 15:17:28.442" status="PASS" starttime="20170825 15:17:28.250"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:28.442">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:17:28.442" status="PASS" starttime="20170825 15:17:28.442"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:28.445">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:17:28.445" status="PASS" starttime="20170825 15:17:28.444"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:28.446">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:17:28.446" status="PASS" starttime="20170825 15:17:28.446"></status>
</kw>
<status endtime="20170825 15:17:28.446" status="PASS" starttime="20170825 15:17:28.445"></status>
</kw>
<status endtime="20170825 15:17:28.446" status="PASS" starttime="20170825 15:17:28.443"></status>
</kw>
<status endtime="20170825 15:17:28.446" status="PASS" starttime="20170825 15:17:28.443"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:28.555">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:17:28.555">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:17:28.555" status="PASS" starttime="20170825 15:17:28.447"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:28.557">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:17:28.557" status="PASS" starttime="20170825 15:17:28.557"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:28.558">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:17:28.558" status="PASS" starttime="20170825 15:17:28.558"></status>
</kw>
<status endtime="20170825 15:17:28.558" status="PASS" starttime="20170825 15:17:28.557"></status>
</kw>
<status endtime="20170825 15:17:28.558" status="PASS" starttime="20170825 15:17:28.556"></status>
</kw>
<status endtime="20170825 15:17:28.558" status="PASS" starttime="20170825 15:17:28.556"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:17:28.559">Delete All Sessions</msg>
<status endtime="20170825 15:17:28.559" status="PASS" starttime="20170825 15:17:28.559"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:17:28.559">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:17:28.559" status="PASS" starttime="20170825 15:17:28.249"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:28.560">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:17:28.560" status="PASS" starttime="20170825 15:17:28.559"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:28.560">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:17:28.560">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:17:28.560">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:17:28.561" status="PASS" starttime="20170825 15:17:28.560"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:17:28.561">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170825 15:17:28.561" status="PASS" starttime="20170825 15:17:28.249"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:17:28.561">${host_state} = Quiesced</msg>
<status endtime="20170825 15:17:28.561" status="PASS" starttime="20170825 15:17:28.248"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:17:28.562">Running != Quiesced</msg>
<status endtime="20170825 15:17:28.562" status="FAIL" starttime="20170825 15:17:28.561"></status>
</kw>
<status endtime="20170825 15:17:28.562" status="FAIL" starttime="20170825 15:17:27.895"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:38.567">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:17:38.568" status="PASS" starttime="20170825 15:17:38.567"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:38.568">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:17:38.568" status="PASS" starttime="20170825 15:17:38.568"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:38.573">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:17:38.573" status="PASS" starttime="20170825 15:17:38.569"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:38.574">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:17:38.574" status="PASS" starttime="20170825 15:17:38.573"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:38.817">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:17:38.817" status="PASS" starttime="20170825 15:17:38.575"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:17:38.817">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:17:38.817">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:17:38.817" status="PASS" starttime="20170825 15:17:38.574"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:38.818">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:17:38.818" status="PASS" starttime="20170825 15:17:38.817"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:38.818">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:17:38.819" status="PASS" starttime="20170825 15:17:38.818"></status>
</kw>
<status endtime="20170825 15:17:38.819" status="PASS" starttime="20170825 15:17:38.566"></status>
</kw>
<status endtime="20170825 15:17:38.819" status="PASS" starttime="20170825 15:17:38.566"></status>
</kw>
<status endtime="20170825 15:17:38.819" status="PASS" starttime="20170825 15:17:38.565"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:38.819">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:17:38.819" status="PASS" starttime="20170825 15:17:38.819"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:38.821">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:17:38.822" status="PASS" starttime="20170825 15:17:38.821"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:38.822">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:17:38.823" status="PASS" starttime="20170825 15:17:38.822"></status>
</kw>
<status endtime="20170825 15:17:38.823" status="PASS" starttime="20170825 15:17:38.822"></status>
</kw>
<status endtime="20170825 15:17:38.823" status="PASS" starttime="20170825 15:17:38.820"></status>
</kw>
<status endtime="20170825 15:17:38.823" status="PASS" starttime="20170825 15:17:38.820"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:38.886">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:17:38.886">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:17:38.886" status="PASS" starttime="20170825 15:17:38.823"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:38.888">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:17:38.888" status="PASS" starttime="20170825 15:17:38.887"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:38.889">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:17:38.889" status="PASS" starttime="20170825 15:17:38.888"></status>
</kw>
<status endtime="20170825 15:17:38.889" status="PASS" starttime="20170825 15:17:38.888"></status>
</kw>
<status endtime="20170825 15:17:38.889" status="PASS" starttime="20170825 15:17:38.887"></status>
</kw>
<status endtime="20170825 15:17:38.889" status="PASS" starttime="20170825 15:17:38.886"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:17:38.889">Delete All Sessions</msg>
<status endtime="20170825 15:17:38.889" status="PASS" starttime="20170825 15:17:38.889"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:17:38.890">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:17:38.890" status="PASS" starttime="20170825 15:17:38.565"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:38.890">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:17:38.890" status="PASS" starttime="20170825 15:17:38.890"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:38.891">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:17:38.891">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:17:38.891">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:17:38.891" status="PASS" starttime="20170825 15:17:38.891"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:17:38.891">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:17:38.891" status="PASS" starttime="20170825 15:17:38.564"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:17:38.892">${power_state} = On</msg>
<status endtime="20170825 15:17:38.892" status="PASS" starttime="20170825 15:17:38.564"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:17:38.892" status="PASS" starttime="20170825 15:17:38.892"></status>
</kw>
<status endtime="20170825 15:17:38.892" status="PASS" starttime="20170825 15:17:38.563"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:38.896">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:17:38.897" status="PASS" starttime="20170825 15:17:38.896"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:38.897">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:17:38.897" status="PASS" starttime="20170825 15:17:38.897"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:38.898">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:17:38.898" status="PASS" starttime="20170825 15:17:38.897"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:38.899">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:17:38.899" status="PASS" starttime="20170825 15:17:38.898"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:39.078">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:17:39.078" status="PASS" starttime="20170825 15:17:38.899"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:17:39.078">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:17:39.078">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:17:39.078" status="PASS" starttime="20170825 15:17:38.899"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:39.079">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:17:39.079" status="PASS" starttime="20170825 15:17:39.078"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:39.079">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:17:39.079" status="PASS" starttime="20170825 15:17:39.079"></status>
</kw>
<status endtime="20170825 15:17:39.079" status="PASS" starttime="20170825 15:17:38.895"></status>
</kw>
<status endtime="20170825 15:17:39.080" status="PASS" starttime="20170825 15:17:38.895"></status>
</kw>
<status endtime="20170825 15:17:39.080" status="PASS" starttime="20170825 15:17:38.894"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:39.080">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:17:39.080" status="PASS" starttime="20170825 15:17:39.080"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:39.082">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:17:39.082" status="PASS" starttime="20170825 15:17:39.082"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:39.083">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:17:39.083" status="PASS" starttime="20170825 15:17:39.083"></status>
</kw>
<status endtime="20170825 15:17:39.083" status="PASS" starttime="20170825 15:17:39.082"></status>
</kw>
<status endtime="20170825 15:17:39.084" status="PASS" starttime="20170825 15:17:39.081"></status>
</kw>
<status endtime="20170825 15:17:39.084" status="PASS" starttime="20170825 15:17:39.081"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:39.173">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:17:39.173">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:17:39.173" status="PASS" starttime="20170825 15:17:39.084"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:39.175">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:17:39.175" status="PASS" starttime="20170825 15:17:39.175"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:39.176">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:17:39.177" status="PASS" starttime="20170825 15:17:39.176"></status>
</kw>
<status endtime="20170825 15:17:39.177" status="PASS" starttime="20170825 15:17:39.175"></status>
</kw>
<status endtime="20170825 15:17:39.177" status="PASS" starttime="20170825 15:17:39.174"></status>
</kw>
<status endtime="20170825 15:17:39.177" status="PASS" starttime="20170825 15:17:39.174"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:17:39.177">Delete All Sessions</msg>
<status endtime="20170825 15:17:39.177" status="PASS" starttime="20170825 15:17:39.177"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:17:39.177">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:17:39.177" status="PASS" starttime="20170825 15:17:38.893"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:39.178">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:17:39.178" status="PASS" starttime="20170825 15:17:39.178"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:39.179">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:17:39.179">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:17:39.179">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:17:39.179" status="PASS" starttime="20170825 15:17:39.178"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:17:39.179">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170825 15:17:39.179" status="PASS" starttime="20170825 15:17:38.893"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:17:39.179">${host_state} = Quiesced</msg>
<status endtime="20170825 15:17:39.179" status="PASS" starttime="20170825 15:17:38.892"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:17:39.180">Running != Quiesced</msg>
<status endtime="20170825 15:17:39.180" status="FAIL" starttime="20170825 15:17:39.180"></status>
</kw>
<status endtime="20170825 15:17:39.180" status="FAIL" starttime="20170825 15:17:38.563"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:49.186">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:17:49.187" status="PASS" starttime="20170825 15:17:49.186"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:49.188">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:17:49.188" status="PASS" starttime="20170825 15:17:49.187"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:49.188">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:17:49.188" status="PASS" starttime="20170825 15:17:49.188"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:49.189">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:17:49.189" status="PASS" starttime="20170825 15:17:49.189"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:49.465">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:17:49.465" status="PASS" starttime="20170825 15:17:49.190"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:17:49.466">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:17:49.466">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:17:49.466" status="PASS" starttime="20170825 15:17:49.189"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:49.466">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:17:49.467" status="PASS" starttime="20170825 15:17:49.466"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:49.467">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:17:49.467" status="PASS" starttime="20170825 15:17:49.467"></status>
</kw>
<status endtime="20170825 15:17:49.467" status="PASS" starttime="20170825 15:17:49.185"></status>
</kw>
<status endtime="20170825 15:17:49.467" status="PASS" starttime="20170825 15:17:49.185"></status>
</kw>
<status endtime="20170825 15:17:49.468" status="PASS" starttime="20170825 15:17:49.183"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:49.468">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:17:49.468" status="PASS" starttime="20170825 15:17:49.468"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:49.470">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:17:49.470" status="PASS" starttime="20170825 15:17:49.470"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:49.471">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:17:49.471" status="PASS" starttime="20170825 15:17:49.471"></status>
</kw>
<status endtime="20170825 15:17:49.471" status="PASS" starttime="20170825 15:17:49.470"></status>
</kw>
<status endtime="20170825 15:17:49.472" status="PASS" starttime="20170825 15:17:49.469"></status>
</kw>
<status endtime="20170825 15:17:49.472" status="PASS" starttime="20170825 15:17:49.468"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:49.535">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:17:49.535">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:17:49.535" status="PASS" starttime="20170825 15:17:49.472"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:49.537">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:17:49.537" status="PASS" starttime="20170825 15:17:49.537"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:49.538">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:17:49.538" status="PASS" starttime="20170825 15:17:49.538"></status>
</kw>
<status endtime="20170825 15:17:49.538" status="PASS" starttime="20170825 15:17:49.537"></status>
</kw>
<status endtime="20170825 15:17:49.539" status="PASS" starttime="20170825 15:17:49.536"></status>
</kw>
<status endtime="20170825 15:17:49.539" status="PASS" starttime="20170825 15:17:49.536"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:17:49.539">Delete All Sessions</msg>
<status endtime="20170825 15:17:49.539" status="PASS" starttime="20170825 15:17:49.539"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:17:49.539">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:17:49.539" status="PASS" starttime="20170825 15:17:49.183"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:49.540">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:17:49.540" status="PASS" starttime="20170825 15:17:49.540"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:49.541">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:17:49.541">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:17:49.541">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:17:49.541" status="PASS" starttime="20170825 15:17:49.540"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:17:49.541">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:17:49.541" status="PASS" starttime="20170825 15:17:49.182"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:17:49.541">${power_state} = On</msg>
<status endtime="20170825 15:17:49.541" status="PASS" starttime="20170825 15:17:49.182"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:17:49.542" status="PASS" starttime="20170825 15:17:49.542"></status>
</kw>
<status endtime="20170825 15:17:49.542" status="PASS" starttime="20170825 15:17:49.181"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:49.546">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:17:49.546" status="PASS" starttime="20170825 15:17:49.545"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:49.547">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:17:49.547" status="PASS" starttime="20170825 15:17:49.547"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:49.548">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:17:49.548" status="PASS" starttime="20170825 15:17:49.547"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:49.548">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:17:49.548" status="PASS" starttime="20170825 15:17:49.548"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:49.729">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:17:49.729" status="PASS" starttime="20170825 15:17:49.549"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:17:49.729">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:17:49.729">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:17:49.729" status="PASS" starttime="20170825 15:17:49.549"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:49.730">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:17:49.730" status="PASS" starttime="20170825 15:17:49.729"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:49.730">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:17:49.730" status="PASS" starttime="20170825 15:17:49.730"></status>
</kw>
<status endtime="20170825 15:17:49.731" status="PASS" starttime="20170825 15:17:49.545"></status>
</kw>
<status endtime="20170825 15:17:49.731" status="PASS" starttime="20170825 15:17:49.544"></status>
</kw>
<status endtime="20170825 15:17:49.731" status="PASS" starttime="20170825 15:17:49.544"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:49.731">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:17:49.731" status="PASS" starttime="20170825 15:17:49.731"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:49.733">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:17:49.733" status="PASS" starttime="20170825 15:17:49.733"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:49.734">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:17:49.734" status="PASS" starttime="20170825 15:17:49.734"></status>
</kw>
<status endtime="20170825 15:17:49.735" status="PASS" starttime="20170825 15:17:49.734"></status>
</kw>
<status endtime="20170825 15:17:49.735" status="PASS" starttime="20170825 15:17:49.732"></status>
</kw>
<status endtime="20170825 15:17:49.735" status="PASS" starttime="20170825 15:17:49.732"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:49.856">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:17:49.856">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:17:49.856" status="PASS" starttime="20170825 15:17:49.735"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:49.858">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:17:49.858" status="PASS" starttime="20170825 15:17:49.857"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:49.859">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:17:49.859" status="PASS" starttime="20170825 15:17:49.859"></status>
</kw>
<status endtime="20170825 15:17:49.859" status="PASS" starttime="20170825 15:17:49.858"></status>
</kw>
<status endtime="20170825 15:17:49.859" status="PASS" starttime="20170825 15:17:49.857"></status>
</kw>
<status endtime="20170825 15:17:49.859" status="PASS" starttime="20170825 15:17:49.856"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:17:49.860">Delete All Sessions</msg>
<status endtime="20170825 15:17:49.860" status="PASS" starttime="20170825 15:17:49.859"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:17:49.860">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:17:49.860" status="PASS" starttime="20170825 15:17:49.543"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:49.860">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:17:49.861" status="PASS" starttime="20170825 15:17:49.860"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:49.861">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:17:49.861">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:17:49.861">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:17:49.861" status="PASS" starttime="20170825 15:17:49.861"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:17:49.862">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170825 15:17:49.862" status="PASS" starttime="20170825 15:17:49.543"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:17:49.862">${host_state} = Quiesced</msg>
<status endtime="20170825 15:17:49.862" status="PASS" starttime="20170825 15:17:49.542"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:17:49.863">Running != Quiesced</msg>
<status endtime="20170825 15:17:49.863" status="FAIL" starttime="20170825 15:17:49.862"></status>
</kw>
<status endtime="20170825 15:17:49.863" status="FAIL" starttime="20170825 15:17:49.181"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:17:59.870">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:17:59.870" status="PASS" starttime="20170825 15:17:59.869"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:59.871">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:17:59.871" status="PASS" starttime="20170825 15:17:59.871"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:59.872">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:17:59.872" status="PASS" starttime="20170825 15:17:59.872"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:17:59.873">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:17:59.873" status="PASS" starttime="20170825 15:17:59.872"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:00.055">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:18:00.055" status="PASS" starttime="20170825 15:17:59.874"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:18:00.055">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:18:00.055">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:18:00.055" status="PASS" starttime="20170825 15:17:59.874"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:00.056">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:18:00.056" status="PASS" starttime="20170825 15:18:00.055"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:00.057">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:18:00.057" status="PASS" starttime="20170825 15:18:00.056"></status>
</kw>
<status endtime="20170825 15:18:00.057" status="PASS" starttime="20170825 15:17:59.868"></status>
</kw>
<status endtime="20170825 15:18:00.057" status="PASS" starttime="20170825 15:17:59.868"></status>
</kw>
<status endtime="20170825 15:18:00.057" status="PASS" starttime="20170825 15:17:59.867"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:00.058">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:18:00.058" status="PASS" starttime="20170825 15:18:00.057"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:00.060">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:18:00.060" status="PASS" starttime="20170825 15:18:00.059"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:00.061">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:18:00.061" status="PASS" starttime="20170825 15:18:00.060"></status>
</kw>
<status endtime="20170825 15:18:00.061" status="PASS" starttime="20170825 15:18:00.060"></status>
</kw>
<status endtime="20170825 15:18:00.061" status="PASS" starttime="20170825 15:18:00.058"></status>
</kw>
<status endtime="20170825 15:18:00.061" status="PASS" starttime="20170825 15:18:00.058"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:00.149">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:18:00.149">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:18:00.149" status="PASS" starttime="20170825 15:18:00.062"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:00.151">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:18:00.151" status="PASS" starttime="20170825 15:18:00.150"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:00.152">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:18:00.152" status="PASS" starttime="20170825 15:18:00.151"></status>
</kw>
<status endtime="20170825 15:18:00.152" status="PASS" starttime="20170825 15:18:00.151"></status>
</kw>
<status endtime="20170825 15:18:00.152" status="PASS" starttime="20170825 15:18:00.150"></status>
</kw>
<status endtime="20170825 15:18:00.152" status="PASS" starttime="20170825 15:18:00.149"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:18:00.152">Delete All Sessions</msg>
<status endtime="20170825 15:18:00.152" status="PASS" starttime="20170825 15:18:00.152"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:18:00.153">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:18:00.153" status="PASS" starttime="20170825 15:17:59.866"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:00.153">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:18:00.153" status="PASS" starttime="20170825 15:18:00.153"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:00.154">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:18:00.154">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:18:00.154">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:18:00.154" status="PASS" starttime="20170825 15:18:00.154"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:18:00.154">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:18:00.154" status="PASS" starttime="20170825 15:17:59.865"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:18:00.155">${power_state} = On</msg>
<status endtime="20170825 15:18:00.155" status="PASS" starttime="20170825 15:17:59.864"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:18:00.155" status="PASS" starttime="20170825 15:18:00.155"></status>
</kw>
<status endtime="20170825 15:18:00.155" status="PASS" starttime="20170825 15:17:59.864"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:00.159">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:18:00.159" status="PASS" starttime="20170825 15:18:00.159"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:00.160">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:18:00.160" status="PASS" starttime="20170825 15:18:00.160"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:00.161">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:18:00.161" status="PASS" starttime="20170825 15:18:00.160"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:00.161">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:18:00.161" status="PASS" starttime="20170825 15:18:00.161"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:00.352">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:18:00.352" status="PASS" starttime="20170825 15:18:00.162"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:18:00.352">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:18:00.352">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:18:00.352" status="PASS" starttime="20170825 15:18:00.161"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:00.353">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:18:00.353" status="PASS" starttime="20170825 15:18:00.353"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:00.354">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:18:00.354" status="PASS" starttime="20170825 15:18:00.353"></status>
</kw>
<status endtime="20170825 15:18:00.354" status="PASS" starttime="20170825 15:18:00.158"></status>
</kw>
<status endtime="20170825 15:18:00.354" status="PASS" starttime="20170825 15:18:00.158"></status>
</kw>
<status endtime="20170825 15:18:00.354" status="PASS" starttime="20170825 15:18:00.157"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:00.355">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:18:00.355" status="PASS" starttime="20170825 15:18:00.354"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:00.357">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:18:00.357" status="PASS" starttime="20170825 15:18:00.356"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:00.358">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:18:00.358" status="PASS" starttime="20170825 15:18:00.358"></status>
</kw>
<status endtime="20170825 15:18:00.358" status="PASS" starttime="20170825 15:18:00.357"></status>
</kw>
<status endtime="20170825 15:18:00.358" status="PASS" starttime="20170825 15:18:00.355"></status>
</kw>
<status endtime="20170825 15:18:00.358" status="PASS" starttime="20170825 15:18:00.355"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:00.447">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:18:00.447">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:18:00.447" status="PASS" starttime="20170825 15:18:00.358"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:00.449">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:18:00.449" status="PASS" starttime="20170825 15:18:00.448"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:00.450">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:18:00.450" status="PASS" starttime="20170825 15:18:00.450"></status>
</kw>
<status endtime="20170825 15:18:00.450" status="PASS" starttime="20170825 15:18:00.449"></status>
</kw>
<status endtime="20170825 15:18:00.450" status="PASS" starttime="20170825 15:18:00.448"></status>
</kw>
<status endtime="20170825 15:18:00.450" status="PASS" starttime="20170825 15:18:00.447"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:18:00.451">Delete All Sessions</msg>
<status endtime="20170825 15:18:00.451" status="PASS" starttime="20170825 15:18:00.450"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:18:00.451">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:18:00.451" status="PASS" starttime="20170825 15:18:00.157"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:00.451">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:18:00.452" status="PASS" starttime="20170825 15:18:00.451"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:00.452">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:18:00.452">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:18:00.452">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:18:00.452" status="PASS" starttime="20170825 15:18:00.452"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:18:00.453">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170825 15:18:00.453" status="PASS" starttime="20170825 15:18:00.156"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:18:00.453">${host_state} = Quiesced</msg>
<status endtime="20170825 15:18:00.453" status="PASS" starttime="20170825 15:18:00.156"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:18:00.454">Running != Quiesced</msg>
<status endtime="20170825 15:18:00.454" status="FAIL" starttime="20170825 15:18:00.453"></status>
</kw>
<status endtime="20170825 15:18:00.454" status="FAIL" starttime="20170825 15:17:59.863"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:10.459">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:18:10.460" status="PASS" starttime="20170825 15:18:10.459"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:10.460">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:18:10.460" status="PASS" starttime="20170825 15:18:10.460"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:10.461">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:18:10.461" status="PASS" starttime="20170825 15:18:10.461"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:10.462">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:18:10.462" status="PASS" starttime="20170825 15:18:10.461"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:10.648">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:18:10.648" status="PASS" starttime="20170825 15:18:10.462"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:18:10.648">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:18:10.648">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:18:10.648" status="PASS" starttime="20170825 15:18:10.462"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:10.649">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:18:10.649" status="PASS" starttime="20170825 15:18:10.648"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:10.649">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:18:10.649" status="PASS" starttime="20170825 15:18:10.649"></status>
</kw>
<status endtime="20170825 15:18:10.649" status="PASS" starttime="20170825 15:18:10.458"></status>
</kw>
<status endtime="20170825 15:18:10.650" status="PASS" starttime="20170825 15:18:10.458"></status>
</kw>
<status endtime="20170825 15:18:10.650" status="PASS" starttime="20170825 15:18:10.457"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:10.650">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:18:10.650" status="PASS" starttime="20170825 15:18:10.650"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:10.652">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:18:10.652" status="PASS" starttime="20170825 15:18:10.652"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:10.653">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:18:10.653" status="PASS" starttime="20170825 15:18:10.653"></status>
</kw>
<status endtime="20170825 15:18:10.653" status="PASS" starttime="20170825 15:18:10.652"></status>
</kw>
<status endtime="20170825 15:18:10.653" status="PASS" starttime="20170825 15:18:10.651"></status>
</kw>
<status endtime="20170825 15:18:10.654" status="PASS" starttime="20170825 15:18:10.651"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:10.716">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:18:10.716">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:18:10.716" status="PASS" starttime="20170825 15:18:10.654"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:10.718">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:18:10.718" status="PASS" starttime="20170825 15:18:10.717"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:10.719">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:18:10.719" status="PASS" starttime="20170825 15:18:10.719"></status>
</kw>
<status endtime="20170825 15:18:10.719" status="PASS" starttime="20170825 15:18:10.718"></status>
</kw>
<status endtime="20170825 15:18:10.719" status="PASS" starttime="20170825 15:18:10.717"></status>
</kw>
<status endtime="20170825 15:18:10.719" status="PASS" starttime="20170825 15:18:10.716"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:18:10.720">Delete All Sessions</msg>
<status endtime="20170825 15:18:10.720" status="PASS" starttime="20170825 15:18:10.720"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:18:10.720">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:18:10.720" status="PASS" starttime="20170825 15:18:10.456"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:10.721">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:18:10.721" status="PASS" starttime="20170825 15:18:10.720"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:10.721">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:18:10.721">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:18:10.722">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:18:10.722" status="PASS" starttime="20170825 15:18:10.721"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:18:10.722">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:18:10.722" status="PASS" starttime="20170825 15:18:10.456"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:18:10.722">${power_state} = On</msg>
<status endtime="20170825 15:18:10.722" status="PASS" starttime="20170825 15:18:10.455"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:18:10.723" status="PASS" starttime="20170825 15:18:10.722"></status>
</kw>
<status endtime="20170825 15:18:10.723" status="PASS" starttime="20170825 15:18:10.455"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:10.727">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:18:10.728" status="PASS" starttime="20170825 15:18:10.727"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:10.729">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:18:10.729" status="PASS" starttime="20170825 15:18:10.728"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:10.730">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:18:10.730" status="PASS" starttime="20170825 15:18:10.729"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:10.731">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:18:10.731" status="PASS" starttime="20170825 15:18:10.730"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:10.922">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:18:10.922" status="PASS" starttime="20170825 15:18:10.732"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:18:10.922">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:18:10.922">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:18:10.922" status="PASS" starttime="20170825 15:18:10.731"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:10.923">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:18:10.923" status="PASS" starttime="20170825 15:18:10.922"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:10.923">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:18:10.923" status="PASS" starttime="20170825 15:18:10.923"></status>
</kw>
<status endtime="20170825 15:18:10.923" status="PASS" starttime="20170825 15:18:10.726"></status>
</kw>
<status endtime="20170825 15:18:10.923" status="PASS" starttime="20170825 15:18:10.726"></status>
</kw>
<status endtime="20170825 15:18:10.924" status="PASS" starttime="20170825 15:18:10.725"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:10.924">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:18:10.924" status="PASS" starttime="20170825 15:18:10.924"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:10.927">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:18:10.927" status="PASS" starttime="20170825 15:18:10.926"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:10.928">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:18:10.928" status="PASS" starttime="20170825 15:18:10.927"></status>
</kw>
<status endtime="20170825 15:18:10.928" status="PASS" starttime="20170825 15:18:10.927"></status>
</kw>
<status endtime="20170825 15:18:10.928" status="PASS" starttime="20170825 15:18:10.925"></status>
</kw>
<status endtime="20170825 15:18:10.928" status="PASS" starttime="20170825 15:18:10.924"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:11.017">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:18:11.017">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:18:11.017" status="PASS" starttime="20170825 15:18:10.928"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:11.019">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:18:11.019" status="PASS" starttime="20170825 15:18:11.019"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:11.020">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:18:11.020" status="PASS" starttime="20170825 15:18:11.020"></status>
</kw>
<status endtime="20170825 15:18:11.020" status="PASS" starttime="20170825 15:18:11.019"></status>
</kw>
<status endtime="20170825 15:18:11.020" status="PASS" starttime="20170825 15:18:11.018"></status>
</kw>
<status endtime="20170825 15:18:11.020" status="PASS" starttime="20170825 15:18:11.018"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:18:11.021">Delete All Sessions</msg>
<status endtime="20170825 15:18:11.021" status="PASS" starttime="20170825 15:18:11.021"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:18:11.021">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:18:11.021" status="PASS" starttime="20170825 15:18:10.724"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:11.022">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:18:11.022" status="PASS" starttime="20170825 15:18:11.021"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:11.022">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:18:11.022">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:18:11.023">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:18:11.023" status="PASS" starttime="20170825 15:18:11.022"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:18:11.023">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170825 15:18:11.023" status="PASS" starttime="20170825 15:18:10.723"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:18:11.023">${host_state} = Quiesced</msg>
<status endtime="20170825 15:18:11.023" status="PASS" starttime="20170825 15:18:10.723"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:18:11.024">Running != Quiesced</msg>
<status endtime="20170825 15:18:11.024" status="FAIL" starttime="20170825 15:18:11.023"></status>
</kw>
<status endtime="20170825 15:18:11.024" status="FAIL" starttime="20170825 15:18:10.454"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:21.029">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:18:21.030" status="PASS" starttime="20170825 15:18:21.029"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:21.030">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:18:21.030" status="PASS" starttime="20170825 15:18:21.030"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:21.031">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:18:21.031" status="PASS" starttime="20170825 15:18:21.030"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:21.032">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:18:21.032" status="PASS" starttime="20170825 15:18:21.031"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:21.289">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:18:21.289" status="PASS" starttime="20170825 15:18:21.033"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:18:21.289">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:18:21.289">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:18:21.289" status="PASS" starttime="20170825 15:18:21.032"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:21.290">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:18:21.290" status="PASS" starttime="20170825 15:18:21.290"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:21.291">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:18:21.291" status="PASS" starttime="20170825 15:18:21.290"></status>
</kw>
<status endtime="20170825 15:18:21.291" status="PASS" starttime="20170825 15:18:21.028"></status>
</kw>
<status endtime="20170825 15:18:21.291" status="PASS" starttime="20170825 15:18:21.028"></status>
</kw>
<status endtime="20170825 15:18:21.291" status="PASS" starttime="20170825 15:18:21.027"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:21.292">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:18:21.292" status="PASS" starttime="20170825 15:18:21.291"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:21.294">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:18:21.294" status="PASS" starttime="20170825 15:18:21.293"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:21.295">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:18:21.295" status="PASS" starttime="20170825 15:18:21.295"></status>
</kw>
<status endtime="20170825 15:18:21.295" status="PASS" starttime="20170825 15:18:21.294"></status>
</kw>
<status endtime="20170825 15:18:21.295" status="PASS" starttime="20170825 15:18:21.293"></status>
</kw>
<status endtime="20170825 15:18:21.295" status="PASS" starttime="20170825 15:18:21.292"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:21.367">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:18:21.367">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:18:21.367" status="PASS" starttime="20170825 15:18:21.295"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:21.369">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:18:21.369" status="PASS" starttime="20170825 15:18:21.368"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:21.370">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:18:21.370" status="PASS" starttime="20170825 15:18:21.370"></status>
</kw>
<status endtime="20170825 15:18:21.370" status="PASS" starttime="20170825 15:18:21.369"></status>
</kw>
<status endtime="20170825 15:18:21.370" status="PASS" starttime="20170825 15:18:21.368"></status>
</kw>
<status endtime="20170825 15:18:21.370" status="PASS" starttime="20170825 15:18:21.367"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:18:21.371">Delete All Sessions</msg>
<status endtime="20170825 15:18:21.371" status="PASS" starttime="20170825 15:18:21.371"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:18:21.371">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:18:21.371" status="PASS" starttime="20170825 15:18:21.027"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:21.372">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:18:21.372" status="PASS" starttime="20170825 15:18:21.372"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:21.373">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:18:21.373">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:18:21.373">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:18:21.373" status="PASS" starttime="20170825 15:18:21.372"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:18:21.373">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:18:21.373" status="PASS" starttime="20170825 15:18:21.026"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:18:21.374">${power_state} = On</msg>
<status endtime="20170825 15:18:21.374" status="PASS" starttime="20170825 15:18:21.026"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:18:21.374" status="PASS" starttime="20170825 15:18:21.374"></status>
</kw>
<status endtime="20170825 15:18:21.374" status="PASS" starttime="20170825 15:18:21.025"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:21.384">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:18:21.385" status="PASS" starttime="20170825 15:18:21.384"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:21.386">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:18:21.386" status="PASS" starttime="20170825 15:18:21.385"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:21.386">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:18:21.386" status="PASS" starttime="20170825 15:18:21.386"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:21.387">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:18:21.387" status="PASS" starttime="20170825 15:18:21.387"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:21.593">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:18:21.593" status="PASS" starttime="20170825 15:18:21.388"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:18:21.593">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:18:21.593">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:18:21.593" status="PASS" starttime="20170825 15:18:21.387"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:21.594">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:18:21.594" status="PASS" starttime="20170825 15:18:21.594"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:21.595">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:18:21.595" status="PASS" starttime="20170825 15:18:21.594"></status>
</kw>
<status endtime="20170825 15:18:21.595" status="PASS" starttime="20170825 15:18:21.383"></status>
</kw>
<status endtime="20170825 15:18:21.595" status="PASS" starttime="20170825 15:18:21.377"></status>
</kw>
<status endtime="20170825 15:18:21.595" status="PASS" starttime="20170825 15:18:21.376"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:21.596">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:18:21.596" status="PASS" starttime="20170825 15:18:21.595"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:21.598">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:18:21.598" status="PASS" starttime="20170825 15:18:21.597"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:21.599">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:18:21.599" status="PASS" starttime="20170825 15:18:21.599"></status>
</kw>
<status endtime="20170825 15:18:21.599" status="PASS" starttime="20170825 15:18:21.598"></status>
</kw>
<status endtime="20170825 15:18:21.599" status="PASS" starttime="20170825 15:18:21.597"></status>
</kw>
<status endtime="20170825 15:18:21.599" status="PASS" starttime="20170825 15:18:21.596"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:21.707">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:18:21.708">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:18:21.708" status="PASS" starttime="20170825 15:18:21.600"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:21.710">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:18:21.710" status="PASS" starttime="20170825 15:18:21.709"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:21.711">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:18:21.711" status="PASS" starttime="20170825 15:18:21.710"></status>
</kw>
<status endtime="20170825 15:18:21.711" status="PASS" starttime="20170825 15:18:21.710"></status>
</kw>
<status endtime="20170825 15:18:21.711" status="PASS" starttime="20170825 15:18:21.708"></status>
</kw>
<status endtime="20170825 15:18:21.711" status="PASS" starttime="20170825 15:18:21.708"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:18:21.711">Delete All Sessions</msg>
<status endtime="20170825 15:18:21.711" status="PASS" starttime="20170825 15:18:21.711"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:18:21.712">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:18:21.712" status="PASS" starttime="20170825 15:18:21.375"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:21.712">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:18:21.712" status="PASS" starttime="20170825 15:18:21.712"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:21.713">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:18:21.713">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:18:21.713">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:18:21.713" status="PASS" starttime="20170825 15:18:21.713"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:18:21.713">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170825 15:18:21.713" status="PASS" starttime="20170825 15:18:21.375"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:18:21.714">${host_state} = Quiesced</msg>
<status endtime="20170825 15:18:21.714" status="PASS" starttime="20170825 15:18:21.374"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:18:21.714">Running != Quiesced</msg>
<status endtime="20170825 15:18:21.714" status="FAIL" starttime="20170825 15:18:21.714"></status>
</kw>
<status endtime="20170825 15:18:21.715" status="FAIL" starttime="20170825 15:18:21.025"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:31.719">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:18:31.720" status="PASS" starttime="20170825 15:18:31.719"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:31.720">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:18:31.720" status="PASS" starttime="20170825 15:18:31.720"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:31.721">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:18:31.721" status="PASS" starttime="20170825 15:18:31.721"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:31.722">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:18:31.722" status="PASS" starttime="20170825 15:18:31.721"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:31.914">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:18:31.915" status="PASS" starttime="20170825 15:18:31.722"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:18:31.915">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:18:31.915">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:18:31.915" status="PASS" starttime="20170825 15:18:31.722"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:31.915">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:18:31.915" status="PASS" starttime="20170825 15:18:31.915"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:31.916">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:18:31.916" status="PASS" starttime="20170825 15:18:31.916"></status>
</kw>
<status endtime="20170825 15:18:31.916" status="PASS" starttime="20170825 15:18:31.719"></status>
</kw>
<status endtime="20170825 15:18:31.916" status="PASS" starttime="20170825 15:18:31.718"></status>
</kw>
<status endtime="20170825 15:18:31.916" status="PASS" starttime="20170825 15:18:31.718"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:31.917">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:18:31.917" status="PASS" starttime="20170825 15:18:31.917"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:31.919">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:18:31.919" status="PASS" starttime="20170825 15:18:31.918"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:31.920">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:18:31.920" status="PASS" starttime="20170825 15:18:31.920"></status>
</kw>
<status endtime="20170825 15:18:31.920" status="PASS" starttime="20170825 15:18:31.919"></status>
</kw>
<status endtime="20170825 15:18:31.920" status="PASS" starttime="20170825 15:18:31.918"></status>
</kw>
<status endtime="20170825 15:18:31.920" status="PASS" starttime="20170825 15:18:31.917"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:32.013">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:18:32.013">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:18:32.013" status="PASS" starttime="20170825 15:18:31.921"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:32.016">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:18:32.016" status="PASS" starttime="20170825 15:18:32.015"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:32.017">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:18:32.017" status="PASS" starttime="20170825 15:18:32.016"></status>
</kw>
<status endtime="20170825 15:18:32.017" status="PASS" starttime="20170825 15:18:32.016"></status>
</kw>
<status endtime="20170825 15:18:32.017" status="PASS" starttime="20170825 15:18:32.015"></status>
</kw>
<status endtime="20170825 15:18:32.017" status="PASS" starttime="20170825 15:18:32.014"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:18:32.017">Delete All Sessions</msg>
<status endtime="20170825 15:18:32.018" status="PASS" starttime="20170825 15:18:32.017"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:18:32.018">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:18:32.018" status="PASS" starttime="20170825 15:18:31.717"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:32.018">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:18:32.018" status="PASS" starttime="20170825 15:18:32.018"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:32.019">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:18:32.019">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:18:32.019">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:18:32.019" status="PASS" starttime="20170825 15:18:32.019"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:18:32.019">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:18:32.019" status="PASS" starttime="20170825 15:18:31.716"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:18:32.020">${power_state} = On</msg>
<status endtime="20170825 15:18:32.020" status="PASS" starttime="20170825 15:18:31.716"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:18:32.020" status="PASS" starttime="20170825 15:18:32.020"></status>
</kw>
<status endtime="20170825 15:18:32.020" status="PASS" starttime="20170825 15:18:31.716"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:32.024">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:18:32.025" status="PASS" starttime="20170825 15:18:32.024"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:32.025">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:18:32.025" status="PASS" starttime="20170825 15:18:32.025"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:32.026">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:18:32.026" status="PASS" starttime="20170825 15:18:32.025"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:32.026">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:18:32.027" status="PASS" starttime="20170825 15:18:32.026"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:32.301">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:18:32.301" status="PASS" starttime="20170825 15:18:32.027"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:18:32.301">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:18:32.301">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:18:32.301" status="PASS" starttime="20170825 15:18:32.027"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:32.302">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:18:32.302" status="PASS" starttime="20170825 15:18:32.301"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:32.302">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:18:32.302" status="PASS" starttime="20170825 15:18:32.302"></status>
</kw>
<status endtime="20170825 15:18:32.303" status="PASS" starttime="20170825 15:18:32.023"></status>
</kw>
<status endtime="20170825 15:18:32.303" status="PASS" starttime="20170825 15:18:32.023"></status>
</kw>
<status endtime="20170825 15:18:32.303" status="PASS" starttime="20170825 15:18:32.022"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:32.303">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:18:32.303" status="PASS" starttime="20170825 15:18:32.303"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:32.305">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:18:32.305" status="PASS" starttime="20170825 15:18:32.305"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:32.306">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:18:32.306" status="PASS" starttime="20170825 15:18:32.306"></status>
</kw>
<status endtime="20170825 15:18:32.307" status="PASS" starttime="20170825 15:18:32.306"></status>
</kw>
<status endtime="20170825 15:18:32.307" status="PASS" starttime="20170825 15:18:32.304"></status>
</kw>
<status endtime="20170825 15:18:32.307" status="PASS" starttime="20170825 15:18:32.304"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:32.396">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:18:32.396">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:18:32.396" status="PASS" starttime="20170825 15:18:32.307"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:32.398">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:18:32.398" status="PASS" starttime="20170825 15:18:32.397"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:32.399">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:18:32.399" status="PASS" starttime="20170825 15:18:32.399"></status>
</kw>
<status endtime="20170825 15:18:32.399" status="PASS" starttime="20170825 15:18:32.398"></status>
</kw>
<status endtime="20170825 15:18:32.399" status="PASS" starttime="20170825 15:18:32.397"></status>
</kw>
<status endtime="20170825 15:18:32.399" status="PASS" starttime="20170825 15:18:32.396"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:18:32.400">Delete All Sessions</msg>
<status endtime="20170825 15:18:32.400" status="PASS" starttime="20170825 15:18:32.400"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:18:32.400">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:18:32.400" status="PASS" starttime="20170825 15:18:32.021"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:32.401">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:18:32.401" status="PASS" starttime="20170825 15:18:32.400"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:32.401">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:18:32.401">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:18:32.401">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:18:32.401" status="PASS" starttime="20170825 15:18:32.401"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:18:32.402">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170825 15:18:32.402" status="PASS" starttime="20170825 15:18:32.021"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:18:32.402">${host_state} = Quiesced</msg>
<status endtime="20170825 15:18:32.402" status="PASS" starttime="20170825 15:18:32.021"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:18:32.403">Running != Quiesced</msg>
<status endtime="20170825 15:18:32.403" status="FAIL" starttime="20170825 15:18:32.402"></status>
</kw>
<status endtime="20170825 15:18:32.403" status="FAIL" starttime="20170825 15:18:31.715"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:42.408">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:18:42.409" status="PASS" starttime="20170825 15:18:42.408"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:42.409">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:18:42.409" status="PASS" starttime="20170825 15:18:42.409"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:42.410">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:18:42.410" status="PASS" starttime="20170825 15:18:42.409"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:42.410">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:18:42.410" status="PASS" starttime="20170825 15:18:42.410"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:42.592">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:18:42.592" status="PASS" starttime="20170825 15:18:42.411"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:18:42.592">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:18:42.592">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:18:42.592" status="PASS" starttime="20170825 15:18:42.411"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:42.593">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:18:42.593" status="PASS" starttime="20170825 15:18:42.593"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:42.594">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:18:42.594" status="PASS" starttime="20170825 15:18:42.593"></status>
</kw>
<status endtime="20170825 15:18:42.594" status="PASS" starttime="20170825 15:18:42.407"></status>
</kw>
<status endtime="20170825 15:18:42.594" status="PASS" starttime="20170825 15:18:42.407"></status>
</kw>
<status endtime="20170825 15:18:42.594" status="PASS" starttime="20170825 15:18:42.406"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:42.595">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:18:42.595" status="PASS" starttime="20170825 15:18:42.594"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:42.597">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:18:42.597" status="PASS" starttime="20170825 15:18:42.596"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:42.598">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:18:42.598" status="PASS" starttime="20170825 15:18:42.598"></status>
</kw>
<status endtime="20170825 15:18:42.598" status="PASS" starttime="20170825 15:18:42.597"></status>
</kw>
<status endtime="20170825 15:18:42.598" status="PASS" starttime="20170825 15:18:42.595"></status>
</kw>
<status endtime="20170825 15:18:42.599" status="PASS" starttime="20170825 15:18:42.595"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:42.661">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:18:42.661">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:18:42.661" status="PASS" starttime="20170825 15:18:42.599"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:42.663">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:18:42.663" status="PASS" starttime="20170825 15:18:42.662"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:42.665">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:18:42.665" status="PASS" starttime="20170825 15:18:42.664"></status>
</kw>
<status endtime="20170825 15:18:42.665" status="PASS" starttime="20170825 15:18:42.663"></status>
</kw>
<status endtime="20170825 15:18:42.665" status="PASS" starttime="20170825 15:18:42.662"></status>
</kw>
<status endtime="20170825 15:18:42.665" status="PASS" starttime="20170825 15:18:42.661"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:18:42.665">Delete All Sessions</msg>
<status endtime="20170825 15:18:42.666" status="PASS" starttime="20170825 15:18:42.665"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:18:42.666">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:18:42.666" status="PASS" starttime="20170825 15:18:42.406"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:42.666">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:18:42.666" status="PASS" starttime="20170825 15:18:42.666"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:42.667">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:18:42.667">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:18:42.667">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:18:42.667" status="PASS" starttime="20170825 15:18:42.667"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:18:42.668">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:18:42.668" status="PASS" starttime="20170825 15:18:42.405"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:18:42.668">${power_state} = On</msg>
<status endtime="20170825 15:18:42.668" status="PASS" starttime="20170825 15:18:42.404"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:18:42.668" status="PASS" starttime="20170825 15:18:42.668"></status>
</kw>
<status endtime="20170825 15:18:42.669" status="PASS" starttime="20170825 15:18:42.404"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:42.672">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:18:42.672" status="PASS" starttime="20170825 15:18:42.672"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:42.673">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:18:42.673" status="PASS" starttime="20170825 15:18:42.673"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:42.674">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:18:42.674" status="PASS" starttime="20170825 15:18:42.673"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:42.675">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:18:42.675" status="PASS" starttime="20170825 15:18:42.674"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:42.926">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:18:42.926" status="PASS" starttime="20170825 15:18:42.676"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:18:42.926">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:18:42.926">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:18:42.926" status="PASS" starttime="20170825 15:18:42.675"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:42.927">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:18:42.927" status="PASS" starttime="20170825 15:18:42.926"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:42.927">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:18:42.927" status="PASS" starttime="20170825 15:18:42.927"></status>
</kw>
<status endtime="20170825 15:18:42.928" status="PASS" starttime="20170825 15:18:42.671"></status>
</kw>
<status endtime="20170825 15:18:42.928" status="PASS" starttime="20170825 15:18:42.671"></status>
</kw>
<status endtime="20170825 15:18:42.928" status="PASS" starttime="20170825 15:18:42.670"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:42.928">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:18:42.928" status="PASS" starttime="20170825 15:18:42.928"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:42.930">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:18:42.930" status="PASS" starttime="20170825 15:18:42.930"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:42.931">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:18:42.931" status="PASS" starttime="20170825 15:18:42.931"></status>
</kw>
<status endtime="20170825 15:18:42.932" status="PASS" starttime="20170825 15:18:42.931"></status>
</kw>
<status endtime="20170825 15:18:42.932" status="PASS" starttime="20170825 15:18:42.929"></status>
</kw>
<status endtime="20170825 15:18:42.932" status="PASS" starttime="20170825 15:18:42.929"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:43.096">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:18:43.096">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:18:43.096" status="PASS" starttime="20170825 15:18:42.932"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:43.098">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:18:43.098" status="PASS" starttime="20170825 15:18:43.097"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:43.098">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:18:43.099" status="PASS" starttime="20170825 15:18:43.098"></status>
</kw>
<status endtime="20170825 15:18:43.099" status="PASS" starttime="20170825 15:18:43.098"></status>
</kw>
<status endtime="20170825 15:18:43.099" status="PASS" starttime="20170825 15:18:43.097"></status>
</kw>
<status endtime="20170825 15:18:43.099" status="PASS" starttime="20170825 15:18:43.096"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:18:43.099">Delete All Sessions</msg>
<status endtime="20170825 15:18:43.099" status="PASS" starttime="20170825 15:18:43.099"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:18:43.100">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:18:43.100" status="PASS" starttime="20170825 15:18:42.670"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:43.100">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:18:43.100" status="PASS" starttime="20170825 15:18:43.100"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:43.101">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:18:43.101">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:18:43.101">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:18:43.101" status="PASS" starttime="20170825 15:18:43.101"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:18:43.101">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170825 15:18:43.101" status="PASS" starttime="20170825 15:18:42.669"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:18:43.102">${host_state} = Quiesced</msg>
<status endtime="20170825 15:18:43.102" status="PASS" starttime="20170825 15:18:42.669"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:18:43.102">Running != Quiesced</msg>
<status endtime="20170825 15:18:43.102" status="FAIL" starttime="20170825 15:18:43.102"></status>
</kw>
<status endtime="20170825 15:18:43.103" status="FAIL" starttime="20170825 15:18:42.403"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:53.108">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:18:53.108" status="PASS" starttime="20170825 15:18:53.108"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:53.109">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:18:53.109" status="PASS" starttime="20170825 15:18:53.109"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:53.110">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:18:53.110" status="PASS" starttime="20170825 15:18:53.109"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:53.110">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:18:53.110" status="PASS" starttime="20170825 15:18:53.110"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:53.312">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:18:53.312" status="PASS" starttime="20170825 15:18:53.111"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:18:53.312">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:18:53.312">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:18:53.312" status="PASS" starttime="20170825 15:18:53.111"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:53.313">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:18:53.313" status="PASS" starttime="20170825 15:18:53.312"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:53.314">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:18:53.314" status="PASS" starttime="20170825 15:18:53.313"></status>
</kw>
<status endtime="20170825 15:18:53.314" status="PASS" starttime="20170825 15:18:53.107"></status>
</kw>
<status endtime="20170825 15:18:53.314" status="PASS" starttime="20170825 15:18:53.106"></status>
</kw>
<status endtime="20170825 15:18:53.314" status="PASS" starttime="20170825 15:18:53.106"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:53.315">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:18:53.315" status="PASS" starttime="20170825 15:18:53.314"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:53.317">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:18:53.317" status="PASS" starttime="20170825 15:18:53.316"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:53.318">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:18:53.318" status="PASS" starttime="20170825 15:18:53.318"></status>
</kw>
<status endtime="20170825 15:18:53.318" status="PASS" starttime="20170825 15:18:53.317"></status>
</kw>
<status endtime="20170825 15:18:53.318" status="PASS" starttime="20170825 15:18:53.315"></status>
</kw>
<status endtime="20170825 15:18:53.318" status="PASS" starttime="20170825 15:18:53.315"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:53.410">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:18:53.410">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:18:53.410" status="PASS" starttime="20170825 15:18:53.318"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:53.412">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:18:53.412" status="PASS" starttime="20170825 15:18:53.412"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:53.414">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:18:53.414" status="PASS" starttime="20170825 15:18:53.413"></status>
</kw>
<status endtime="20170825 15:18:53.414" status="PASS" starttime="20170825 15:18:53.413"></status>
</kw>
<status endtime="20170825 15:18:53.414" status="PASS" starttime="20170825 15:18:53.411"></status>
</kw>
<status endtime="20170825 15:18:53.414" status="PASS" starttime="20170825 15:18:53.411"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:18:53.414">Delete All Sessions</msg>
<status endtime="20170825 15:18:53.415" status="PASS" starttime="20170825 15:18:53.414"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:18:53.415">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:18:53.415" status="PASS" starttime="20170825 15:18:53.105"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:53.415">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:18:53.415" status="PASS" starttime="20170825 15:18:53.415"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:53.416">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:18:53.416">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:18:53.416">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:18:53.416" status="PASS" starttime="20170825 15:18:53.416"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:18:53.417">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:18:53.417" status="PASS" starttime="20170825 15:18:53.104"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:18:53.418">${power_state} = On</msg>
<status endtime="20170825 15:18:53.418" status="PASS" starttime="20170825 15:18:53.104"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:18:53.418" status="PASS" starttime="20170825 15:18:53.418"></status>
</kw>
<status endtime="20170825 15:18:53.419" status="PASS" starttime="20170825 15:18:53.104"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:53.422">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:18:53.422" status="PASS" starttime="20170825 15:18:53.422"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:53.423">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:18:53.423" status="PASS" starttime="20170825 15:18:53.423"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:53.424">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:18:53.424" status="PASS" starttime="20170825 15:18:53.423"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:53.424">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:18:53.424" status="PASS" starttime="20170825 15:18:53.424"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:53.689">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:18:53.689" status="PASS" starttime="20170825 15:18:53.425"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:18:53.689">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:18:53.689">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:18:53.689" status="PASS" starttime="20170825 15:18:53.425"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:53.690">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:18:53.690" status="PASS" starttime="20170825 15:18:53.690"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:53.691">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:18:53.691" status="PASS" starttime="20170825 15:18:53.690"></status>
</kw>
<status endtime="20170825 15:18:53.691" status="PASS" starttime="20170825 15:18:53.421"></status>
</kw>
<status endtime="20170825 15:18:53.691" status="PASS" starttime="20170825 15:18:53.421"></status>
</kw>
<status endtime="20170825 15:18:53.691" status="PASS" starttime="20170825 15:18:53.420"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:53.692">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:18:53.692" status="PASS" starttime="20170825 15:18:53.691"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:53.694">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:18:53.694" status="PASS" starttime="20170825 15:18:53.693"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:53.695">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:18:53.695" status="PASS" starttime="20170825 15:18:53.695"></status>
</kw>
<status endtime="20170825 15:18:53.695" status="PASS" starttime="20170825 15:18:53.694"></status>
</kw>
<status endtime="20170825 15:18:53.695" status="PASS" starttime="20170825 15:18:53.693"></status>
</kw>
<status endtime="20170825 15:18:53.696" status="PASS" starttime="20170825 15:18:53.692"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:53.788">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:18:53.788">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:18:53.788" status="PASS" starttime="20170825 15:18:53.696"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:53.790">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:18:53.790" status="PASS" starttime="20170825 15:18:53.790"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:53.792">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:18:53.792" status="PASS" starttime="20170825 15:18:53.791"></status>
</kw>
<status endtime="20170825 15:18:53.792" status="PASS" starttime="20170825 15:18:53.791"></status>
</kw>
<status endtime="20170825 15:18:53.792" status="PASS" starttime="20170825 15:18:53.789"></status>
</kw>
<status endtime="20170825 15:18:53.792" status="PASS" starttime="20170825 15:18:53.789"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:18:53.793">Delete All Sessions</msg>
<status endtime="20170825 15:18:53.793" status="PASS" starttime="20170825 15:18:53.792"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:18:53.793">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:18:53.793" status="PASS" starttime="20170825 15:18:53.420"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:18:53.794">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:18:53.794" status="PASS" starttime="20170825 15:18:53.793"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:18:53.794">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:18:53.794">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:18:53.794">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:18:53.794" status="PASS" starttime="20170825 15:18:53.794"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:18:53.795">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170825 15:18:53.795" status="PASS" starttime="20170825 15:18:53.419"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:18:53.795">${host_state} = Quiesced</msg>
<status endtime="20170825 15:18:53.795" status="PASS" starttime="20170825 15:18:53.419"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:18:53.796">Running != Quiesced</msg>
<status endtime="20170825 15:18:53.796" status="FAIL" starttime="20170825 15:18:53.795"></status>
</kw>
<status endtime="20170825 15:18:53.796" status="FAIL" starttime="20170825 15:18:53.103"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:03.801">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:19:03.801" status="PASS" starttime="20170825 15:19:03.800"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:03.802">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:19:03.802" status="PASS" starttime="20170825 15:19:03.801"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:03.802">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:19:03.802" status="PASS" starttime="20170825 15:19:03.802"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:03.803">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:19:03.803" status="PASS" starttime="20170825 15:19:03.802"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:03.983">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:19:03.983" status="PASS" starttime="20170825 15:19:03.804"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:19:03.983">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:19:03.983">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:19:03.983" status="PASS" starttime="20170825 15:19:03.804"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:03.983">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:19:03.984" status="PASS" starttime="20170825 15:19:03.983"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:03.984">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:19:03.984" status="PASS" starttime="20170825 15:19:03.984"></status>
</kw>
<status endtime="20170825 15:19:03.984" status="PASS" starttime="20170825 15:19:03.800"></status>
</kw>
<status endtime="20170825 15:19:03.984" status="PASS" starttime="20170825 15:19:03.799"></status>
</kw>
<status endtime="20170825 15:19:03.985" status="PASS" starttime="20170825 15:19:03.799"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:03.985">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:19:03.985" status="PASS" starttime="20170825 15:19:03.985"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:03.987">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:19:03.987" status="PASS" starttime="20170825 15:19:03.987"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:03.989">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:19:03.989" status="PASS" starttime="20170825 15:19:03.988"></status>
</kw>
<status endtime="20170825 15:19:03.989" status="PASS" starttime="20170825 15:19:03.988"></status>
</kw>
<status endtime="20170825 15:19:03.989" status="PASS" starttime="20170825 15:19:03.986"></status>
</kw>
<status endtime="20170825 15:19:03.989" status="PASS" starttime="20170825 15:19:03.986"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:04.053">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:19:04.053">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:19:04.053" status="PASS" starttime="20170825 15:19:03.989"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:04.055">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:19:04.055" status="PASS" starttime="20170825 15:19:04.054"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:04.056">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:19:04.056" status="PASS" starttime="20170825 15:19:04.056"></status>
</kw>
<status endtime="20170825 15:19:04.056" status="PASS" starttime="20170825 15:19:04.055"></status>
</kw>
<status endtime="20170825 15:19:04.056" status="PASS" starttime="20170825 15:19:04.054"></status>
</kw>
<status endtime="20170825 15:19:04.056" status="PASS" starttime="20170825 15:19:04.053"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:19:04.057">Delete All Sessions</msg>
<status endtime="20170825 15:19:04.057" status="PASS" starttime="20170825 15:19:04.056"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:19:04.057">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:19:04.057" status="PASS" starttime="20170825 15:19:03.798"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:04.059">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:19:04.059" status="PASS" starttime="20170825 15:19:04.058"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:04.059">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:19:04.059">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:19:04.060">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:19:04.060" status="PASS" starttime="20170825 15:19:04.059"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:19:04.060">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:19:04.060" status="PASS" starttime="20170825 15:19:03.798"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:19:04.060">${power_state} = On</msg>
<status endtime="20170825 15:19:04.060" status="PASS" starttime="20170825 15:19:03.797"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:19:04.061" status="PASS" starttime="20170825 15:19:04.061"></status>
</kw>
<status endtime="20170825 15:19:04.061" status="PASS" starttime="20170825 15:19:03.797"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:04.065">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:19:04.065" status="PASS" starttime="20170825 15:19:04.065"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:04.066">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:19:04.066" status="PASS" starttime="20170825 15:19:04.065"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:04.066">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:19:04.066" status="PASS" starttime="20170825 15:19:04.066"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:04.067">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:19:04.067" status="PASS" starttime="20170825 15:19:04.067"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:04.253">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:19:04.253" status="PASS" starttime="20170825 15:19:04.068"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:19:04.253">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:19:04.253">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:19:04.253" status="PASS" starttime="20170825 15:19:04.067"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:04.254">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:19:04.254" status="PASS" starttime="20170825 15:19:04.253"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:04.254">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:19:04.254" status="PASS" starttime="20170825 15:19:04.254"></status>
</kw>
<status endtime="20170825 15:19:04.255" status="PASS" starttime="20170825 15:19:04.064"></status>
</kw>
<status endtime="20170825 15:19:04.255" status="PASS" starttime="20170825 15:19:04.063"></status>
</kw>
<status endtime="20170825 15:19:04.255" status="PASS" starttime="20170825 15:19:04.063"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:04.255">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:19:04.255" status="PASS" starttime="20170825 15:19:04.255"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:04.257">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:19:04.257" status="PASS" starttime="20170825 15:19:04.257"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:04.258">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:19:04.258" status="PASS" starttime="20170825 15:19:04.258"></status>
</kw>
<status endtime="20170825 15:19:04.259" status="PASS" starttime="20170825 15:19:04.258"></status>
</kw>
<status endtime="20170825 15:19:04.259" status="PASS" starttime="20170825 15:19:04.256"></status>
</kw>
<status endtime="20170825 15:19:04.259" status="PASS" starttime="20170825 15:19:04.256"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:04.348">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:19:04.348">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:19:04.348" status="PASS" starttime="20170825 15:19:04.259"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:04.354">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:19:04.354" status="PASS" starttime="20170825 15:19:04.349"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:04.355">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:19:04.355" status="PASS" starttime="20170825 15:19:04.355"></status>
</kw>
<status endtime="20170825 15:19:04.355" status="PASS" starttime="20170825 15:19:04.354"></status>
</kw>
<status endtime="20170825 15:19:04.355" status="PASS" starttime="20170825 15:19:04.349"></status>
</kw>
<status endtime="20170825 15:19:04.355" status="PASS" starttime="20170825 15:19:04.349"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:19:04.356">Delete All Sessions</msg>
<status endtime="20170825 15:19:04.356" status="PASS" starttime="20170825 15:19:04.355"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:19:04.356">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:19:04.356" status="PASS" starttime="20170825 15:19:04.062"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:04.356">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:19:04.357" status="PASS" starttime="20170825 15:19:04.356"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:04.357">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:19:04.357">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:19:04.357">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:19:04.357" status="PASS" starttime="20170825 15:19:04.357"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:19:04.358">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170825 15:19:04.358" status="PASS" starttime="20170825 15:19:04.061"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:19:04.358">${host_state} = Quiesced</msg>
<status endtime="20170825 15:19:04.358" status="PASS" starttime="20170825 15:19:04.061"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:19:04.359">Running != Quiesced</msg>
<status endtime="20170825 15:19:04.359" status="FAIL" starttime="20170825 15:19:04.358"></status>
</kw>
<status endtime="20170825 15:19:04.359" status="FAIL" starttime="20170825 15:19:03.796"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:14.364">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:19:14.365" status="PASS" starttime="20170825 15:19:14.364"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:14.365">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:19:14.365" status="PASS" starttime="20170825 15:19:14.365"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:14.366">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:19:14.366" status="PASS" starttime="20170825 15:19:14.365"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:14.366">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:19:14.366" status="PASS" starttime="20170825 15:19:14.366"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:14.559">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:19:14.559" status="PASS" starttime="20170825 15:19:14.367"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:19:14.559">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:19:14.559">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:19:14.559" status="PASS" starttime="20170825 15:19:14.367"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:14.560">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:19:14.560" status="PASS" starttime="20170825 15:19:14.560"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:14.561">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:19:14.561" status="PASS" starttime="20170825 15:19:14.560"></status>
</kw>
<status endtime="20170825 15:19:14.561" status="PASS" starttime="20170825 15:19:14.363"></status>
</kw>
<status endtime="20170825 15:19:14.561" status="PASS" starttime="20170825 15:19:14.363"></status>
</kw>
<status endtime="20170825 15:19:14.561" status="PASS" starttime="20170825 15:19:14.362"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:14.562">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:19:14.562" status="PASS" starttime="20170825 15:19:14.561"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:14.564">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:19:14.564" status="PASS" starttime="20170825 15:19:14.563"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:14.565">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:19:14.565" status="PASS" starttime="20170825 15:19:14.565"></status>
</kw>
<status endtime="20170825 15:19:14.565" status="PASS" starttime="20170825 15:19:14.564"></status>
</kw>
<status endtime="20170825 15:19:14.565" status="PASS" starttime="20170825 15:19:14.563"></status>
</kw>
<status endtime="20170825 15:19:14.565" status="PASS" starttime="20170825 15:19:14.562"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:14.640">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:19:14.640">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:19:14.640" status="PASS" starttime="20170825 15:19:14.565"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:14.642">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:19:14.642" status="PASS" starttime="20170825 15:19:14.642"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:14.643">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:19:14.643" status="PASS" starttime="20170825 15:19:14.643"></status>
</kw>
<status endtime="20170825 15:19:14.643" status="PASS" starttime="20170825 15:19:14.642"></status>
</kw>
<status endtime="20170825 15:19:14.644" status="PASS" starttime="20170825 15:19:14.641"></status>
</kw>
<status endtime="20170825 15:19:14.644" status="PASS" starttime="20170825 15:19:14.641"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:19:14.644">Delete All Sessions</msg>
<status endtime="20170825 15:19:14.644" status="PASS" starttime="20170825 15:19:14.644"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:19:14.644">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:19:14.644" status="PASS" starttime="20170825 15:19:14.362"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:14.645">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:19:14.645" status="PASS" starttime="20170825 15:19:14.645"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:14.646">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:19:14.646">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:19:14.646">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:19:14.646" status="PASS" starttime="20170825 15:19:14.645"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:19:14.646">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:19:14.646" status="PASS" starttime="20170825 15:19:14.361"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:19:14.646">${power_state} = On</msg>
<status endtime="20170825 15:19:14.646" status="PASS" starttime="20170825 15:19:14.361"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:19:14.647" status="PASS" starttime="20170825 15:19:14.647"></status>
</kw>
<status endtime="20170825 15:19:14.647" status="PASS" starttime="20170825 15:19:14.360"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:14.652">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:19:14.652" status="PASS" starttime="20170825 15:19:14.651"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:14.653">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:19:14.653" status="PASS" starttime="20170825 15:19:14.653"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:14.654">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:19:14.654" status="PASS" starttime="20170825 15:19:14.653"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:14.654">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:19:14.654" status="PASS" starttime="20170825 15:19:14.654"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:14.843">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:19:14.843" status="PASS" starttime="20170825 15:19:14.655"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:19:14.843">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:19:14.844">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:19:14.844" status="PASS" starttime="20170825 15:19:14.655"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:14.844">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:19:14.844" status="PASS" starttime="20170825 15:19:14.844"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:14.845">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:19:14.845" status="PASS" starttime="20170825 15:19:14.845"></status>
</kw>
<status endtime="20170825 15:19:14.845" status="PASS" starttime="20170825 15:19:14.650"></status>
</kw>
<status endtime="20170825 15:19:14.845" status="PASS" starttime="20170825 15:19:14.649"></status>
</kw>
<status endtime="20170825 15:19:14.845" status="PASS" starttime="20170825 15:19:14.649"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:14.846">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:19:14.846" status="PASS" starttime="20170825 15:19:14.846"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:14.848">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:19:14.848" status="PASS" starttime="20170825 15:19:14.847"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:14.849">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:19:14.849" status="PASS" starttime="20170825 15:19:14.849"></status>
</kw>
<status endtime="20170825 15:19:14.849" status="PASS" starttime="20170825 15:19:14.848"></status>
</kw>
<status endtime="20170825 15:19:14.849" status="PASS" starttime="20170825 15:19:14.847"></status>
</kw>
<status endtime="20170825 15:19:14.849" status="PASS" starttime="20170825 15:19:14.846"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:14.950">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:19:14.950">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:19:14.950" status="PASS" starttime="20170825 15:19:14.850"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:14.952">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:19:14.952" status="PASS" starttime="20170825 15:19:14.951"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:14.953">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:19:14.953" status="PASS" starttime="20170825 15:19:14.952"></status>
</kw>
<status endtime="20170825 15:19:14.953" status="PASS" starttime="20170825 15:19:14.952"></status>
</kw>
<status endtime="20170825 15:19:14.953" status="PASS" starttime="20170825 15:19:14.951"></status>
</kw>
<status endtime="20170825 15:19:14.953" status="PASS" starttime="20170825 15:19:14.950"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:19:14.953">Delete All Sessions</msg>
<status endtime="20170825 15:19:14.953" status="PASS" starttime="20170825 15:19:14.953"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:19:14.954">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:19:14.954" status="PASS" starttime="20170825 15:19:14.648"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:14.954">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:19:14.954" status="PASS" starttime="20170825 15:19:14.954"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:14.955">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:19:14.955">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:19:14.955">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:19:14.955" status="PASS" starttime="20170825 15:19:14.955"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:19:14.955">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170825 15:19:14.955" status="PASS" starttime="20170825 15:19:14.648"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:19:14.956">${host_state} = Quiesced</msg>
<status endtime="20170825 15:19:14.956" status="PASS" starttime="20170825 15:19:14.647"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:19:14.956">Running != Quiesced</msg>
<status endtime="20170825 15:19:14.956" status="FAIL" starttime="20170825 15:19:14.956"></status>
</kw>
<status endtime="20170825 15:19:14.957" status="FAIL" starttime="20170825 15:19:14.360"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:24.962">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:19:24.962" status="PASS" starttime="20170825 15:19:24.962"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:24.963">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:19:24.963" status="PASS" starttime="20170825 15:19:24.963"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:24.963">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:19:24.963" status="PASS" starttime="20170825 15:19:24.963"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:24.964">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:19:24.964" status="PASS" starttime="20170825 15:19:24.964"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:25.169">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:19:25.169" status="PASS" starttime="20170825 15:19:24.965"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:19:25.169">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:19:25.169">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:19:25.169" status="PASS" starttime="20170825 15:19:24.964"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:25.170">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:19:25.170" status="PASS" starttime="20170825 15:19:25.169"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:25.170">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:19:25.170" status="PASS" starttime="20170825 15:19:25.170"></status>
</kw>
<status endtime="20170825 15:19:25.171" status="PASS" starttime="20170825 15:19:24.961"></status>
</kw>
<status endtime="20170825 15:19:25.171" status="PASS" starttime="20170825 15:19:24.961"></status>
</kw>
<status endtime="20170825 15:19:25.171" status="PASS" starttime="20170825 15:19:24.960"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:25.171">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:19:25.171" status="PASS" starttime="20170825 15:19:25.171"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:25.173">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:19:25.173" status="PASS" starttime="20170825 15:19:25.173"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:25.174">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:19:25.175" status="PASS" starttime="20170825 15:19:25.174"></status>
</kw>
<status endtime="20170825 15:19:25.175" status="PASS" starttime="20170825 15:19:25.174"></status>
</kw>
<status endtime="20170825 15:19:25.175" status="PASS" starttime="20170825 15:19:25.172"></status>
</kw>
<status endtime="20170825 15:19:25.175" status="PASS" starttime="20170825 15:19:25.172"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:25.265">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:19:25.265">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:19:25.265" status="PASS" starttime="20170825 15:19:25.175"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:25.267">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:19:25.267" status="PASS" starttime="20170825 15:19:25.266"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:25.267">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:19:25.268" status="PASS" starttime="20170825 15:19:25.267"></status>
</kw>
<status endtime="20170825 15:19:25.268" status="PASS" starttime="20170825 15:19:25.267"></status>
</kw>
<status endtime="20170825 15:19:25.268" status="PASS" starttime="20170825 15:19:25.266"></status>
</kw>
<status endtime="20170825 15:19:25.268" status="PASS" starttime="20170825 15:19:25.265"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:19:25.268">Delete All Sessions</msg>
<status endtime="20170825 15:19:25.268" status="PASS" starttime="20170825 15:19:25.268"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:19:25.269">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:19:25.269" status="PASS" starttime="20170825 15:19:24.959"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:25.269">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:19:25.269" status="PASS" starttime="20170825 15:19:25.269"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:25.270">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:19:25.270">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:19:25.270">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:19:25.270" status="PASS" starttime="20170825 15:19:25.270"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:19:25.270">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:19:25.270" status="PASS" starttime="20170825 15:19:24.958"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:19:25.271">${power_state} = On</msg>
<status endtime="20170825 15:19:25.271" status="PASS" starttime="20170825 15:19:24.958"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:19:25.271" status="PASS" starttime="20170825 15:19:25.271"></status>
</kw>
<status endtime="20170825 15:19:25.271" status="PASS" starttime="20170825 15:19:24.958"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:25.275">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:19:25.275" status="PASS" starttime="20170825 15:19:25.275"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:25.276">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:19:25.276" status="PASS" starttime="20170825 15:19:25.275"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:25.276">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:19:25.276" status="PASS" starttime="20170825 15:19:25.276"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:25.277">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:19:25.277" status="PASS" starttime="20170825 15:19:25.277"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:25.569">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:19:25.569" status="PASS" starttime="20170825 15:19:25.278"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:19:25.569">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:19:25.569">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:19:25.569" status="PASS" starttime="20170825 15:19:25.277"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:25.569">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:19:25.570" status="PASS" starttime="20170825 15:19:25.569"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:25.570">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:19:25.570" status="PASS" starttime="20170825 15:19:25.570"></status>
</kw>
<status endtime="20170825 15:19:25.570" status="PASS" starttime="20170825 15:19:25.274"></status>
</kw>
<status endtime="20170825 15:19:25.570" status="PASS" starttime="20170825 15:19:25.274"></status>
</kw>
<status endtime="20170825 15:19:25.571" status="PASS" starttime="20170825 15:19:25.273"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:25.571">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:19:25.571" status="PASS" starttime="20170825 15:19:25.571"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:25.573">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:19:25.573" status="PASS" starttime="20170825 15:19:25.572"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:25.574">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:19:25.574" status="PASS" starttime="20170825 15:19:25.574"></status>
</kw>
<status endtime="20170825 15:19:25.574" status="PASS" starttime="20170825 15:19:25.573"></status>
</kw>
<status endtime="20170825 15:19:25.574" status="PASS" starttime="20170825 15:19:25.572"></status>
</kw>
<status endtime="20170825 15:19:25.575" status="PASS" starttime="20170825 15:19:25.571"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:25.664">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:19:25.665">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:19:25.665" status="PASS" starttime="20170825 15:19:25.575"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:25.666">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:19:25.666" status="PASS" starttime="20170825 15:19:25.666"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:25.667">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:19:25.667" status="PASS" starttime="20170825 15:19:25.667"></status>
</kw>
<status endtime="20170825 15:19:25.667" status="PASS" starttime="20170825 15:19:25.666"></status>
</kw>
<status endtime="20170825 15:19:25.668" status="PASS" starttime="20170825 15:19:25.665"></status>
</kw>
<status endtime="20170825 15:19:25.668" status="PASS" starttime="20170825 15:19:25.665"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:19:25.668">Delete All Sessions</msg>
<status endtime="20170825 15:19:25.668" status="PASS" starttime="20170825 15:19:25.668"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:19:25.668">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:19:25.668" status="PASS" starttime="20170825 15:19:25.272"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:25.669">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:19:25.669" status="PASS" starttime="20170825 15:19:25.669"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:25.670">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:19:25.670">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:19:25.670">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:19:25.670" status="PASS" starttime="20170825 15:19:25.669"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:19:25.670">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170825 15:19:25.670" status="PASS" starttime="20170825 15:19:25.272"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:19:25.670">${host_state} = Quiesced</msg>
<status endtime="20170825 15:19:25.670" status="PASS" starttime="20170825 15:19:25.272"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:19:25.671">Running != Quiesced</msg>
<status endtime="20170825 15:19:25.671" status="FAIL" starttime="20170825 15:19:25.671"></status>
</kw>
<status endtime="20170825 15:19:25.671" status="FAIL" starttime="20170825 15:19:24.957"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:35.676">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:19:35.677" status="PASS" starttime="20170825 15:19:35.676"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:35.677">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:19:35.677" status="PASS" starttime="20170825 15:19:35.677"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:35.678">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:19:35.678" status="PASS" starttime="20170825 15:19:35.678"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:35.679">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:19:35.679" status="PASS" starttime="20170825 15:19:35.678"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:35.859">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:19:35.859" status="PASS" starttime="20170825 15:19:35.680"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:19:35.859">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:19:35.859">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:19:35.859" status="PASS" starttime="20170825 15:19:35.680"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:35.860">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:19:35.860" status="PASS" starttime="20170825 15:19:35.859"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:35.860">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:19:35.860" status="PASS" starttime="20170825 15:19:35.860"></status>
</kw>
<status endtime="20170825 15:19:35.861" status="PASS" starttime="20170825 15:19:35.675"></status>
</kw>
<status endtime="20170825 15:19:35.861" status="PASS" starttime="20170825 15:19:35.675"></status>
</kw>
<status endtime="20170825 15:19:35.861" status="PASS" starttime="20170825 15:19:35.674"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:35.861">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:19:35.861" status="PASS" starttime="20170825 15:19:35.861"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:35.863">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:19:35.863" status="PASS" starttime="20170825 15:19:35.863"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:35.864">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:19:35.864" status="PASS" starttime="20170825 15:19:35.864"></status>
</kw>
<status endtime="20170825 15:19:35.865" status="PASS" starttime="20170825 15:19:35.864"></status>
</kw>
<status endtime="20170825 15:19:35.865" status="PASS" starttime="20170825 15:19:35.862"></status>
</kw>
<status endtime="20170825 15:19:35.865" status="PASS" starttime="20170825 15:19:35.862"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:35.928">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:19:35.928">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:19:35.928" status="PASS" starttime="20170825 15:19:35.865"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:35.930">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:19:35.930" status="PASS" starttime="20170825 15:19:35.930"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:35.931">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:19:35.932" status="PASS" starttime="20170825 15:19:35.931"></status>
</kw>
<status endtime="20170825 15:19:35.932" status="PASS" starttime="20170825 15:19:35.930"></status>
</kw>
<status endtime="20170825 15:19:35.932" status="PASS" starttime="20170825 15:19:35.929"></status>
</kw>
<status endtime="20170825 15:19:35.932" status="PASS" starttime="20170825 15:19:35.929"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:19:35.932">Delete All Sessions</msg>
<status endtime="20170825 15:19:35.932" status="PASS" starttime="20170825 15:19:35.932"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:19:35.933">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:19:35.933" status="PASS" starttime="20170825 15:19:35.673"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:35.933">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:19:35.933" status="PASS" starttime="20170825 15:19:35.933"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:35.934">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:19:35.934">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:19:35.934">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:19:35.934" status="PASS" starttime="20170825 15:19:35.934"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:19:35.934">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:19:35.934" status="PASS" starttime="20170825 15:19:35.673"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:19:35.935">${power_state} = On</msg>
<status endtime="20170825 15:19:35.935" status="PASS" starttime="20170825 15:19:35.673"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:19:35.935" status="PASS" starttime="20170825 15:19:35.935"></status>
</kw>
<status endtime="20170825 15:19:35.935" status="PASS" starttime="20170825 15:19:35.672"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:35.939">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:19:35.939" status="PASS" starttime="20170825 15:19:35.939"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:35.940">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:19:35.940" status="PASS" starttime="20170825 15:19:35.939"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:35.940">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:19:35.940" status="PASS" starttime="20170825 15:19:35.940"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:35.941">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:19:35.941" status="PASS" starttime="20170825 15:19:35.941"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:36.185">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:19:36.185" status="PASS" starttime="20170825 15:19:35.942"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:19:36.185">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:19:36.185">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:19:36.185" status="PASS" starttime="20170825 15:19:35.941"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:36.186">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:19:36.186" status="PASS" starttime="20170825 15:19:36.185"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:36.186">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:19:36.186" status="PASS" starttime="20170825 15:19:36.186"></status>
</kw>
<status endtime="20170825 15:19:36.187" status="PASS" starttime="20170825 15:19:35.938"></status>
</kw>
<status endtime="20170825 15:19:36.187" status="PASS" starttime="20170825 15:19:35.937"></status>
</kw>
<status endtime="20170825 15:19:36.187" status="PASS" starttime="20170825 15:19:35.937"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:36.187">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:19:36.187" status="PASS" starttime="20170825 15:19:36.187"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:36.190">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:19:36.190" status="PASS" starttime="20170825 15:19:36.189"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:36.191">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:19:36.191" status="PASS" starttime="20170825 15:19:36.191"></status>
</kw>
<status endtime="20170825 15:19:36.191" status="PASS" starttime="20170825 15:19:36.190"></status>
</kw>
<status endtime="20170825 15:19:36.191" status="PASS" starttime="20170825 15:19:36.188"></status>
</kw>
<status endtime="20170825 15:19:36.191" status="PASS" starttime="20170825 15:19:36.188"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:36.339">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:19:36.339">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:19:36.339" status="PASS" starttime="20170825 15:19:36.191"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:36.340">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:19:36.340" status="PASS" starttime="20170825 15:19:36.340"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:36.341">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:19:36.342" status="PASS" starttime="20170825 15:19:36.341"></status>
</kw>
<status endtime="20170825 15:19:36.342" status="PASS" starttime="20170825 15:19:36.341"></status>
</kw>
<status endtime="20170825 15:19:36.342" status="PASS" starttime="20170825 15:19:36.339"></status>
</kw>
<status endtime="20170825 15:19:36.342" status="PASS" starttime="20170825 15:19:36.339"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:19:36.342">Delete All Sessions</msg>
<status endtime="20170825 15:19:36.342" status="PASS" starttime="20170825 15:19:36.342"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:19:36.342">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:19:36.343" status="PASS" starttime="20170825 15:19:35.936"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:36.343">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:19:36.343" status="PASS" starttime="20170825 15:19:36.343"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:36.344">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:19:36.344">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:19:36.344">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:19:36.344" status="PASS" starttime="20170825 15:19:36.343"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:19:36.344">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170825 15:19:36.344" status="PASS" starttime="20170825 15:19:35.936"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:19:36.345">${host_state} = Quiesced</msg>
<status endtime="20170825 15:19:36.345" status="PASS" starttime="20170825 15:19:35.935"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:19:36.345">Running != Quiesced</msg>
<status endtime="20170825 15:19:36.345" status="FAIL" starttime="20170825 15:19:36.345"></status>
</kw>
<status endtime="20170825 15:19:36.345" status="FAIL" starttime="20170825 15:19:35.672"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:46.350">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:19:46.351" status="PASS" starttime="20170825 15:19:46.350"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:46.351">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:19:46.351" status="PASS" starttime="20170825 15:19:46.351"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:46.352">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:19:46.352" status="PASS" starttime="20170825 15:19:46.351"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:46.353">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:19:46.353" status="PASS" starttime="20170825 15:19:46.352"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:46.531">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:19:46.531" status="PASS" starttime="20170825 15:19:46.354"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:19:46.531">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:19:46.531">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:19:46.531" status="PASS" starttime="20170825 15:19:46.353"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:46.532">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:19:46.532" status="PASS" starttime="20170825 15:19:46.532"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:46.533">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:19:46.533" status="PASS" starttime="20170825 15:19:46.532"></status>
</kw>
<status endtime="20170825 15:19:46.533" status="PASS" starttime="20170825 15:19:46.349"></status>
</kw>
<status endtime="20170825 15:19:46.533" status="PASS" starttime="20170825 15:19:46.349"></status>
</kw>
<status endtime="20170825 15:19:46.533" status="PASS" starttime="20170825 15:19:46.348"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:46.534">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:19:46.534" status="PASS" starttime="20170825 15:19:46.533"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:46.537">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:19:46.537" status="PASS" starttime="20170825 15:19:46.536"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:46.538">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:19:46.538" status="PASS" starttime="20170825 15:19:46.538"></status>
</kw>
<status endtime="20170825 15:19:46.538" status="PASS" starttime="20170825 15:19:46.537"></status>
</kw>
<status endtime="20170825 15:19:46.538" status="PASS" starttime="20170825 15:19:46.535"></status>
</kw>
<status endtime="20170825 15:19:46.538" status="PASS" starttime="20170825 15:19:46.534"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:46.602">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:19:46.602">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:19:46.602" status="PASS" starttime="20170825 15:19:46.539"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:46.604">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:19:46.604" status="PASS" starttime="20170825 15:19:46.603"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:46.605">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:19:46.605" status="PASS" starttime="20170825 15:19:46.604"></status>
</kw>
<status endtime="20170825 15:19:46.605" status="PASS" starttime="20170825 15:19:46.604"></status>
</kw>
<status endtime="20170825 15:19:46.605" status="PASS" starttime="20170825 15:19:46.603"></status>
</kw>
<status endtime="20170825 15:19:46.605" status="PASS" starttime="20170825 15:19:46.602"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:19:46.605">Delete All Sessions</msg>
<status endtime="20170825 15:19:46.605" status="PASS" starttime="20170825 15:19:46.605"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:19:46.606">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:19:46.606" status="PASS" starttime="20170825 15:19:46.348"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:46.606">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:19:46.606" status="PASS" starttime="20170825 15:19:46.606"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:46.607">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:19:46.607">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:19:46.607">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:19:46.607" status="PASS" starttime="20170825 15:19:46.607"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:19:46.607">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:19:46.607" status="PASS" starttime="20170825 15:19:46.347"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:19:46.608">${power_state} = On</msg>
<status endtime="20170825 15:19:46.608" status="PASS" starttime="20170825 15:19:46.347"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:19:46.608" status="PASS" starttime="20170825 15:19:46.608"></status>
</kw>
<status endtime="20170825 15:19:46.608" status="PASS" starttime="20170825 15:19:46.346"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:46.612">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:19:46.613" status="PASS" starttime="20170825 15:19:46.612"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:46.613">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:19:46.613" status="PASS" starttime="20170825 15:19:46.613"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:46.614">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:19:46.614" status="PASS" starttime="20170825 15:19:46.613"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:46.614">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:19:46.614" status="PASS" starttime="20170825 15:19:46.614"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:46.857">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:19:46.857" status="PASS" starttime="20170825 15:19:46.615"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:19:46.857">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:19:46.857">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:19:46.857" status="PASS" starttime="20170825 15:19:46.615"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:46.858">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:19:46.858" status="PASS" starttime="20170825 15:19:46.858"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:46.859">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:19:46.859" status="PASS" starttime="20170825 15:19:46.858"></status>
</kw>
<status endtime="20170825 15:19:46.859" status="PASS" starttime="20170825 15:19:46.611"></status>
</kw>
<status endtime="20170825 15:19:46.859" status="PASS" starttime="20170825 15:19:46.611"></status>
</kw>
<status endtime="20170825 15:19:46.859" status="PASS" starttime="20170825 15:19:46.610"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:46.860">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:19:46.860" status="PASS" starttime="20170825 15:19:46.859"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:46.862">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:19:46.862" status="PASS" starttime="20170825 15:19:46.861"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:46.863">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:19:46.863" status="PASS" starttime="20170825 15:19:46.863"></status>
</kw>
<status endtime="20170825 15:19:46.864" status="PASS" starttime="20170825 15:19:46.862"></status>
</kw>
<status endtime="20170825 15:19:46.864" status="PASS" starttime="20170825 15:19:46.860"></status>
</kw>
<status endtime="20170825 15:19:46.864" status="PASS" starttime="20170825 15:19:46.860"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:47.002">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:19:47.002">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:19:47.003" status="PASS" starttime="20170825 15:19:46.864"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:47.004">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:19:47.004" status="PASS" starttime="20170825 15:19:47.004"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:47.006">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:19:47.006" status="PASS" starttime="20170825 15:19:47.005"></status>
</kw>
<status endtime="20170825 15:19:47.006" status="PASS" starttime="20170825 15:19:47.005"></status>
</kw>
<status endtime="20170825 15:19:47.006" status="PASS" starttime="20170825 15:19:47.003"></status>
</kw>
<status endtime="20170825 15:19:47.006" status="PASS" starttime="20170825 15:19:47.003"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:19:47.006">Delete All Sessions</msg>
<status endtime="20170825 15:19:47.007" status="PASS" starttime="20170825 15:19:47.006"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:19:47.007">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:19:47.007" status="PASS" starttime="20170825 15:19:46.609"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:47.007">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:19:47.007" status="PASS" starttime="20170825 15:19:47.007"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:47.008">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:19:47.008">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:19:47.008">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:19:47.008" status="PASS" starttime="20170825 15:19:47.008"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:19:47.008">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170825 15:19:47.009" status="PASS" starttime="20170825 15:19:46.609"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:19:47.009">${host_state} = Quiesced</msg>
<status endtime="20170825 15:19:47.009" status="PASS" starttime="20170825 15:19:46.609"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:19:47.009">Running != Quiesced</msg>
<status endtime="20170825 15:19:47.010" status="FAIL" starttime="20170825 15:19:47.009"></status>
</kw>
<status endtime="20170825 15:19:47.010" status="FAIL" starttime="20170825 15:19:46.346"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:57.016">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:19:57.016" status="PASS" starttime="20170825 15:19:57.015"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:57.017">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:19:57.017" status="PASS" starttime="20170825 15:19:57.016"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:57.017">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:19:57.017" status="PASS" starttime="20170825 15:19:57.017"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:57.018">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:19:57.018" status="PASS" starttime="20170825 15:19:57.017"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:57.212">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:19:57.212" status="PASS" starttime="20170825 15:19:57.019"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:19:57.212">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:19:57.212">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:19:57.212" status="PASS" starttime="20170825 15:19:57.018"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:57.213">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:19:57.213" status="PASS" starttime="20170825 15:19:57.212"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:57.213">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:19:57.214" status="PASS" starttime="20170825 15:19:57.213"></status>
</kw>
<status endtime="20170825 15:19:57.214" status="PASS" starttime="20170825 15:19:57.014"></status>
</kw>
<status endtime="20170825 15:19:57.214" status="PASS" starttime="20170825 15:19:57.014"></status>
</kw>
<status endtime="20170825 15:19:57.214" status="PASS" starttime="20170825 15:19:57.013"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:57.214">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:19:57.214" status="PASS" starttime="20170825 15:19:57.214"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:57.217">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:19:57.217" status="PASS" starttime="20170825 15:19:57.216"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:57.217">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:19:57.218" status="PASS" starttime="20170825 15:19:57.217"></status>
</kw>
<status endtime="20170825 15:19:57.218" status="PASS" starttime="20170825 15:19:57.217"></status>
</kw>
<status endtime="20170825 15:19:57.218" status="PASS" starttime="20170825 15:19:57.215"></status>
</kw>
<status endtime="20170825 15:19:57.218" status="PASS" starttime="20170825 15:19:57.215"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:57.304">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:19:57.304">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:19:57.304" status="PASS" starttime="20170825 15:19:57.218"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:57.306">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:19:57.306" status="PASS" starttime="20170825 15:19:57.305"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:57.307">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:19:57.307" status="PASS" starttime="20170825 15:19:57.307"></status>
</kw>
<status endtime="20170825 15:19:57.307" status="PASS" starttime="20170825 15:19:57.306"></status>
</kw>
<status endtime="20170825 15:19:57.307" status="PASS" starttime="20170825 15:19:57.305"></status>
</kw>
<status endtime="20170825 15:19:57.307" status="PASS" starttime="20170825 15:19:57.304"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:19:57.308">Delete All Sessions</msg>
<status endtime="20170825 15:19:57.308" status="PASS" starttime="20170825 15:19:57.308"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:19:57.308">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:19:57.308" status="PASS" starttime="20170825 15:19:57.012"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:57.309">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:19:57.309" status="PASS" starttime="20170825 15:19:57.308"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:57.309">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:19:57.309">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:19:57.309">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:19:57.309" status="PASS" starttime="20170825 15:19:57.309"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:19:57.310">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:19:57.310" status="PASS" starttime="20170825 15:19:57.012"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:19:57.310">${power_state} = On</msg>
<status endtime="20170825 15:19:57.310" status="PASS" starttime="20170825 15:19:57.011"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:19:57.311" status="PASS" starttime="20170825 15:19:57.310"></status>
</kw>
<status endtime="20170825 15:19:57.311" status="PASS" starttime="20170825 15:19:57.011"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:57.314">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:19:57.315" status="PASS" starttime="20170825 15:19:57.314"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:57.315">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:19:57.316" status="PASS" starttime="20170825 15:19:57.315"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:57.316">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:19:57.316" status="PASS" starttime="20170825 15:19:57.316"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:57.317">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:19:57.317" status="PASS" starttime="20170825 15:19:57.316"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:57.591">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:19:57.591" status="PASS" starttime="20170825 15:19:57.317"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:19:57.591">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:19:57.591">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:19:57.591" status="PASS" starttime="20170825 15:19:57.317"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:57.592">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:19:57.592" status="PASS" starttime="20170825 15:19:57.591"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:57.592">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:19:57.593" status="PASS" starttime="20170825 15:19:57.592"></status>
</kw>
<status endtime="20170825 15:19:57.593" status="PASS" starttime="20170825 15:19:57.313"></status>
</kw>
<status endtime="20170825 15:19:57.593" status="PASS" starttime="20170825 15:19:57.313"></status>
</kw>
<status endtime="20170825 15:19:57.593" status="PASS" starttime="20170825 15:19:57.312"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:57.593">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:19:57.593" status="PASS" starttime="20170825 15:19:57.593"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:57.595">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:19:57.596" status="PASS" starttime="20170825 15:19:57.595"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:57.596">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:19:57.596" status="PASS" starttime="20170825 15:19:57.596"></status>
</kw>
<status endtime="20170825 15:19:57.597" status="PASS" starttime="20170825 15:19:57.596"></status>
</kw>
<status endtime="20170825 15:19:57.597" status="PASS" starttime="20170825 15:19:57.594"></status>
</kw>
<status endtime="20170825 15:19:57.597" status="PASS" starttime="20170825 15:19:57.594"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:57.699">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:19:57.699">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:19:57.699" status="PASS" starttime="20170825 15:19:57.597"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:57.701">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:19:57.701" status="PASS" starttime="20170825 15:19:57.700"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:57.701">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:19:57.702" status="PASS" starttime="20170825 15:19:57.701"></status>
</kw>
<status endtime="20170825 15:19:57.702" status="PASS" starttime="20170825 15:19:57.701"></status>
</kw>
<status endtime="20170825 15:19:57.702" status="PASS" starttime="20170825 15:19:57.700"></status>
</kw>
<status endtime="20170825 15:19:57.702" status="PASS" starttime="20170825 15:19:57.699"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:19:57.702">Delete All Sessions</msg>
<status endtime="20170825 15:19:57.702" status="PASS" starttime="20170825 15:19:57.702"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:19:57.702">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:19:57.703" status="PASS" starttime="20170825 15:19:57.312"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:19:57.703">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:19:57.703" status="PASS" starttime="20170825 15:19:57.703"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:19:57.704">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:19:57.704">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:19:57.704">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:19:57.704" status="PASS" starttime="20170825 15:19:57.703"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:19:57.704">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170825 15:19:57.704" status="PASS" starttime="20170825 15:19:57.311"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:19:57.704">${host_state} = Quiesced</msg>
<status endtime="20170825 15:19:57.705" status="PASS" starttime="20170825 15:19:57.311"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:19:57.705">Running != Quiesced</msg>
<status endtime="20170825 15:19:57.705" status="FAIL" starttime="20170825 15:19:57.705"></status>
</kw>
<status endtime="20170825 15:19:57.705" status="FAIL" starttime="20170825 15:19:57.010"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:07.711">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:20:07.711" status="PASS" starttime="20170825 15:20:07.710"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:07.712">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:20:07.712" status="PASS" starttime="20170825 15:20:07.711"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:07.712">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:20:07.712" status="PASS" starttime="20170825 15:20:07.712"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:07.713">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:20:07.713" status="PASS" starttime="20170825 15:20:07.713"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:07.907">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:20:07.907" status="PASS" starttime="20170825 15:20:07.714"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:20:07.907">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:20:07.907">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:20:07.907" status="PASS" starttime="20170825 15:20:07.713"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:07.908">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:20:07.908" status="PASS" starttime="20170825 15:20:07.908"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:07.909">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:20:07.909" status="PASS" starttime="20170825 15:20:07.908"></status>
</kw>
<status endtime="20170825 15:20:07.909" status="PASS" starttime="20170825 15:20:07.710"></status>
</kw>
<status endtime="20170825 15:20:07.909" status="PASS" starttime="20170825 15:20:07.709"></status>
</kw>
<status endtime="20170825 15:20:07.909" status="PASS" starttime="20170825 15:20:07.709"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:07.910">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:20:07.910" status="PASS" starttime="20170825 15:20:07.909"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:07.912">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:20:07.912" status="PASS" starttime="20170825 15:20:07.911"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:07.913">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:20:07.913" status="PASS" starttime="20170825 15:20:07.912"></status>
</kw>
<status endtime="20170825 15:20:07.913" status="PASS" starttime="20170825 15:20:07.912"></status>
</kw>
<status endtime="20170825 15:20:07.913" status="PASS" starttime="20170825 15:20:07.910"></status>
</kw>
<status endtime="20170825 15:20:07.913" status="PASS" starttime="20170825 15:20:07.910"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:07.979">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:20:07.979">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:20:07.979" status="PASS" starttime="20170825 15:20:07.914"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:07.981">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:20:07.981" status="PASS" starttime="20170825 15:20:07.980"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:07.982">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:20:07.982" status="PASS" starttime="20170825 15:20:07.981"></status>
</kw>
<status endtime="20170825 15:20:07.982" status="PASS" starttime="20170825 15:20:07.981"></status>
</kw>
<status endtime="20170825 15:20:07.982" status="PASS" starttime="20170825 15:20:07.980"></status>
</kw>
<status endtime="20170825 15:20:07.982" status="PASS" starttime="20170825 15:20:07.979"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:20:07.982">Delete All Sessions</msg>
<status endtime="20170825 15:20:07.982" status="PASS" starttime="20170825 15:20:07.982"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:20:07.983">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:20:07.983" status="PASS" starttime="20170825 15:20:07.708"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:07.983">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:20:07.983" status="PASS" starttime="20170825 15:20:07.983"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:07.984">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:20:07.984">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:20:07.984">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:20:07.984" status="PASS" starttime="20170825 15:20:07.984"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:20:07.984">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:20:07.984" status="PASS" starttime="20170825 15:20:07.707"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:20:07.985">${power_state} = On</msg>
<status endtime="20170825 15:20:07.985" status="PASS" starttime="20170825 15:20:07.707"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:20:07.985" status="PASS" starttime="20170825 15:20:07.985"></status>
</kw>
<status endtime="20170825 15:20:07.985" status="PASS" starttime="20170825 15:20:07.706"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:07.989">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:20:07.990" status="PASS" starttime="20170825 15:20:07.989"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:07.990">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:20:07.990" status="PASS" starttime="20170825 15:20:07.990"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:07.991">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:20:07.991" status="PASS" starttime="20170825 15:20:07.991"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:07.992">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:20:07.992" status="PASS" starttime="20170825 15:20:07.991"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:08.185">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:20:08.185" status="PASS" starttime="20170825 15:20:07.993"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:20:08.185">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:20:08.185">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:20:08.185" status="PASS" starttime="20170825 15:20:07.992"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:08.186">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:20:08.186" status="PASS" starttime="20170825 15:20:08.186"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:08.187">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:20:08.187" status="PASS" starttime="20170825 15:20:08.186"></status>
</kw>
<status endtime="20170825 15:20:08.187" status="PASS" starttime="20170825 15:20:07.988"></status>
</kw>
<status endtime="20170825 15:20:08.187" status="PASS" starttime="20170825 15:20:07.988"></status>
</kw>
<status endtime="20170825 15:20:08.187" status="PASS" starttime="20170825 15:20:07.987"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:08.188">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:20:08.188" status="PASS" starttime="20170825 15:20:08.187"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:08.190">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:20:08.190" status="PASS" starttime="20170825 15:20:08.189"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:08.191">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:20:08.191" status="PASS" starttime="20170825 15:20:08.191"></status>
</kw>
<status endtime="20170825 15:20:08.191" status="PASS" starttime="20170825 15:20:08.190"></status>
</kw>
<status endtime="20170825 15:20:08.191" status="PASS" starttime="20170825 15:20:08.188"></status>
</kw>
<status endtime="20170825 15:20:08.191" status="PASS" starttime="20170825 15:20:08.188"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:08.281">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:20:08.282">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:20:08.282" status="PASS" starttime="20170825 15:20:08.191"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:08.283">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:20:08.283" status="PASS" starttime="20170825 15:20:08.283"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:08.284">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:20:08.285" status="PASS" starttime="20170825 15:20:08.284"></status>
</kw>
<status endtime="20170825 15:20:08.285" status="PASS" starttime="20170825 15:20:08.284"></status>
</kw>
<status endtime="20170825 15:20:08.285" status="PASS" starttime="20170825 15:20:08.282"></status>
</kw>
<status endtime="20170825 15:20:08.285" status="PASS" starttime="20170825 15:20:08.282"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:20:08.285">Delete All Sessions</msg>
<status endtime="20170825 15:20:08.285" status="PASS" starttime="20170825 15:20:08.285"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:20:08.285">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:20:08.286" status="PASS" starttime="20170825 15:20:07.987"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:08.286">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:20:08.286" status="PASS" starttime="20170825 15:20:08.286"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:08.287">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:20:08.287">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:20:08.287">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:20:08.287" status="PASS" starttime="20170825 15:20:08.286"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:20:08.287">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170825 15:20:08.287" status="PASS" starttime="20170825 15:20:07.986"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:20:08.287">${host_state} = Quiesced</msg>
<status endtime="20170825 15:20:08.288" status="PASS" starttime="20170825 15:20:07.986"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:20:08.288">Running != Quiesced</msg>
<status endtime="20170825 15:20:08.288" status="FAIL" starttime="20170825 15:20:08.288"></status>
</kw>
<status endtime="20170825 15:20:08.288" status="FAIL" starttime="20170825 15:20:07.706"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:18.294">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:20:18.294" status="PASS" starttime="20170825 15:20:18.293"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:18.295">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:20:18.295" status="PASS" starttime="20170825 15:20:18.294"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:18.295">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:20:18.295" status="PASS" starttime="20170825 15:20:18.295"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:18.296">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:20:18.296" status="PASS" starttime="20170825 15:20:18.296"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:18.567">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:20:18.567" status="PASS" starttime="20170825 15:20:18.297"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:20:18.567">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:20:18.567">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:20:18.567" status="PASS" starttime="20170825 15:20:18.296"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:18.568">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:20:18.568" status="PASS" starttime="20170825 15:20:18.567"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:18.569">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:20:18.569" status="PASS" starttime="20170825 15:20:18.568"></status>
</kw>
<status endtime="20170825 15:20:18.569" status="PASS" starttime="20170825 15:20:18.293"></status>
</kw>
<status endtime="20170825 15:20:18.569" status="PASS" starttime="20170825 15:20:18.292"></status>
</kw>
<status endtime="20170825 15:20:18.569" status="PASS" starttime="20170825 15:20:18.291"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:18.570">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:20:18.570" status="PASS" starttime="20170825 15:20:18.569"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:18.572">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:20:18.572" status="PASS" starttime="20170825 15:20:18.571"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:18.572">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:20:18.573" status="PASS" starttime="20170825 15:20:18.572"></status>
</kw>
<status endtime="20170825 15:20:18.573" status="PASS" starttime="20170825 15:20:18.572"></status>
</kw>
<status endtime="20170825 15:20:18.573" status="PASS" starttime="20170825 15:20:18.570"></status>
</kw>
<status endtime="20170825 15:20:18.573" status="PASS" starttime="20170825 15:20:18.570"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:18.636">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:20:18.636">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:20:18.636" status="PASS" starttime="20170825 15:20:18.573"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:18.638">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:20:18.638" status="PASS" starttime="20170825 15:20:18.638"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:18.639">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:20:18.639" status="PASS" starttime="20170825 15:20:18.639"></status>
</kw>
<status endtime="20170825 15:20:18.640" status="PASS" starttime="20170825 15:20:18.638"></status>
</kw>
<status endtime="20170825 15:20:18.640" status="PASS" starttime="20170825 15:20:18.637"></status>
</kw>
<status endtime="20170825 15:20:18.640" status="PASS" starttime="20170825 15:20:18.636"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:20:18.640">Delete All Sessions</msg>
<status endtime="20170825 15:20:18.640" status="PASS" starttime="20170825 15:20:18.640"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:20:18.640">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:20:18.640" status="PASS" starttime="20170825 15:20:18.291"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:18.641">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:20:18.641" status="PASS" starttime="20170825 15:20:18.641"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:18.642">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:20:18.642">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:20:18.642">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:20:18.642" status="PASS" starttime="20170825 15:20:18.642"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:20:18.642">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:20:18.642" status="PASS" starttime="20170825 15:20:18.290"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:20:18.643">${power_state} = On</msg>
<status endtime="20170825 15:20:18.643" status="PASS" starttime="20170825 15:20:18.290"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:20:18.643" status="PASS" starttime="20170825 15:20:18.643"></status>
</kw>
<status endtime="20170825 15:20:18.643" status="PASS" starttime="20170825 15:20:18.289"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:18.647">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:20:18.647" status="PASS" starttime="20170825 15:20:18.646"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:18.648">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:20:18.648" status="PASS" starttime="20170825 15:20:18.647"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:18.648">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:20:18.648" status="PASS" starttime="20170825 15:20:18.648"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:18.649">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:20:18.649" status="PASS" starttime="20170825 15:20:18.649"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:18.838">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:20:18.838" status="PASS" starttime="20170825 15:20:18.650"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:20:18.838">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:20:18.838">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:20:18.838" status="PASS" starttime="20170825 15:20:18.649"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:18.839">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:20:18.839" status="PASS" starttime="20170825 15:20:18.839"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:18.840">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:20:18.840" status="PASS" starttime="20170825 15:20:18.839"></status>
</kw>
<status endtime="20170825 15:20:18.840" status="PASS" starttime="20170825 15:20:18.646"></status>
</kw>
<status endtime="20170825 15:20:18.840" status="PASS" starttime="20170825 15:20:18.645"></status>
</kw>
<status endtime="20170825 15:20:18.840" status="PASS" starttime="20170825 15:20:18.645"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:18.841">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:20:18.841" status="PASS" starttime="20170825 15:20:18.840"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:18.843">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:20:18.843" status="PASS" starttime="20170825 15:20:18.842"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:18.844">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:20:18.844" status="PASS" starttime="20170825 15:20:18.844"></status>
</kw>
<status endtime="20170825 15:20:18.844" status="PASS" starttime="20170825 15:20:18.843"></status>
</kw>
<status endtime="20170825 15:20:18.844" status="PASS" starttime="20170825 15:20:18.842"></status>
</kw>
<status endtime="20170825 15:20:18.845" status="PASS" starttime="20170825 15:20:18.841"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:18.933">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:20:18.934">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:20:18.934" status="PASS" starttime="20170825 15:20:18.845"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:18.935">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:20:18.935" status="PASS" starttime="20170825 15:20:18.935"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:18.936">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:20:18.936" status="PASS" starttime="20170825 15:20:18.936"></status>
</kw>
<status endtime="20170825 15:20:18.936" status="PASS" starttime="20170825 15:20:18.936"></status>
</kw>
<status endtime="20170825 15:20:18.937" status="PASS" starttime="20170825 15:20:18.934"></status>
</kw>
<status endtime="20170825 15:20:18.937" status="PASS" starttime="20170825 15:20:18.934"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:20:18.937">Delete All Sessions</msg>
<status endtime="20170825 15:20:18.937" status="PASS" starttime="20170825 15:20:18.937"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:20:18.937">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:20:18.937" status="PASS" starttime="20170825 15:20:18.644"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:18.938">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:20:18.938" status="PASS" starttime="20170825 15:20:18.938"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:18.939">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:20:18.939">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:20:18.939">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:20:18.939" status="PASS" starttime="20170825 15:20:18.938"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:20:18.939">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170825 15:20:18.939" status="PASS" starttime="20170825 15:20:18.644"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:20:18.939">${host_state} = Quiesced</msg>
<status endtime="20170825 15:20:18.940" status="PASS" starttime="20170825 15:20:18.643"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:20:18.940">Running != Quiesced</msg>
<status endtime="20170825 15:20:18.940" status="FAIL" starttime="20170825 15:20:18.940"></status>
</kw>
<status endtime="20170825 15:20:18.940" status="FAIL" starttime="20170825 15:20:18.289"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:28.945">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:20:28.945" status="PASS" starttime="20170825 15:20:28.945"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:28.946">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:20:28.946" status="PASS" starttime="20170825 15:20:28.946"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:28.947">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:20:28.947" status="PASS" starttime="20170825 15:20:28.946"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:28.948">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:20:28.948" status="PASS" starttime="20170825 15:20:28.947"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:29.131">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:20:29.131" status="PASS" starttime="20170825 15:20:28.948"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:20:29.131">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:20:29.131">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:20:29.131" status="PASS" starttime="20170825 15:20:28.948"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:29.132">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:20:29.132" status="PASS" starttime="20170825 15:20:29.132"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:29.133">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:20:29.133" status="PASS" starttime="20170825 15:20:29.132"></status>
</kw>
<status endtime="20170825 15:20:29.133" status="PASS" starttime="20170825 15:20:28.944"></status>
</kw>
<status endtime="20170825 15:20:29.133" status="PASS" starttime="20170825 15:20:28.944"></status>
</kw>
<status endtime="20170825 15:20:29.133" status="PASS" starttime="20170825 15:20:28.943"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:29.134">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:20:29.134" status="PASS" starttime="20170825 15:20:29.133"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:29.136">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:20:29.136" status="PASS" starttime="20170825 15:20:29.135"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:29.137">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:20:29.137" status="PASS" starttime="20170825 15:20:29.137"></status>
</kw>
<status endtime="20170825 15:20:29.137" status="PASS" starttime="20170825 15:20:29.136"></status>
</kw>
<status endtime="20170825 15:20:29.137" status="PASS" starttime="20170825 15:20:29.135"></status>
</kw>
<status endtime="20170825 15:20:29.137" status="PASS" starttime="20170825 15:20:29.134"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:29.221">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:20:29.221">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:20:29.221" status="PASS" starttime="20170825 15:20:29.137"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:29.224">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:20:29.224" status="PASS" starttime="20170825 15:20:29.223"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:29.225">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:20:29.225" status="PASS" starttime="20170825 15:20:29.225"></status>
</kw>
<status endtime="20170825 15:20:29.225" status="PASS" starttime="20170825 15:20:29.224"></status>
</kw>
<status endtime="20170825 15:20:29.226" status="PASS" starttime="20170825 15:20:29.222"></status>
</kw>
<status endtime="20170825 15:20:29.226" status="PASS" starttime="20170825 15:20:29.222"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:20:29.226">Delete All Sessions</msg>
<status endtime="20170825 15:20:29.226" status="PASS" starttime="20170825 15:20:29.226"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:20:29.226">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:20:29.226" status="PASS" starttime="20170825 15:20:28.942"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:29.227">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:20:29.227" status="PASS" starttime="20170825 15:20:29.227"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:29.227">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:20:29.228">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:20:29.228">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:20:29.228" status="PASS" starttime="20170825 15:20:29.227"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:20:29.228">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:20:29.228" status="PASS" starttime="20170825 15:20:28.942"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:20:29.228">${power_state} = On</msg>
<status endtime="20170825 15:20:29.228" status="PASS" starttime="20170825 15:20:28.942"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:20:29.229" status="PASS" starttime="20170825 15:20:29.229"></status>
</kw>
<status endtime="20170825 15:20:29.229" status="PASS" starttime="20170825 15:20:28.941"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:29.233">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:20:29.234" status="PASS" starttime="20170825 15:20:29.233"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:29.234">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:20:29.234" status="PASS" starttime="20170825 15:20:29.234"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:29.235">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:20:29.235" status="PASS" starttime="20170825 15:20:29.234"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:29.235">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:20:29.235" status="PASS" starttime="20170825 15:20:29.235"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:29.443">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:20:29.443" status="PASS" starttime="20170825 15:20:29.236"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:20:29.443">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:20:29.443">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:20:29.443" status="PASS" starttime="20170825 15:20:29.236"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:29.444">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:20:29.444" status="PASS" starttime="20170825 15:20:29.444"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:29.445">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:20:29.445" status="PASS" starttime="20170825 15:20:29.444"></status>
</kw>
<status endtime="20170825 15:20:29.445" status="PASS" starttime="20170825 15:20:29.232"></status>
</kw>
<status endtime="20170825 15:20:29.445" status="PASS" starttime="20170825 15:20:29.232"></status>
</kw>
<status endtime="20170825 15:20:29.445" status="PASS" starttime="20170825 15:20:29.231"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:29.445">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:20:29.446" status="PASS" starttime="20170825 15:20:29.445"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:29.448">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:20:29.448" status="PASS" starttime="20170825 15:20:29.447"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:29.448">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:20:29.449" status="PASS" starttime="20170825 15:20:29.448"></status>
</kw>
<status endtime="20170825 15:20:29.449" status="PASS" starttime="20170825 15:20:29.448"></status>
</kw>
<status endtime="20170825 15:20:29.449" status="PASS" starttime="20170825 15:20:29.446"></status>
</kw>
<status endtime="20170825 15:20:29.449" status="PASS" starttime="20170825 15:20:29.446"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:29.606">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:20:29.606">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:20:29.606" status="PASS" starttime="20170825 15:20:29.449"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:29.608">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:20:29.608" status="PASS" starttime="20170825 15:20:29.607"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:29.609">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:20:29.609" status="PASS" starttime="20170825 15:20:29.609"></status>
</kw>
<status endtime="20170825 15:20:29.609" status="PASS" starttime="20170825 15:20:29.608"></status>
</kw>
<status endtime="20170825 15:20:29.609" status="PASS" starttime="20170825 15:20:29.607"></status>
</kw>
<status endtime="20170825 15:20:29.609" status="PASS" starttime="20170825 15:20:29.606"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:20:29.610">Delete All Sessions</msg>
<status endtime="20170825 15:20:29.610" status="PASS" starttime="20170825 15:20:29.610"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:20:29.610">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:20:29.610" status="PASS" starttime="20170825 15:20:29.230"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:29.611">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:20:29.611" status="PASS" starttime="20170825 15:20:29.610"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:29.611">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:20:29.611">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:20:29.612">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:20:29.612" status="PASS" starttime="20170825 15:20:29.611"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:20:29.612">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170825 15:20:29.612" status="PASS" starttime="20170825 15:20:29.229"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:20:29.612">${host_state} = Quiesced</msg>
<status endtime="20170825 15:20:29.612" status="PASS" starttime="20170825 15:20:29.229"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:20:29.613">Running != Quiesced</msg>
<status endtime="20170825 15:20:29.613" status="FAIL" starttime="20170825 15:20:29.612"></status>
</kw>
<status endtime="20170825 15:20:29.613" status="FAIL" starttime="20170825 15:20:28.941"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:39.618">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:20:39.618" status="PASS" starttime="20170825 15:20:39.617"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:39.619">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:20:39.619" status="PASS" starttime="20170825 15:20:39.618"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:39.619">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:20:39.619" status="PASS" starttime="20170825 15:20:39.619"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:39.620">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:20:39.620" status="PASS" starttime="20170825 15:20:39.620"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:39.807">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:20:39.807" status="PASS" starttime="20170825 15:20:39.621"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:20:39.807">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:20:39.807">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:20:39.807" status="PASS" starttime="20170825 15:20:39.620"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:39.808">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:20:39.808" status="PASS" starttime="20170825 15:20:39.807"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:39.808">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:20:39.808" status="PASS" starttime="20170825 15:20:39.808"></status>
</kw>
<status endtime="20170825 15:20:39.808" status="PASS" starttime="20170825 15:20:39.617"></status>
</kw>
<status endtime="20170825 15:20:39.809" status="PASS" starttime="20170825 15:20:39.616"></status>
</kw>
<status endtime="20170825 15:20:39.809" status="PASS" starttime="20170825 15:20:39.616"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:39.809">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:20:39.809" status="PASS" starttime="20170825 15:20:39.809"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:39.811">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:20:39.811" status="PASS" starttime="20170825 15:20:39.811"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:39.812">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:20:39.812" status="PASS" starttime="20170825 15:20:39.812"></status>
</kw>
<status endtime="20170825 15:20:39.813" status="PASS" starttime="20170825 15:20:39.812"></status>
</kw>
<status endtime="20170825 15:20:39.813" status="PASS" starttime="20170825 15:20:39.810"></status>
</kw>
<status endtime="20170825 15:20:39.813" status="PASS" starttime="20170825 15:20:39.810"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:39.899">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:20:39.899">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:20:39.899" status="PASS" starttime="20170825 15:20:39.813"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:39.901">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:20:39.901" status="PASS" starttime="20170825 15:20:39.900"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:39.902">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:20:39.902" status="PASS" starttime="20170825 15:20:39.902"></status>
</kw>
<status endtime="20170825 15:20:39.902" status="PASS" starttime="20170825 15:20:39.901"></status>
</kw>
<status endtime="20170825 15:20:39.902" status="PASS" starttime="20170825 15:20:39.900"></status>
</kw>
<status endtime="20170825 15:20:39.902" status="PASS" starttime="20170825 15:20:39.899"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:20:39.903">Delete All Sessions</msg>
<status endtime="20170825 15:20:39.903" status="PASS" starttime="20170825 15:20:39.902"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:20:39.903">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:20:39.903" status="PASS" starttime="20170825 15:20:39.615"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:39.904">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:20:39.904" status="PASS" starttime="20170825 15:20:39.903"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:39.905">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:20:39.905">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:20:39.905">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:20:39.905" status="PASS" starttime="20170825 15:20:39.905"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:20:39.906">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:20:39.906" status="PASS" starttime="20170825 15:20:39.615"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:20:39.906">${power_state} = On</msg>
<status endtime="20170825 15:20:39.906" status="PASS" starttime="20170825 15:20:39.614"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:20:39.907" status="PASS" starttime="20170825 15:20:39.906"></status>
</kw>
<status endtime="20170825 15:20:39.907" status="PASS" starttime="20170825 15:20:39.614"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:39.912">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:20:39.915" status="PASS" starttime="20170825 15:20:39.912"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:39.916">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:20:39.916" status="PASS" starttime="20170825 15:20:39.915"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:39.916">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:20:39.916" status="PASS" starttime="20170825 15:20:39.916"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:39.917">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:20:39.917" status="PASS" starttime="20170825 15:20:39.917"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:40.123">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:20:40.124" status="PASS" starttime="20170825 15:20:39.918"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:20:40.124">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:20:40.124">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:20:40.124" status="PASS" starttime="20170825 15:20:39.917"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:40.124">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:20:40.124" status="PASS" starttime="20170825 15:20:40.124"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:40.125">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:20:40.125" status="PASS" starttime="20170825 15:20:40.125"></status>
</kw>
<status endtime="20170825 15:20:40.125" status="PASS" starttime="20170825 15:20:39.911"></status>
</kw>
<status endtime="20170825 15:20:40.125" status="PASS" starttime="20170825 15:20:39.910"></status>
</kw>
<status endtime="20170825 15:20:40.125" status="PASS" starttime="20170825 15:20:39.909"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:40.126">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:20:40.126" status="PASS" starttime="20170825 15:20:40.126"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:40.128">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:20:40.128" status="PASS" starttime="20170825 15:20:40.127"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:40.129">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:20:40.129" status="PASS" starttime="20170825 15:20:40.129"></status>
</kw>
<status endtime="20170825 15:20:40.129" status="PASS" starttime="20170825 15:20:40.128"></status>
</kw>
<status endtime="20170825 15:20:40.129" status="PASS" starttime="20170825 15:20:40.127"></status>
</kw>
<status endtime="20170825 15:20:40.129" status="PASS" starttime="20170825 15:20:40.126"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:40.237">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:20:40.237">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:20:40.237" status="PASS" starttime="20170825 15:20:40.130"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:40.239">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:20:40.239" status="PASS" starttime="20170825 15:20:40.238"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:40.240">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:20:40.240" status="PASS" starttime="20170825 15:20:40.240"></status>
</kw>
<status endtime="20170825 15:20:40.241" status="PASS" starttime="20170825 15:20:40.239"></status>
</kw>
<status endtime="20170825 15:20:40.241" status="PASS" starttime="20170825 15:20:40.238"></status>
</kw>
<status endtime="20170825 15:20:40.241" status="PASS" starttime="20170825 15:20:40.237"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:20:40.241">Delete All Sessions</msg>
<status endtime="20170825 15:20:40.241" status="PASS" starttime="20170825 15:20:40.241"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:20:40.241">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:20:40.242" status="PASS" starttime="20170825 15:20:39.909"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:40.242">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:20:40.242" status="PASS" starttime="20170825 15:20:40.242"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:40.243">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:20:40.243">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:20:40.243">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:20:40.243" status="PASS" starttime="20170825 15:20:40.242"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:20:40.243">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170825 15:20:40.243" status="PASS" starttime="20170825 15:20:39.908"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:20:40.244">${host_state} = Quiesced</msg>
<status endtime="20170825 15:20:40.244" status="PASS" starttime="20170825 15:20:39.907"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:20:40.244">Running != Quiesced</msg>
<status endtime="20170825 15:20:40.244" status="FAIL" starttime="20170825 15:20:40.244"></status>
</kw>
<status endtime="20170825 15:20:40.244" status="FAIL" starttime="20170825 15:20:39.613"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:50.249">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:20:50.250" status="PASS" starttime="20170825 15:20:50.249"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:50.250">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:20:50.251" status="PASS" starttime="20170825 15:20:50.250"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:50.251">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:20:50.251" status="PASS" starttime="20170825 15:20:50.251"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:50.252">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:20:50.252" status="PASS" starttime="20170825 15:20:50.251"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:50.433">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:20:50.433" status="PASS" starttime="20170825 15:20:50.253"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:20:50.434">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:20:50.434">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:20:50.434" status="PASS" starttime="20170825 15:20:50.252"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:50.434">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:20:50.434" status="PASS" starttime="20170825 15:20:50.434"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:50.435">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:20:50.436" status="PASS" starttime="20170825 15:20:50.435"></status>
</kw>
<status endtime="20170825 15:20:50.436" status="PASS" starttime="20170825 15:20:50.249"></status>
</kw>
<status endtime="20170825 15:20:50.436" status="PASS" starttime="20170825 15:20:50.248"></status>
</kw>
<status endtime="20170825 15:20:50.436" status="PASS" starttime="20170825 15:20:50.248"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:50.436">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:20:50.436" status="PASS" starttime="20170825 15:20:50.436"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:50.438">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:20:50.439" status="PASS" starttime="20170825 15:20:50.438"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:50.440">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:20:50.440" status="PASS" starttime="20170825 15:20:50.439"></status>
</kw>
<status endtime="20170825 15:20:50.440" status="PASS" starttime="20170825 15:20:50.439"></status>
</kw>
<status endtime="20170825 15:20:50.440" status="PASS" starttime="20170825 15:20:50.437"></status>
</kw>
<status endtime="20170825 15:20:50.440" status="PASS" starttime="20170825 15:20:50.437"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:50.505">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:20:50.505">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:20:50.505" status="PASS" starttime="20170825 15:20:50.440"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:50.507">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:20:50.507" status="PASS" starttime="20170825 15:20:50.506"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:50.508">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:20:50.508" status="PASS" starttime="20170825 15:20:50.507"></status>
</kw>
<status endtime="20170825 15:20:50.508" status="PASS" starttime="20170825 15:20:50.507"></status>
</kw>
<status endtime="20170825 15:20:50.508" status="PASS" starttime="20170825 15:20:50.506"></status>
</kw>
<status endtime="20170825 15:20:50.508" status="PASS" starttime="20170825 15:20:50.505"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:20:50.509">Delete All Sessions</msg>
<status endtime="20170825 15:20:50.509" status="PASS" starttime="20170825 15:20:50.509"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:20:50.509">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:20:50.509" status="PASS" starttime="20170825 15:20:50.247"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:50.510">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:20:50.510" status="PASS" starttime="20170825 15:20:50.509"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:50.510">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:20:50.510">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:20:50.510">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:20:50.510" status="PASS" starttime="20170825 15:20:50.510"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:20:50.511">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:20:50.511" status="PASS" starttime="20170825 15:20:50.246"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:20:50.511">${power_state} = On</msg>
<status endtime="20170825 15:20:50.511" status="PASS" starttime="20170825 15:20:50.246"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:20:50.513" status="PASS" starttime="20170825 15:20:50.513"></status>
</kw>
<status endtime="20170825 15:20:50.513" status="PASS" starttime="20170825 15:20:50.245"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:50.517">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:20:50.517" status="PASS" starttime="20170825 15:20:50.516"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:50.518">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:20:50.518" status="PASS" starttime="20170825 15:20:50.517"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:50.518">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:20:50.518" status="PASS" starttime="20170825 15:20:50.518"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:50.519">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:20:50.519" status="PASS" starttime="20170825 15:20:50.519"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:50.698">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:20:50.698" status="PASS" starttime="20170825 15:20:50.520"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:20:50.698">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:20:50.699">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:20:50.699" status="PASS" starttime="20170825 15:20:50.519"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:50.699">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:20:50.699" status="PASS" starttime="20170825 15:20:50.699"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:50.700">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:20:50.700" status="PASS" starttime="20170825 15:20:50.700"></status>
</kw>
<status endtime="20170825 15:20:50.700" status="PASS" starttime="20170825 15:20:50.516"></status>
</kw>
<status endtime="20170825 15:20:50.700" status="PASS" starttime="20170825 15:20:50.515"></status>
</kw>
<status endtime="20170825 15:20:50.700" status="PASS" starttime="20170825 15:20:50.515"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:50.701">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:20:50.701" status="PASS" starttime="20170825 15:20:50.701"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:50.703">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:20:50.703" status="PASS" starttime="20170825 15:20:50.702"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:50.704">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:20:50.704" status="PASS" starttime="20170825 15:20:50.704"></status>
</kw>
<status endtime="20170825 15:20:50.704" status="PASS" starttime="20170825 15:20:50.703"></status>
</kw>
<status endtime="20170825 15:20:50.704" status="PASS" starttime="20170825 15:20:50.702"></status>
</kw>
<status endtime="20170825 15:20:50.704" status="PASS" starttime="20170825 15:20:50.701"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:50.812">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:20:50.813">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:20:50.813" status="PASS" starttime="20170825 15:20:50.705"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:50.814">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:20:50.815" status="PASS" starttime="20170825 15:20:50.814"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:50.815">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:20:50.815" status="PASS" starttime="20170825 15:20:50.815"></status>
</kw>
<status endtime="20170825 15:20:50.816" status="PASS" starttime="20170825 15:20:50.815"></status>
</kw>
<status endtime="20170825 15:20:50.816" status="PASS" starttime="20170825 15:20:50.813"></status>
</kw>
<status endtime="20170825 15:20:50.816" status="PASS" starttime="20170825 15:20:50.813"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:20:50.816">Delete All Sessions</msg>
<status endtime="20170825 15:20:50.816" status="PASS" starttime="20170825 15:20:50.816"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:20:50.816">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:20:50.816" status="PASS" starttime="20170825 15:20:50.514"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:20:50.817">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:20:50.817" status="PASS" starttime="20170825 15:20:50.817"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:20:50.818">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:20:50.818">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:20:50.818">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:20:50.818" status="PASS" starttime="20170825 15:20:50.817"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:20:50.818">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170825 15:20:50.818" status="PASS" starttime="20170825 15:20:50.514"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:20:50.818">${host_state} = Quiesced</msg>
<status endtime="20170825 15:20:50.818" status="PASS" starttime="20170825 15:20:50.513"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:20:50.819">Running != Quiesced</msg>
<status endtime="20170825 15:20:50.819" status="FAIL" starttime="20170825 15:20:50.819"></status>
</kw>
<status endtime="20170825 15:20:50.819" status="FAIL" starttime="20170825 15:20:50.245"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:00.825">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:21:00.825" status="PASS" starttime="20170825 15:21:00.824"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:00.826">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:21:00.826" status="PASS" starttime="20170825 15:21:00.825"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:00.826">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:21:00.826" status="PASS" starttime="20170825 15:21:00.826"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:00.827">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:21:00.827" status="PASS" starttime="20170825 15:21:00.826"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:01.109">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:21:01.109" status="PASS" starttime="20170825 15:21:00.828"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:01.109">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:21:01.109">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:01.109" status="PASS" starttime="20170825 15:21:00.827"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:01.110">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:01.110" status="PASS" starttime="20170825 15:21:01.109"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:01.110">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:01.111" status="PASS" starttime="20170825 15:21:01.110"></status>
</kw>
<status endtime="20170825 15:21:01.111" status="PASS" starttime="20170825 15:21:00.823"></status>
</kw>
<status endtime="20170825 15:21:01.111" status="PASS" starttime="20170825 15:21:00.823"></status>
</kw>
<status endtime="20170825 15:21:01.111" status="PASS" starttime="20170825 15:21:00.822"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:01.111">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:21:01.111" status="PASS" starttime="20170825 15:21:01.111"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:01.113">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:21:01.114" status="PASS" starttime="20170825 15:21:01.113"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:01.114">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:21:01.115" status="PASS" starttime="20170825 15:21:01.114"></status>
</kw>
<status endtime="20170825 15:21:01.115" status="PASS" starttime="20170825 15:21:01.114"></status>
</kw>
<status endtime="20170825 15:21:01.115" status="PASS" starttime="20170825 15:21:01.112"></status>
</kw>
<status endtime="20170825 15:21:01.115" status="PASS" starttime="20170825 15:21:01.112"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:01.178">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:21:01.178">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:01.178" status="PASS" starttime="20170825 15:21:01.115"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:01.180">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:21:01.180" status="PASS" starttime="20170825 15:21:01.179"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:01.181">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:21:01.182" status="PASS" starttime="20170825 15:21:01.181"></status>
</kw>
<status endtime="20170825 15:21:01.182" status="PASS" starttime="20170825 15:21:01.180"></status>
</kw>
<status endtime="20170825 15:21:01.182" status="PASS" starttime="20170825 15:21:01.179"></status>
</kw>
<status endtime="20170825 15:21:01.182" status="PASS" starttime="20170825 15:21:01.178"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:21:01.182">Delete All Sessions</msg>
<status endtime="20170825 15:21:01.182" status="PASS" starttime="20170825 15:21:01.182"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:01.183">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:01.183" status="PASS" starttime="20170825 15:21:00.822"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:01.183">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:01.183" status="PASS" starttime="20170825 15:21:01.183"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:01.184">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:21:01.184">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:21:01.184">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:21:01.184" status="PASS" starttime="20170825 15:21:01.184"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:01.184">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:21:01.184" status="PASS" starttime="20170825 15:21:00.821"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:01.185">${power_state} = On</msg>
<status endtime="20170825 15:21:01.185" status="PASS" starttime="20170825 15:21:00.821"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:21:01.185" status="PASS" starttime="20170825 15:21:01.185"></status>
</kw>
<status endtime="20170825 15:21:01.185" status="PASS" starttime="20170825 15:21:00.820"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:01.190">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:21:01.190" status="PASS" starttime="20170825 15:21:01.190"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:01.191">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:21:01.191" status="PASS" starttime="20170825 15:21:01.191"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:01.191">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:21:01.192" status="PASS" starttime="20170825 15:21:01.191"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:01.192">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:21:01.192" status="PASS" starttime="20170825 15:21:01.192"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:01.408">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:21:01.408" status="PASS" starttime="20170825 15:21:01.193"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:01.408">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:21:01.408">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:01.408" status="PASS" starttime="20170825 15:21:01.192"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:01.409">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:01.409" status="PASS" starttime="20170825 15:21:01.409"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:01.410">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:01.410" status="PASS" starttime="20170825 15:21:01.409"></status>
</kw>
<status endtime="20170825 15:21:01.410" status="PASS" starttime="20170825 15:21:01.189"></status>
</kw>
<status endtime="20170825 15:21:01.410" status="PASS" starttime="20170825 15:21:01.189"></status>
</kw>
<status endtime="20170825 15:21:01.410" status="PASS" starttime="20170825 15:21:01.188"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:01.411">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:21:01.411" status="PASS" starttime="20170825 15:21:01.410"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:01.413">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:21:01.413" status="PASS" starttime="20170825 15:21:01.412"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:01.414">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:21:01.414" status="PASS" starttime="20170825 15:21:01.414"></status>
</kw>
<status endtime="20170825 15:21:01.414" status="PASS" starttime="20170825 15:21:01.413"></status>
</kw>
<status endtime="20170825 15:21:01.414" status="PASS" starttime="20170825 15:21:01.411"></status>
</kw>
<status endtime="20170825 15:21:01.414" status="PASS" starttime="20170825 15:21:01.411"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:01.504">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:21:01.504">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:01.504" status="PASS" starttime="20170825 15:21:01.415"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:01.505">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:21:01.505" status="PASS" starttime="20170825 15:21:01.505"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:01.506">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:21:01.506" status="PASS" starttime="20170825 15:21:01.506"></status>
</kw>
<status endtime="20170825 15:21:01.507" status="PASS" starttime="20170825 15:21:01.506"></status>
</kw>
<status endtime="20170825 15:21:01.507" status="PASS" starttime="20170825 15:21:01.504"></status>
</kw>
<status endtime="20170825 15:21:01.507" status="PASS" starttime="20170825 15:21:01.504"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:21:01.507">Delete All Sessions</msg>
<status endtime="20170825 15:21:01.507" status="PASS" starttime="20170825 15:21:01.507"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:01.507">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:01.507" status="PASS" starttime="20170825 15:21:01.187"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:01.508">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:01.508" status="PASS" starttime="20170825 15:21:01.508"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:01.509">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:21:01.509">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:21:01.509">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:21:01.509" status="PASS" starttime="20170825 15:21:01.508"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:01.509">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170825 15:21:01.509" status="PASS" starttime="20170825 15:21:01.187"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:01.509">${host_state} = Quiesced</msg>
<status endtime="20170825 15:21:01.509" status="PASS" starttime="20170825 15:21:01.185"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:21:01.510">Running != Quiesced</msg>
<status endtime="20170825 15:21:01.510" status="FAIL" starttime="20170825 15:21:01.510"></status>
</kw>
<status endtime="20170825 15:21:01.510" status="FAIL" starttime="20170825 15:21:00.820"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:11.515">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:21:11.516" status="PASS" starttime="20170825 15:21:11.515"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:11.516">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:21:11.516" status="PASS" starttime="20170825 15:21:11.516"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:11.517">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:21:11.517" status="PASS" starttime="20170825 15:21:11.516"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:11.518">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:21:11.518" status="PASS" starttime="20170825 15:21:11.517"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:11.801">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:21:11.801" status="PASS" starttime="20170825 15:21:11.519"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:11.801">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:21:11.801">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:11.801" status="PASS" starttime="20170825 15:21:11.518"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:11.802">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:11.802" status="PASS" starttime="20170825 15:21:11.802"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:11.803">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:11.803" status="PASS" starttime="20170825 15:21:11.802"></status>
</kw>
<status endtime="20170825 15:21:11.803" status="PASS" starttime="20170825 15:21:11.514"></status>
</kw>
<status endtime="20170825 15:21:11.803" status="PASS" starttime="20170825 15:21:11.514"></status>
</kw>
<status endtime="20170825 15:21:11.803" status="PASS" starttime="20170825 15:21:11.513"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:11.804">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:21:11.804" status="PASS" starttime="20170825 15:21:11.803"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:11.806">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:21:11.806" status="PASS" starttime="20170825 15:21:11.805"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:11.807">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:21:11.807" status="PASS" starttime="20170825 15:21:11.807"></status>
</kw>
<status endtime="20170825 15:21:11.807" status="PASS" starttime="20170825 15:21:11.806"></status>
</kw>
<status endtime="20170825 15:21:11.807" status="PASS" starttime="20170825 15:21:11.805"></status>
</kw>
<status endtime="20170825 15:21:11.807" status="PASS" starttime="20170825 15:21:11.804"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:11.870">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:21:11.872">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:11.872" status="PASS" starttime="20170825 15:21:11.807"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:11.875">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:21:11.875" status="PASS" starttime="20170825 15:21:11.874"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:11.876">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:21:11.876" status="PASS" starttime="20170825 15:21:11.876"></status>
</kw>
<status endtime="20170825 15:21:11.876" status="PASS" starttime="20170825 15:21:11.875"></status>
</kw>
<status endtime="20170825 15:21:11.877" status="PASS" starttime="20170825 15:21:11.873"></status>
</kw>
<status endtime="20170825 15:21:11.877" status="PASS" starttime="20170825 15:21:11.873"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:21:11.877">Delete All Sessions</msg>
<status endtime="20170825 15:21:11.877" status="PASS" starttime="20170825 15:21:11.877"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:11.877">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:11.877" status="PASS" starttime="20170825 15:21:11.513"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:11.878">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:11.878" status="PASS" starttime="20170825 15:21:11.878"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:11.879">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:21:11.879">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:21:11.879">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:21:11.879" status="PASS" starttime="20170825 15:21:11.878"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:11.879">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:21:11.879" status="PASS" starttime="20170825 15:21:11.512"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:11.879">${power_state} = On</msg>
<status endtime="20170825 15:21:11.879" status="PASS" starttime="20170825 15:21:11.512"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:21:11.880" status="PASS" starttime="20170825 15:21:11.880"></status>
</kw>
<status endtime="20170825 15:21:11.880" status="PASS" starttime="20170825 15:21:11.511"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:11.885">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:21:11.886" status="PASS" starttime="20170825 15:21:11.885"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:11.886">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:21:11.886" status="PASS" starttime="20170825 15:21:11.886"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:11.887">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:21:11.887" status="PASS" starttime="20170825 15:21:11.887"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:11.888">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:21:11.888" status="PASS" starttime="20170825 15:21:11.888"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:12.069">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:21:12.070" status="PASS" starttime="20170825 15:21:11.889"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:12.070">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:21:12.070">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:12.070" status="PASS" starttime="20170825 15:21:11.889"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:12.070">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:12.070" status="PASS" starttime="20170825 15:21:12.070"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:12.071">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:12.071" status="PASS" starttime="20170825 15:21:12.071"></status>
</kw>
<status endtime="20170825 15:21:12.071" status="PASS" starttime="20170825 15:21:11.884"></status>
</kw>
<status endtime="20170825 15:21:12.071" status="PASS" starttime="20170825 15:21:11.883"></status>
</kw>
<status endtime="20170825 15:21:12.072" status="PASS" starttime="20170825 15:21:11.882"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:12.072">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:21:12.072" status="PASS" starttime="20170825 15:21:12.072"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:12.074">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:21:12.074" status="PASS" starttime="20170825 15:21:12.073"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:12.075">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:21:12.075" status="PASS" starttime="20170825 15:21:12.075"></status>
</kw>
<status endtime="20170825 15:21:12.075" status="PASS" starttime="20170825 15:21:12.074"></status>
</kw>
<status endtime="20170825 15:21:12.076" status="PASS" starttime="20170825 15:21:12.073"></status>
</kw>
<status endtime="20170825 15:21:12.076" status="PASS" starttime="20170825 15:21:12.072"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:12.177">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:21:12.177">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:12.177" status="PASS" starttime="20170825 15:21:12.076"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:12.179">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:21:12.179" status="PASS" starttime="20170825 15:21:12.178"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:12.180">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:21:12.180" status="PASS" starttime="20170825 15:21:12.180"></status>
</kw>
<status endtime="20170825 15:21:12.180" status="PASS" starttime="20170825 15:21:12.179"></status>
</kw>
<status endtime="20170825 15:21:12.181" status="PASS" starttime="20170825 15:21:12.178"></status>
</kw>
<status endtime="20170825 15:21:12.181" status="PASS" starttime="20170825 15:21:12.178"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:21:12.181">Delete All Sessions</msg>
<status endtime="20170825 15:21:12.181" status="PASS" starttime="20170825 15:21:12.181"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:12.181">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:12.181" status="PASS" starttime="20170825 15:21:11.881"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:12.182">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:12.182" status="PASS" starttime="20170825 15:21:12.182"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:12.183">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:21:12.183">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:21:12.183">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:21:12.183" status="PASS" starttime="20170825 15:21:12.182"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:12.183">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170825 15:21:12.183" status="PASS" starttime="20170825 15:21:11.881"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:12.184">${host_state} = Quiesced</msg>
<status endtime="20170825 15:21:12.184" status="PASS" starttime="20170825 15:21:11.880"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:21:12.184">Running != Quiesced</msg>
<status endtime="20170825 15:21:12.184" status="FAIL" starttime="20170825 15:21:12.184"></status>
</kw>
<status endtime="20170825 15:21:12.185" status="FAIL" starttime="20170825 15:21:11.511"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:22.191">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:21:22.191" status="PASS" starttime="20170825 15:21:22.190"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:22.192">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:21:22.192" status="PASS" starttime="20170825 15:21:22.192"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:22.193">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:21:22.193" status="PASS" starttime="20170825 15:21:22.192"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:22.193">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:21:22.194" status="PASS" starttime="20170825 15:21:22.193"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:22.449">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:21:22.449" status="PASS" starttime="20170825 15:21:22.194"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:22.449">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:21:22.449">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:22.449" status="PASS" starttime="20170825 15:21:22.194"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:22.450">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:22.450" status="PASS" starttime="20170825 15:21:22.449"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:22.450">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:22.451" status="PASS" starttime="20170825 15:21:22.450"></status>
</kw>
<status endtime="20170825 15:21:22.451" status="PASS" starttime="20170825 15:21:22.189"></status>
</kw>
<status endtime="20170825 15:21:22.451" status="PASS" starttime="20170825 15:21:22.189"></status>
</kw>
<status endtime="20170825 15:21:22.451" status="PASS" starttime="20170825 15:21:22.188"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:22.452">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:21:22.452" status="PASS" starttime="20170825 15:21:22.451"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:22.454">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:21:22.454" status="PASS" starttime="20170825 15:21:22.453"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:22.454">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:21:22.455" status="PASS" starttime="20170825 15:21:22.454"></status>
</kw>
<status endtime="20170825 15:21:22.455" status="PASS" starttime="20170825 15:21:22.454"></status>
</kw>
<status endtime="20170825 15:21:22.455" status="PASS" starttime="20170825 15:21:22.452"></status>
</kw>
<status endtime="20170825 15:21:22.455" status="PASS" starttime="20170825 15:21:22.452"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:22.544">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:21:22.545">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:22.545" status="PASS" starttime="20170825 15:21:22.455"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:22.546">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:21:22.546" status="PASS" starttime="20170825 15:21:22.546"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:22.547">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:21:22.547" status="PASS" starttime="20170825 15:21:22.547"></status>
</kw>
<status endtime="20170825 15:21:22.547" status="PASS" starttime="20170825 15:21:22.547"></status>
</kw>
<status endtime="20170825 15:21:22.548" status="PASS" starttime="20170825 15:21:22.545"></status>
</kw>
<status endtime="20170825 15:21:22.548" status="PASS" starttime="20170825 15:21:22.545"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:21:22.548">Delete All Sessions</msg>
<status endtime="20170825 15:21:22.548" status="PASS" starttime="20170825 15:21:22.548"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:22.548">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:22.548" status="PASS" starttime="20170825 15:21:22.188"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:22.549">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:22.549" status="PASS" starttime="20170825 15:21:22.549"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:22.550">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:21:22.550">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:21:22.550">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:21:22.550" status="PASS" starttime="20170825 15:21:22.549"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:22.550">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:21:22.550" status="PASS" starttime="20170825 15:21:22.187"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:22.550">${power_state} = On</msg>
<status endtime="20170825 15:21:22.550" status="PASS" starttime="20170825 15:21:22.186"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:21:22.551" status="PASS" starttime="20170825 15:21:22.551"></status>
</kw>
<status endtime="20170825 15:21:22.551" status="PASS" starttime="20170825 15:21:22.186"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:22.555">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:21:22.555" status="PASS" starttime="20170825 15:21:22.554"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:22.556">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:21:22.556" status="PASS" starttime="20170825 15:21:22.556"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:22.556">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:21:22.557" status="PASS" starttime="20170825 15:21:22.556"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:22.557">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:21:22.557" status="PASS" starttime="20170825 15:21:22.557"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:22.752">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:21:22.752" status="PASS" starttime="20170825 15:21:22.558"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:22.752">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:21:22.753">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:22.753" status="PASS" starttime="20170825 15:21:22.557"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:22.753">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:22.753" status="PASS" starttime="20170825 15:21:22.753"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:22.754">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:22.754" status="PASS" starttime="20170825 15:21:22.754"></status>
</kw>
<status endtime="20170825 15:21:22.754" status="PASS" starttime="20170825 15:21:22.554"></status>
</kw>
<status endtime="20170825 15:21:22.754" status="PASS" starttime="20170825 15:21:22.553"></status>
</kw>
<status endtime="20170825 15:21:22.754" status="PASS" starttime="20170825 15:21:22.553"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:22.755">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:21:22.755" status="PASS" starttime="20170825 15:21:22.755"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:22.757">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:21:22.757" status="PASS" starttime="20170825 15:21:22.756"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:22.758">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:21:22.758" status="PASS" starttime="20170825 15:21:22.758"></status>
</kw>
<status endtime="20170825 15:21:22.758" status="PASS" starttime="20170825 15:21:22.757"></status>
</kw>
<status endtime="20170825 15:21:22.758" status="PASS" starttime="20170825 15:21:22.756"></status>
</kw>
<status endtime="20170825 15:21:22.758" status="PASS" starttime="20170825 15:21:22.755"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:22.848">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:21:22.848">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:22.848" status="PASS" starttime="20170825 15:21:22.759"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:22.850">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:21:22.850" status="PASS" starttime="20170825 15:21:22.850"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:22.851">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:21:22.851" status="PASS" starttime="20170825 15:21:22.851"></status>
</kw>
<status endtime="20170825 15:21:22.851" status="PASS" starttime="20170825 15:21:22.850"></status>
</kw>
<status endtime="20170825 15:21:22.851" status="PASS" starttime="20170825 15:21:22.849"></status>
</kw>
<status endtime="20170825 15:21:22.852" status="PASS" starttime="20170825 15:21:22.849"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:21:22.852">Delete All Sessions</msg>
<status endtime="20170825 15:21:22.852" status="PASS" starttime="20170825 15:21:22.852"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:22.852">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:22.852" status="PASS" starttime="20170825 15:21:22.552"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:22.853">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:22.853" status="PASS" starttime="20170825 15:21:22.852"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:22.854">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:21:22.854">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:21:22.854">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:21:22.854" status="PASS" starttime="20170825 15:21:22.853"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:22.854">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170825 15:21:22.854" status="PASS" starttime="20170825 15:21:22.552"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:22.854">${host_state} = Quiesced</msg>
<status endtime="20170825 15:21:22.854" status="PASS" starttime="20170825 15:21:22.551"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:21:22.855">Running != Quiesced</msg>
<status endtime="20170825 15:21:22.855" status="FAIL" starttime="20170825 15:21:22.855"></status>
</kw>
<status endtime="20170825 15:21:22.855" status="FAIL" starttime="20170825 15:21:22.185"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:32.864">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:21:32.864" status="PASS" starttime="20170825 15:21:32.863"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:32.865">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:21:32.865" status="PASS" starttime="20170825 15:21:32.865"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:32.866">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:21:32.866" status="PASS" starttime="20170825 15:21:32.865"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:32.866">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:21:32.866" status="PASS" starttime="20170825 15:21:32.866"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:33.075">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:21:33.075" status="PASS" starttime="20170825 15:21:32.867"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:33.075">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:21:33.075">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:33.075" status="PASS" starttime="20170825 15:21:32.867"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:33.076">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:33.076" status="PASS" starttime="20170825 15:21:33.075"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:33.076">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:33.076" status="PASS" starttime="20170825 15:21:33.076"></status>
</kw>
<status endtime="20170825 15:21:33.077" status="PASS" starttime="20170825 15:21:32.863"></status>
</kw>
<status endtime="20170825 15:21:33.077" status="PASS" starttime="20170825 15:21:32.863"></status>
</kw>
<status endtime="20170825 15:21:33.077" status="PASS" starttime="20170825 15:21:32.862"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:33.079">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:21:33.079" status="PASS" starttime="20170825 15:21:33.077"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:33.082">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:21:33.082" status="PASS" starttime="20170825 15:21:33.081"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:33.083">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:21:33.084" status="PASS" starttime="20170825 15:21:33.083"></status>
</kw>
<status endtime="20170825 15:21:33.084" status="PASS" starttime="20170825 15:21:33.082"></status>
</kw>
<status endtime="20170825 15:21:33.084" status="PASS" starttime="20170825 15:21:33.080"></status>
</kw>
<status endtime="20170825 15:21:33.084" status="PASS" starttime="20170825 15:21:33.079"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:33.155">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:21:33.155">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:33.155" status="PASS" starttime="20170825 15:21:33.084"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:33.157">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:21:33.157" status="PASS" starttime="20170825 15:21:33.157"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:33.158">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:21:33.158" status="PASS" starttime="20170825 15:21:33.158"></status>
</kw>
<status endtime="20170825 15:21:33.158" status="PASS" starttime="20170825 15:21:33.157"></status>
</kw>
<status endtime="20170825 15:21:33.158" status="PASS" starttime="20170825 15:21:33.156"></status>
</kw>
<status endtime="20170825 15:21:33.158" status="PASS" starttime="20170825 15:21:33.156"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:21:33.159">Delete All Sessions</msg>
<status endtime="20170825 15:21:33.159" status="PASS" starttime="20170825 15:21:33.159"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:33.159">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:33.159" status="PASS" starttime="20170825 15:21:32.861"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:33.160">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:33.160" status="PASS" starttime="20170825 15:21:33.159"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:33.160">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:21:33.160">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:21:33.160">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:21:33.161" status="PASS" starttime="20170825 15:21:33.160"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:33.161">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:21:33.161" status="PASS" starttime="20170825 15:21:32.861"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:33.161">${power_state} = On</msg>
<status endtime="20170825 15:21:33.161" status="PASS" starttime="20170825 15:21:32.857"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:21:33.162" status="PASS" starttime="20170825 15:21:33.161"></status>
</kw>
<status endtime="20170825 15:21:33.162" status="PASS" starttime="20170825 15:21:32.856"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:33.166">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:21:33.166" status="PASS" starttime="20170825 15:21:33.165"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:33.167">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:21:33.167" status="PASS" starttime="20170825 15:21:33.166"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:33.167">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:21:33.167" status="PASS" starttime="20170825 15:21:33.167"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:33.168">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:21:33.168" status="PASS" starttime="20170825 15:21:33.167"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:33.358">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:21:33.358" status="PASS" starttime="20170825 15:21:33.169"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:33.358">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:21:33.358">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:33.358" status="PASS" starttime="20170825 15:21:33.168"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:33.359">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:33.359" status="PASS" starttime="20170825 15:21:33.359"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:33.360">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:33.360" status="PASS" starttime="20170825 15:21:33.359"></status>
</kw>
<status endtime="20170825 15:21:33.360" status="PASS" starttime="20170825 15:21:33.165"></status>
</kw>
<status endtime="20170825 15:21:33.360" status="PASS" starttime="20170825 15:21:33.164"></status>
</kw>
<status endtime="20170825 15:21:33.360" status="PASS" starttime="20170825 15:21:33.164"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:33.361">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:21:33.361" status="PASS" starttime="20170825 15:21:33.360"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:33.363">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:21:33.363" status="PASS" starttime="20170825 15:21:33.362"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:33.364">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:21:33.364" status="PASS" starttime="20170825 15:21:33.364"></status>
</kw>
<status endtime="20170825 15:21:33.364" status="PASS" starttime="20170825 15:21:33.363"></status>
</kw>
<status endtime="20170825 15:21:33.364" status="PASS" starttime="20170825 15:21:33.362"></status>
</kw>
<status endtime="20170825 15:21:33.364" status="PASS" starttime="20170825 15:21:33.361"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:33.468">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:21:33.468">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:33.468" status="PASS" starttime="20170825 15:21:33.365"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:33.470">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:21:33.470" status="PASS" starttime="20170825 15:21:33.470"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:33.471">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:21:33.471" status="PASS" starttime="20170825 15:21:33.471"></status>
</kw>
<status endtime="20170825 15:21:33.471" status="PASS" starttime="20170825 15:21:33.470"></status>
</kw>
<status endtime="20170825 15:21:33.472" status="PASS" starttime="20170825 15:21:33.469"></status>
</kw>
<status endtime="20170825 15:21:33.472" status="PASS" starttime="20170825 15:21:33.469"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:21:33.472">Delete All Sessions</msg>
<status endtime="20170825 15:21:33.472" status="PASS" starttime="20170825 15:21:33.472"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:33.473">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:33.473" status="PASS" starttime="20170825 15:21:33.163"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:33.473">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:33.473" status="PASS" starttime="20170825 15:21:33.473"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:33.474">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:21:33.474">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:21:33.474">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:21:33.474" status="PASS" starttime="20170825 15:21:33.473"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:33.474">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170825 15:21:33.474" status="PASS" starttime="20170825 15:21:33.162"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:33.475">${host_state} = Quiesced</msg>
<status endtime="20170825 15:21:33.475" status="PASS" starttime="20170825 15:21:33.162"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:21:33.475">Running != Quiesced</msg>
<status endtime="20170825 15:21:33.475" status="FAIL" starttime="20170825 15:21:33.475"></status>
</kw>
<status endtime="20170825 15:21:33.476" status="FAIL" starttime="20170825 15:21:32.856"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:43.481">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:21:43.481" status="PASS" starttime="20170825 15:21:43.481"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:43.482">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:21:43.482" status="PASS" starttime="20170825 15:21:43.482"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:43.482">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:21:43.483" status="PASS" starttime="20170825 15:21:43.482"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:43.483">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:21:43.483" status="PASS" starttime="20170825 15:21:43.483"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:43.663">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:21:43.663" status="PASS" starttime="20170825 15:21:43.484"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:43.663">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:21:43.664">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:43.664" status="PASS" starttime="20170825 15:21:43.483"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:43.664">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:43.664" status="PASS" starttime="20170825 15:21:43.664"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:43.665">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:43.665" status="PASS" starttime="20170825 15:21:43.665"></status>
</kw>
<status endtime="20170825 15:21:43.665" status="PASS" starttime="20170825 15:21:43.480"></status>
</kw>
<status endtime="20170825 15:21:43.665" status="PASS" starttime="20170825 15:21:43.479"></status>
</kw>
<status endtime="20170825 15:21:43.665" status="PASS" starttime="20170825 15:21:43.479"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:43.666">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:21:43.666" status="PASS" starttime="20170825 15:21:43.666"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:43.668">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:21:43.668" status="PASS" starttime="20170825 15:21:43.667"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:43.669">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:21:43.669" status="PASS" starttime="20170825 15:21:43.669"></status>
</kw>
<status endtime="20170825 15:21:43.669" status="PASS" starttime="20170825 15:21:43.668"></status>
</kw>
<status endtime="20170825 15:21:43.669" status="PASS" starttime="20170825 15:21:43.667"></status>
</kw>
<status endtime="20170825 15:21:43.669" status="PASS" starttime="20170825 15:21:43.666"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:43.734">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:21:43.734">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:43.734" status="PASS" starttime="20170825 15:21:43.669"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:43.736">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:21:43.736" status="PASS" starttime="20170825 15:21:43.735"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:43.737">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:21:43.737" status="PASS" starttime="20170825 15:21:43.737"></status>
</kw>
<status endtime="20170825 15:21:43.737" status="PASS" starttime="20170825 15:21:43.736"></status>
</kw>
<status endtime="20170825 15:21:43.737" status="PASS" starttime="20170825 15:21:43.735"></status>
</kw>
<status endtime="20170825 15:21:43.737" status="PASS" starttime="20170825 15:21:43.734"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:21:43.738">Delete All Sessions</msg>
<status endtime="20170825 15:21:43.738" status="PASS" starttime="20170825 15:21:43.738"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:43.738">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:43.738" status="PASS" starttime="20170825 15:21:43.478"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:43.739">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:43.739" status="PASS" starttime="20170825 15:21:43.738"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:43.739">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:21:43.739">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:21:43.739">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:21:43.739" status="PASS" starttime="20170825 15:21:43.739"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:43.740">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:21:43.740" status="PASS" starttime="20170825 15:21:43.477"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:43.740">${power_state} = On</msg>
<status endtime="20170825 15:21:43.740" status="PASS" starttime="20170825 15:21:43.477"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:21:43.740" status="PASS" starttime="20170825 15:21:43.740"></status>
</kw>
<status endtime="20170825 15:21:43.741" status="PASS" starttime="20170825 15:21:43.477"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:43.744">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:21:43.745" status="PASS" starttime="20170825 15:21:43.744"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:43.745">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:21:43.745" status="PASS" starttime="20170825 15:21:43.745"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:43.746">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:21:43.746" status="PASS" starttime="20170825 15:21:43.745"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:43.746">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:21:43.746" status="PASS" starttime="20170825 15:21:43.746"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:43.940">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:21:43.940" status="PASS" starttime="20170825 15:21:43.747"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:43.940">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:21:43.940">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:43.940" status="PASS" starttime="20170825 15:21:43.747"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:43.941">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:43.941" status="PASS" starttime="20170825 15:21:43.941"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:43.942">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:43.942" status="PASS" starttime="20170825 15:21:43.941"></status>
</kw>
<status endtime="20170825 15:21:43.942" status="PASS" starttime="20170825 15:21:43.743"></status>
</kw>
<status endtime="20170825 15:21:43.942" status="PASS" starttime="20170825 15:21:43.743"></status>
</kw>
<status endtime="20170825 15:21:43.942" status="PASS" starttime="20170825 15:21:43.742"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:43.943">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:21:43.943" status="PASS" starttime="20170825 15:21:43.942"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:43.945">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:21:43.945" status="PASS" starttime="20170825 15:21:43.944"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:43.946">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:21:43.946" status="PASS" starttime="20170825 15:21:43.946"></status>
</kw>
<status endtime="20170825 15:21:43.946" status="PASS" starttime="20170825 15:21:43.945"></status>
</kw>
<status endtime="20170825 15:21:43.946" status="PASS" starttime="20170825 15:21:43.943"></status>
</kw>
<status endtime="20170825 15:21:43.946" status="PASS" starttime="20170825 15:21:43.943"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:44.055">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:21:44.055">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:44.055" status="PASS" starttime="20170825 15:21:43.947"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:44.057">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:21:44.057" status="PASS" starttime="20170825 15:21:44.057"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:44.058">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:21:44.058" status="PASS" starttime="20170825 15:21:44.058"></status>
</kw>
<status endtime="20170825 15:21:44.058" status="PASS" starttime="20170825 15:21:44.057"></status>
</kw>
<status endtime="20170825 15:21:44.058" status="PASS" starttime="20170825 15:21:44.056"></status>
</kw>
<status endtime="20170825 15:21:44.058" status="PASS" starttime="20170825 15:21:44.056"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:21:44.059">Delete All Sessions</msg>
<status endtime="20170825 15:21:44.059" status="PASS" starttime="20170825 15:21:44.059"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:44.059">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:44.059" status="PASS" starttime="20170825 15:21:43.742"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:44.060">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:44.060" status="PASS" starttime="20170825 15:21:44.059"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:44.060">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:21:44.060">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:21:44.061">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:21:44.061" status="PASS" starttime="20170825 15:21:44.060"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:44.061">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170825 15:21:44.061" status="PASS" starttime="20170825 15:21:43.741"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:44.061">${host_state} = Quiesced</msg>
<status endtime="20170825 15:21:44.061" status="PASS" starttime="20170825 15:21:43.741"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:21:44.062">Running != Quiesced</msg>
<status endtime="20170825 15:21:44.062" status="FAIL" starttime="20170825 15:21:44.062"></status>
</kw>
<status endtime="20170825 15:21:44.062" status="FAIL" starttime="20170825 15:21:43.476"></status>
</kw>
<msg level="FAIL" timestamp="20170825 15:21:44.062">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: Running != Quiesced</msg>
<status endtime="20170825 15:21:44.062" status="FAIL" starttime="20170825 15:11:34.738"></status>
</kw>
<status endtime="20170825 15:21:44.063" status="FAIL" starttime="20170825 15:11:32.997"></status>
</kw>
<status endtime="20170825 15:21:44.063" status="FAIL" starttime="20170825 15:11:25.533"></status>
</kw>
<status endtime="20170825 15:21:44.063" status="FAIL" starttime="20170825 15:11:25.532"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Collect FFDC and SOL log.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:44.068">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:21:44.068" status="PASS" starttime="20170825 15:21:44.067"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:44.069">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:21:44.069" status="PASS" starttime="20170825 15:21:44.068"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:44.069">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:21:44.069" status="PASS" starttime="20170825 15:21:44.069"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:44.070">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:21:44.070" status="PASS" starttime="20170825 15:21:44.070"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:44.320">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:21:44.320" status="PASS" starttime="20170825 15:21:44.071"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:44.320">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:21:44.320">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:44.320" status="PASS" starttime="20170825 15:21:44.070"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:44.321">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:44.321" status="PASS" starttime="20170825 15:21:44.320"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:44.322">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:44.322" status="PASS" starttime="20170825 15:21:44.321"></status>
</kw>
<status endtime="20170825 15:21:44.322" status="PASS" starttime="20170825 15:21:44.067"></status>
</kw>
<status endtime="20170825 15:21:44.322" status="PASS" starttime="20170825 15:21:44.066"></status>
</kw>
<status endtime="20170825 15:21:44.322" status="PASS" starttime="20170825 15:21:44.066"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:44.323">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:21:44.323" status="PASS" starttime="20170825 15:21:44.322"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:44.326">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:21:44.326" status="PASS" starttime="20170825 15:21:44.325"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:44.327">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:21:44.327" status="PASS" starttime="20170825 15:21:44.327"></status>
</kw>
<status endtime="20170825 15:21:44.327" status="PASS" starttime="20170825 15:21:44.326"></status>
</kw>
<status endtime="20170825 15:21:44.327" status="PASS" starttime="20170825 15:21:44.324"></status>
</kw>
<status endtime="20170825 15:21:44.327" status="PASS" starttime="20170825 15:21:44.323"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:44.480">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:21:44.480">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:44.480" status="PASS" starttime="20170825 15:21:44.328"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:44.482">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:21:44.482" status="PASS" starttime="20170825 15:21:44.481"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:44.483">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:21:44.483" status="PASS" starttime="20170825 15:21:44.482"></status>
</kw>
<status endtime="20170825 15:21:44.483" status="PASS" starttime="20170825 15:21:44.482"></status>
</kw>
<status endtime="20170825 15:21:44.483" status="PASS" starttime="20170825 15:21:44.481"></status>
</kw>
<status endtime="20170825 15:21:44.483" status="PASS" starttime="20170825 15:21:44.480"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:21:44.483">Delete All Sessions</msg>
<status endtime="20170825 15:21:44.484" status="PASS" starttime="20170825 15:21:44.483"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:44.484">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:44.484" status="PASS" starttime="20170825 15:21:44.065"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:44.484">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:44.484" status="PASS" starttime="20170825 15:21:44.484"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:44.485">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:21:44.485">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:21:44.485">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:21:44.485" status="PASS" starttime="20170825 15:21:44.485"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:44.485">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170825 15:21:44.486" status="PASS" starttime="20170825 15:21:44.065"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:44.486">${host_state} = Quiesced</msg>
<status endtime="20170825 15:21:44.486" status="PASS" starttime="20170825 15:21:44.064"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<status endtime="20170825 15:21:44.487" status="PASS" starttime="20170825 15:21:44.487"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:44.487">${status} = True</msg>
<status endtime="20170825 15:21:44.487" status="PASS" starttime="20170825 15:21:44.486"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:44.487">${status} = True</msg>
<status endtime="20170825 15:21:44.487" status="PASS" starttime="20170825 15:21:44.064"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.21.61</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:44.512">Length is 9</msg>
<status endtime="20170825 15:21:44.512" status="PASS" starttime="20170825 15:21:44.512"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:44.518">Running command 'ping -c 4 9.3.21.61 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170825 15:21:47.528">${RC} = 0</msg>
<msg level="INFO" timestamp="20170825 15:21:47.528">${output} = PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=1.23 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.607 ms
64 bytes from 9.3.21.61: icmp_seq=3 tt...</msg>
<status endtime="20170825 15:21:47.528" status="PASS" starttime="20170825 15:21:44.512"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:47.531">RC: 0
Output:
PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=1.23 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.607 ms
64 bytes from 9.3.21.61: icmp_seq=3 ttl=62 time=0.596 ms
64 bytes from 9.3.21.61: icmp_seq=4 ttl=62 time=0.597 ms

--- 9.3.21.61 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.596/0.758/1.233/0.274 ms</msg>
<status endtime="20170825 15:21:47.531" status="PASS" starttime="20170825 15:21:47.530"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170825 15:21:47.532" status="PASS" starttime="20170825 15:21:47.531"></status>
</kw>
<status endtime="20170825 15:21:47.532" status="PASS" starttime="20170825 15:21:44.511"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:47.545">${cur_time} = 2017-08-25 15:21:47:545075</msg>
<status endtime="20170825 15:21:47.545" status="PASS" starttime="20170825 15:21:47.545"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:47.546">${cur_time} = 20170825152147545075</msg>
<status endtime="20170825 15:21:47.546" status="PASS" starttime="20170825 15:21:47.546"></status>
</kw>
<status endtime="20170825 15:21:47.546" status="PASS" starttime="20170825 15:21:47.544"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:47.546">${FFDC_TIME} = 20170825152147545075</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:47.557">${suite_name} = TestsTestBasicPoweron</msg>
<status endtime="20170825 15:21:47.557" status="PASS" starttime="20170825 15:21:47.557"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:47.558">${suite_name} = 20170825152147545075_TestsTestBasicPoweron</msg>
<status endtime="20170825 15:21:47.558" status="PASS" starttime="20170825 15:21:47.557"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:47.558">${test_name} = PowerOnTest</msg>
<status endtime="20170825 15:21:47.558" status="PASS" starttime="20170825 15:21:47.558"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:47.559">${test_name} = 20170825152147545075_PowerOnTest</msg>
<status endtime="20170825 15:21:47.559" status="PASS" starttime="20170825 15:21:47.558"></status>
</kw>
<status endtime="20170825 15:21:47.559" status="PASS" starttime="20170825 15:21:47.556"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:47.559">${FFDC_DIR_PATH} = /tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/</msg>
<msg level="INFO" timestamp="20170825 15:21:47.560">${FFDC_PREFIX} = 20170825152147545075_</msg>
<msg level="INFO" timestamp="20170825 15:21:47.580">${LOG_PREFIX} = /tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:21:47.581">Created directory '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest&lt;/a&gt;'.</msg>
<status endtime="20170825 15:21:47.581" status="PASS" starttime="20170825 15:21:47.580"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:47.586">${FFDC_FILE_PATH} = /tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:21:47.608">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:21:47.608" status="PASS" starttime="20170825 15:21:47.607"></status>
</kw>
<status endtime="20170825 15:21:47.608" status="PASS" starttime="20170825 15:21:47.606"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:21:47.609">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:21:47.609" status="PASS" starttime="20170825 15:21:47.609"></status>
</kw>
<status endtime="20170825 15:21:47.609" status="PASS" starttime="20170825 15:21:47.608"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:21:47.612">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:21:47.612" status="PASS" starttime="20170825 15:21:47.611"></status>
</kw>
<status endtime="20170825 15:21:47.612" status="PASS" starttime="20170825 15:21:47.610"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:21:47.613">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:21:47.613" status="PASS" starttime="20170825 15:21:47.613"></status>
</kw>
<status endtime="20170825 15:21:47.613" status="PASS" starttime="20170825 15:21:47.612"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:21:47.614">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:21:47.614" status="PASS" starttime="20170825 15:21:47.614"></status>
</kw>
<status endtime="20170825 15:21:47.615" status="PASS" starttime="20170825 15:21:47.613"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:21:47.616">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:21:47.616" status="PASS" starttime="20170825 15:21:47.615"></status>
</kw>
<status endtime="20170825 15:21:47.616" status="PASS" starttime="20170825 15:21:47.615"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:21:47.617">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:21:47.617" status="PASS" starttime="20170825 15:21:47.617"></status>
</kw>
<status endtime="20170825 15:21:47.617" status="PASS" starttime="20170825 15:21:47.616"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:21:47.618">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:21:47.618" status="PASS" starttime="20170825 15:21:47.618"></status>
</kw>
<status endtime="20170825 15:21:47.619" status="PASS" starttime="20170825 15:21:47.617"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:21:47.620">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:21:47.620" status="PASS" starttime="20170825 15:21:47.619"></status>
</kw>
<status endtime="20170825 15:21:47.620" status="PASS" starttime="20170825 15:21:47.619"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:21:47.621">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:21:47.621" status="PASS" starttime="20170825 15:21:47.621"></status>
</kw>
<status endtime="20170825 15:21:47.621" status="PASS" starttime="20170825 15:21:47.620"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:21:47.622">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:21:47.623" status="PASS" starttime="20170825 15:21:47.622"></status>
</kw>
<status endtime="20170825 15:21:47.623" status="PASS" starttime="20170825 15:21:47.622"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:21:47.624">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:21:47.624" status="PASS" starttime="20170825 15:21:47.623"></status>
</kw>
<status endtime="20170825 15:21:47.624" status="PASS" starttime="20170825 15:21:47.623"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:21:47.625">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:21:47.625" status="PASS" starttime="20170825 15:21:47.625"></status>
</kw>
<status endtime="20170825 15:21:47.625" status="PASS" starttime="20170825 15:21:47.624"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:47.654">newline=

height=24
prompt=# 
path_separator=/
host=9.3.21.61
index=1
term_type=vt100
port=22
width=80
timeout=25 seconds
encoding=UTF-8
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170825 15:21:47.655">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170825 15:21:47.736">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170825 15:21:47.746">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170825 15:21:47.746">${stderr} = </msg>
<msg level="INFO" timestamp="20170825 15:21:47.746">${rc} = 0</msg>
<status endtime="20170825 15:21:47.746" status="PASS" starttime="20170825 15:21:47.626"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:47.747">Length is 0</msg>
<status endtime="20170825 15:21:47.747" status="PASS" starttime="20170825 15:21:47.747"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:47.748">Length is 11</msg>
<status endtime="20170825 15:21:47.748" status="PASS" starttime="20170825 15:21:47.747"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:47.748">${model_name} = Witherspoon</msg>
<status endtime="20170825 15:21:47.748" status="PASS" starttime="20170825 15:21:47.626"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:21:47.750">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:21:47.750" status="PASS" starttime="20170825 15:21:47.750"></status>
</kw>
<status endtime="20170825 15:21:47.750" status="PASS" starttime="20170825 15:21:47.748"></status>
</kw>
<status endtime="20170825 15:21:47.750" status="PASS" starttime="20170825 15:21:47.620"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:21:47.752">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:21:47.752" status="PASS" starttime="20170825 15:21:47.751"></status>
</kw>
<status endtime="20170825 15:21:47.752" status="PASS" starttime="20170825 15:21:47.751"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:47.752">@{entries} = [ DRIVER INFO | APPLICATION DATA | BMC DATA ]</msg>
<status endtime="20170825 15:21:47.752" status="PASS" starttime="20170825 15:21:47.752"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:21:47.754">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:21:47.754" status="PASS" starttime="20170825 15:21:47.753"></status>
</kw>
<status endtime="20170825 15:21:47.754" status="PASS" starttime="20170825 15:21:47.753"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:21:47.755">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:21:47.755" status="PASS" starttime="20170825 15:21:47.755"></status>
</kw>
<status endtime="20170825 15:21:47.755" status="PASS" starttime="20170825 15:21:47.754"></status>
</kw>
<status endtime="20170825 15:21:47.755" status="PASS" starttime="20170825 15:21:47.753"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:21:47.757">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:21:47.757" status="PASS" starttime="20170825 15:21:47.756"></status>
</kw>
<status endtime="20170825 15:21:47.757" status="PASS" starttime="20170825 15:21:47.756"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:21:47.758">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:21:47.758" status="PASS" starttime="20170825 15:21:47.757"></status>
</kw>
<status endtime="20170825 15:21:47.758" status="PASS" starttime="20170825 15:21:47.757"></status>
</kw>
<status endtime="20170825 15:21:47.758" status="PASS" starttime="20170825 15:21:47.755"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:21:47.759">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:21:47.759" status="PASS" starttime="20170825 15:21:47.759"></status>
</kw>
<status endtime="20170825 15:21:47.759" status="PASS" starttime="20170825 15:21:47.758"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:21:47.761">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:21:47.761" status="PASS" starttime="20170825 15:21:47.760"></status>
</kw>
<status endtime="20170825 15:21:47.761" status="PASS" starttime="20170825 15:21:47.760"></status>
</kw>
<status endtime="20170825 15:21:47.761" status="PASS" starttime="20170825 15:21:47.758"></status>
</kw>
<status endtime="20170825 15:21:47.761" status="PASS" starttime="20170825 15:21:47.752"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:21:47.762">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:21:47.762" status="PASS" starttime="20170825 15:21:47.762"></status>
</kw>
<status endtime="20170825 15:21:47.762" status="PASS" starttime="20170825 15:21:47.761"></status>
</kw>
<status endtime="20170825 15:21:47.762" status="PASS" starttime="20170825 15:21:47.606"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:47.768">@{entries} = [ BMC LOGS ]</msg>
<status endtime="20170825 15:21:47.768" status="PASS" starttime="20170825 15:21:47.768"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC LOGS" type="foritem">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:47.770">@{method_list} = [ ('Sys Inventory Files', 'System Inventory Files') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('OS FFDC', 'OS FFDC Files') | ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC ...</msg>
<status endtime="20170825 15:21:47.770" status="PASS" starttime="20170825 15:21:47.770"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status endtime="20170825 15:21:47.772" status="PASS" starttime="20170825 15:21:47.771"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:47.772">@{ffdc_function_list} = [ Sys Inventory Files | Get Request FFDC | OS FFDC | Core Files | BMC Specific Files | FFDC Generic Report | SEL Log ]</msg>
<status endtime="20170825 15:21:47.772" status="PASS" starttime="20170825 15:21:47.770"></status>
</kw>
<kw name="${method} IN [ @{method_list} ]" type="for">
<kw name="${method} = ('Sys Inventory Files', 'System Inventory Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170825 15:21:47.774" status="PASS" starttime="20170825 15:21:47.773"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:47.774">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:21:47.774">${ret_values} = None</msg>
<status endtime="20170825 15:21:47.774" status="PASS" starttime="20170825 15:21:47.773"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170825 15:21:47.775" status="PASS" starttime="20170825 15:21:47.774"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="System Inventory Files" library="openbmc_ffdc_methods">
<doc>Copy systest os_inventory files.</doc>
<kw name="Copy Files" library="OperatingSystem">
<doc>Copies specified files to the target directory.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
<arg>${ffdc_dir_path}</arg>
</arguments>
<status endtime="20170825 15:21:47.803" status="PASS" starttime="20170825 15:21:47.800"></status>
</kw>
<kw name="Remove Files" library="OperatingSystem">
<doc>Uses `Remove File` to remove multiple files one-by-one.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:21:47.803">File '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/os_inventory_*.json"&gt;/tmp/fspcibld/6657/obmc-robot/os_inventory_*.json&lt;/a&gt;' does not exist.</msg>
<status endtime="20170825 15:21:47.803" status="PASS" starttime="20170825 15:21:47.803"></status>
</kw>
<status endtime="20170825 15:21:47.803" status="PASS" starttime="20170825 15:21:47.800"></status>
</kw>
<status endtime="20170825 15:21:47.804" status="PASS" starttime="20170825 15:21:47.775"></status>
</kw>
<status endtime="20170825 15:21:47.804" status="PASS" starttime="20170825 15:21:47.772"></status>
</kw>
<status endtime="20170825 15:21:47.804" status="PASS" starttime="20170825 15:21:47.772"></status>
</kw>
<kw name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170825 15:21:47.806" status="PASS" starttime="20170825 15:21:47.806"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:47.806">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:21:47.806">${ret_values} = None</msg>
<status endtime="20170825 15:21:47.806" status="PASS" starttime="20170825 15:21:47.805"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170825 15:21:47.807" status="PASS" starttime="20170825 15:21:47.807"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:47.848">@{entries} = [ GET REQUESTS ]</msg>
<status endtime="20170825 15:21:47.849" status="PASS" starttime="20170825 15:21:47.848"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = GET REQUESTS" type="foritem">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:47.850">@{cmd_list} = [ ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_sensor_xyz_list', '/xyz/openbmc_project/sensors/enumerate') | ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('B...</msg>
<status endtime="20170825 15:21:47.850" status="PASS" starttime="20170825 15:21:47.849"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:47.851">${logpath} = /tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_inventory.txt</msg>
<status endtime="20170825 15:21:47.851" status="PASS" starttime="20170825 15:21:47.850"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:47.854">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:21:47.854" status="PASS" starttime="20170825 15:21:47.853"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:47.855">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:21:47.855" status="PASS" starttime="20170825 15:21:47.854"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:47.855">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:21:47.855" status="PASS" starttime="20170825 15:21:47.855"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:47.856">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:21:47.856" status="PASS" starttime="20170825 15:21:47.856"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:48.117">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:21:48.117" status="PASS" starttime="20170825 15:21:47.857"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:48.117">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:21:48.117">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:48.117" status="PASS" starttime="20170825 15:21:47.856"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:48.118">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:48.118" status="PASS" starttime="20170825 15:21:48.118"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:48.119">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:48.119" status="PASS" starttime="20170825 15:21:48.118"></status>
</kw>
<status endtime="20170825 15:21:48.119" status="PASS" starttime="20170825 15:21:47.853"></status>
</kw>
<status endtime="20170825 15:21:48.119" status="PASS" starttime="20170825 15:21:47.852"></status>
</kw>
<status endtime="20170825 15:21:48.119" status="PASS" starttime="20170825 15:21:47.852"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:48.120">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status endtime="20170825 15:21:48.120" status="PASS" starttime="20170825 15:21:48.119"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170825 15:21:48.120" status="PASS" starttime="20170825 15:21:48.120"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:48.379">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:21:48.379">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:48.379" status="PASS" starttime="20170825 15:21:48.121"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170825 15:21:48.380" status="PASS" starttime="20170825 15:21:48.379"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:21:48.380">Delete All Sessions</msg>
<status endtime="20170825 15:21:48.380" status="PASS" starttime="20170825 15:21:48.380"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:48.380">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:48.381" status="PASS" starttime="20170825 15:21:47.851"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:48.382">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:48.382" status="PASS" starttime="20170825 15:21:48.381"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:48.382">${status} = True</msg>
<status endtime="20170825 15:21:48.382" status="PASS" starttime="20170825 15:21:48.381"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170825 15:21:48.382" status="PASS" starttime="20170825 15:21:48.382"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:48.383">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH118", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:21:48.383">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170825 15:21:48.384">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 0
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status endtime="20170825 15:21:48.384" status="PASS" starttime="20170825 15:21:48.383"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:21:48.385">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_inventory.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:21:48.385" status="PASS" starttime="20170825 15:21:48.384"></status>
</kw>
<status endtime="20170825 15:21:48.385" status="PASS" starttime="20170825 15:21:48.384"></status>
</kw>
<status endtime="20170825 15:21:48.385" status="PASS" starttime="20170825 15:21:47.850"></status>
</kw>
<kw name="${cmd} = ('BMC_sensor_xyz_list', '/xyz/openbmc_project/sensors/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:48.386">${logpath} = /tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_sensor_xyz_list.txt</msg>
<status endtime="20170825 15:21:48.386" status="PASS" starttime="20170825 15:21:48.386"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:48.389">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:21:48.389" status="PASS" starttime="20170825 15:21:48.388"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:48.390">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:21:48.390" status="PASS" starttime="20170825 15:21:48.389"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:48.390">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:21:48.390" status="PASS" starttime="20170825 15:21:48.390"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:48.391">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:21:48.391" status="PASS" starttime="20170825 15:21:48.390"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:48.584">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:21:48.584" status="PASS" starttime="20170825 15:21:48.392"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:48.584">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:21:48.584">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:48.584" status="PASS" starttime="20170825 15:21:48.391"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:48.585">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:48.585" status="PASS" starttime="20170825 15:21:48.585"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:48.586">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:48.586" status="PASS" starttime="20170825 15:21:48.585"></status>
</kw>
<status endtime="20170825 15:21:48.586" status="PASS" starttime="20170825 15:21:48.388"></status>
</kw>
<status endtime="20170825 15:21:48.586" status="PASS" starttime="20170825 15:21:48.387"></status>
</kw>
<status endtime="20170825 15:21:48.586" status="PASS" starttime="20170825 15:21:48.387"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:48.587">${base_uri} = /xyz/openbmc_project/sensors/enumerate</msg>
<status endtime="20170825 15:21:48.587" status="PASS" starttime="20170825 15:21:48.586"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170825 15:21:48.587" status="PASS" starttime="20170825 15:21:48.587"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:48.969">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:21:48.969">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:48.969" status="PASS" starttime="20170825 15:21:48.588"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170825 15:21:48.970" status="PASS" starttime="20170825 15:21:48.970"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:21:48.970">Delete All Sessions</msg>
<status endtime="20170825 15:21:48.970" status="PASS" starttime="20170825 15:21:48.970"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:48.971">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:48.971" status="PASS" starttime="20170825 15:21:48.386"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:48.972">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:48.972" status="PASS" starttime="20170825 15:21:48.972"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:48.972">${status} = True</msg>
<status endtime="20170825 15:21:48.972" status="PASS" starttime="20170825 15:21:48.971"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170825 15:21:48.973" status="PASS" starttime="20170825 15:21:48.972"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:48.974">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 9816
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 10273
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 9791
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 10302
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 9765
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 10302
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 9765
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 10273
    }, 
    "/xyz/openbmc_project/sensors/temperature/ambient": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 30003
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 34000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 34000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 32000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 32000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 31000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 31000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 31000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 32000
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:21:48.974">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170825 15:21:48.974">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
            "Scale": 0,
            "Target": 10500,
            "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS",
       ...</msg>
<status endtime="20170825 15:21:48.974" status="PASS" starttime="20170825 15:21:48.973"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:21:48.975">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_sensor_xyz_list.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_sensor_xyz_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:21:48.975" status="PASS" starttime="20170825 15:21:48.975"></status>
</kw>
<status endtime="20170825 15:21:48.976" status="PASS" starttime="20170825 15:21:48.974"></status>
</kw>
<status endtime="20170825 15:21:48.976" status="PASS" starttime="20170825 15:21:48.385"></status>
</kw>
<kw name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:48.976">${logpath} = /tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_elog.txt</msg>
<status endtime="20170825 15:21:48.976" status="PASS" starttime="20170825 15:21:48.976"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:48.979">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:21:48.979" status="PASS" starttime="20170825 15:21:48.979"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:48.980">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:21:48.980" status="PASS" starttime="20170825 15:21:48.980"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:48.981">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:21:48.981" status="PASS" starttime="20170825 15:21:48.980"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:48.981">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:21:48.981" status="PASS" starttime="20170825 15:21:48.981"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:49.160">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:21:49.160" status="PASS" starttime="20170825 15:21:48.982"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:49.160">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:21:49.160">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:49.160" status="PASS" starttime="20170825 15:21:48.982"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:49.160">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:49.161" status="PASS" starttime="20170825 15:21:49.160"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:49.161">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:49.161" status="PASS" starttime="20170825 15:21:49.161"></status>
</kw>
<status endtime="20170825 15:21:49.161" status="PASS" starttime="20170825 15:21:48.978"></status>
</kw>
<status endtime="20170825 15:21:49.162" status="PASS" starttime="20170825 15:21:48.978"></status>
</kw>
<status endtime="20170825 15:21:49.162" status="PASS" starttime="20170825 15:21:48.977"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:49.162">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status endtime="20170825 15:21:49.162" status="PASS" starttime="20170825 15:21:49.162"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170825 15:21:49.163" status="PASS" starttime="20170825 15:21:49.162"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:49.358">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:21:49.358">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:49.358" status="PASS" starttime="20170825 15:21:49.163"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170825 15:21:49.359" status="PASS" starttime="20170825 15:21:49.358"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:21:49.359">Delete All Sessions</msg>
<status endtime="20170825 15:21:49.359" status="PASS" starttime="20170825 15:21:49.359"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:49.359">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:49.359" status="PASS" starttime="20170825 15:21:48.977"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:49.360">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:49.360" status="PASS" starttime="20170825 15:21:49.360"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:49.360">${status} = True</msg>
<status endtime="20170825 15:21:49.361" status="PASS" starttime="20170825 15:21:49.360"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170825 15:21:49.361" status="PASS" starttime="20170825 15:21:49.361"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:49.362">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1503673926524, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1503673932424, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [], 
      "Id": 4, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1503674010540, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [], 
      "Id": 5, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1503674077120, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [], 
      "Id": 6, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1503674144071, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/7": {
      "AdditionalData": [], 
      "Id": 7, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1503674205001, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:21:49.362">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170825 15:21:49.362">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/2": {
            "AdditionalData": [],
            "Id": 2,
            "Message": "xyz.openbmc_project.Common.Error.InternalFailure",
    ...</msg>
<status endtime="20170825 15:21:49.362" status="PASS" starttime="20170825 15:21:49.361"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:21:49.364">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_elog.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_elog.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:21:49.364" status="PASS" starttime="20170825 15:21:49.363"></status>
</kw>
<status endtime="20170825 15:21:49.364" status="PASS" starttime="20170825 15:21:49.363"></status>
</kw>
<status endtime="20170825 15:21:49.364" status="PASS" starttime="20170825 15:21:48.976"></status>
</kw>
<kw name="${cmd} = ('BMC_control_list', '/xyz/openbmc_project/control/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:49.365">${logpath} = /tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_control_list.txt</msg>
<status endtime="20170825 15:21:49.365" status="PASS" starttime="20170825 15:21:49.364"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:49.367">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:21:49.368" status="PASS" starttime="20170825 15:21:49.367"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:49.368">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:21:49.368" status="PASS" starttime="20170825 15:21:49.368"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:49.369">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:21:49.369" status="PASS" starttime="20170825 15:21:49.369"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:49.370">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:21:49.370" status="PASS" starttime="20170825 15:21:49.370"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:49.545">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:21:49.545" status="PASS" starttime="20170825 15:21:49.371"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:49.546">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:21:49.546">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:49.546" status="PASS" starttime="20170825 15:21:49.370"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:49.546">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:49.546" status="PASS" starttime="20170825 15:21:49.546"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:49.547">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:49.547" status="PASS" starttime="20170825 15:21:49.547"></status>
</kw>
<status endtime="20170825 15:21:49.547" status="PASS" starttime="20170825 15:21:49.367"></status>
</kw>
<status endtime="20170825 15:21:49.547" status="PASS" starttime="20170825 15:21:49.366"></status>
</kw>
<status endtime="20170825 15:21:49.547" status="PASS" starttime="20170825 15:21:49.366"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:49.548">${base_uri} = /xyz/openbmc_project/control/enumerate</msg>
<status endtime="20170825 15:21:49.548" status="PASS" starttime="20170825 15:21:49.548"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170825 15:21:49.549" status="PASS" starttime="20170825 15:21:49.548"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:49.771">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:21:49.771">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:49.771" status="PASS" starttime="20170825 15:21:49.549"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170825 15:21:49.772" status="PASS" starttime="20170825 15:21:49.771"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:21:49.772">Delete All Sessions</msg>
<status endtime="20170825 15:21:49.772" status="PASS" starttime="20170825 15:21:49.772"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:49.772">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:49.772" status="PASS" starttime="20170825 15:21:49.365"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:49.773">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:49.773" status="PASS" starttime="20170825 15:21:49.773"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:49.774">${status} = True</msg>
<status endtime="20170825 15:21:49.774" status="PASS" starttime="20170825 15:21:49.773"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170825 15:21:49.774" status="PASS" starttime="20170825 15:21:49.774"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:49.775">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/control/host0": {}, 
    "/xyz/openbmc_project/control/host0/TPMEnable": {
      "TPMEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/auto_reboot": {
      "AutoReboot": 1
    }, 
    "/xyz/openbmc_project/control/host0/boot_mode": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular"
    }, 
    "/xyz/openbmc_project/control/host0/boot_source": {
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default"
    }, 
    "/xyz/openbmc_project/control/host0/power_cap": {
      "PowerCap": 0, 
      "PowerCapEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/power_restore_policy": {
      "PowerRestorePolicy": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"
    }, 
    "/xyz/openbmc_project/control/host0/restriction_mode": {
      "RestrictionMode": "xyz.openbmc_project.Control.Security.RestrictionMode.Modes.None"
    }, 
    "/xyz/openbmc_project/control/minimum_ship_level_required": {
      "MinimumShipLevelRequired": 1
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:21:49.775">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170825 15:21:49.775">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/control/host0": {},
        "/xyz/openbmc_project/control/host0/TPMEnable": {
            "TPMEnable": 0
        },
        "/xyz/openbmc_project/control/...</msg>
<status endtime="20170825 15:21:49.775" status="PASS" starttime="20170825 15:21:49.774"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:21:49.776">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_control_list.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_control_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:21:49.777" status="PASS" starttime="20170825 15:21:49.776"></status>
</kw>
<status endtime="20170825 15:21:49.777" status="PASS" starttime="20170825 15:21:49.775"></status>
</kw>
<status endtime="20170825 15:21:49.777" status="PASS" starttime="20170825 15:21:49.364"></status>
</kw>
<kw name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:49.777">${logpath} = /tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_sensor_list.txt</msg>
<status endtime="20170825 15:21:49.778" status="PASS" starttime="20170825 15:21:49.777"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:49.780">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:21:49.781" status="PASS" starttime="20170825 15:21:49.780"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:49.781">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:21:49.781" status="PASS" starttime="20170825 15:21:49.781"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:49.782">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:21:49.782" status="PASS" starttime="20170825 15:21:49.782"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:49.783">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:21:49.783" status="PASS" starttime="20170825 15:21:49.782"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:50.198">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:21:50.198" status="PASS" starttime="20170825 15:21:49.783"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:50.198">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:21:50.198">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:50.198" status="PASS" starttime="20170825 15:21:49.783"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:50.199">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:50.199" status="PASS" starttime="20170825 15:21:50.199"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:50.200">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:50.200" status="PASS" starttime="20170825 15:21:50.199"></status>
</kw>
<status endtime="20170825 15:21:50.200" status="PASS" starttime="20170825 15:21:49.779"></status>
</kw>
<status endtime="20170825 15:21:50.200" status="PASS" starttime="20170825 15:21:49.779"></status>
</kw>
<status endtime="20170825 15:21:50.200" status="PASS" starttime="20170825 15:21:49.778"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:50.201">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status endtime="20170825 15:21:50.201" status="PASS" starttime="20170825 15:21:50.200"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170825 15:21:50.201" status="PASS" starttime="20170825 15:21:50.201"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:50.374">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:21:50.374">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:50.374" status="PASS" starttime="20170825 15:21:50.202"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170825 15:21:50.375" status="PASS" starttime="20170825 15:21:50.374"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:21:50.375">Delete All Sessions</msg>
<status endtime="20170825 15:21:50.375" status="PASS" starttime="20170825 15:21:50.375"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:50.375">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:50.375" status="PASS" starttime="20170825 15:21:49.778"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:50.376">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:50.376" status="PASS" starttime="20170825 15:21:50.376"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:50.377">${status} = True</msg>
<status endtime="20170825 15:21:50.377" status="PASS" starttime="20170825 15:21:50.376"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170825 15:21:50.377" status="PASS" starttime="20170825 15:21:50.377"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:50.378">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:21:50.378">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170825 15:21:50.378">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status endtime="20170825 15:21:50.378" status="PASS" starttime="20170825 15:21:50.377"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:21:50.380">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_sensor_list.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:21:50.380" status="PASS" starttime="20170825 15:21:50.379"></status>
</kw>
<status endtime="20170825 15:21:50.380" status="PASS" starttime="20170825 15:21:50.378"></status>
</kw>
<status endtime="20170825 15:21:50.380" status="PASS" starttime="20170825 15:21:49.777"></status>
</kw>
<kw name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:50.381">${logpath} = /tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_record_log.txt</msg>
<status endtime="20170825 15:21:50.381" status="PASS" starttime="20170825 15:21:50.380"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:50.383">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:21:50.384" status="PASS" starttime="20170825 15:21:50.383"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:50.384">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:21:50.385" status="PASS" starttime="20170825 15:21:50.384"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:50.385">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:21:50.385" status="PASS" starttime="20170825 15:21:50.385"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:50.386">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:21:50.386" status="PASS" starttime="20170825 15:21:50.385"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:50.575">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:21:50.575" status="PASS" starttime="20170825 15:21:50.386"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:50.575">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:21:50.575">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:50.575" status="PASS" starttime="20170825 15:21:50.386"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:50.576">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:50.576" status="PASS" starttime="20170825 15:21:50.575"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:50.576">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:50.577" status="PASS" starttime="20170825 15:21:50.576"></status>
</kw>
<status endtime="20170825 15:21:50.577" status="PASS" starttime="20170825 15:21:50.382"></status>
</kw>
<status endtime="20170825 15:21:50.577" status="PASS" starttime="20170825 15:21:50.382"></status>
</kw>
<status endtime="20170825 15:21:50.577" status="PASS" starttime="20170825 15:21:50.381"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:50.577">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status endtime="20170825 15:21:50.577" status="PASS" starttime="20170825 15:21:50.577"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170825 15:21:50.578" status="PASS" starttime="20170825 15:21:50.578"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:50.621">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:21:50.621">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170825 15:21:50.621" status="PASS" starttime="20170825 15:21:50.578"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170825 15:21:50.622" status="PASS" starttime="20170825 15:21:50.621"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:21:50.622">Delete All Sessions</msg>
<status endtime="20170825 15:21:50.622" status="PASS" starttime="20170825 15:21:50.622"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:50.622">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170825 15:21:50.622" status="PASS" starttime="20170825 15:21:50.381"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:50.623">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170825 15:21:50.624">404 != 200</msg>
<status endtime="20170825 15:21:50.624" status="FAIL" starttime="20170825 15:21:50.623"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:50.624">${status} = False</msg>
<status endtime="20170825 15:21:50.624" status="PASS" starttime="20170825 15:21:50.623"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170825 15:21:50.625">Continuing for loop from the next iteration.</msg>
<status endtime="20170825 15:21:50.625" status="PASS" starttime="20170825 15:21:50.625"></status>
</kw>
<status endtime="20170825 15:21:50.625" status="PASS" starttime="20170825 15:21:50.624"></status>
</kw>
<status endtime="20170825 15:21:50.625" status="PASS" starttime="20170825 15:21:50.380"></status>
</kw>
<kw name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:50.626">${logpath} = /tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_led.txt</msg>
<status endtime="20170825 15:21:50.626" status="PASS" starttime="20170825 15:21:50.625"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:50.628">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:21:50.629" status="PASS" starttime="20170825 15:21:50.628"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:50.630">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:21:50.630" status="PASS" starttime="20170825 15:21:50.629"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:50.630">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:21:50.630" status="PASS" starttime="20170825 15:21:50.630"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:50.631">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:21:50.631" status="PASS" starttime="20170825 15:21:50.630"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:50.817">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:21:50.818" status="PASS" starttime="20170825 15:21:50.632"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:50.818">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:21:50.818">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:21:50.818" status="PASS" starttime="20170825 15:21:50.631"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:50.818">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:50.818" status="PASS" starttime="20170825 15:21:50.818"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:50.819">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:21:50.819" status="PASS" starttime="20170825 15:21:50.819"></status>
</kw>
<status endtime="20170825 15:21:50.819" status="PASS" starttime="20170825 15:21:50.627"></status>
</kw>
<status endtime="20170825 15:21:50.819" status="PASS" starttime="20170825 15:21:50.627"></status>
</kw>
<status endtime="20170825 15:21:50.819" status="PASS" starttime="20170825 15:21:50.626"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:50.820">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status endtime="20170825 15:21:50.820" status="PASS" starttime="20170825 15:21:50.820"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170825 15:21:50.821" status="PASS" starttime="20170825 15:21:50.820"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:50.886">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:21:50.886">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170825 15:21:50.886" status="PASS" starttime="20170825 15:21:50.821"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170825 15:21:50.887" status="PASS" starttime="20170825 15:21:50.887"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:21:50.887">Delete All Sessions</msg>
<status endtime="20170825 15:21:50.887" status="PASS" starttime="20170825 15:21:50.887"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:50.888">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170825 15:21:50.888" status="PASS" starttime="20170825 15:21:50.626"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:50.889">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170825 15:21:50.889">404 != 200</msg>
<status endtime="20170825 15:21:50.889" status="FAIL" starttime="20170825 15:21:50.888"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:50.889">${status} = False</msg>
<status endtime="20170825 15:21:50.889" status="PASS" starttime="20170825 15:21:50.888"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170825 15:21:50.890">Continuing for loop from the next iteration.</msg>
<status endtime="20170825 15:21:50.890" status="PASS" starttime="20170825 15:21:50.890"></status>
</kw>
<status endtime="20170825 15:21:50.890" status="PASS" starttime="20170825 15:21:50.889"></status>
</kw>
<status endtime="20170825 15:21:50.890" status="PASS" starttime="20170825 15:21:50.625"></status>
</kw>
<status endtime="20170825 15:21:50.890" status="PASS" starttime="20170825 15:21:47.850"></status>
</kw>
<status endtime="20170825 15:21:50.890" status="PASS" starttime="20170825 15:21:47.849"></status>
</kw>
<status endtime="20170825 15:21:50.890" status="PASS" starttime="20170825 15:21:47.849"></status>
</kw>
<status endtime="20170825 15:21:50.890" status="PASS" starttime="20170825 15:21:47.849"></status>
</kw>
<status endtime="20170825 15:21:50.891" status="PASS" starttime="20170825 15:21:47.848"></status>
</kw>
<status endtime="20170825 15:21:50.891" status="PASS" starttime="20170825 15:21:47.808"></status>
</kw>
<status endtime="20170825 15:21:50.891" status="PASS" starttime="20170825 15:21:47.804"></status>
</kw>
<status endtime="20170825 15:21:50.891" status="PASS" starttime="20170825 15:21:47.804"></status>
</kw>
<kw name="${method} = ('OS FFDC', 'OS FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170825 15:21:50.893" status="PASS" starttime="20170825 15:21:50.892"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:50.893">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:21:50.893">${ret_values} = None</msg>
<status endtime="20170825 15:21:50.893" status="PASS" starttime="20170825 15:21:50.892"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170825 15:21:50.893" status="PASS" starttime="20170825 15:21:50.893"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:50.924">Returning from the enclosing user keyword.</msg>
<status endtime="20170825 15:21:50.924" status="PASS" starttime="20170825 15:21:50.924"></status>
</kw>
<status endtime="20170825 15:21:50.924" status="PASS" starttime="20170825 15:21:50.923"></status>
</kw>
<status endtime="20170825 15:21:50.924" status="PASS" starttime="20170825 15:21:50.894"></status>
</kw>
<status endtime="20170825 15:21:50.924" status="PASS" starttime="20170825 15:21:50.891"></status>
</kw>
<status endtime="20170825 15:21:50.924" status="PASS" starttime="20170825 15:21:50.891"></status>
</kw>
<kw name="${method} = ('Core Files', 'SCP Coredump Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170825 15:21:50.926" status="PASS" starttime="20170825 15:21:50.926"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:50.926">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:21:50.926">${ret_values} = None</msg>
<status endtime="20170825 15:21:50.926" status="PASS" starttime="20170825 15:21:50.926"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170825 15:21:50.927" status="PASS" starttime="20170825 15:21:50.927"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:50.984">newline=

height=24
prompt=# 
path_separator=/
host=9.3.21.61
index=1
term_type=vt100
port=22
width=80
timeout=25 seconds
encoding=UTF-8
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170825 15:21:50.985">Executing command 'ls /tmp/core_*'.</msg>
<msg level="INFO" timestamp="20170825 15:21:51.051">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170825 15:21:51.063">${core_files} = /tmp/core_mboxd.1070
/tmp/core_mboxd.1712
/tmp/core_mboxd.1744
/tmp/core_mboxd.1771
/tmp/core_mboxd.1785
/tmp/core_mboxd.1808</msg>
<msg level="INFO" timestamp="20170825 15:21:51.063">${stderr} = </msg>
<msg level="INFO" timestamp="20170825 15:21:51.063">${rc} = 0</msg>
<status endtime="20170825 15:21:51.063" status="PASS" starttime="20170825 15:21:50.953"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:51.063">@{core_list} = [ /tmp/core_mboxd.1070 | /tmp/core_mboxd.1712 | /tmp/core_mboxd.1744 | /tmp/core_mboxd.1771 | /tmp/core_mboxd.1785 | /tmp/core_mboxd.1808 ]</msg>
<status endtime="20170825 15:21:51.063" status="PASS" starttime="20170825 15:21:51.063"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status endtime="20170825 15:21:51.080" status="PASS" starttime="20170825 15:21:51.074"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status endtime="20170825 15:21:51.781" status="PASS" starttime="20170825 15:21:51.081"></status>
</kw>
<status endtime="20170825 15:21:51.781" status="PASS" starttime="20170825 15:21:51.081"></status>
</kw>
<status endtime="20170825 15:21:51.781" status="PASS" starttime="20170825 15:21:51.080"></status>
</kw>
<status endtime="20170825 15:21:51.781" status="PASS" starttime="20170825 15:21:51.073"></status>
</kw>
<status endtime="20170825 15:21:51.781" status="PASS" starttime="20170825 15:21:51.064"></status>
</kw>
<kw name="${index} IN [ @{core_list} ]" type="for">
<kw name="${index} = /tmp/core_mboxd.1070" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170825 15:21:52.099" status="PASS" starttime="20170825 15:21:51.782"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:52.134">newline=

height=24
prompt=# 
path_separator=/
host=9.3.21.61
index=1
term_type=vt100
port=22
width=80
timeout=25 seconds
encoding=UTF-8
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170825 15:21:52.134">Executing command 'rm /tmp/core_mboxd.1070'.</msg>
<msg level="INFO" timestamp="20170825 15:21:52.181">Command exited with return code 0.</msg>
<status endtime="20170825 15:21:52.192" status="PASS" starttime="20170825 15:21:52.100"></status>
</kw>
<status endtime="20170825 15:21:52.192" status="PASS" starttime="20170825 15:21:51.781"></status>
</kw>
<kw name="${index} = /tmp/core_mboxd.1712" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170825 15:21:53.111" status="PASS" starttime="20170825 15:21:52.193"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:53.145">newline=

height=24
prompt=# 
path_separator=/
host=9.3.21.61
index=1
term_type=vt100
port=22
width=80
timeout=25 seconds
encoding=UTF-8
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170825 15:21:53.145">Executing command 'rm /tmp/core_mboxd.1712'.</msg>
<msg level="INFO" timestamp="20170825 15:21:53.192">Command exited with return code 0.</msg>
<status endtime="20170825 15:21:53.204" status="PASS" starttime="20170825 15:21:53.112"></status>
</kw>
<status endtime="20170825 15:21:53.204" status="PASS" starttime="20170825 15:21:52.192"></status>
</kw>
<kw name="${index} = /tmp/core_mboxd.1744" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170825 15:21:53.436" status="PASS" starttime="20170825 15:21:53.204"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:53.470">newline=

height=24
prompt=# 
path_separator=/
host=9.3.21.61
index=1
term_type=vt100
port=22
width=80
timeout=25 seconds
encoding=UTF-8
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170825 15:21:53.470">Executing command 'rm /tmp/core_mboxd.1744'.</msg>
<msg level="INFO" timestamp="20170825 15:21:53.527">Command exited with return code 0.</msg>
<status endtime="20170825 15:21:53.538" status="PASS" starttime="20170825 15:21:53.437"></status>
</kw>
<status endtime="20170825 15:21:53.538" status="PASS" starttime="20170825 15:21:53.204"></status>
</kw>
<kw name="${index} = /tmp/core_mboxd.1771" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170825 15:21:53.846" status="PASS" starttime="20170825 15:21:53.539"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:53.881">newline=

height=24
prompt=# 
path_separator=/
host=9.3.21.61
index=1
term_type=vt100
port=22
width=80
timeout=25 seconds
encoding=UTF-8
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170825 15:21:53.881">Executing command 'rm /tmp/core_mboxd.1771'.</msg>
<msg level="INFO" timestamp="20170825 15:21:53.927">Command exited with return code 0.</msg>
<status endtime="20170825 15:21:53.939" status="PASS" starttime="20170825 15:21:53.846"></status>
</kw>
<status endtime="20170825 15:21:53.939" status="PASS" starttime="20170825 15:21:53.538"></status>
</kw>
<kw name="${index} = /tmp/core_mboxd.1785" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170825 15:21:54.222" status="PASS" starttime="20170825 15:21:53.939"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:54.256">newline=

height=24
prompt=# 
path_separator=/
host=9.3.21.61
index=1
term_type=vt100
port=22
width=80
timeout=25 seconds
encoding=UTF-8
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170825 15:21:54.256">Executing command 'rm /tmp/core_mboxd.1785'.</msg>
<msg level="INFO" timestamp="20170825 15:21:54.302">Command exited with return code 0.</msg>
<status endtime="20170825 15:21:54.314" status="PASS" starttime="20170825 15:21:54.222"></status>
</kw>
<status endtime="20170825 15:21:54.314" status="PASS" starttime="20170825 15:21:53.939"></status>
</kw>
<kw name="${index} = /tmp/core_mboxd.1808" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170825 15:21:54.571" status="PASS" starttime="20170825 15:21:54.314"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:54.607">newline=

height=24
prompt=# 
path_separator=/
host=9.3.21.61
index=1
term_type=vt100
port=22
width=80
timeout=25 seconds
encoding=UTF-8
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170825 15:21:54.607">Executing command 'rm /tmp/core_mboxd.1808'.</msg>
<msg level="INFO" timestamp="20170825 15:21:54.654">Command exited with return code 0.</msg>
<status endtime="20170825 15:21:54.665" status="PASS" starttime="20170825 15:21:54.572"></status>
</kw>
<status endtime="20170825 15:21:54.665" status="PASS" starttime="20170825 15:21:54.314"></status>
</kw>
<status endtime="20170825 15:21:54.665" status="PASS" starttime="20170825 15:21:51.781"></status>
</kw>
<status endtime="20170825 15:21:54.665" status="PASS" starttime="20170825 15:21:50.953"></status>
</kw>
<status endtime="20170825 15:21:54.666" status="PASS" starttime="20170825 15:21:50.927"></status>
</kw>
<status endtime="20170825 15:21:54.666" status="PASS" starttime="20170825 15:21:50.925"></status>
</kw>
<status endtime="20170825 15:21:54.666" status="PASS" starttime="20170825 15:21:50.925"></status>
</kw>
<kw name="${method} = ('BMC Specific Files', 'BMC FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170825 15:21:54.668" status="PASS" starttime="20170825 15:21:54.667"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:54.668">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:21:54.668">${ret_values} = None</msg>
<status endtime="20170825 15:21:54.668" status="PASS" starttime="20170825 15:21:54.667"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170825 15:21:54.668" status="PASS" starttime="20170825 15:21:54.668"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:54.695">@{entries} = [ BMC FILES ]</msg>
<status endtime="20170825 15:21:54.695" status="PASS" starttime="20170825 15:21:54.694"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC FILES" type="foritem">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:54.696">@{cmd_list} = [ ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_proc_fd_active_list', 'ls -Al /p...</msg>
<status endtime="20170825 15:21:54.696" status="PASS" starttime="20170825 15:21:54.696"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:54.697">${logpath} = /tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_meminfo.txt</msg>
<status endtime="20170825 15:21:54.697" status="PASS" starttime="20170825 15:21:54.696"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170825 15:21:54.698" status="PASS" starttime="20170825 15:21:54.698"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:54.699">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status endtime="20170825 15:21:54.699" status="PASS" starttime="20170825 15:21:54.698"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:54.773">newline=

height=24
prompt=# 
path_separator=/
host=9.3.21.61
index=1
term_type=vt100
port=22
width=80
timeout=25 seconds
encoding=UTF-8
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170825 15:21:54.773">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20170825 15:21:54.840">Command exited with return code 0.</msg>
<status endtime="20170825 15:21:54.840" status="PASS" starttime="20170825 15:21:54.730"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:54.840">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:21:54.840">${ret_values} = (u'MemTotal:         432248 kB\nMemFree:          270876 kB\nMemAvailable:     319888 kB\nBuffers:           11772 kB\nCached:            53892 kB\nSwapCached:            0 kB\nActive:           10235...</msg>
<status endtime="20170825 15:21:54.840" status="PASS" starttime="20170825 15:21:54.699"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:54.841">${stdout} = MemTotal:         432248 kB
MemFree:          270876 kB
MemAvailable:     319888 kB
Buffers:           11772 kB
Cached:            53892 kB
SwapCached:            0 kB
Active:           102356 kB
Inac...</msg>
<status endtime="20170825 15:21:54.841" status="PASS" starttime="20170825 15:21:54.840"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:54.841">${stderr} = </msg>
<status endtime="20170825 15:21:54.841" status="PASS" starttime="20170825 15:21:54.841"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:21:54.848">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_meminfo.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:21:54.848" status="PASS" starttime="20170825 15:21:54.847"></status>
</kw>
<status endtime="20170825 15:21:54.848" status="PASS" starttime="20170825 15:21:54.847"></status>
</kw>
<status endtime="20170825 15:21:54.848" status="PASS" starttime="20170825 15:21:54.841"></status>
</kw>
<status endtime="20170825 15:21:54.848" status="PASS" starttime="20170825 15:21:54.697"></status>
</kw>
<status endtime="20170825 15:21:54.848" status="PASS" starttime="20170825 15:21:54.696"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:54.849">${logpath} = /tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_proc_list.txt</msg>
<status endtime="20170825 15:21:54.849" status="PASS" starttime="20170825 15:21:54.849"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170825 15:21:54.850" status="PASS" starttime="20170825 15:21:54.850"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:54.851">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status endtime="20170825 15:21:54.851" status="PASS" starttime="20170825 15:21:54.851"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:54.924">newline=

height=24
prompt=# 
path_separator=/
host=9.3.21.61
index=1
term_type=vt100
port=22
width=80
timeout=25 seconds
encoding=UTF-8
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170825 15:21:54.924">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20170825 15:21:55.323">Command exited with return code 0.</msg>
<status endtime="20170825 15:21:55.324" status="PASS" starttime="20170825 15:21:54.888"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:55.324">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:21:55.324">${ret_values} = (u'Mem: 161372K used, 270876K free, 14668K shrd, 11772K buff, 53896K cached\nCPU:   9% usr  18% sys   0% nic  72% idle   0% io   0% irq   0% sirq\nLoad average: 0.59 0.87 0.85 1/153 3048\n  PID  PPID ...</msg>
<status endtime="20170825 15:21:55.324" status="PASS" starttime="20170825 15:21:54.851"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:55.325">${stdout} = Mem: 161372K used, 270876K free, 14668K shrd, 11772K buff, 53896K cached
CPU:   9% usr  18% sys   0% nic  72% idle   0% io   0% irq   0% sirq
Load average: 0.59 0.87 0.85 1/153 3048
  PID  PPID USER  ...</msg>
<status endtime="20170825 15:21:55.325" status="PASS" starttime="20170825 15:21:55.324"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:55.325">${stderr} = </msg>
<status endtime="20170825 15:21:55.325" status="PASS" starttime="20170825 15:21:55.325"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:21:55.333">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_proc_list.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:21:55.333" status="PASS" starttime="20170825 15:21:55.332"></status>
</kw>
<status endtime="20170825 15:21:55.333" status="PASS" starttime="20170825 15:21:55.331"></status>
</kw>
<status endtime="20170825 15:21:55.333" status="PASS" starttime="20170825 15:21:55.326"></status>
</kw>
<status endtime="20170825 15:21:55.333" status="PASS" starttime="20170825 15:21:54.849"></status>
</kw>
<status endtime="20170825 15:21:55.333" status="PASS" starttime="20170825 15:21:54.848"></status>
</kw>
<kw name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:55.334">${logpath} = /tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_journalctl.txt</msg>
<status endtime="20170825 15:21:55.334" status="PASS" starttime="20170825 15:21:55.333"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170825 15:21:55.335" status="PASS" starttime="20170825 15:21:55.335"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:55.336">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status endtime="20170825 15:21:55.336" status="PASS" starttime="20170825 15:21:55.335"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:55.409">newline=

height=24
prompt=# 
path_separator=/
host=9.3.21.61
index=1
term_type=vt100
port=22
width=80
timeout=25 seconds
encoding=UTF-8
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170825 15:21:55.409">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20170825 15:21:57.923">Command exited with return code 0.</msg>
<status endtime="20170825 15:21:57.924" status="PASS" starttime="20170825 15:21:55.373"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:57.924">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:21:57.928">${ret_values} = (u'-- Logs begin at Fri 2017-08-25 15:08:30 UTC, end at Fri 2017-08-25 15:21:58 UTC. --\nAug 25 15:08:30 witherspoon kernel: Booting Linux on physical CPU 0x0\nAug 25 15:08:30 witherspoon kernel: Linu...</msg>
<status endtime="20170825 15:21:57.928" status="PASS" starttime="20170825 15:21:55.336"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:57.930">${stdout} = -- Logs begin at Fri 2017-08-25 15:08:30 UTC, end at Fri 2017-08-25 15:21:58 UTC. --
Aug 25 15:08:30 witherspoon kernel: Booting Linux on physical CPU 0x0
Aug 25 15:08:30 witherspoon kernel: Linux ver...</msg>
<status endtime="20170825 15:21:57.930" status="PASS" starttime="20170825 15:21:57.929"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:57.931">${stderr} = </msg>
<status endtime="20170825 15:21:57.931" status="PASS" starttime="20170825 15:21:57.931"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:21:57.942">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_journalctl.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:21:57.942" status="PASS" starttime="20170825 15:21:57.940"></status>
</kw>
<status endtime="20170825 15:21:57.942" status="PASS" starttime="20170825 15:21:57.937"></status>
</kw>
<status endtime="20170825 15:21:57.942" status="PASS" starttime="20170825 15:21:57.931"></status>
</kw>
<status endtime="20170825 15:21:57.942" status="PASS" starttime="20170825 15:21:55.334"></status>
</kw>
<status endtime="20170825 15:21:57.942" status="PASS" starttime="20170825 15:21:55.333"></status>
</kw>
<kw name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:57.943">${logpath} = /tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_procinfo.txt</msg>
<status endtime="20170825 15:21:57.943" status="PASS" starttime="20170825 15:21:57.943"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170825 15:21:57.945" status="PASS" starttime="20170825 15:21:57.944"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:57.945">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status endtime="20170825 15:21:57.945" status="PASS" starttime="20170825 15:21:57.945"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:58.013">newline=

height=24
prompt=# 
path_separator=/
host=9.3.21.61
index=1
term_type=vt100
port=22
width=80
timeout=25 seconds
encoding=UTF-8
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170825 15:21:58.014">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20170825 15:21:58.081">Command exited with return code 0.</msg>
<status endtime="20170825 15:21:58.081" status="PASS" starttime="20170825 15:21:57.977"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:58.082">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:21:58.082">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status endtime="20170825 15:21:58.082" status="PASS" starttime="20170825 15:21:57.946"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:58.082">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status endtime="20170825 15:21:58.082" status="PASS" starttime="20170825 15:21:58.082"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:58.083">${stderr} = </msg>
<status endtime="20170825 15:21:58.083" status="PASS" starttime="20170825 15:21:58.083"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:21:58.090">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_procinfo.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:21:58.090" status="PASS" starttime="20170825 15:21:58.089"></status>
</kw>
<status endtime="20170825 15:21:58.090" status="PASS" starttime="20170825 15:21:58.089"></status>
</kw>
<status endtime="20170825 15:21:58.090" status="PASS" starttime="20170825 15:21:58.083"></status>
</kw>
<status endtime="20170825 15:21:58.090" status="PASS" starttime="20170825 15:21:57.943"></status>
</kw>
<status endtime="20170825 15:21:58.090" status="PASS" starttime="20170825 15:21:57.942"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:58.091">${logpath} = /tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_proc_fd_active_list.txt</msg>
<status endtime="20170825 15:21:58.091" status="PASS" starttime="20170825 15:21:58.091"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170825 15:21:58.093" status="PASS" starttime="20170825 15:21:58.092"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:58.094">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status endtime="20170825 15:21:58.094" status="PASS" starttime="20170825 15:21:58.093"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:58.162">newline=

height=24
prompt=# 
path_separator=/
host=9.3.21.61
index=1
term_type=vt100
port=22
width=80
timeout=25 seconds
encoding=UTF-8
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170825 15:21:58.162">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg level="INFO" timestamp="20170825 15:21:58.804">Command exited with return code 0.</msg>
<status endtime="20170825 15:21:58.805" status="PASS" starttime="20170825 15:21:58.126"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:58.805">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:21:58.806">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Aug 25 15:22 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Aug 25 15:22 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status endtime="20170825 15:21:58.806" status="PASS" starttime="20170825 15:21:58.094"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:58.807">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Aug 25 15:22 0 -&gt; /dev/null
lrwx------    1 root     root            64 Aug 25 15:22 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status endtime="20170825 15:21:58.807" status="PASS" starttime="20170825 15:21:58.806"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:58.807">${stderr} = ls: /proc/3051/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status endtime="20170825 15:21:58.807" status="PASS" starttime="20170825 15:21:58.807"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:21:58.815">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_proc_fd_active_list.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:21:58.815" status="PASS" starttime="20170825 15:21:58.814"></status>
</kw>
<status endtime="20170825 15:21:58.815" status="PASS" starttime="20170825 15:21:58.813"></status>
</kw>
<status endtime="20170825 15:21:58.815" status="PASS" starttime="20170825 15:21:58.808"></status>
</kw>
<status endtime="20170825 15:21:58.815" status="PASS" starttime="20170825 15:21:58.091"></status>
</kw>
<status endtime="20170825 15:21:58.815" status="PASS" starttime="20170825 15:21:58.091"></status>
</kw>
<kw name="${cmd} = ('BMC_dmesg', 'dmesg')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:58.816">${logpath} = /tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_dmesg.txt</msg>
<status endtime="20170825 15:21:58.816" status="PASS" starttime="20170825 15:21:58.816"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170825 15:21:58.817" status="PASS" starttime="20170825 15:21:58.817"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:58.818">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status endtime="20170825 15:21:58.818" status="PASS" starttime="20170825 15:21:58.818"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:58.890">newline=

height=24
prompt=# 
path_separator=/
host=9.3.21.61
index=1
term_type=vt100
port=22
width=80
timeout=25 seconds
encoding=UTF-8
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170825 15:21:58.890">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20170825 15:21:58.947">Command exited with return code 0.</msg>
<status endtime="20170825 15:21:58.947" status="PASS" starttime="20170825 15:21:58.853"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:58.947">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:21:58.947">${ret_values} = (u'[    0.000000] sched_clock: 32 bits at 100 Hz, resolution 10000000ns, wraps every 21474836475000000ns\n[    0.090000] Calibrating delay loop... 789.70 BogoMIPS (lpj=3948544)\n[    0.090000] pid_max...</msg>
<status endtime="20170825 15:21:58.947" status="PASS" starttime="20170825 15:21:58.818"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:58.948">${stdout} = [    0.000000] sched_clock: 32 bits at 100 Hz, resolution 10000000ns, wraps every 21474836475000000ns
[    0.090000] Calibrating delay loop... 789.70 BogoMIPS (lpj=3948544)
[    0.090000] pid_max: def...</msg>
<status endtime="20170825 15:21:58.948" status="PASS" starttime="20170825 15:21:58.948"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:58.948">${stderr} = </msg>
<status endtime="20170825 15:21:58.949" status="PASS" starttime="20170825 15:21:58.948"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:21:58.956">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_dmesg.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:21:58.956" status="PASS" starttime="20170825 15:21:58.956"></status>
</kw>
<status endtime="20170825 15:21:58.957" status="PASS" starttime="20170825 15:21:58.955"></status>
</kw>
<status endtime="20170825 15:21:58.957" status="PASS" starttime="20170825 15:21:58.949"></status>
</kw>
<status endtime="20170825 15:21:58.957" status="PASS" starttime="20170825 15:21:58.816"></status>
</kw>
<status endtime="20170825 15:21:58.957" status="PASS" starttime="20170825 15:21:58.815"></status>
</kw>
<status endtime="20170825 15:21:58.957" status="PASS" starttime="20170825 15:21:54.696"></status>
</kw>
<status endtime="20170825 15:21:58.957" status="PASS" starttime="20170825 15:21:54.695"></status>
</kw>
<status endtime="20170825 15:21:58.957" status="PASS" starttime="20170825 15:21:54.695"></status>
</kw>
<status endtime="20170825 15:21:58.957" status="PASS" starttime="20170825 15:21:54.695"></status>
</kw>
<status endtime="20170825 15:21:58.957" status="PASS" starttime="20170825 15:21:54.694"></status>
</kw>
<status endtime="20170825 15:21:58.957" status="PASS" starttime="20170825 15:21:54.669"></status>
</kw>
<status endtime="20170825 15:21:58.957" status="PASS" starttime="20170825 15:21:54.666"></status>
</kw>
<status endtime="20170825 15:21:58.957" status="PASS" starttime="20170825 15:21:54.666"></status>
</kw>
<kw name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170825 15:21:58.959" status="PASS" starttime="20170825 15:21:58.959"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:58.959">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:21:58.959">${ret_values} = None</msg>
<status endtime="20170825 15:21:58.959" status="PASS" starttime="20170825 15:21:58.959"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170825 15:21:58.960" status="PASS" starttime="20170825 15:21:58.960"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:58.987">@{entries} = [ DRIVER INFO | APPLICATION DATA | BMC DATA ]</msg>
<status endtime="20170825 15:21:58.987" status="PASS" starttime="20170825 15:21:58.987"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:58.988">@{cmd_list} = [ ('FW Timestamp', 'cat /etc/timestamp') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status endtime="20170825 15:21:58.988" status="PASS" starttime="20170825 15:21:58.988"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:58.993">${ENTRY_INDEX} = DRIVER INFO</msg>
<status endtime="20170825 15:21:58.994" status="PASS" starttime="20170825 15:21:58.988"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('FW Timestamp', 'cat /etc/timestamp')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:21:58.997">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:21:58.997" status="PASS" starttime="20170825 15:21:58.996"></status>
</kw>
<status endtime="20170825 15:21:58.997" status="PASS" starttime="20170825 15:21:58.996"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:21:58.998">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:21:58.998" status="PASS" starttime="20170825 15:21:58.998"></status>
</kw>
<status endtime="20170825 15:21:58.998" status="PASS" starttime="20170825 15:21:58.997"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:21:59.000">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:21:59.000" status="PASS" starttime="20170825 15:21:58.999"></status>
</kw>
<status endtime="20170825 15:21:59.000" status="PASS" starttime="20170825 15:21:58.999"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:21:59.001">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:21:59.001" status="PASS" starttime="20170825 15:21:59.001"></status>
</kw>
<status endtime="20170825 15:21:59.001" status="PASS" starttime="20170825 15:21:59.000"></status>
</kw>
<status endtime="20170825 15:21:59.001" status="PASS" starttime="20170825 15:21:58.995"></status>
</kw>
<status endtime="20170825 15:21:59.001" status="PASS" starttime="20170825 15:21:58.995"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:59.002">${cmd_buf} = BMC Execute Command  cat /etc/timestamp  ignore_err=1</msg>
<status endtime="20170825 15:21:59.002" status="PASS" starttime="20170825 15:21:59.002"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/timestamp</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:59.070">newline=

height=24
prompt=# 
path_separator=/
host=9.3.21.61
index=1
term_type=vt100
port=22
width=80
timeout=25 seconds
encoding=UTF-8
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170825 15:21:59.071">Executing command 'cat /etc/timestamp'.</msg>
<msg level="INFO" timestamp="20170825 15:21:59.147">Command exited with return code 0.</msg>
<status endtime="20170825 15:21:59.148" status="PASS" starttime="20170825 15:21:59.033"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:59.148">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:21:59.148">${ret_values} = (u'20170825145345', u'', 0)</msg>
<status endtime="20170825 15:21:59.148" status="PASS" starttime="20170825 15:21:59.002"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:59.149">${stdout} = 20170825145345</msg>
<status endtime="20170825 15:21:59.149" status="PASS" starttime="20170825 15:21:59.148"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:59.149">${stderr} = </msg>
<status endtime="20170825 15:21:59.149" status="PASS" starttime="20170825 15:21:59.149"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:21:59.156">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:21:59.156" status="PASS" starttime="20170825 15:21:59.156"></status>
</kw>
<status endtime="20170825 15:21:59.156" status="PASS" starttime="20170825 15:21:59.155"></status>
</kw>
<status endtime="20170825 15:21:59.156" status="PASS" starttime="20170825 15:21:59.149"></status>
</kw>
<status endtime="20170825 15:21:59.156" status="PASS" starttime="20170825 15:21:58.994"></status>
</kw>
<status endtime="20170825 15:21:59.156" status="PASS" starttime="20170825 15:21:58.994"></status>
</kw>
<kw name="${cmd} = ('FW Level', 'cat /etc/os-release')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:21:59.161">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:21:59.161" status="PASS" starttime="20170825 15:21:59.160"></status>
</kw>
<status endtime="20170825 15:21:59.161" status="PASS" starttime="20170825 15:21:59.159"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:21:59.162">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:21:59.162" status="PASS" starttime="20170825 15:21:59.162"></status>
</kw>
<status endtime="20170825 15:21:59.162" status="PASS" starttime="20170825 15:21:59.161"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:21:59.163">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:21:59.163" status="PASS" starttime="20170825 15:21:59.163"></status>
</kw>
<status endtime="20170825 15:21:59.164" status="PASS" starttime="20170825 15:21:59.162"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:21:59.165">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:21:59.165" status="PASS" starttime="20170825 15:21:59.164"></status>
</kw>
<status endtime="20170825 15:21:59.165" status="PASS" starttime="20170825 15:21:59.164"></status>
</kw>
<status endtime="20170825 15:21:59.165" status="PASS" starttime="20170825 15:21:59.159"></status>
</kw>
<status endtime="20170825 15:21:59.165" status="PASS" starttime="20170825 15:21:59.158"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:59.166">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status endtime="20170825 15:21:59.166" status="PASS" starttime="20170825 15:21:59.165"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:59.233">newline=

height=24
prompt=# 
path_separator=/
host=9.3.21.61
index=1
term_type=vt100
port=22
width=80
timeout=25 seconds
encoding=UTF-8
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170825 15:21:59.234">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20170825 15:21:59.301">Command exited with return code 0.</msg>
<status endtime="20170825 15:21:59.301" status="PASS" starttime="20170825 15:21:59.197"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:21:59.301">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:21:59.301">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.8-259"\nVERSION_ID="v1.99.8-259-gee7b707"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status endtime="20170825 15:21:59.301" status="PASS" starttime="20170825 15:21:59.166"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:59.302">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.8-259"
VERSION_ID="v1.99.8-259-gee7b707"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status endtime="20170825 15:21:59.302" status="PASS" starttime="20170825 15:21:59.301"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:59.302">${stderr} = </msg>
<status endtime="20170825 15:21:59.302" status="PASS" starttime="20170825 15:21:59.302"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:21:59.309">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:21:59.309" status="PASS" starttime="20170825 15:21:59.309"></status>
</kw>
<status endtime="20170825 15:21:59.309" status="PASS" starttime="20170825 15:21:59.308"></status>
</kw>
<status endtime="20170825 15:21:59.309" status="PASS" starttime="20170825 15:21:59.303"></status>
</kw>
<status endtime="20170825 15:21:59.309" status="PASS" starttime="20170825 15:21:59.157"></status>
</kw>
<status endtime="20170825 15:21:59.310" status="PASS" starttime="20170825 15:21:59.157"></status>
</kw>
<status endtime="20170825 15:21:59.310" status="PASS" starttime="20170825 15:21:58.994"></status>
</kw>
<status endtime="20170825 15:21:59.310" status="PASS" starttime="20170825 15:21:58.987"></status>
</kw>
<status endtime="20170825 15:21:59.310" status="PASS" starttime="20170825 15:21:58.987"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:59.311">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status endtime="20170825 15:21:59.311" status="PASS" starttime="20170825 15:21:59.310"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:59.311">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status endtime="20170825 15:21:59.312" status="PASS" starttime="20170825 15:21:59.311"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:21:59.315">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:21:59.315" status="PASS" starttime="20170825 15:21:59.314"></status>
</kw>
<status endtime="20170825 15:21:59.315" status="PASS" starttime="20170825 15:21:59.314"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:21:59.316">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:21:59.316" status="PASS" starttime="20170825 15:21:59.316"></status>
</kw>
<status endtime="20170825 15:21:59.316" status="PASS" starttime="20170825 15:21:59.315"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:21:59.317">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:21:59.317" status="PASS" starttime="20170825 15:21:59.317"></status>
</kw>
<status endtime="20170825 15:21:59.318" status="PASS" starttime="20170825 15:21:59.316"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:21:59.319">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:21:59.319" status="PASS" starttime="20170825 15:21:59.318"></status>
</kw>
<status endtime="20170825 15:21:59.319" status="PASS" starttime="20170825 15:21:59.318"></status>
</kw>
<status endtime="20170825 15:21:59.319" status="PASS" starttime="20170825 15:21:59.313"></status>
</kw>
<status endtime="20170825 15:21:59.319" status="PASS" starttime="20170825 15:21:59.313"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:21:59.320">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status endtime="20170825 15:21:59.320" status="PASS" starttime="20170825 15:21:59.319"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:21:59.387">newline=

height=24
prompt=# 
path_separator=/
host=9.3.21.61
index=1
term_type=vt100
port=22
width=80
timeout=25 seconds
encoding=UTF-8
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170825 15:21:59.388">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg level="INFO" timestamp="20170825 15:22:00.875">Command exited with return code 0.</msg>
<status endtime="20170825 15:22:00.875" status="PASS" starttime="20170825 15:21:59.351"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:00.875">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:22:00.875">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState.Q...</msg>
<status endtime="20170825 15:22:00.875" status="PASS" starttime="20170825 15:21:59.320"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:00.876">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Quiesc...</msg>
<status endtime="20170825 15:22:00.876" status="PASS" starttime="20170825 15:22:00.876"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:00.876">${stderr} = </msg>
<status endtime="20170825 15:22:00.876" status="PASS" starttime="20170825 15:22:00.876"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:22:00.883">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:22:00.883" status="PASS" starttime="20170825 15:22:00.883"></status>
</kw>
<status endtime="20170825 15:22:00.883" status="PASS" starttime="20170825 15:22:00.882"></status>
</kw>
<status endtime="20170825 15:22:00.884" status="PASS" starttime="20170825 15:22:00.877"></status>
</kw>
<status endtime="20170825 15:22:00.884" status="PASS" starttime="20170825 15:21:59.312"></status>
</kw>
<status endtime="20170825 15:22:00.884" status="PASS" starttime="20170825 15:21:59.312"></status>
</kw>
<status endtime="20170825 15:22:00.884" status="PASS" starttime="20170825 15:21:59.312"></status>
</kw>
<status endtime="20170825 15:22:00.884" status="PASS" starttime="20170825 15:21:59.310"></status>
</kw>
<status endtime="20170825 15:22:00.884" status="PASS" starttime="20170825 15:21:59.310"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:00.885">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC OS', 'uname -a') | ('BMC File System Disk Space Usage', 'df -hT') ]</msg>
<status endtime="20170825 15:22:00.885" status="PASS" starttime="20170825 15:22:00.885"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:00.886">${ENTRY_INDEX} = BMC DATA</msg>
<status endtime="20170825 15:22:00.886" status="PASS" starttime="20170825 15:22:00.885"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC Uptime', 'uptime')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:22:00.889">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:22:00.889" status="PASS" starttime="20170825 15:22:00.888"></status>
</kw>
<status endtime="20170825 15:22:00.889" status="PASS" starttime="20170825 15:22:00.888"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:22:00.890">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:22:00.890" status="PASS" starttime="20170825 15:22:00.890"></status>
</kw>
<status endtime="20170825 15:22:00.890" status="PASS" starttime="20170825 15:22:00.889"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:22:00.892">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:22:00.892" status="PASS" starttime="20170825 15:22:00.891"></status>
</kw>
<status endtime="20170825 15:22:00.892" status="PASS" starttime="20170825 15:22:00.891"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:22:00.893">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:22:00.893" status="PASS" starttime="20170825 15:22:00.893"></status>
</kw>
<status endtime="20170825 15:22:00.893" status="PASS" starttime="20170825 15:22:00.892"></status>
</kw>
<status endtime="20170825 15:22:00.893" status="PASS" starttime="20170825 15:22:00.887"></status>
</kw>
<status endtime="20170825 15:22:00.893" status="PASS" starttime="20170825 15:22:00.887"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:00.894">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status endtime="20170825 15:22:00.894" status="PASS" starttime="20170825 15:22:00.894"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:00.962">newline=

height=24
prompt=# 
path_separator=/
host=9.3.21.61
index=1
term_type=vt100
port=22
width=80
timeout=25 seconds
encoding=UTF-8
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170825 15:22:00.962">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20170825 15:22:01.019">Command exited with return code 0.</msg>
<status endtime="20170825 15:22:01.019" status="PASS" starttime="20170825 15:22:00.926"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:01.019">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:22:01.019">${ret_values} = (u' 15:22:07 up 13 min,  load average: 0.62, 0.87, 0.85', u'', 0)</msg>
<status endtime="20170825 15:22:01.019" status="PASS" starttime="20170825 15:22:00.894"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:01.020">${stdout} =  15:22:07 up 13 min,  load average: 0.62, 0.87, 0.85</msg>
<status endtime="20170825 15:22:01.020" status="PASS" starttime="20170825 15:22:01.019"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:01.020">${stderr} = </msg>
<status endtime="20170825 15:22:01.020" status="PASS" starttime="20170825 15:22:01.020"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:22:01.027">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:22:01.027" status="PASS" starttime="20170825 15:22:01.027"></status>
</kw>
<status endtime="20170825 15:22:01.027" status="PASS" starttime="20170825 15:22:01.026"></status>
</kw>
<status endtime="20170825 15:22:01.027" status="PASS" starttime="20170825 15:22:01.021"></status>
</kw>
<status endtime="20170825 15:22:01.027" status="PASS" starttime="20170825 15:22:00.886"></status>
</kw>
<status endtime="20170825 15:22:01.027" status="PASS" starttime="20170825 15:22:00.886"></status>
</kw>
<kw name="${cmd} = ('BMC OS', 'uname -a')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:22:01.030">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:22:01.031" status="PASS" starttime="20170825 15:22:01.030"></status>
</kw>
<status endtime="20170825 15:22:01.031" status="PASS" starttime="20170825 15:22:01.029"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:22:01.032">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:22:01.032" status="PASS" starttime="20170825 15:22:01.032"></status>
</kw>
<status endtime="20170825 15:22:01.032" status="PASS" starttime="20170825 15:22:01.031"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:22:01.033">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:22:01.033" status="PASS" starttime="20170825 15:22:01.033"></status>
</kw>
<status endtime="20170825 15:22:01.033" status="PASS" starttime="20170825 15:22:01.032"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:22:01.035">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:22:01.035" status="PASS" starttime="20170825 15:22:01.034"></status>
</kw>
<status endtime="20170825 15:22:01.035" status="PASS" starttime="20170825 15:22:01.034"></status>
</kw>
<status endtime="20170825 15:22:01.035" status="PASS" starttime="20170825 15:22:01.029"></status>
</kw>
<status endtime="20170825 15:22:01.035" status="PASS" starttime="20170825 15:22:01.029"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:01.036">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status endtime="20170825 15:22:01.036" status="PASS" starttime="20170825 15:22:01.035"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:01.109">newline=

height=24
prompt=# 
path_separator=/
host=9.3.21.61
index=1
term_type=vt100
port=22
width=80
timeout=25 seconds
encoding=UTF-8
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170825 15:22:01.110">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20170825 15:22:01.166">Command exited with return code 0.</msg>
<status endtime="20170825 15:22:01.167" status="PASS" starttime="20170825 15:22:01.069"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:01.167">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:22:01.167">${ret_values} = (u'Linux witherspoon 4.10.17-1a4df30c39cf5ee0e3d2528c409787ccbb4a672a #1 Fri Aug 25 14:50:19 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status endtime="20170825 15:22:01.167" status="PASS" starttime="20170825 15:22:01.036"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:01.167">${stdout} = Linux witherspoon 4.10.17-1a4df30c39cf5ee0e3d2528c409787ccbb4a672a #1 Fri Aug 25 14:50:19 UTC 2017 armv6l GNU/Linux</msg>
<status endtime="20170825 15:22:01.168" status="PASS" starttime="20170825 15:22:01.167"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:01.168">${stderr} = </msg>
<status endtime="20170825 15:22:01.168" status="PASS" starttime="20170825 15:22:01.168"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:22:01.178">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:22:01.178" status="PASS" starttime="20170825 15:22:01.177"></status>
</kw>
<status endtime="20170825 15:22:01.178" status="PASS" starttime="20170825 15:22:01.177"></status>
</kw>
<status endtime="20170825 15:22:01.178" status="PASS" starttime="20170825 15:22:01.168"></status>
</kw>
<status endtime="20170825 15:22:01.178" status="PASS" starttime="20170825 15:22:01.028"></status>
</kw>
<status endtime="20170825 15:22:01.179" status="PASS" starttime="20170825 15:22:01.028"></status>
</kw>
<kw name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:22:01.181">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:22:01.182" status="PASS" starttime="20170825 15:22:01.181"></status>
</kw>
<status endtime="20170825 15:22:01.182" status="PASS" starttime="20170825 15:22:01.181"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:22:01.183">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:22:01.183" status="PASS" starttime="20170825 15:22:01.183"></status>
</kw>
<status endtime="20170825 15:22:01.183" status="PASS" starttime="20170825 15:22:01.182"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:22:01.184">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:22:01.184" status="PASS" starttime="20170825 15:22:01.184"></status>
</kw>
<status endtime="20170825 15:22:01.184" status="PASS" starttime="20170825 15:22:01.183"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:22:01.185">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:22:01.186" status="PASS" starttime="20170825 15:22:01.185"></status>
</kw>
<status endtime="20170825 15:22:01.186" status="PASS" starttime="20170825 15:22:01.185"></status>
</kw>
<status endtime="20170825 15:22:01.186" status="PASS" starttime="20170825 15:22:01.180"></status>
</kw>
<status endtime="20170825 15:22:01.186" status="PASS" starttime="20170825 15:22:01.180"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:01.187">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status endtime="20170825 15:22:01.187" status="PASS" starttime="20170825 15:22:01.186"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:01.260">newline=

height=24
prompt=# 
path_separator=/
host=9.3.21.61
index=1
term_type=vt100
port=22
width=80
timeout=25 seconds
encoding=UTF-8
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170825 15:22:01.260">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20170825 15:22:01.317">Command exited with return code 0.</msg>
<status endtime="20170825 15:22:01.317" status="PASS" starttime="20170825 15:22:01.224"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:01.317">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:22:01.317">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status endtime="20170825 15:22:01.317" status="PASS" starttime="20170825 15:22:01.187"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:01.318">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.1...</msg>
<status endtime="20170825 15:22:01.318" status="PASS" starttime="20170825 15:22:01.318"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:01.318">${stderr} = </msg>
<status endtime="20170825 15:22:01.319" status="PASS" starttime="20170825 15:22:01.318"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:22:01.326">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:22:01.326" status="PASS" starttime="20170825 15:22:01.326"></status>
</kw>
<status endtime="20170825 15:22:01.326" status="PASS" starttime="20170825 15:22:01.325"></status>
</kw>
<status endtime="20170825 15:22:01.326" status="PASS" starttime="20170825 15:22:01.319"></status>
</kw>
<status endtime="20170825 15:22:01.327" status="PASS" starttime="20170825 15:22:01.179"></status>
</kw>
<status endtime="20170825 15:22:01.327" status="PASS" starttime="20170825 15:22:01.179"></status>
</kw>
<status endtime="20170825 15:22:01.327" status="PASS" starttime="20170825 15:22:00.886"></status>
</kw>
<status endtime="20170825 15:22:01.327" status="PASS" starttime="20170825 15:22:00.884"></status>
</kw>
<status endtime="20170825 15:22:01.327" status="PASS" starttime="20170825 15:22:00.884"></status>
</kw>
<status endtime="20170825 15:22:01.327" status="PASS" starttime="20170825 15:21:58.987"></status>
</kw>
<status endtime="20170825 15:22:01.327" status="PASS" starttime="20170825 15:21:58.986"></status>
</kw>
<status endtime="20170825 15:22:01.327" status="PASS" starttime="20170825 15:21:58.960"></status>
</kw>
<status endtime="20170825 15:22:01.327" status="PASS" starttime="20170825 15:21:58.958"></status>
</kw>
<status endtime="20170825 15:22:01.327" status="PASS" starttime="20170825 15:21:58.957"></status>
</kw>
<kw name="${method} = ('SEL Log', 'Collect eSEL Log')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170825 15:22:01.329" status="PASS" starttime="20170825 15:22:01.329"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:01.329">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:22:01.329">${ret_values} = None</msg>
<status endtime="20170825 15:22:01.329" status="PASS" starttime="20170825 15:22:01.328"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170825 15:22:01.330" status="PASS" starttime="20170825 15:22:01.330"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:01.358">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:22:01.359" status="PASS" starttime="20170825 15:22:01.358"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:01.359">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:22:01.359" status="PASS" starttime="20170825 15:22:01.359"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:01.360">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:22:01.360" status="PASS" starttime="20170825 15:22:01.360"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:01.361">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:22:01.361" status="PASS" starttime="20170825 15:22:01.360"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:01.551">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:22:01.551" status="PASS" starttime="20170825 15:22:01.361"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:01.551">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:22:01.551">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:22:01.551" status="PASS" starttime="20170825 15:22:01.361"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:01.552">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:22:01.552" status="PASS" starttime="20170825 15:22:01.551"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:01.552">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:22:01.553" status="PASS" starttime="20170825 15:22:01.552"></status>
</kw>
<status endtime="20170825 15:22:01.553" status="PASS" starttime="20170825 15:22:01.357"></status>
</kw>
<status endtime="20170825 15:22:01.553" status="PASS" starttime="20170825 15:22:01.357"></status>
</kw>
<status endtime="20170825 15:22:01.553" status="PASS" starttime="20170825 15:22:01.356"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:01.553">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status endtime="20170825 15:22:01.553" status="PASS" starttime="20170825 15:22:01.553"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170825 15:22:01.554" status="PASS" starttime="20170825 15:22:01.554"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:01.814">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:22:01.814">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:22:01.814" status="PASS" starttime="20170825 15:22:01.554"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170825 15:22:01.815" status="PASS" starttime="20170825 15:22:01.815"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:22:01.815">Delete All Sessions</msg>
<status endtime="20170825 15:22:01.815" status="PASS" starttime="20170825 15:22:01.815"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:01.816">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:22:01.816" status="PASS" starttime="20170825 15:22:01.356"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:01.817">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:22:01.817" status="PASS" starttime="20170825 15:22:01.816"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:01.817">${status} = True</msg>
<status endtime="20170825 15:22:01.817" status="PASS" starttime="20170825 15:22:01.816"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status endtime="20170825 15:22:01.817" status="PASS" starttime="20170825 15:22:01.817"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:01.818">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1503673926524, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1503673932424, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [], 
      "Id": 4, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1503674010540, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [], 
      "Id": 5, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1503674077120, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [], 
      "Id": 6, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1503674144071, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/7": {
      "AdditionalData": [], 
      "Id": 7, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1503674205001, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:22:01.818">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:22:01.818">${content} = {u'data': {u'/xyz/openbmc_project/logging/entry/6': {u'Resolved': 0, u'AdditionalData': [], u'Message': u'org.open_power.Host.Error.WatchdogTimedOut', u'associations': [], u'Severity': u'xyz.openbmc_p...</msg>
<status endtime="20170825 15:22:01.818" status="PASS" starttime="20170825 15:22:01.818"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:01.819">${esel_list} = [u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/4', u'/xyz/openbmc_project/logging/entry/5', u'/xyz/openbmc_project/logging/entr...</msg>
<status endtime="20170825 15:22:01.819" status="PASS" starttime="20170825 15:22:01.819"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:01.820">${logpath} = /tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_esel</msg>
<status endtime="20170825 15:22:01.820" status="PASS" starttime="20170825 15:22:01.819"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:22:01.820">Created file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_esel"&gt;/tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/20170825152147545075_esel&lt;/a&gt;'.</msg>
<status endtime="20170825 15:22:01.820" status="PASS" starttime="20170825 15:22:01.820"></status>
</kw>
<kw name="${entry_path} IN [ @{esel_list} ]" type="for">
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/2" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170825 15:22:01.822" status="PASS" starttime="20170825 15:22:01.821"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:01.825">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:22:01.825" status="PASS" starttime="20170825 15:22:01.825"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:01.826">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:22:01.826" status="PASS" starttime="20170825 15:22:01.826"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:01.827">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:22:01.827" status="PASS" starttime="20170825 15:22:01.826"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:01.828">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:22:01.828" status="PASS" starttime="20170825 15:22:01.827"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:02.111">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:22:02.112" status="PASS" starttime="20170825 15:22:01.828"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:02.112">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:22:02.112">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:22:02.112" status="PASS" starttime="20170825 15:22:01.828"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:02.113">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:22:02.113" status="PASS" starttime="20170825 15:22:02.112"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:02.113">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:22:02.114" status="PASS" starttime="20170825 15:22:02.113"></status>
</kw>
<status endtime="20170825 15:22:02.114" status="PASS" starttime="20170825 15:22:01.824"></status>
</kw>
<status endtime="20170825 15:22:02.114" status="PASS" starttime="20170825 15:22:01.824"></status>
</kw>
<status endtime="20170825 15:22:02.114" status="PASS" starttime="20170825 15:22:01.823"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:02.115">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status endtime="20170825 15:22:02.115" status="PASS" starttime="20170825 15:22:02.114"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170825 15:22:02.116" status="PASS" starttime="20170825 15:22:02.115"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:02.199">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:22:02.199">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:22:02.199" status="PASS" starttime="20170825 15:22:02.116"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170825 15:22:02.200" status="PASS" starttime="20170825 15:22:02.199"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:22:02.200">Delete All Sessions</msg>
<status endtime="20170825 15:22:02.200" status="PASS" starttime="20170825 15:22:02.200"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:02.200">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:22:02.200" status="PASS" starttime="20170825 15:22:01.822"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:02.201">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:22:02.201" status="PASS" starttime="20170825 15:22:02.201"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:02.202">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:22:02.202">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:22:02.202">${content} = {u'data': [], u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:22:02.202" status="PASS" starttime="20170825 15:22:02.202"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:02.203">${esel_data} = []</msg>
<status endtime="20170825 15:22:02.203" status="PASS" starttime="20170825 15:22:01.822"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:02.203">Length is 0</msg>
<msg level="INFO" timestamp="20170825 15:22:02.204">${length} = 0</msg>
<status endtime="20170825 15:22:02.204" status="PASS" starttime="20170825 15:22:02.203"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:02.205">Continuing for loop from the next iteration.</msg>
<status endtime="20170825 15:22:02.205" status="PASS" starttime="20170825 15:22:02.204"></status>
</kw>
<status endtime="20170825 15:22:02.205" status="PASS" starttime="20170825 15:22:01.821"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/3" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170825 15:22:02.206" status="PASS" starttime="20170825 15:22:02.205"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:02.211">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:22:02.212" status="PASS" starttime="20170825 15:22:02.210"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:02.213">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:22:02.213" status="PASS" starttime="20170825 15:22:02.212"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:02.214">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:22:02.214" status="PASS" starttime="20170825 15:22:02.213"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:02.215">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:22:02.215" status="PASS" starttime="20170825 15:22:02.214"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:02.410">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:22:02.410" status="PASS" starttime="20170825 15:22:02.216"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:02.410">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:22:02.410">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:22:02.410" status="PASS" starttime="20170825 15:22:02.215"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:02.411">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:22:02.411" status="PASS" starttime="20170825 15:22:02.411"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:02.412">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:22:02.412" status="PASS" starttime="20170825 15:22:02.411"></status>
</kw>
<status endtime="20170825 15:22:02.412" status="PASS" starttime="20170825 15:22:02.210"></status>
</kw>
<status endtime="20170825 15:22:02.412" status="PASS" starttime="20170825 15:22:02.209"></status>
</kw>
<status endtime="20170825 15:22:02.412" status="PASS" starttime="20170825 15:22:02.208"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:02.413">${base_uri} = /xyz/openbmc_project/logging/entry/3/attr/AdditionalData</msg>
<status endtime="20170825 15:22:02.413" status="PASS" starttime="20170825 15:22:02.412"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170825 15:22:02.413" status="PASS" starttime="20170825 15:22:02.413"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:02.496">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:22:02.496">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:22:02.496" status="PASS" starttime="20170825 15:22:02.414"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170825 15:22:02.496" status="PASS" starttime="20170825 15:22:02.496"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:22:02.497">Delete All Sessions</msg>
<status endtime="20170825 15:22:02.497" status="PASS" starttime="20170825 15:22:02.497"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:02.497">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:22:02.497" status="PASS" starttime="20170825 15:22:02.207"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:02.498">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:22:02.498" status="PASS" starttime="20170825 15:22:02.497"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:02.498">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:22:02.498">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:22:02.499">${content} = {u'data': [], u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:22:02.499" status="PASS" starttime="20170825 15:22:02.498"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:02.499">${esel_data} = []</msg>
<status endtime="20170825 15:22:02.499" status="PASS" starttime="20170825 15:22:02.206"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:02.499">Length is 0</msg>
<msg level="INFO" timestamp="20170825 15:22:02.499">${length} = 0</msg>
<status endtime="20170825 15:22:02.500" status="PASS" starttime="20170825 15:22:02.499"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:02.500">Continuing for loop from the next iteration.</msg>
<status endtime="20170825 15:22:02.500" status="PASS" starttime="20170825 15:22:02.500"></status>
</kw>
<status endtime="20170825 15:22:02.500" status="PASS" starttime="20170825 15:22:02.205"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/4" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170825 15:22:02.501" status="PASS" starttime="20170825 15:22:02.501"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:02.505">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:22:02.506" status="PASS" starttime="20170825 15:22:02.504"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:02.507">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:22:02.507" status="PASS" starttime="20170825 15:22:02.507"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:02.508">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:22:02.508" status="PASS" starttime="20170825 15:22:02.507"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:02.509">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:22:02.509" status="PASS" starttime="20170825 15:22:02.508"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:02.697">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:22:02.697" status="PASS" starttime="20170825 15:22:02.509"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:02.697">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:22:02.697">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:22:02.697" status="PASS" starttime="20170825 15:22:02.509"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:02.698">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:22:02.698" status="PASS" starttime="20170825 15:22:02.697"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:02.698">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:22:02.698" status="PASS" starttime="20170825 15:22:02.698"></status>
</kw>
<status endtime="20170825 15:22:02.698" status="PASS" starttime="20170825 15:22:02.504"></status>
</kw>
<status endtime="20170825 15:22:02.699" status="PASS" starttime="20170825 15:22:02.503"></status>
</kw>
<status endtime="20170825 15:22:02.699" status="PASS" starttime="20170825 15:22:02.503"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:02.699">${base_uri} = /xyz/openbmc_project/logging/entry/4/attr/AdditionalData</msg>
<status endtime="20170825 15:22:02.699" status="PASS" starttime="20170825 15:22:02.699"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170825 15:22:02.700" status="PASS" starttime="20170825 15:22:02.700"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:02.784">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/4/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:22:02.784">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:22:02.784" status="PASS" starttime="20170825 15:22:02.700"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170825 15:22:02.785" status="PASS" starttime="20170825 15:22:02.785"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:22:02.785">Delete All Sessions</msg>
<status endtime="20170825 15:22:02.785" status="PASS" starttime="20170825 15:22:02.785"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:02.786">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:22:02.786" status="PASS" starttime="20170825 15:22:02.502"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:02.786">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:22:02.786" status="PASS" starttime="20170825 15:22:02.786"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:02.787">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:22:02.787">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:22:02.787">${content} = {u'data': [], u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:22:02.787" status="PASS" starttime="20170825 15:22:02.787"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:02.787">${esel_data} = []</msg>
<status endtime="20170825 15:22:02.787" status="PASS" starttime="20170825 15:22:02.501"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:02.788">Length is 0</msg>
<msg level="INFO" timestamp="20170825 15:22:02.788">${length} = 0</msg>
<status endtime="20170825 15:22:02.788" status="PASS" starttime="20170825 15:22:02.788"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:02.789">Continuing for loop from the next iteration.</msg>
<status endtime="20170825 15:22:02.789" status="PASS" starttime="20170825 15:22:02.788"></status>
</kw>
<status endtime="20170825 15:22:02.789" status="PASS" starttime="20170825 15:22:02.500"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/5" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170825 15:22:02.790" status="PASS" starttime="20170825 15:22:02.789"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:02.793">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:22:02.794" status="PASS" starttime="20170825 15:22:02.793"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:02.794">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:22:02.794" status="PASS" starttime="20170825 15:22:02.794"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:02.795">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:22:02.795" status="PASS" starttime="20170825 15:22:02.795"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:02.796">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:22:02.796" status="PASS" starttime="20170825 15:22:02.795"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:03.069">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:22:03.070" status="PASS" starttime="20170825 15:22:02.796"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:03.070">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:22:03.070">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:22:03.070" status="PASS" starttime="20170825 15:22:02.796"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:03.071">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:22:03.071" status="PASS" starttime="20170825 15:22:03.070"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:03.071">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:22:03.071" status="PASS" starttime="20170825 15:22:03.071"></status>
</kw>
<status endtime="20170825 15:22:03.072" status="PASS" starttime="20170825 15:22:02.792"></status>
</kw>
<status endtime="20170825 15:22:03.072" status="PASS" starttime="20170825 15:22:02.792"></status>
</kw>
<status endtime="20170825 15:22:03.072" status="PASS" starttime="20170825 15:22:02.791"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:03.072">${base_uri} = /xyz/openbmc_project/logging/entry/5/attr/AdditionalData</msg>
<status endtime="20170825 15:22:03.072" status="PASS" starttime="20170825 15:22:03.072"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170825 15:22:03.073" status="PASS" starttime="20170825 15:22:03.073"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:03.242">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/5/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:22:03.242">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:22:03.242" status="PASS" starttime="20170825 15:22:03.073"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170825 15:22:03.243" status="PASS" starttime="20170825 15:22:03.243"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:22:03.243">Delete All Sessions</msg>
<status endtime="20170825 15:22:03.243" status="PASS" starttime="20170825 15:22:03.243"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:03.244">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:22:03.244" status="PASS" starttime="20170825 15:22:02.790"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:03.244">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:22:03.244" status="PASS" starttime="20170825 15:22:03.244"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:03.245">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:22:03.245">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:22:03.245">${content} = {u'data': [], u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:22:03.245" status="PASS" starttime="20170825 15:22:03.245"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:03.245">${esel_data} = []</msg>
<status endtime="20170825 15:22:03.245" status="PASS" starttime="20170825 15:22:02.790"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:03.246">Length is 0</msg>
<msg level="INFO" timestamp="20170825 15:22:03.246">${length} = 0</msg>
<status endtime="20170825 15:22:03.246" status="PASS" starttime="20170825 15:22:03.246"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:03.247">Continuing for loop from the next iteration.</msg>
<status endtime="20170825 15:22:03.247" status="PASS" starttime="20170825 15:22:03.246"></status>
</kw>
<status endtime="20170825 15:22:03.247" status="PASS" starttime="20170825 15:22:02.789"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/6" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170825 15:22:03.248" status="PASS" starttime="20170825 15:22:03.247"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:03.251">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:22:03.252" status="PASS" starttime="20170825 15:22:03.251"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:03.252">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:22:03.252" status="PASS" starttime="20170825 15:22:03.252"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:03.253">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:22:03.253" status="PASS" starttime="20170825 15:22:03.253"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:03.254">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:22:03.254" status="PASS" starttime="20170825 15:22:03.253"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:03.453">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:22:03.453" status="PASS" starttime="20170825 15:22:03.254"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:03.453">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:22:03.453">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:22:03.453" status="PASS" starttime="20170825 15:22:03.254"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:03.454">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:22:03.454" status="PASS" starttime="20170825 15:22:03.454"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:03.455">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:22:03.455" status="PASS" starttime="20170825 15:22:03.454"></status>
</kw>
<status endtime="20170825 15:22:03.455" status="PASS" starttime="20170825 15:22:03.250"></status>
</kw>
<status endtime="20170825 15:22:03.455" status="PASS" starttime="20170825 15:22:03.250"></status>
</kw>
<status endtime="20170825 15:22:03.455" status="PASS" starttime="20170825 15:22:03.249"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:03.456">${base_uri} = /xyz/openbmc_project/logging/entry/6/attr/AdditionalData</msg>
<status endtime="20170825 15:22:03.456" status="PASS" starttime="20170825 15:22:03.455"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170825 15:22:03.456" status="PASS" starttime="20170825 15:22:03.456"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:03.538">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/6/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:22:03.539">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:22:03.539" status="PASS" starttime="20170825 15:22:03.456"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170825 15:22:03.539" status="PASS" starttime="20170825 15:22:03.539"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:22:03.540">Delete All Sessions</msg>
<status endtime="20170825 15:22:03.540" status="PASS" starttime="20170825 15:22:03.539"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:03.540">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:22:03.540" status="PASS" starttime="20170825 15:22:03.249"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:03.541">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:22:03.541" status="PASS" starttime="20170825 15:22:03.540"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:03.541">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:22:03.541">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:22:03.541">${content} = {u'data': [], u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:22:03.541" status="PASS" starttime="20170825 15:22:03.541"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:03.542">${esel_data} = []</msg>
<status endtime="20170825 15:22:03.542" status="PASS" starttime="20170825 15:22:03.248"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:03.542">Length is 0</msg>
<msg level="INFO" timestamp="20170825 15:22:03.542">${length} = 0</msg>
<status endtime="20170825 15:22:03.542" status="PASS" starttime="20170825 15:22:03.542"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:03.543">Continuing for loop from the next iteration.</msg>
<status endtime="20170825 15:22:03.543" status="PASS" starttime="20170825 15:22:03.543"></status>
</kw>
<status endtime="20170825 15:22:03.543" status="PASS" starttime="20170825 15:22:03.247"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/7" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170825 15:22:03.544" status="PASS" starttime="20170825 15:22:03.544"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:03.547">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:22:03.548" status="PASS" starttime="20170825 15:22:03.547"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:03.549">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:22:03.549" status="PASS" starttime="20170825 15:22:03.548"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:03.549">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:22:03.549" status="PASS" starttime="20170825 15:22:03.549"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:03.550">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:22:03.550" status="PASS" starttime="20170825 15:22:03.550"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:03.734">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:22:03.735" status="PASS" starttime="20170825 15:22:03.551"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:03.735">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:22:03.735">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:22:03.735" status="PASS" starttime="20170825 15:22:03.550"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:03.735">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:22:03.736" status="PASS" starttime="20170825 15:22:03.735"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:03.736">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:22:03.736" status="PASS" starttime="20170825 15:22:03.736"></status>
</kw>
<status endtime="20170825 15:22:03.736" status="PASS" starttime="20170825 15:22:03.547"></status>
</kw>
<status endtime="20170825 15:22:03.736" status="PASS" starttime="20170825 15:22:03.546"></status>
</kw>
<status endtime="20170825 15:22:03.737" status="PASS" starttime="20170825 15:22:03.545"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:03.737">${base_uri} = /xyz/openbmc_project/logging/entry/7/attr/AdditionalData</msg>
<status endtime="20170825 15:22:03.737" status="PASS" starttime="20170825 15:22:03.737"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170825 15:22:03.738" status="PASS" starttime="20170825 15:22:03.737"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:03.822">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/7/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:22:03.822">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:22:03.822" status="PASS" starttime="20170825 15:22:03.738"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170825 15:22:03.823" status="PASS" starttime="20170825 15:22:03.822"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:22:03.823">Delete All Sessions</msg>
<status endtime="20170825 15:22:03.823" status="PASS" starttime="20170825 15:22:03.823"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:03.823">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:22:03.823" status="PASS" starttime="20170825 15:22:03.545"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:03.824">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:22:03.824" status="PASS" starttime="20170825 15:22:03.823"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:03.824">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:22:03.825">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:22:03.825">${content} = {u'data': [], u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:22:03.825" status="PASS" starttime="20170825 15:22:03.824"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:03.825">${esel_data} = []</msg>
<status endtime="20170825 15:22:03.825" status="PASS" starttime="20170825 15:22:03.544"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:03.825">Length is 0</msg>
<msg level="INFO" timestamp="20170825 15:22:03.826">${length} = 0</msg>
<status endtime="20170825 15:22:03.826" status="PASS" starttime="20170825 15:22:03.825"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:03.826">Continuing for loop from the next iteration.</msg>
<status endtime="20170825 15:22:03.826" status="PASS" starttime="20170825 15:22:03.826"></status>
</kw>
<status endtime="20170825 15:22:03.826" status="PASS" starttime="20170825 15:22:03.543"></status>
</kw>
<status endtime="20170825 15:22:03.826" status="PASS" starttime="20170825 15:22:01.821"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:03.832">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170825 15:22:03.837">${out} = </msg>
<status endtime="20170825 15:22:03.837" status="PASS" starttime="20170825 15:22:03.827"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:22:03.841">'' does not contain 'eSEL.pl'</msg>
<status endtime="20170825 15:22:03.841" status="FAIL" starttime="20170825 15:22:03.841"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:03.842">${status} = False</msg>
<status endtime="20170825 15:22:03.842" status="PASS" starttime="20170825 15:22:03.840"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:03.842">Returning from the enclosing user keyword.</msg>
<status endtime="20170825 15:22:03.843" status="PASS" starttime="20170825 15:22:03.842"></status>
</kw>
<status endtime="20170825 15:22:03.843" status="PASS" starttime="20170825 15:22:01.355"></status>
</kw>
<status endtime="20170825 15:22:03.843" status="PASS" starttime="20170825 15:22:01.330"></status>
</kw>
<status endtime="20170825 15:22:03.844" status="PASS" starttime="20170825 15:22:01.327"></status>
</kw>
<status endtime="20170825 15:22:03.844" status="PASS" starttime="20170825 15:22:01.327"></status>
</kw>
<status endtime="20170825 15:22:03.844" status="PASS" starttime="20170825 15:21:47.772"></status>
</kw>
<status endtime="20170825 15:22:03.844" status="PASS" starttime="20170825 15:21:47.769"></status>
</kw>
<status endtime="20170825 15:22:03.844" status="PASS" starttime="20170825 15:21:47.769"></status>
</kw>
<status endtime="20170825 15:22:03.844" status="PASS" starttime="20170825 15:21:47.768"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status endtime="20170825 15:22:03.852" status="PASS" starttime="20170825 15:22:03.852"></status>
</kw>
<status endtime="20170825 15:22:03.853" status="PASS" starttime="20170825 15:22:03.844"></status>
</kw>
<status endtime="20170825 15:22:03.853" status="PASS" starttime="20170825 15:21:47.768"></status>
</kw>
<status endtime="20170825 15:22:03.853" status="PASS" starttime="20170825 15:21:44.488"></status>
</kw>
<status endtime="20170825 15:22:03.853" status="PASS" starttime="20170825 15:21:44.487"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<kw name="Recover Quiesced Host" library="state_manager">
<doc>Recover host from quisced state.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is Host Quiesced</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:03.860">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:22:03.860" status="PASS" starttime="20170825 15:22:03.859"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:03.861">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:22:03.861" status="PASS" starttime="20170825 15:22:03.861"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:03.862">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:22:03.862" status="PASS" starttime="20170825 15:22:03.861"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:03.862">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:22:03.863" status="PASS" starttime="20170825 15:22:03.862"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:04.075">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:22:04.075" status="PASS" starttime="20170825 15:22:03.863"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:04.075">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:22:04.075">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:22:04.075" status="PASS" starttime="20170825 15:22:03.863"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:04.076">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:22:04.076" status="PASS" starttime="20170825 15:22:04.075"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:04.076">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:22:04.077" status="PASS" starttime="20170825 15:22:04.076"></status>
</kw>
<status endtime="20170825 15:22:04.077" status="PASS" starttime="20170825 15:22:03.859"></status>
</kw>
<status endtime="20170825 15:22:04.077" status="PASS" starttime="20170825 15:22:03.857"></status>
</kw>
<status endtime="20170825 15:22:04.077" status="PASS" starttime="20170825 15:22:03.857"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:04.077">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:22:04.078" status="PASS" starttime="20170825 15:22:04.077"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:04.080">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:22:04.080" status="PASS" starttime="20170825 15:22:04.079"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:04.081">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:22:04.081" status="PASS" starttime="20170825 15:22:04.081"></status>
</kw>
<status endtime="20170825 15:22:04.081" status="PASS" starttime="20170825 15:22:04.080"></status>
</kw>
<status endtime="20170825 15:22:04.081" status="PASS" starttime="20170825 15:22:04.078"></status>
</kw>
<status endtime="20170825 15:22:04.081" status="PASS" starttime="20170825 15:22:04.078"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:04.185">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:22:04.185">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:22:04.185" status="PASS" starttime="20170825 15:22:04.082"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:04.187">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:22:04.187" status="PASS" starttime="20170825 15:22:04.187"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:04.188">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:22:04.188" status="PASS" starttime="20170825 15:22:04.188"></status>
</kw>
<status endtime="20170825 15:22:04.189" status="PASS" starttime="20170825 15:22:04.187"></status>
</kw>
<status endtime="20170825 15:22:04.189" status="PASS" starttime="20170825 15:22:04.186"></status>
</kw>
<status endtime="20170825 15:22:04.189" status="PASS" starttime="20170825 15:22:04.185"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:22:04.189">Delete All Sessions</msg>
<status endtime="20170825 15:22:04.189" status="PASS" starttime="20170825 15:22:04.189"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:04.189">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:22:04.189" status="PASS" starttime="20170825 15:22:03.856"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:04.190">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:22:04.190" status="PASS" starttime="20170825 15:22:04.190"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:04.191">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:22:04.191">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:22:04.191">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:22:04.191" status="PASS" starttime="20170825 15:22:04.190"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:04.191">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170825 15:22:04.191" status="PASS" starttime="20170825 15:22:03.856"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:04.191">${host_state} = Quiesced</msg>
<status endtime="20170825 15:22:04.192" status="PASS" starttime="20170825 15:22:03.855"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<status endtime="20170825 15:22:04.193" status="PASS" starttime="20170825 15:22:04.192"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:04.193">${status} = True</msg>
<status endtime="20170825 15:22:04.193" status="PASS" starttime="20170825 15:22:04.192"></status>
</kw>
<status endtime="20170825 15:22:04.193" status="PASS" starttime="20170825 15:22:03.855"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:04.193">${resp} = True</msg>
<status endtime="20170825 15:22:04.193" status="PASS" starttime="20170825 15:22:03.854"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${resp}' == 'True'</arg>
<arg>Run Keywords</arg>
<arg>Initiate Host PowerOff</arg>
<arg>AND</arg>
<arg>Log</arg>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Initiate Host PowerOff</arg>
<arg>AND</arg>
<arg>Log</arg>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:04.195">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status endtime="20170825 15:22:04.195" status="PASS" starttime="20170825 15:22:04.195"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:04.196">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170825 15:22:04.196" status="PASS" starttime="20170825 15:22:04.196"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:04.199">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:22:04.199" status="PASS" starttime="20170825 15:22:04.199"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:04.200">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:22:04.200" status="PASS" starttime="20170825 15:22:04.199"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:04.201">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:22:04.201" status="PASS" starttime="20170825 15:22:04.200"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:04.201">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:22:04.201" status="PASS" starttime="20170825 15:22:04.201"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:04.469">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:22:04.469" status="PASS" starttime="20170825 15:22:04.202"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:04.469">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:22:04.469">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:22:04.469" status="PASS" starttime="20170825 15:22:04.201"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:04.470">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:22:04.470" status="PASS" starttime="20170825 15:22:04.470"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:04.471">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:22:04.471" status="PASS" starttime="20170825 15:22:04.470"></status>
</kw>
<status endtime="20170825 15:22:04.471" status="PASS" starttime="20170825 15:22:04.198"></status>
</kw>
<status endtime="20170825 15:22:04.471" status="PASS" starttime="20170825 15:22:04.198"></status>
</kw>
<status endtime="20170825 15:22:04.471" status="PASS" starttime="20170825 15:22:04.197"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:04.472">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170825 15:22:04.472" status="PASS" starttime="20170825 15:22:04.471"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:04.472">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:22:04.472" status="PASS" starttime="20170825 15:22:04.472"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170825 15:22:04.473" status="PASS" starttime="20170825 15:22:04.473"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:04.475">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-T...</msg>
<status endtime="20170825 15:22:04.475" status="PASS" starttime="20170825 15:22:04.474"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:04.475">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170825 15:22:04.476" status="PASS" starttime="20170825 15:22:04.475"></status>
</kw>
<status endtime="20170825 15:22:04.476" status="PASS" starttime="20170825 15:22:04.475"></status>
</kw>
<status endtime="20170825 15:22:04.476" status="PASS" starttime="20170825 15:22:04.473"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:05.230">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170825 15:22:05.230">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:22:05.230" status="PASS" starttime="20170825 15:22:04.476"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:05.231">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:22:05.232" status="PASS" starttime="20170825 15:22:05.231"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:05.233">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:22:05.233" status="PASS" starttime="20170825 15:22:05.232"></status>
</kw>
<status endtime="20170825 15:22:05.233" status="PASS" starttime="20170825 15:22:05.232"></status>
</kw>
<status endtime="20170825 15:22:05.233" status="PASS" starttime="20170825 15:22:05.230"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:22:05.233">Delete All Sessions</msg>
<status endtime="20170825 15:22:05.233" status="PASS" starttime="20170825 15:22:05.233"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:05.234">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:22:05.234" status="PASS" starttime="20170825 15:22:04.196"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:05.234">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:22:05.234" status="PASS" starttime="20170825 15:22:05.234"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:05.235">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:22:05.235">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:22:05.235">${json} = {u'data': None, u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:22:05.235" status="PASS" starttime="20170825 15:22:05.235"></status>
</kw>
<status endtime="20170825 15:22:05.235" status="PASS" starttime="20170825 15:22:04.195"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170825 15:22:05.236" status="PASS" starttime="20170825 15:22:05.236"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Wait For PowerOff</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Wait For PowerOff" library="state_manager">
<doc>Wait for power off state.</doc>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:05.244">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:22:05.245" status="PASS" starttime="20170825 15:22:05.244"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:05.246">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:22:05.246" status="PASS" starttime="20170825 15:22:05.245"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:05.247">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:22:05.247" status="PASS" starttime="20170825 15:22:05.246"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:05.248">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:22:05.248" status="PASS" starttime="20170825 15:22:05.247"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:06.943">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:22:06.944" status="PASS" starttime="20170825 15:22:05.249"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:06.944">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:22:06.944">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:22:06.944" status="PASS" starttime="20170825 15:22:05.248"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:06.945">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:22:06.945" status="PASS" starttime="20170825 15:22:06.944"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:06.945">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:22:06.945" status="PASS" starttime="20170825 15:22:06.945"></status>
</kw>
<status endtime="20170825 15:22:06.946" status="PASS" starttime="20170825 15:22:05.243"></status>
</kw>
<status endtime="20170825 15:22:06.946" status="PASS" starttime="20170825 15:22:05.242"></status>
</kw>
<status endtime="20170825 15:22:06.946" status="PASS" starttime="20170825 15:22:05.241"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:06.946">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:22:06.947" status="PASS" starttime="20170825 15:22:06.946"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:06.949">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:22:06.949" status="PASS" starttime="20170825 15:22:06.948"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:06.950">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:22:06.950" status="PASS" starttime="20170825 15:22:06.949"></status>
</kw>
<status endtime="20170825 15:22:06.950" status="PASS" starttime="20170825 15:22:06.949"></status>
</kw>
<status endtime="20170825 15:22:06.950" status="PASS" starttime="20170825 15:22:06.947"></status>
</kw>
<status endtime="20170825 15:22:06.950" status="PASS" starttime="20170825 15:22:06.947"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:11.817">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:22:11.817">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:22:11.817" status="PASS" starttime="20170825 15:22:06.950"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:11.819">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:22:11.819" status="PASS" starttime="20170825 15:22:11.819"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:11.820">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:22:11.820" status="PASS" starttime="20170825 15:22:11.820"></status>
</kw>
<status endtime="20170825 15:22:11.820" status="PASS" starttime="20170825 15:22:11.819"></status>
</kw>
<status endtime="20170825 15:22:11.820" status="PASS" starttime="20170825 15:22:11.818"></status>
</kw>
<status endtime="20170825 15:22:11.821" status="PASS" starttime="20170825 15:22:11.817"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:22:11.821">Delete All Sessions</msg>
<status endtime="20170825 15:22:11.821" status="PASS" starttime="20170825 15:22:11.821"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:11.821">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:22:11.821" status="PASS" starttime="20170825 15:22:05.240"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:11.822">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:22:11.822" status="PASS" starttime="20170825 15:22:11.822"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:11.823">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:22:11.823">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:22:11.823">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:22:11.823" status="PASS" starttime="20170825 15:22:11.822"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:11.823">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170825 15:22:11.823" status="PASS" starttime="20170825 15:22:05.239"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:11.824">${power_state} = On</msg>
<status endtime="20170825 15:22:11.824" status="PASS" starttime="20170825 15:22:05.239"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:22:11.825">Off != On</msg>
<status endtime="20170825 15:22:11.825" status="FAIL" starttime="20170825 15:22:11.824"></status>
</kw>
<status endtime="20170825 15:22:11.825" status="FAIL" starttime="20170825 15:22:05.238"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:11.829">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:22:11.829" status="PASS" starttime="20170825 15:22:11.828"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:11.830">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:22:11.830" status="PASS" starttime="20170825 15:22:11.830"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:11.831">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:22:11.831" status="PASS" starttime="20170825 15:22:11.830"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:11.832">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:22:11.832" status="PASS" starttime="20170825 15:22:11.831"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:12.288">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:22:12.288" status="PASS" starttime="20170825 15:22:11.833"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:12.288">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:22:12.288">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:22:12.288" status="PASS" starttime="20170825 15:22:11.833"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:12.289">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:22:12.289" status="PASS" starttime="20170825 15:22:12.288"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:12.289">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:22:12.289" status="PASS" starttime="20170825 15:22:12.289"></status>
</kw>
<status endtime="20170825 15:22:12.290" status="PASS" starttime="20170825 15:22:11.828"></status>
</kw>
<status endtime="20170825 15:22:12.290" status="PASS" starttime="20170825 15:22:11.827"></status>
</kw>
<status endtime="20170825 15:22:12.290" status="PASS" starttime="20170825 15:22:11.827"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:12.290">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:22:12.290" status="PASS" starttime="20170825 15:22:12.290"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:12.293">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:22:12.293" status="PASS" starttime="20170825 15:22:12.292"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:12.294">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:22:12.294" status="PASS" starttime="20170825 15:22:12.294"></status>
</kw>
<status endtime="20170825 15:22:12.294" status="PASS" starttime="20170825 15:22:12.293"></status>
</kw>
<status endtime="20170825 15:22:12.294" status="PASS" starttime="20170825 15:22:12.291"></status>
</kw>
<status endtime="20170825 15:22:12.294" status="PASS" starttime="20170825 15:22:12.291"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:12.532">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:22:12.532">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:22:12.532" status="PASS" starttime="20170825 15:22:12.295"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:12.534">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:22:12.534" status="PASS" starttime="20170825 15:22:12.534"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:12.535">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:22:12.536" status="PASS" starttime="20170825 15:22:12.535"></status>
</kw>
<status endtime="20170825 15:22:12.536" status="PASS" starttime="20170825 15:22:12.534"></status>
</kw>
<status endtime="20170825 15:22:12.536" status="PASS" starttime="20170825 15:22:12.533"></status>
</kw>
<status endtime="20170825 15:22:12.536" status="PASS" starttime="20170825 15:22:12.532"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:22:12.536">Delete All Sessions</msg>
<status endtime="20170825 15:22:12.536" status="PASS" starttime="20170825 15:22:12.536"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:12.537">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:22:12.537" status="PASS" starttime="20170825 15:22:11.826"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:12.537">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:22:12.537" status="PASS" starttime="20170825 15:22:12.537"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:12.538">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:22:12.538">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:22:12.538">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:22:12.538" status="PASS" starttime="20170825 15:22:12.538"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:12.538">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170825 15:22:12.538" status="PASS" starttime="20170825 15:22:11.825"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:12.539">${host_state} = Quiesced</msg>
<status endtime="20170825 15:22:12.539" status="PASS" starttime="20170825 15:22:11.825"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170825 15:22:12.539">Off != Quiesced</msg>
<status endtime="20170825 15:22:12.539" status="FAIL" starttime="20170825 15:22:12.539"></status>
</kw>
<status endtime="20170825 15:22:12.540" status="FAIL" starttime="20170825 15:22:05.238"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:22.546">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:22:22.546" status="PASS" starttime="20170825 15:22:22.545"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:22.547">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:22:22.547" status="PASS" starttime="20170825 15:22:22.546"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:22.548">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:22:22.548" status="PASS" starttime="20170825 15:22:22.547"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:22.549">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:22:22.549" status="PASS" starttime="20170825 15:22:22.548"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:22.747">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:22:22.747" status="PASS" starttime="20170825 15:22:22.550"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:22.747">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:22:22.747">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:22:22.747" status="PASS" starttime="20170825 15:22:22.549"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:22.748">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:22:22.748" status="PASS" starttime="20170825 15:22:22.748"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:22.749">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:22:22.749" status="PASS" starttime="20170825 15:22:22.748"></status>
</kw>
<status endtime="20170825 15:22:22.749" status="PASS" starttime="20170825 15:22:22.544"></status>
</kw>
<status endtime="20170825 15:22:22.749" status="PASS" starttime="20170825 15:22:22.544"></status>
</kw>
<status endtime="20170825 15:22:22.749" status="PASS" starttime="20170825 15:22:22.543"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:22.750">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170825 15:22:22.750" status="PASS" starttime="20170825 15:22:22.750"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:22.753">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:22:22.753" status="PASS" starttime="20170825 15:22:22.752"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:22.755">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170825 15:22:22.755" status="PASS" starttime="20170825 15:22:22.754"></status>
</kw>
<status endtime="20170825 15:22:22.755" status="PASS" starttime="20170825 15:22:22.754"></status>
</kw>
<status endtime="20170825 15:22:22.755" status="PASS" starttime="20170825 15:22:22.751"></status>
</kw>
<status endtime="20170825 15:22:22.755" status="PASS" starttime="20170825 15:22:22.751"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:22.819">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:22:22.819">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:22:22.819" status="PASS" starttime="20170825 15:22:22.756"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:22.821">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:22:22.821" status="PASS" starttime="20170825 15:22:22.821"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:22.822">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:22:22.823" status="PASS" starttime="20170825 15:22:22.822"></status>
</kw>
<status endtime="20170825 15:22:22.823" status="PASS" starttime="20170825 15:22:22.821"></status>
</kw>
<status endtime="20170825 15:22:22.823" status="PASS" starttime="20170825 15:22:22.820"></status>
</kw>
<status endtime="20170825 15:22:22.823" status="PASS" starttime="20170825 15:22:22.820"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:22:22.823">Delete All Sessions</msg>
<status endtime="20170825 15:22:22.823" status="PASS" starttime="20170825 15:22:22.823"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:22.824">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:22:22.824" status="PASS" starttime="20170825 15:22:22.542"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:22.824">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:22:22.824" status="PASS" starttime="20170825 15:22:22.824"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:22.825">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:22:22.825">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:22:22.825">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:22:22.825" status="PASS" starttime="20170825 15:22:22.824"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:22.825">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170825 15:22:22.825" status="PASS" starttime="20170825 15:22:22.542"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:22.826">${power_state} = Off</msg>
<status endtime="20170825 15:22:22.826" status="PASS" starttime="20170825 15:22:22.541"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170825 15:22:22.826" status="PASS" starttime="20170825 15:22:22.826"></status>
</kw>
<status endtime="20170825 15:22:22.826" status="PASS" starttime="20170825 15:22:22.541"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:22.830">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170825 15:22:22.830" status="PASS" starttime="20170825 15:22:22.830"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:22.831">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170825 15:22:22.831" status="PASS" starttime="20170825 15:22:22.831"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:22.831">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170825 15:22:22.831" status="PASS" starttime="20170825 15:22:22.831"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:22.832">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170825 15:22:22.832" status="PASS" starttime="20170825 15:22:22.832"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:23.023">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170825 15:22:23.023" status="PASS" starttime="20170825 15:22:22.833"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:23.024">${status} = PASS</msg>
<msg level="INFO" timestamp="20170825 15:22:23.024">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:22:23.024" status="PASS" starttime="20170825 15:22:22.833"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:23.024">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:22:23.024" status="PASS" starttime="20170825 15:22:23.024"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:23.025">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:22:23.025" status="PASS" starttime="20170825 15:22:23.025"></status>
</kw>
<status endtime="20170825 15:22:23.025" status="PASS" starttime="20170825 15:22:22.829"></status>
</kw>
<status endtime="20170825 15:22:23.025" status="PASS" starttime="20170825 15:22:22.829"></status>
</kw>
<status endtime="20170825 15:22:23.025" status="PASS" starttime="20170825 15:22:22.828"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:23.026">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170825 15:22:23.026" status="PASS" starttime="20170825 15:22:23.026"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:23.032">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:22:23.032" status="PASS" starttime="20170825 15:22:23.028"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:23.033">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170825 15:22:23.033" status="PASS" starttime="20170825 15:22:23.033"></status>
</kw>
<status endtime="20170825 15:22:23.033" status="PASS" starttime="20170825 15:22:23.032"></status>
</kw>
<status endtime="20170825 15:22:23.033" status="PASS" starttime="20170825 15:22:23.027"></status>
</kw>
<status endtime="20170825 15:22:23.033" status="PASS" starttime="20170825 15:22:23.026"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:23.163">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170825 15:22:23.163">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:22:23.163" status="PASS" starttime="20170825 15:22:23.034"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:23.165">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:22:23.165" status="PASS" starttime="20170825 15:22:23.164"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:23.166">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170825 15:22:23.166" status="PASS" starttime="20170825 15:22:23.166"></status>
</kw>
<status endtime="20170825 15:22:23.166" status="PASS" starttime="20170825 15:22:23.165"></status>
</kw>
<status endtime="20170825 15:22:23.166" status="PASS" starttime="20170825 15:22:23.164"></status>
</kw>
<status endtime="20170825 15:22:23.166" status="PASS" starttime="20170825 15:22:23.163"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170825 15:22:23.167">Delete All Sessions</msg>
<status endtime="20170825 15:22:23.167" status="PASS" starttime="20170825 15:22:23.167"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:23.167">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170825 15:22:23.167" status="PASS" starttime="20170825 15:22:22.827"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:23.168">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170825 15:22:23.168" status="PASS" starttime="20170825 15:22:23.167"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:23.168">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170825 15:22:23.168">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170825 15:22:23.168">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170825 15:22:23.168" status="PASS" starttime="20170825 15:22:23.168"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:23.169">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170825 15:22:23.169" status="PASS" starttime="20170825 15:22:22.827"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:23.169">${host_state} = Off</msg>
<status endtime="20170825 15:22:23.169" status="PASS" starttime="20170825 15:22:22.826"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170825 15:22:23.170" status="PASS" starttime="20170825 15:22:23.169"></status>
</kw>
<status endtime="20170825 15:22:23.170" status="PASS" starttime="20170825 15:22:22.540"></status>
</kw>
<status endtime="20170825 15:22:23.170" status="PASS" starttime="20170825 15:22:05.237"></status>
</kw>
<status endtime="20170825 15:22:23.170" status="PASS" starttime="20170825 15:22:05.236"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:23.170">${status} = True</msg>
<status endtime="20170825 15:22:23.170" status="PASS" starttime="20170825 15:22:05.236"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Hard Power Off</arg>
</arguments>
<status endtime="20170825 15:22:23.171" status="PASS" starttime="20170825 15:22:23.170"></status>
</kw>
<status endtime="20170825 15:22:23.171" status="PASS" starttime="20170825 15:22:04.194"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:23.171">HOST is recovered from quiesced state</msg>
<status endtime="20170825 15:22:23.171" status="PASS" starttime="20170825 15:22:23.171"></status>
</kw>
<status endtime="20170825 15:22:23.171" status="PASS" starttime="20170825 15:22:04.194"></status>
</kw>
<status endtime="20170825 15:22:23.171" status="PASS" starttime="20170825 15:22:04.193"></status>
</kw>
<status endtime="20170825 15:22:23.171" status="PASS" starttime="20170825 15:22:03.854"></status>
</kw>
<status endtime="20170825 15:22:23.172" status="PASS" starttime="20170825 15:22:03.853"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:23.188">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170825 15:22:23.188" status="PASS" starttime="20170825 15:22:23.172"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:23.189">${FFDC_DIR_PATH} = /tmp/fspcibld/6657/obmc-robot/logs/20170825152147545075_TestsTestBasicPoweron/20170825152147545075_PowerOnTest/</msg>
<status endtime="20170825 15:22:23.189" status="PASS" starttime="20170825 15:22:23.189"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status endtime="20170825 15:22:23.190" status="PASS" starttime="20170825 15:22:23.190"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170825 15:22:23.191" status="PASS" starttime="20170825 15:22:23.190"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:22:23.192">Directory '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs"&gt;/tmp/fspcibld/6657/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20170825 15:22:23.192" status="PASS" starttime="20170825 15:22:23.191"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:22:23.193">File '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20170825 15:22:23.193" status="PASS" starttime="20170825 15:22:23.192"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:23.193">${exist} = True</msg>
<status endtime="20170825 15:22:23.193" status="PASS" starttime="20170825 15:22:23.192"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20170825 15:22:23.193" status="PASS" starttime="20170825 15:22:23.193"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170825 15:22:23.194" status="PASS" starttime="20170825 15:22:23.194"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:23.195">${cur_time} = 2017-08-25 15:22:23:194772</msg>
<status endtime="20170825 15:22:23.195" status="PASS" starttime="20170825 15:22:23.195"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:23.196">${cur_time} = 20170825152223194772</msg>
<status endtime="20170825 15:22:23.196" status="PASS" starttime="20170825 15:22:23.196"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:23.196">${cur_time} = 20170825152223194772</msg>
<status endtime="20170825 15:22:23.196" status="PASS" starttime="20170825 15:22:23.194"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:22:23.197">Appended to file '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/6657/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170825 15:22:23.197" status="PASS" starttime="20170825 15:22:23.196"></status>
</kw>
<status endtime="20170825 15:22:23.197" status="PASS" starttime="20170825 15:22:23.172"></status>
</kw>
<status endtime="20170825 15:22:23.197" status="PASS" starttime="20170825 15:21:44.064"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:23.199">${default_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170825 15:22:23.199" status="PASS" starttime="20170825 15:22:23.199"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:23.200">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170825 15:22:23.200" status="PASS" starttime="20170825 15:22:23.199"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:23.200">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170825 15:22:23.200" status="PASS" starttime="20170825 15:22:23.198"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:23.201">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170825 15:22:23.201" status="PASS" starttime="20170825 15:22:23.201"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170825 15:22:23.201" status="PASS" starttime="20170825 15:22:23.201"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:23.209">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170825 15:22:23.212">${rc} = 0</msg>
<msg level="INFO" timestamp="20170825 15:22:23.212">${output} = /tmp/fspcibld/6657/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170825 15:22:23.212" status="PASS" starttime="20170825 15:22:23.202"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170825 15:22:23.215" status="PASS" starttime="20170825 15:22:23.214"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170825 15:22:23.216" status="PASS" starttime="20170825 15:22:23.216"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:23.217">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170825 15:22:23.217" status="PASS" starttime="20170825 15:22:23.216"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:23.218">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170825 15:22:23.218" status="PASS" starttime="20170825 15:22:23.200"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:23.219">${search_string} = ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.21.61</msg>
<status endtime="20170825 15:22:23.219" status="PASS" starttime="20170825 15:22:23.218"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:23.219">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.21.61' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170825 15:22:23.219" status="PASS" starttime="20170825 15:22:23.219"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170825 15:22:23.220" status="PASS" starttime="20170825 15:22:23.220"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:23.224">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.21.61' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170825 15:22:23.240">${rc} = 0</msg>
<msg level="INFO" timestamp="20170825 15:22:23.240">${os_con_pid} = 182</msg>
<status endtime="20170825 15:22:23.240" status="PASS" starttime="20170825 15:22:23.220"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170825 15:22:23.243" status="PASS" starttime="20170825 15:22:23.242"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:23.244">${cmd_buf} = kill -9 182</msg>
<status endtime="20170825 15:22:23.244" status="PASS" starttime="20170825 15:22:23.244"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170825 15:22:23.280" status="PASS" starttime="20170825 15:22:23.280"></status>
</kw>
<status endtime="20170825 15:22:23.280" status="PASS" starttime="20170825 15:22:23.245"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:23.291">Running command 'kill -9 182 2&gt;&amp;1'.</msg>
<status endtime="20170825 15:22:23.294" status="PASS" starttime="20170825 15:22:23.282"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:23.295">${rc} = 0</msg>
<msg level="INFO" timestamp="20170825 15:22:23.295">${output} = </msg>
<status endtime="20170825 15:22:23.295" status="PASS" starttime="20170825 15:22:23.281"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170825 15:22:23.299" status="PASS" starttime="20170825 15:22:23.298"></status>
</kw>
<status endtime="20170825 15:22:23.299" status="PASS" starttime="20170825 15:22:23.297"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170825 15:22:23.303">Copied file from '&lt;a href="file:///tmp/9.3.21.61_os_console"&gt;/tmp/9.3.21.61_os_console&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/6657/obmc-robot/logs/9.3.21.61_os_console"&gt;/tmp/fspcibld/6657/obmc-robot/logs/9.3.21.61_os_console&lt;/a&gt;'.</msg>
<status endtime="20170825 15:22:23.303" status="PASS" starttime="20170825 15:22:23.300"></status>
</kw>
<status endtime="20170825 15:22:23.303" status="PASS" starttime="20170825 15:22:23.300"></status>
</kw>
<status endtime="20170825 15:22:23.303" status="PASS" starttime="20170825 15:22:23.299"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:23.304">${output} = </msg>
<status endtime="20170825 15:22:23.304" status="PASS" starttime="20170825 15:22:23.304"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170825 15:22:23.306">${loc_quiet} = 1</msg>
<status endtime="20170825 15:22:23.306" status="PASS" starttime="20170825 15:22:23.305"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170825 15:22:23.360" status="PASS" starttime="20170825 15:22:23.306"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:23.362">${rc} = 0</msg>
<msg level="INFO" timestamp="20170825 15:22:23.362">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.21.61
Warning: Permanently added '[9.3.21.61]:2200' (RSA) to the list of known hosts.
root@9.3.21.61's password: 
</msg>
<status endtime="20170825 15:22:23.362" status="PASS" starttime="20170825 15:22:23.306"></status>
</kw>
<msg level="INFO" timestamp="20170825 15:22:23.363">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.21.61
Warning: Permanently added '[9.3.21.61]:2200' (RSA) to the list of known hosts.
root@9.3.21.61's password: 
</msg>
<status endtime="20170825 15:22:23.363" status="PASS" starttime="20170825 15:22:23.198"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20170825 15:22:23.365">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.21.61
Warning: Permanently added '[9.3.21.61]:2200' (RSA) to the list of known hosts.
root@9.3.21.61's password: 
</msg>
<status endtime="20170825 15:22:23.365" status="PASS" starttime="20170825 15:22:23.365"></status>
</kw>
<status endtime="20170825 15:22:23.366" status="PASS" starttime="20170825 15:21:44.063"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status endtime="20170825 15:22:23.366" critical="yes" status="FAIL" starttime="20170825 15:11:25.395">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: Running != Quiesced</status>
</test>
<doc>Test power on for HW CI.</doc>
<status endtime="20170825 15:22:23.367" status="FAIL" starttime="20170825 15:11:25.361"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status endtime="20170825 15:22:23.370" status="FAIL" starttime="20170825 15:11:19.383"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="1">Critical Tests</stat>
<stat pass="1" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="0" fail="1">Power_On_Test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
</tag>
<suite>
<stat name="Tests" pass="1" id="s1" fail="1">Tests</stat>
<stat name="Security" pass="1" id="s1-s1" fail="0">Tests.Security</stat>
<stat name="Test Ssl" pass="1" id="s1-s1-s1" fail="0">Tests.Security.Test Ssl</stat>
<stat name="Test Basic Poweron" pass="0" id="s1-s2" fail="1">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
