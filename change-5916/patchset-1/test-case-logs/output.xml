<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170810 03:47:48.960" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite name="Tests" source="/tmp/fspcibld/29434/obmc-robot/tests" id="s1">
<kw name="System Driver Data" type="setup">
<doc>System driver information.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:47:49.394">Dictionary does not contain key 'host'.</msg>
<status endtime="20170810 03:47:49.394" starttime="20170810 03:47:49.393" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:47:49.394">${has_host} = False</msg>
<status endtime="20170810 03:47:49.394" starttime="20170810 03:47:49.393" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170810 03:47:49.395" starttime="20170810 03:47:49.395" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:49.395" starttime="20170810 03:47:49.394" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:49.396">${port_num} = 22</msg>
<status endtime="20170810 03:47:49.396" starttime="20170810 03:47:49.396" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:49.397">${SSH_PORT} = 22</msg>
<status endtime="20170810 03:47:49.397" starttime="20170810 03:47:49.397" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:49.397">${https_num} = 443</msg>
<status endtime="20170810 03:47:49.397" starttime="20170810 03:47:49.397" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:47:49.398">${AUTH_URI} = https://9.41.166.169:443</msg>
<status endtime="20170810 03:47:49.398" starttime="20170810 03:47:49.398" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:49.398" starttime="20170810 03:47:49.396" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:49.398" starttime="20170810 03:47:49.395" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:47:49.399">Dictionary does not contain key 'port'.</msg>
<status endtime="20170810 03:47:49.399" starttime="20170810 03:47:49.399" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:47:49.399">${has_port} = False</msg>
<status endtime="20170810 03:47:49.399" starttime="20170810 03:47:49.399" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170810 03:47:49.401" starttime="20170810 03:47:49.401" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170810 03:47:49.402" starttime="20170810 03:47:49.401" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:49.402" starttime="20170810 03:47:49.400" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:49.402" starttime="20170810 03:47:49.400" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:47:49.402">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170810 03:47:51.152">Read output: root@witherspoon:~#</msg>
<status endtime="20170810 03:47:51.152" starttime="20170810 03:47:49.402" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:51.153" starttime="20170810 03:47:49.392" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:51.154">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg level="INFO" timestamp="20170810 03:47:51.241">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170810 03:47:51.241">${output} = VERSION_ID="v1.99.8-212-gd527973"</msg>
<msg level="INFO" timestamp="20170810 03:47:51.242">${stderr} = </msg>
<status endtime="20170810 03:47:51.242" starttime="20170810 03:47:51.154" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:47:51.243">Length is 0</msg>
<status endtime="20170810 03:47:51.243" starttime="20170810 03:47:51.243" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:47:51.243">VERSION_ID="v1.99.8-212-gd527973"</msg>
<status endtime="20170810 03:47:51.243" starttime="20170810 03:47:51.243" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:51.244" starttime="20170810 03:47:51.153" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:51.244" starttime="20170810 03:47:51.153" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:51.245">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg level="INFO" timestamp="20170810 03:47:51.372">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170810 03:47:51.372">${stdout} = </msg>
<msg level="INFO" timestamp="20170810 03:47:51.372">${stderr} = sh: /usr/sbin/pflash: No such file or directory
cat: can't open '/tmp/out.txt': No such file or directory</msg>
<status endtime="20170810 03:47:51.372" starttime="20170810 03:47:51.245" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:47:51.373">Length is 105</msg>
<msg level="FAIL" timestamp="20170810 03:47:51.373">'sh: /usr/sbin/pflash: No such file or directory
cat: can't open '/tmp/out.txt': No such file or directory' should be empty.</msg>
<status endtime="20170810 03:47:51.373" starttime="20170810 03:47:51.372" status="FAIL"></status>
</kw>
<status endtime="20170810 03:47:51.373" starttime="20170810 03:47:51.244" status="FAIL"></status>
</kw>
<status endtime="20170810 03:47:51.373" starttime="20170810 03:47:51.244" status="FAIL"></status>
</kw>
<status endtime="20170810 03:47:51.373" starttime="20170810 03:47:51.244" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:51.557">encoding=UTF-8
height=24
prompt=# 
port=22
term_type=vt100
index=1
timeout=25 seconds
host=9.41.166.169
alias=bmc_connection
path_separator=/
newline=

width=80</msg>
<msg level="INFO" timestamp="20170810 03:47:51.557">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170810 03:47:52.330">Read output: root@witherspoon:~#</msg>
<msg level="INFO" timestamp="20170810 03:47:52.330">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170810 03:47:52.395">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170810 03:47:52.403">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170810 03:47:52.403">${stderr} = </msg>
<msg level="INFO" timestamp="20170810 03:47:52.403">${rc} = 0</msg>
<status endtime="20170810 03:47:52.403" starttime="20170810 03:47:51.374" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:47:52.404">Length is 0</msg>
<status endtime="20170810 03:47:52.404" starttime="20170810 03:47:52.403" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:47:52.404">Length is 11</msg>
<status endtime="20170810 03:47:52.404" starttime="20170810 03:47:52.404" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:47:52.405">${bmc_model} = Witherspoon</msg>
<status endtime="20170810 03:47:52.405" starttime="20170810 03:47:51.374" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:47:52.405">BMC Model=Witherspoon</msg>
<status endtime="20170810 03:47:52.405" starttime="20170810 03:47:52.405" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:52.405" starttime="20170810 03:47:51.374" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:52.405" starttime="20170810 03:47:51.374" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw library="utils" name="Enable Core Dump On BMC">
<doc>Enable core dump collection.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:47:52.408">Dictionary does not contain key 'host'.</msg>
<status endtime="20170810 03:47:52.408" starttime="20170810 03:47:52.407" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:47:52.408">${has_host} = False</msg>
<status endtime="20170810 03:47:52.408" starttime="20170810 03:47:52.407" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170810 03:47:52.409" starttime="20170810 03:47:52.409" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:52.410" starttime="20170810 03:47:52.408" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:52.411">${port_num} = 22</msg>
<status endtime="20170810 03:47:52.411" starttime="20170810 03:47:52.411" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:52.411">${SSH_PORT} = 22</msg>
<status endtime="20170810 03:47:52.411" starttime="20170810 03:47:52.411" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:52.412">${https_num} = 443</msg>
<status endtime="20170810 03:47:52.412" starttime="20170810 03:47:52.412" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:47:52.413">${AUTH_URI} = https://9.41.166.169:443</msg>
<status endtime="20170810 03:47:52.413" starttime="20170810 03:47:52.412" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:52.413" starttime="20170810 03:47:52.410" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:52.413" starttime="20170810 03:47:52.410" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:47:52.414">Dictionary does not contain key 'port'.</msg>
<status endtime="20170810 03:47:52.414" starttime="20170810 03:47:52.414" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:47:52.414">${has_port} = False</msg>
<status endtime="20170810 03:47:52.414" starttime="20170810 03:47:52.413" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170810 03:47:52.416" starttime="20170810 03:47:52.415" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170810 03:47:52.416" starttime="20170810 03:47:52.416" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:52.416" starttime="20170810 03:47:52.415" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:52.416" starttime="20170810 03:47:52.414" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:47:52.417">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170810 03:47:54.128">Read output: root@witherspoon:~#</msg>
<status endtime="20170810 03:47:54.128" starttime="20170810 03:47:52.417" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:54.128" starttime="20170810 03:47:52.406" status="PASS"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:54.129">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg level="INFO" timestamp="20170810 03:47:54.205">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170810 03:47:54.206">${stdout} = /tmp/core_%e.%p</msg>
<msg level="INFO" timestamp="20170810 03:47:54.206">${stderr} = </msg>
<status endtime="20170810 03:47:54.206" starttime="20170810 03:47:54.129" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:47:54.206">Length is 0</msg>
<status endtime="20170810 03:47:54.206" starttime="20170810 03:47:54.206" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:47:54.207">${core_pattern} = /tmp/core_%e.%p</msg>
<status endtime="20170810 03:47:54.207" starttime="20170810 03:47:54.128" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status endtime="20170810 03:47:54.207" starttime="20170810 03:47:54.207" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:54.207" starttime="20170810 03:47:52.406" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:54.207" starttime="20170810 03:47:52.406" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status endtime="20170810 03:47:54.208" starttime="20170810 03:47:54.208" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:54.208" starttime="20170810 03:47:49.392" status="PASS"></status>
</kw>
<suite name="Security" source="/tmp/fspcibld/29434/obmc-robot/tests/security" id="s1-s1">
<suite name="Test Ssl" source="/tmp/fspcibld/29434/obmc-robot/tests/security/test_ssl.robot" id="s1-s1-s1">
<test name="Test SSL Connection" id="s1-s1-s1-t1">
<kw library="rest_client" name="Initialize OpenBMC">
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:47:54.286">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:47:54.287" starttime="20170810 03:47:54.286" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:54.288">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:47:54.288" starttime="20170810 03:47:54.287" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:54.288">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:47:54.288" starttime="20170810 03:47:54.288" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:54.289">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:47:54.289" starttime="20170810 03:47:54.288" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:47:54.509">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:47:54.509" starttime="20170810 03:47:54.290" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:47:54.509">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:47:54.509">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:47:54.510" starttime="20170810 03:47:54.289" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:47:54.510">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:47:54.510" starttime="20170810 03:47:54.510" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:47:54.511">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:47:54.511" starttime="20170810 03:47:54.510" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:54.511" starttime="20170810 03:47:54.286" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:54.511" starttime="20170810 03:47:54.285" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:54.511" starttime="20170810 03:47:54.285" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:47:54.516">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:47:54.516" starttime="20170810 03:47:54.516" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:54.517">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:47:54.517" starttime="20170810 03:47:54.516" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:54.517">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:47:54.517" starttime="20170810 03:47:54.517" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:54.518">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:47:54.518" starttime="20170810 03:47:54.518" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:47:54.714">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:47:54.714" starttime="20170810 03:47:54.519" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:47:54.714">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:47:54.714">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:47:54.714" starttime="20170810 03:47:54.518" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:47:54.715">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:47:54.715" starttime="20170810 03:47:54.714" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:47:54.715">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:47:54.715" starttime="20170810 03:47:54.715" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:54.715" starttime="20170810 03:47:54.515" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:54.716" starttime="20170810 03:47:54.515" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:54.716" starttime="20170810 03:47:54.514" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:54.716">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 03:47:54.716" starttime="20170810 03:47:54.716" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:54.718">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:47:54.718" starttime="20170810 03:47:54.718" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:47:54.719">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:47:54.719" starttime="20170810 03:47:54.719" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:54.719" starttime="20170810 03:47:54.718" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:54.720" starttime="20170810 03:47:54.717" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:54.720" starttime="20170810 03:47:54.717" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:54.809">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:47:54.809">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:47:54.809" starttime="20170810 03:47:54.720" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:54.811">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:47:54.811" starttime="20170810 03:47:54.810" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:47:54.812">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:47:54.812" starttime="20170810 03:47:54.811" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:54.812" starttime="20170810 03:47:54.811" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:54.812" starttime="20170810 03:47:54.810" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:54.812" starttime="20170810 03:47:54.809" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:47:54.812">Delete All Sessions</msg>
<status endtime="20170810 03:47:54.812" starttime="20170810 03:47:54.812" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:47:54.813">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:47:54.813" starttime="20170810 03:47:54.513" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:47:54.813">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:47:54.813" starttime="20170810 03:47:54.813" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:54.814">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:47:54.814">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:47:54.814">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:47:54.814" starttime="20170810 03:47:54.813" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:47:54.814">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170810 03:47:54.814" starttime="20170810 03:47:54.513" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:47:54.815">${host_state} = Off</msg>
<status endtime="20170810 03:47:54.815" starttime="20170810 03:47:54.512" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:47:54.816">Off != Quiesced</msg>
<status endtime="20170810 03:47:54.816" starttime="20170810 03:47:54.815" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:47:54.816">${status} = False</msg>
<status endtime="20170810 03:47:54.816" starttime="20170810 03:47:54.815" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:47:54.816">${status} = False</msg>
<status endtime="20170810 03:47:54.816" starttime="20170810 03:47:54.512" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20170810 03:47:54.817" starttime="20170810 03:47:54.816" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170810 03:47:54.817" starttime="20170810 03:47:54.817" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:54.826">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170810 03:47:54.827" starttime="20170810 03:47:54.818" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:54.835">${FFDC_DIR_PATH} = </msg>
<status endtime="20170810 03:47:54.835" starttime="20170810 03:47:54.827" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw library="openbmc_ffdc" name="Set Ffdc Defaults">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:54.837">${cur_time} = 2017-08-10 03:47:54:836865</msg>
<status endtime="20170810 03:47:54.837" starttime="20170810 03:47:54.837" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:54.838">${cur_time} = 20170810034754836865</msg>
<status endtime="20170810 03:47:54.838" starttime="20170810 03:47:54.837" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:54.838" starttime="20170810 03:47:54.836" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:47:54.842">${FFDC_TIME} = 20170810034754836865</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:54.843">${suite_name} = TestsSecurityTestSsl</msg>
<status endtime="20170810 03:47:54.843" starttime="20170810 03:47:54.843" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:54.844">${suite_name} = 20170810034754836865_TestsSecurityTestSsl</msg>
<status endtime="20170810 03:47:54.844" starttime="20170810 03:47:54.843" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:54.844">${test_name} = TestSSLConnection</msg>
<status endtime="20170810 03:47:54.844" starttime="20170810 03:47:54.844" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:54.845">${test_name} = 20170810034754836865_TestSSLConnection</msg>
<status endtime="20170810 03:47:54.845" starttime="20170810 03:47:54.844" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:54.845" starttime="20170810 03:47:54.842" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:47:54.845">${FFDC_DIR_PATH} = /tmp/fspcibld/29434/obmc-robot/logs/20170810034754836865_TestsSecurityTestSsl/20170810034754836865_TestSSLConnection/</msg>
<msg level="INFO" timestamp="20170810 03:47:54.850">${FFDC_PREFIX} = 20170810034754836865_</msg>
<status endtime="20170810 03:47:54.850" starttime="20170810 03:47:54.836" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:54.850" starttime="20170810 03:47:54.835" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170810 03:47:54.850" starttime="20170810 03:47:54.850" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:47:54.851">Created directory '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs"&gt;/tmp/fspcibld/29434/obmc-robot/logs&lt;/a&gt;'.</msg>
<status endtime="20170810 03:47:54.851" starttime="20170810 03:47:54.851" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:47:54.852">File '/tmp/fspcibld/29434/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status endtime="20170810 03:47:54.852" starttime="20170810 03:47:54.852" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:47:54.852">${exist} = False</msg>
<status endtime="20170810 03:47:54.852" starttime="20170810 03:47:54.852" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:47:54.854">Created file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:47:54.854" starttime="20170810 03:47:54.853" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:54.854" starttime="20170810 03:47:54.853" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170810 03:47:54.854" starttime="20170810 03:47:54.854" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:54.855">${cur_time} = 2017-08-10 03:47:54:854956</msg>
<status endtime="20170810 03:47:54.855" starttime="20170810 03:47:54.855" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:54.856">${cur_time} = 20170810034754854956</msg>
<status endtime="20170810 03:47:54.856" starttime="20170810 03:47:54.856" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:47:54.856">${cur_time} = 20170810034754854956</msg>
<status endtime="20170810 03:47:54.856" starttime="20170810 03:47:54.854" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:47:54.857">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:47:54.857" starttime="20170810 03:47:54.856" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:54.857" starttime="20170810 03:47:54.817" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:54.857" starttime="20170810 03:47:54.512" status="PASS"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status critical="yes" endtime="20170810 03:47:54.857" starttime="20170810 03:47:54.284" status="PASS"></status>
</test>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions" type="teardown">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:47:54.858">Delete All Sessions</msg>
<status endtime="20170810 03:47:54.858" starttime="20170810 03:47:54.858" status="PASS"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status endtime="20170810 03:47:54.858" starttime="20170810 03:47:54.210" status="PASS"></status>
</suite>
<status endtime="20170810 03:47:54.859" starttime="20170810 03:47:54.208" status="PASS"></status>
</suite>
<suite name="Test Basic Poweron" source="/tmp/fspcibld/29434/obmc-robot/tests/test_basic_poweron.robot" id="s1-s2">
<test name="Power On Test" id="s1-s2-t1">
<kw library="utils" name="Start SOL Console Logging" type="setup">
<doc>Start system console log to file.</doc>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:54.896">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170810 03:47:54.896" starttime="20170810 03:47:54.895" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:54.896">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170810 03:47:54.896" starttime="20170810 03:47:54.896" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:47:54.897">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170810 03:47:54.897" starttime="20170810 03:47:54.895" status="PASS"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:54.898">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170810 03:47:54.899" starttime="20170810 03:47:54.898" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:54.900">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170810 03:47:54.900" starttime="20170810 03:47:54.899" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:47:54.900">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170810 03:47:54.900" starttime="20170810 03:47:54.897" status="PASS"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:54.901">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170810 03:47:54.901" starttime="20170810 03:47:54.901" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170810 03:47:54.901" starttime="20170810 03:47:54.901" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:54.905">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170810 03:47:54.912">${rc} = 0</msg>
<msg level="INFO" timestamp="20170810 03:47:54.912">${output} = /tmp/fspcibld/29434/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170810 03:47:54.912" starttime="20170810 03:47:54.902" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170810 03:47:54.915" starttime="20170810 03:47:54.914" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170810 03:47:54.916" starttime="20170810 03:47:54.915" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:54.916">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status endtime="20170810 03:47:54.916" starttime="20170810 03:47:54.916" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:47:54.917">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status endtime="20170810 03:47:54.917" starttime="20170810 03:47:54.900" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:54.918">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170810 03:47:54.918" starttime="20170810 03:47:54.917" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170810 03:47:54.918" starttime="20170810 03:47:54.918" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:54.922">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170810 03:47:54.938">${rc} = 0</msg>
<msg level="INFO" timestamp="20170810 03:47:54.939">${os_con_pid} = </msg>
<status endtime="20170810 03:47:54.939" starttime="20170810 03:47:54.919" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170810 03:47:54.953" starttime="20170810 03:47:54.951" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:54.955">${cmd_buf} = kill -9 </msg>
<status endtime="20170810 03:47:54.955" starttime="20170810 03:47:54.954" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170810 03:47:54.957" starttime="20170810 03:47:54.957" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:54.959">${rc} = None</msg>
<msg level="INFO" timestamp="20170810 03:47:54.959">${output} = None</msg>
<status endtime="20170810 03:47:54.959" starttime="20170810 03:47:54.958" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170810 03:47:54.961" starttime="20170810 03:47:54.959" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:47:54.969">Source file '/tmp/9.41.166.169_os_console' does not exist.</msg>
<status endtime="20170810 03:47:54.969" starttime="20170810 03:47:54.963" status="FAIL"></status>
</kw>
<status endtime="20170810 03:47:54.969" starttime="20170810 03:47:54.962" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:54.969" starttime="20170810 03:47:54.961" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:54.970">${output} = </msg>
<status endtime="20170810 03:47:54.970" starttime="20170810 03:47:54.969" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:54.970">${loc_quiet} = 1</msg>
<status endtime="20170810 03:47:54.970" starttime="20170810 03:47:54.970" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170810 03:47:55.031" starttime="20170810 03:47:54.972" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:47:55.034">${rc} = 1</msg>
<msg level="INFO" timestamp="20170810 03:47:55.035">${output} = cat: /tmp/9.41.166.169_os_console: No such file or directory
</msg>
<status endtime="20170810 03:47:55.035" starttime="20170810 03:47:54.971" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:47:55.035">${log_output} = cat: /tmp/9.41.166.169_os_console: No such file or directory
</msg>
<status endtime="20170810 03:47:55.035" starttime="20170810 03:47:54.897" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:47:55.042">Created file '&lt;a href="file:///tmp/9.41.166.169_os_console"&gt;/tmp/9.41.166.169_os_console&lt;/a&gt;'.</msg>
<status endtime="20170810 03:47:55.043" starttime="20170810 03:47:55.041" status="PASS"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:55.045">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170810 03:47:55.045" starttime="20170810 03:47:55.045" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170810 03:47:55.045" starttime="20170810 03:47:55.045" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:55.048">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170810 03:47:55.059">${rc} = 0</msg>
<msg level="INFO" timestamp="20170810 03:47:55.059">${output} = /tmp/fspcibld/29434/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170810 03:47:55.059" starttime="20170810 03:47:55.046" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170810 03:47:55.073" starttime="20170810 03:47:55.071" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170810 03:47:55.075" starttime="20170810 03:47:55.073" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:55.076">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status endtime="20170810 03:47:55.076" starttime="20170810 03:47:55.075" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:47:55.077">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status endtime="20170810 03:47:55.077" starttime="20170810 03:47:55.043" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:55.079">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;</msg>
<status endtime="20170810 03:47:55.079" starttime="20170810 03:47:55.078" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170810 03:47:55.080" starttime="20170810 03:47:55.079" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:55.084">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20170810 03:47:55.087">${rc} = 0</msg>
<msg level="INFO" timestamp="20170810 03:47:55.087">${output} = </msg>
<status endtime="20170810 03:47:55.087" starttime="20170810 03:47:55.080" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170810 03:47:55.091" starttime="20170810 03:47:55.090" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:55.091" starttime="20170810 03:47:54.894" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Repeat Keyword">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:47:55.092">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:55.094">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status endtime="20170810 03:47:55.094" starttime="20170810 03:47:55.093" status="PASS"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:55.095">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170810 03:47:55.095" starttime="20170810 03:47:55.095" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:47:55.099">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:47:55.100" starttime="20170810 03:47:55.099" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:55.101">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:47:55.101" starttime="20170810 03:47:55.101" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:55.102">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:47:55.102" starttime="20170810 03:47:55.101" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:55.102">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:47:55.102" starttime="20170810 03:47:55.102" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:47:55.690">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:47:55.690" starttime="20170810 03:47:55.103" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:47:55.690">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:47:55.690">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:47:55.690" starttime="20170810 03:47:55.103" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:47:55.691">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:47:55.691" starttime="20170810 03:47:55.691" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:47:55.692">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:47:55.692" starttime="20170810 03:47:55.691" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:55.692" starttime="20170810 03:47:55.098" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:55.692" starttime="20170810 03:47:55.097" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:55.692" starttime="20170810 03:47:55.096" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:55.693">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170810 03:47:55.693" starttime="20170810 03:47:55.693" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:55.694">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:47:55.694" starttime="20170810 03:47:55.693" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170810 03:47:55.694" starttime="20170810 03:47:55.694" status="PASS"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:55.696">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Conten...</msg>
<status endtime="20170810 03:47:55.696" starttime="20170810 03:47:55.695" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:47:55.697">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170810 03:47:55.697" starttime="20170810 03:47:55.696" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:55.697" starttime="20170810 03:47:55.696" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:55.697" starttime="20170810 03:47:55.694" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:56.310">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170810 03:47:56.310">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:47:56.310" starttime="20170810 03:47:55.697" status="PASS"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:56.312">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:47:56.312" starttime="20170810 03:47:56.311" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:47:56.313">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:47:56.313" starttime="20170810 03:47:56.313" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:56.313" starttime="20170810 03:47:56.312" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:56.313" starttime="20170810 03:47:56.311" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:47:56.314">Delete All Sessions</msg>
<status endtime="20170810 03:47:56.314" starttime="20170810 03:47:56.314" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:47:56.314">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:47:56.314" starttime="20170810 03:47:55.095" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:47:56.315">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:47:56.315" starttime="20170810 03:47:56.314" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:56.315">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:47:56.315">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:47:56.315">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:47:56.315" starttime="20170810 03:47:56.315" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:56.316" starttime="20170810 03:47:55.094" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170810 03:47:56.316" starttime="20170810 03:47:56.316" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:47:56.321">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:47:56.321" starttime="20170810 03:47:56.320" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:56.322">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:47:56.322" starttime="20170810 03:47:56.321" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:56.322">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:47:56.322" starttime="20170810 03:47:56.322" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:56.323">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:47:56.323" starttime="20170810 03:47:56.323" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:47:57.341">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:47:57.341" starttime="20170810 03:47:56.324" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:47:57.341">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:47:57.341">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:47:57.341" starttime="20170810 03:47:56.324" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:47:57.342">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:47:57.342" starttime="20170810 03:47:57.341" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:47:57.342">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:47:57.342" starttime="20170810 03:47:57.342" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:57.343" starttime="20170810 03:47:56.320" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:57.343" starttime="20170810 03:47:56.320" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:57.343" starttime="20170810 03:47:56.319" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:57.343">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 03:47:57.343" starttime="20170810 03:47:57.343" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:57.345">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:47:57.345" starttime="20170810 03:47:57.345" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:47:57.346">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:47:57.346" starttime="20170810 03:47:57.346" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:57.347" starttime="20170810 03:47:57.346" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:57.347" starttime="20170810 03:47:57.344" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:57.347" starttime="20170810 03:47:57.344" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:58.579">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:47:58.579">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:47:58.579" starttime="20170810 03:47:57.347" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:58.581">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:47:58.581" starttime="20170810 03:47:58.580" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:47:58.582">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:47:58.582" starttime="20170810 03:47:58.581" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:58.582" starttime="20170810 03:47:58.581" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:58.582" starttime="20170810 03:47:58.580" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:58.582" starttime="20170810 03:47:58.579" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:47:58.582">Delete All Sessions</msg>
<status endtime="20170810 03:47:58.582" starttime="20170810 03:47:58.582" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:47:58.583">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:47:58.583" starttime="20170810 03:47:56.318" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:47:58.583">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:47:58.583" starttime="20170810 03:47:58.583" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:58.584">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:47:58.584">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:47:58.584">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:47:58.584" starttime="20170810 03:47:58.584" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:47:58.584">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170810 03:47:58.584" starttime="20170810 03:47:56.318" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:47:58.585">${power_state} = Off</msg>
<status endtime="20170810 03:47:58.585" starttime="20170810 03:47:56.317" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 03:47:58.585" starttime="20170810 03:47:58.585" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:58.585" starttime="20170810 03:47:56.317" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:47:58.591">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:47:58.591" starttime="20170810 03:47:58.590" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:58.592">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:47:58.592" starttime="20170810 03:47:58.592" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:58.593">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:47:58.593" starttime="20170810 03:47:58.592" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:58.593">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:47:58.593" starttime="20170810 03:47:58.593" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:47:59.044">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:47:59.044" starttime="20170810 03:47:58.594" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:47:59.044">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:47:59.045">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:47:59.045" starttime="20170810 03:47:58.594" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:47:59.045">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:47:59.045" starttime="20170810 03:47:59.045" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:47:59.046">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:47:59.046" starttime="20170810 03:47:59.045" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:59.046" starttime="20170810 03:47:58.589" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:59.046" starttime="20170810 03:47:58.588" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:59.046" starttime="20170810 03:47:58.588" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:59.047">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 03:47:59.047" starttime="20170810 03:47:59.046" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:47:59.049">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:47:59.049" starttime="20170810 03:47:59.048" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:47:59.050">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:47:59.050" starttime="20170810 03:47:59.049" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:59.050" starttime="20170810 03:47:59.049" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:59.050" starttime="20170810 03:47:59.047" status="PASS"></status>
</kw>
<status endtime="20170810 03:47:59.050" starttime="20170810 03:47:59.047" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:02.529">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:48:02.529">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:48:02.529" starttime="20170810 03:47:59.050" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:02.531">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:48:02.531" starttime="20170810 03:48:02.530" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:02.532">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:48:02.532" starttime="20170810 03:48:02.532" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:02.532" starttime="20170810 03:48:02.531" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:02.532" starttime="20170810 03:48:02.530" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:02.532" starttime="20170810 03:48:02.529" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:48:02.533">Delete All Sessions</msg>
<status endtime="20170810 03:48:02.533" starttime="20170810 03:48:02.533" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:48:02.533">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:48:02.533" starttime="20170810 03:47:58.587" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:02.534">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:48:02.534" starttime="20170810 03:48:02.533" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:02.534">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:48:02.534">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:48:02.534">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:48:02.534" starttime="20170810 03:48:02.534" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:48:02.535">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170810 03:48:02.535" starttime="20170810 03:47:58.586" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:48:02.535">${host_state} = Off</msg>
<status endtime="20170810 03:48:02.535" starttime="20170810 03:47:58.586" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 03:48:02.535" starttime="20170810 03:48:02.535" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:02.536" starttime="20170810 03:47:56.317" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:02.536" starttime="20170810 03:47:56.316" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:02.536" starttime="20170810 03:47:55.093" status="PASS"></status>
</kw>
<kw library="state_manager" name="Initiate Host Boot">
<doc>Initiate host power on.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:02.537">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status endtime="20170810 03:48:02.537" starttime="20170810 03:48:02.536" status="PASS"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:02.538">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170810 03:48:02.538" starttime="20170810 03:48:02.538" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:02.540">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:48:02.541" starttime="20170810 03:48:02.540" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:02.541">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:48:02.541" starttime="20170810 03:48:02.541" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:02.542">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:48:02.542" starttime="20170810 03:48:02.542" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:02.543">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:48:02.543" starttime="20170810 03:48:02.542" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:02.819">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:48:02.819" starttime="20170810 03:48:02.543" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:48:02.819">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:48:02.819">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:48:02.819" starttime="20170810 03:48:02.543" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:02.820">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:48:02.820" starttime="20170810 03:48:02.820" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:02.821">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:48:02.821" starttime="20170810 03:48:02.820" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:02.821" starttime="20170810 03:48:02.540" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:02.821" starttime="20170810 03:48:02.539" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:02.821" starttime="20170810 03:48:02.539" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:02.822">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170810 03:48:02.822" starttime="20170810 03:48:02.821" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:02.822">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:48:02.822" starttime="20170810 03:48:02.822" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170810 03:48:02.823" starttime="20170810 03:48:02.823" status="PASS"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:02.825">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content...</msg>
<status endtime="20170810 03:48:02.825" starttime="20170810 03:48:02.824" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:02.826">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170810 03:48:02.826" starttime="20170810 03:48:02.826" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:02.826" starttime="20170810 03:48:02.825" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:02.826" starttime="20170810 03:48:02.823" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:03.770">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170810 03:48:03.770">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:48:03.770" starttime="20170810 03:48:02.826" status="PASS"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:03.772">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:48:03.772" starttime="20170810 03:48:03.771" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:03.773">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:48:03.773" starttime="20170810 03:48:03.772" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:03.773" starttime="20170810 03:48:03.772" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:03.773" starttime="20170810 03:48:03.771" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:48:03.773">Delete All Sessions</msg>
<status endtime="20170810 03:48:03.773" starttime="20170810 03:48:03.773" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:48:03.774">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:48:03.774" starttime="20170810 03:48:02.538" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:03.774">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:48:03.774" starttime="20170810 03:48:03.774" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:03.775">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:48:03.775">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:48:03.775">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:48:03.775" starttime="20170810 03:48:03.775" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:03.775" starttime="20170810 03:48:02.537" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170810 03:48:03.776" starttime="20170810 03:48:03.775" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:03.781">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:48:03.781" starttime="20170810 03:48:03.780" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:03.782">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:48:03.782" starttime="20170810 03:48:03.781" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:03.783">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:48:03.783" starttime="20170810 03:48:03.782" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:03.783">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:48:03.783" starttime="20170810 03:48:03.783" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:04.050">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:48:04.050" starttime="20170810 03:48:03.784" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:48:04.050">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:48:04.050">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:48:04.050" starttime="20170810 03:48:03.783" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:04.051">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:48:04.051" starttime="20170810 03:48:04.051" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:04.052">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:48:04.052" starttime="20170810 03:48:04.051" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:04.052" starttime="20170810 03:48:03.779" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:04.052" starttime="20170810 03:48:03.779" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:04.052" starttime="20170810 03:48:03.779" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:04.053">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 03:48:04.053" starttime="20170810 03:48:04.052" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:04.055">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:48:04.055" starttime="20170810 03:48:04.054" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:04.056">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:48:04.056" starttime="20170810 03:48:04.055" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:04.056" starttime="20170810 03:48:04.055" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:04.056" starttime="20170810 03:48:04.053" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:04.056" starttime="20170810 03:48:04.053" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:06.402">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:48:06.402">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:48:06.402" starttime="20170810 03:48:04.056" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:06.405">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:48:06.405" starttime="20170810 03:48:06.404" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:06.406">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:48:06.406" starttime="20170810 03:48:06.405" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:06.406" starttime="20170810 03:48:06.405" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:06.406" starttime="20170810 03:48:06.403" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:06.406" starttime="20170810 03:48:06.403" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:48:06.406">Delete All Sessions</msg>
<status endtime="20170810 03:48:06.406" starttime="20170810 03:48:06.406" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:48:06.407">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:48:06.407" starttime="20170810 03:48:03.778" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:06.407">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:48:06.407" starttime="20170810 03:48:06.407" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:06.408">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:48:06.408">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:48:06.408">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:48:06.408" starttime="20170810 03:48:06.408" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:48:06.408">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170810 03:48:06.408" starttime="20170810 03:48:03.777" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:48:06.409">${power_state} = Off</msg>
<status endtime="20170810 03:48:06.409" starttime="20170810 03:48:03.777" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:48:06.409">On != Off</msg>
<status endtime="20170810 03:48:06.409" starttime="20170810 03:48:06.409" status="FAIL"></status>
</kw>
<status endtime="20170810 03:48:06.410" starttime="20170810 03:48:03.777" status="FAIL"></status>
</kw>
<status endtime="20170810 03:48:06.410" starttime="20170810 03:48:03.776" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:16.415">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:48:16.415" starttime="20170810 03:48:16.414" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:16.416">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:48:16.416" starttime="20170810 03:48:16.415" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:16.416">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:48:16.416" starttime="20170810 03:48:16.416" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:16.417">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:48:16.417" starttime="20170810 03:48:16.417" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:16.936">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:48:16.936" starttime="20170810 03:48:16.418" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:48:16.936">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:48:16.936">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:48:16.936" starttime="20170810 03:48:16.417" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:16.937">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:48:16.937" starttime="20170810 03:48:16.936" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:16.937">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:48:16.938" starttime="20170810 03:48:16.937" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:16.938" starttime="20170810 03:48:16.414" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:16.938" starttime="20170810 03:48:16.413" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:16.938" starttime="20170810 03:48:16.413" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:16.938">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 03:48:16.938" starttime="20170810 03:48:16.938" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:16.941">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:48:16.941" starttime="20170810 03:48:16.940" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:16.942">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:48:16.942" starttime="20170810 03:48:16.941" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:16.942" starttime="20170810 03:48:16.941" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:16.942" starttime="20170810 03:48:16.939" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:16.942" starttime="20170810 03:48:16.939" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:17.004">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:48:17.004">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:48:17.004" starttime="20170810 03:48:16.942" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:17.006">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:48:17.006" starttime="20170810 03:48:17.006" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:17.007">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:48:17.007" starttime="20170810 03:48:17.007" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:17.007" starttime="20170810 03:48:17.006" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:17.007" starttime="20170810 03:48:17.005" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:17.007" starttime="20170810 03:48:17.005" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:48:17.008">Delete All Sessions</msg>
<status endtime="20170810 03:48:17.008" starttime="20170810 03:48:17.008" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:48:17.008">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:48:17.008" starttime="20170810 03:48:16.412" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:17.009">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:48:17.009" starttime="20170810 03:48:17.008" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:17.009">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:48:17.009">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:48:17.009">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:48:17.009" starttime="20170810 03:48:17.009" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:48:17.010">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170810 03:48:17.010" starttime="20170810 03:48:16.412" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:48:17.010">${power_state} = Off</msg>
<status endtime="20170810 03:48:17.010" starttime="20170810 03:48:16.411" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:48:17.011">On != Off</msg>
<status endtime="20170810 03:48:17.011" starttime="20170810 03:48:17.010" status="FAIL"></status>
</kw>
<status endtime="20170810 03:48:17.011" starttime="20170810 03:48:16.411" status="FAIL"></status>
</kw>
<status endtime="20170810 03:48:17.011" starttime="20170810 03:48:16.410" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:27.016">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:48:27.016" starttime="20170810 03:48:27.015" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:27.017">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:48:27.017" starttime="20170810 03:48:27.016" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:27.017">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:48:27.017" starttime="20170810 03:48:27.017" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:27.018">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:48:27.018" starttime="20170810 03:48:27.018" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:27.221">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:48:27.221" starttime="20170810 03:48:27.019" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:48:27.221">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:48:27.221">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:48:27.221" starttime="20170810 03:48:27.019" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:27.222">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:48:27.222" starttime="20170810 03:48:27.222" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:27.223">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:48:27.223" starttime="20170810 03:48:27.222" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:27.223" starttime="20170810 03:48:27.015" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:27.223" starttime="20170810 03:48:27.014" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:27.223" starttime="20170810 03:48:27.014" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:27.224">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 03:48:27.224" starttime="20170810 03:48:27.223" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:27.226">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:48:27.226" starttime="20170810 03:48:27.225" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:27.227">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:48:27.227" starttime="20170810 03:48:27.226" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:27.227" starttime="20170810 03:48:27.226" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:27.227" starttime="20170810 03:48:27.224" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:27.227" starttime="20170810 03:48:27.224" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:27.317">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:48:27.317">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:48:27.317" starttime="20170810 03:48:27.227" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:27.319">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:48:27.319" starttime="20170810 03:48:27.318" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:27.320">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:48:27.320" starttime="20170810 03:48:27.319" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:27.320" starttime="20170810 03:48:27.319" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:27.320" starttime="20170810 03:48:27.318" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:27.320" starttime="20170810 03:48:27.317" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:48:27.320">Delete All Sessions</msg>
<status endtime="20170810 03:48:27.321" starttime="20170810 03:48:27.320" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:48:27.321">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:48:27.321" starttime="20170810 03:48:27.013" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:27.321">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:48:27.321" starttime="20170810 03:48:27.321" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:27.322">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:48:27.322">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:48:27.322">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:48:27.322" starttime="20170810 03:48:27.322" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:48:27.322">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 03:48:27.323" starttime="20170810 03:48:27.013" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:48:27.323">${power_state} = On</msg>
<status endtime="20170810 03:48:27.323" starttime="20170810 03:48:27.012" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 03:48:27.323" starttime="20170810 03:48:27.323" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:27.323" starttime="20170810 03:48:27.012" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:27.329">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:48:27.330" starttime="20170810 03:48:27.329" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:27.330">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:48:27.330" starttime="20170810 03:48:27.330" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:27.331">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:48:27.331" starttime="20170810 03:48:27.330" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:27.332">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:48:27.332" starttime="20170810 03:48:27.331" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:27.594">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:48:27.594" starttime="20170810 03:48:27.332" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:48:27.594">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:48:27.594">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:48:27.594" starttime="20170810 03:48:27.332" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:27.594">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:48:27.594" starttime="20170810 03:48:27.594" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:27.595">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:48:27.595" starttime="20170810 03:48:27.595" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:27.595" starttime="20170810 03:48:27.328" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:27.595" starttime="20170810 03:48:27.326" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:27.595" starttime="20170810 03:48:27.325" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:27.596">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 03:48:27.596" starttime="20170810 03:48:27.596" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:27.598">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:48:27.598" starttime="20170810 03:48:27.597" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:27.599">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:48:27.599" starttime="20170810 03:48:27.599" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:27.599" starttime="20170810 03:48:27.598" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:27.599" starttime="20170810 03:48:27.597" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:27.599" starttime="20170810 03:48:27.596" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:27.713">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:48:27.713">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:48:27.713" starttime="20170810 03:48:27.600" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:27.715">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:48:27.715" starttime="20170810 03:48:27.714" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:27.716">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:48:27.716" starttime="20170810 03:48:27.715" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:27.716" starttime="20170810 03:48:27.715" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:27.716" starttime="20170810 03:48:27.714" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:27.716" starttime="20170810 03:48:27.713" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:48:27.716">Delete All Sessions</msg>
<status endtime="20170810 03:48:27.717" starttime="20170810 03:48:27.716" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:48:27.717">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:48:27.717" starttime="20170810 03:48:27.324" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:27.717">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:48:27.717" starttime="20170810 03:48:27.717" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:27.718">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:48:27.718">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:48:27.718">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:48:27.718" starttime="20170810 03:48:27.718" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:48:27.718">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 03:48:27.718" starttime="20170810 03:48:27.324" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:48:27.719">${host_state} = Running</msg>
<status endtime="20170810 03:48:27.719" starttime="20170810 03:48:27.324" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 03:48:27.719" starttime="20170810 03:48:27.719" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:27.724">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:48:27.724" starttime="20170810 03:48:27.723" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:27.725">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:48:27.725" starttime="20170810 03:48:27.724" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:27.725">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:48:27.725" starttime="20170810 03:48:27.725" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:27.726">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:48:27.726" starttime="20170810 03:48:27.726" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:27.954">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:48:27.954" starttime="20170810 03:48:27.727" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:48:27.955">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:48:27.955">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:48:27.955" starttime="20170810 03:48:27.726" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:27.955">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:48:27.955" starttime="20170810 03:48:27.955" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:27.956">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:48:27.956" starttime="20170810 03:48:27.956" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:27.956" starttime="20170810 03:48:27.723" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:27.957" starttime="20170810 03:48:27.722" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:27.957" starttime="20170810 03:48:27.721" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:27.957">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 03:48:27.957" starttime="20170810 03:48:27.957" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:27.959">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:48:27.959" starttime="20170810 03:48:27.959" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:27.960">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:48:27.960" starttime="20170810 03:48:27.960" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:27.960" starttime="20170810 03:48:27.959" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:27.961" starttime="20170810 03:48:27.958" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:27.961" starttime="20170810 03:48:27.957" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:28.032">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:48:28.032">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:48:28.032" starttime="20170810 03:48:27.961" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:28.034">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:48:28.034" starttime="20170810 03:48:28.034" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:28.036">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:48:28.036" starttime="20170810 03:48:28.035" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:28.036" starttime="20170810 03:48:28.034" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:28.036" starttime="20170810 03:48:28.033" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:28.036" starttime="20170810 03:48:28.032" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:48:28.036">Delete All Sessions</msg>
<status endtime="20170810 03:48:28.036" starttime="20170810 03:48:28.036" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:48:28.037">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:48:28.037" starttime="20170810 03:48:27.721" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:28.037">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:48:28.037" starttime="20170810 03:48:28.037" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:28.038">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:48:28.038">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:48:28.038">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:48:28.038" starttime="20170810 03:48:28.038" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:48:28.038">${state} = Off</msg>
<status endtime="20170810 03:48:28.038" starttime="20170810 03:48:27.720" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:48:28.039">${boot_progress} = Off</msg>
<status endtime="20170810 03:48:28.039" starttime="20170810 03:48:27.720" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:48:28.039">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 03:48:28.039" starttime="20170810 03:48:28.039" status="FAIL"></status>
</kw>
<status endtime="20170810 03:48:28.039" starttime="20170810 03:48:27.719" status="FAIL"></status>
</kw>
<status endtime="20170810 03:48:28.040" starttime="20170810 03:48:27.011" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:38.045">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:48:38.045" starttime="20170810 03:48:38.044" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:38.046">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:48:38.046" starttime="20170810 03:48:38.045" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:38.046">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:48:38.046" starttime="20170810 03:48:38.046" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:38.047">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:48:38.047" starttime="20170810 03:48:38.047" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:38.385">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:48:38.386" starttime="20170810 03:48:38.048" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:48:38.386">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:48:38.386">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:48:38.386" starttime="20170810 03:48:38.047" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:38.386">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:48:38.387" starttime="20170810 03:48:38.386" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:38.387">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:48:38.387" starttime="20170810 03:48:38.387" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:38.387" starttime="20170810 03:48:38.043" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:38.387" starttime="20170810 03:48:38.043" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:38.388" starttime="20170810 03:48:38.042" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:38.388">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 03:48:38.388" starttime="20170810 03:48:38.388" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:38.390">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:48:38.390" starttime="20170810 03:48:38.390" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:38.391">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:48:38.391" starttime="20170810 03:48:38.391" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:38.391" starttime="20170810 03:48:38.390" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:38.391" starttime="20170810 03:48:38.389" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:38.392" starttime="20170810 03:48:38.388" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:38.511">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:48:38.511">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:48:38.511" starttime="20170810 03:48:38.392" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:38.513">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:48:38.513" starttime="20170810 03:48:38.512" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:38.514">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:48:38.514" starttime="20170810 03:48:38.514" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:38.515" starttime="20170810 03:48:38.513" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:38.515" starttime="20170810 03:48:38.512" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:38.515" starttime="20170810 03:48:38.512" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:48:38.515">Delete All Sessions</msg>
<status endtime="20170810 03:48:38.515" starttime="20170810 03:48:38.515" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:48:38.515">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:48:38.515" starttime="20170810 03:48:38.042" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:38.516">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:48:38.516" starttime="20170810 03:48:38.516" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:38.517">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:48:38.517">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:48:38.517">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:48:38.517" starttime="20170810 03:48:38.516" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:48:38.517">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 03:48:38.517" starttime="20170810 03:48:38.041" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:48:38.517">${power_state} = On</msg>
<status endtime="20170810 03:48:38.517" starttime="20170810 03:48:38.041" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 03:48:38.518" starttime="20170810 03:48:38.518" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:38.518" starttime="20170810 03:48:38.040" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:38.521">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:48:38.522" starttime="20170810 03:48:38.521" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:38.522">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:48:38.522" starttime="20170810 03:48:38.522" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:38.523">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:48:38.523" starttime="20170810 03:48:38.523" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:38.524">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:48:38.524" starttime="20170810 03:48:38.523" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:38.884">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:48:38.884" starttime="20170810 03:48:38.524" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:48:38.884">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:48:38.884">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:48:38.884" starttime="20170810 03:48:38.524" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:38.885">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:48:38.885" starttime="20170810 03:48:38.885" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:38.886">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:48:38.886" starttime="20170810 03:48:38.885" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:38.886" starttime="20170810 03:48:38.521" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:38.886" starttime="20170810 03:48:38.520" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:38.886" starttime="20170810 03:48:38.520" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:38.887">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 03:48:38.887" starttime="20170810 03:48:38.886" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:38.889">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:48:38.889" starttime="20170810 03:48:38.888" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:38.890">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:48:38.890" starttime="20170810 03:48:38.890" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:38.890" starttime="20170810 03:48:38.889" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:38.890" starttime="20170810 03:48:38.887" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:38.890" starttime="20170810 03:48:38.887" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:39.140">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:48:39.141">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:48:39.141" starttime="20170810 03:48:38.891" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:39.143">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:48:39.143" starttime="20170810 03:48:39.142" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:39.143">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:48:39.144" starttime="20170810 03:48:39.143" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:39.144" starttime="20170810 03:48:39.143" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:39.144" starttime="20170810 03:48:39.142" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:39.144" starttime="20170810 03:48:39.141" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:48:39.144">Delete All Sessions</msg>
<status endtime="20170810 03:48:39.144" starttime="20170810 03:48:39.144" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:48:39.145">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:48:39.145" starttime="20170810 03:48:38.519" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:39.145">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:48:39.145" starttime="20170810 03:48:39.145" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:39.146">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:48:39.146">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:48:39.146">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:48:39.146" starttime="20170810 03:48:39.145" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:48:39.146">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 03:48:39.146" starttime="20170810 03:48:38.519" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:48:39.147">${host_state} = Running</msg>
<status endtime="20170810 03:48:39.147" starttime="20170810 03:48:38.518" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 03:48:39.147" starttime="20170810 03:48:39.147" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:39.152">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:48:39.152" starttime="20170810 03:48:39.151" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:39.153">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:48:39.153" starttime="20170810 03:48:39.153" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:39.154">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:48:39.154" starttime="20170810 03:48:39.153" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:39.155">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:48:39.155" starttime="20170810 03:48:39.154" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:39.738">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:48:39.738" starttime="20170810 03:48:39.156" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:48:39.739">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:48:39.739">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:48:39.739" starttime="20170810 03:48:39.155" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:39.739">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:48:39.739" starttime="20170810 03:48:39.739" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:39.740">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:48:39.740" starttime="20170810 03:48:39.740" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:39.740" starttime="20170810 03:48:39.150" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:39.740" starttime="20170810 03:48:39.150" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:39.740" starttime="20170810 03:48:39.149" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:39.741">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 03:48:39.741" starttime="20170810 03:48:39.741" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:39.743">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:48:39.743" starttime="20170810 03:48:39.742" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:39.744">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:48:39.744" starttime="20170810 03:48:39.744" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:39.744" starttime="20170810 03:48:39.743" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:39.744" starttime="20170810 03:48:39.742" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:39.745" starttime="20170810 03:48:39.741" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:40.100">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:48:40.100">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:48:40.100" starttime="20170810 03:48:39.745" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:40.102">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:48:40.102" starttime="20170810 03:48:40.101" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:40.103">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:48:40.103" starttime="20170810 03:48:40.102" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:40.103" starttime="20170810 03:48:40.102" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:40.103" starttime="20170810 03:48:40.101" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:40.103" starttime="20170810 03:48:40.100" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:48:40.104">Delete All Sessions</msg>
<status endtime="20170810 03:48:40.104" starttime="20170810 03:48:40.103" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:48:40.104">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:48:40.104" starttime="20170810 03:48:39.149" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:40.104">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:48:40.105" starttime="20170810 03:48:40.104" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:40.105">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:48:40.105">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:48:40.105">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:48:40.105" starttime="20170810 03:48:40.105" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:48:40.106">${state} = Off</msg>
<status endtime="20170810 03:48:40.106" starttime="20170810 03:48:39.148" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:48:40.106">${boot_progress} = Off</msg>
<status endtime="20170810 03:48:40.106" starttime="20170810 03:48:39.148" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:48:40.106">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 03:48:40.106" starttime="20170810 03:48:40.106" status="FAIL"></status>
</kw>
<status endtime="20170810 03:48:40.107" starttime="20170810 03:48:39.147" status="FAIL"></status>
</kw>
<status endtime="20170810 03:48:40.107" starttime="20170810 03:48:38.040" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:50.112">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:48:50.112" starttime="20170810 03:48:50.112" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:50.113">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:48:50.113" starttime="20170810 03:48:50.113" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:50.114">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:48:50.114" starttime="20170810 03:48:50.113" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:50.114">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:48:50.115" starttime="20170810 03:48:50.114" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:50.537">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:48:50.537" starttime="20170810 03:48:50.115" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:48:50.538">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:48:50.538">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:48:50.538" starttime="20170810 03:48:50.115" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:50.538">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:48:50.538" starttime="20170810 03:48:50.538" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:50.539">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:48:50.539" starttime="20170810 03:48:50.539" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:50.539" starttime="20170810 03:48:50.111" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:50.539" starttime="20170810 03:48:50.110" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:50.539" starttime="20170810 03:48:50.110" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:50.540">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 03:48:50.540" starttime="20170810 03:48:50.540" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:50.542">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:48:50.542" starttime="20170810 03:48:50.541" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:50.543">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:48:50.543" starttime="20170810 03:48:50.543" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:50.543" starttime="20170810 03:48:50.542" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:50.543" starttime="20170810 03:48:50.541" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:50.543" starttime="20170810 03:48:50.540" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:51.330">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:48:51.330">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:48:51.330" starttime="20170810 03:48:50.544" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:51.332">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:48:51.332" starttime="20170810 03:48:51.331" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:51.333">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:48:51.333" starttime="20170810 03:48:51.333" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:51.333" starttime="20170810 03:48:51.332" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:51.333" starttime="20170810 03:48:51.331" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:51.333" starttime="20170810 03:48:51.330" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:48:51.334">Delete All Sessions</msg>
<status endtime="20170810 03:48:51.334" starttime="20170810 03:48:51.334" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:48:51.334">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:48:51.334" starttime="20170810 03:48:50.109" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:51.335">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:48:51.335" starttime="20170810 03:48:51.334" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:51.335">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:48:51.335">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:48:51.336">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:48:51.336" starttime="20170810 03:48:51.335" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:48:51.336">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 03:48:51.336" starttime="20170810 03:48:50.109" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:48:51.336">${power_state} = On</msg>
<status endtime="20170810 03:48:51.336" starttime="20170810 03:48:50.108" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 03:48:51.337" starttime="20170810 03:48:51.336" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:51.337" starttime="20170810 03:48:50.108" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:51.340">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:48:51.341" starttime="20170810 03:48:51.340" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:51.341">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:48:51.341" starttime="20170810 03:48:51.341" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:51.342">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:48:51.342" starttime="20170810 03:48:51.341" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:51.342">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:48:51.343" starttime="20170810 03:48:51.342" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:51.747">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:48:51.747" starttime="20170810 03:48:51.343" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:48:51.748">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:48:51.748">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:48:51.748" starttime="20170810 03:48:51.343" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:51.748">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:48:51.748" starttime="20170810 03:48:51.748" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:51.749">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:48:51.749" starttime="20170810 03:48:51.749" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:51.749" starttime="20170810 03:48:51.339" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:51.749" starttime="20170810 03:48:51.339" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:51.749" starttime="20170810 03:48:51.338" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:51.750">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 03:48:51.750" starttime="20170810 03:48:51.750" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:51.752">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:48:51.753" starttime="20170810 03:48:51.751" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:51.753">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:48:51.754" starttime="20170810 03:48:51.753" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:51.754" starttime="20170810 03:48:51.753" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:51.754" starttime="20170810 03:48:51.751" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:51.754" starttime="20170810 03:48:51.750" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:52.456">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:48:52.457">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:48:52.457" starttime="20170810 03:48:51.754" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:52.458">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:48:52.458" starttime="20170810 03:48:52.458" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:52.459">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:48:52.459" starttime="20170810 03:48:52.459" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:52.459" starttime="20170810 03:48:52.459" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:52.460" starttime="20170810 03:48:52.457" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:52.460" starttime="20170810 03:48:52.457" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:48:52.460">Delete All Sessions</msg>
<status endtime="20170810 03:48:52.460" starttime="20170810 03:48:52.460" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:48:52.460">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:48:52.460" starttime="20170810 03:48:51.338" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:52.461">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:48:52.461" starttime="20170810 03:48:52.461" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:52.462">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:48:52.462">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:48:52.462">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:48:52.462" starttime="20170810 03:48:52.461" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:48:52.462">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 03:48:52.462" starttime="20170810 03:48:51.337" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:48:52.462">${host_state} = Running</msg>
<status endtime="20170810 03:48:52.462" starttime="20170810 03:48:51.337" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 03:48:52.463" starttime="20170810 03:48:52.463" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:52.467">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:48:52.467" starttime="20170810 03:48:52.466" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:52.468">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:48:52.468" starttime="20170810 03:48:52.467" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:52.468">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:48:52.468" starttime="20170810 03:48:52.468" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:52.469">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:48:52.469" starttime="20170810 03:48:52.469" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:52.861">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:48:52.861" starttime="20170810 03:48:52.470" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:48:52.861">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:48:52.861">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:48:52.861" starttime="20170810 03:48:52.469" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:52.862">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:48:52.862" starttime="20170810 03:48:52.862" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:52.863">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:48:52.863" starttime="20170810 03:48:52.862" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:52.863" starttime="20170810 03:48:52.466" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:52.863" starttime="20170810 03:48:52.465" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:52.863" starttime="20170810 03:48:52.465" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:52.864">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 03:48:52.864" starttime="20170810 03:48:52.863" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:52.866">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:48:52.866" starttime="20170810 03:48:52.865" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:52.867">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:48:52.867" starttime="20170810 03:48:52.866" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:52.867" starttime="20170810 03:48:52.866" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:52.867" starttime="20170810 03:48:52.864" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:52.867" starttime="20170810 03:48:52.864" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:53.323">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:48:53.323">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:48:53.324" starttime="20170810 03:48:52.867" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:53.325">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:48:53.325" starttime="20170810 03:48:53.325" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:53.326">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:48:53.326" starttime="20170810 03:48:53.326" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:53.326" starttime="20170810 03:48:53.325" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:53.327" starttime="20170810 03:48:53.324" status="PASS"></status>
</kw>
<status endtime="20170810 03:48:53.327" starttime="20170810 03:48:53.324" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:48:53.327">Delete All Sessions</msg>
<status endtime="20170810 03:48:53.327" starttime="20170810 03:48:53.327" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:48:53.327">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:48:53.327" starttime="20170810 03:48:52.464" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:48:53.328">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:48:53.328" starttime="20170810 03:48:53.328" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:48:53.329">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:48:53.329">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:48:53.329">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:48:53.329" starttime="20170810 03:48:53.328" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:48:53.329">${state} = Off</msg>
<status endtime="20170810 03:48:53.329" starttime="20170810 03:48:52.464" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:48:53.329">${boot_progress} = Off</msg>
<status endtime="20170810 03:48:53.329" starttime="20170810 03:48:52.463" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:48:53.330">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 03:48:53.330" starttime="20170810 03:48:53.330" status="FAIL"></status>
</kw>
<status endtime="20170810 03:48:53.330" starttime="20170810 03:48:52.463" status="FAIL"></status>
</kw>
<status endtime="20170810 03:48:53.330" starttime="20170810 03:48:50.107" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:03.336">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:49:03.336" starttime="20170810 03:49:03.335" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:03.337">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:49:03.337" starttime="20170810 03:49:03.336" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:03.337">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:49:03.337" starttime="20170810 03:49:03.337" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:03.338">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:49:03.338" starttime="20170810 03:49:03.338" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:03.761">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:49:03.761" starttime="20170810 03:49:03.339" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:03.761">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:49:03.761">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:49:03.761" starttime="20170810 03:49:03.338" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:03.762">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:49:03.762" starttime="20170810 03:49:03.762" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:03.763">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:49:03.763" starttime="20170810 03:49:03.762" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:03.763" starttime="20170810 03:49:03.335" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:03.763" starttime="20170810 03:49:03.334" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:03.763" starttime="20170810 03:49:03.333" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:03.764">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 03:49:03.764" starttime="20170810 03:49:03.763" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:03.766">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:49:03.766" starttime="20170810 03:49:03.765" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:03.767">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:49:03.767" starttime="20170810 03:49:03.766" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:03.767" starttime="20170810 03:49:03.766" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:03.767" starttime="20170810 03:49:03.764" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:03.767" starttime="20170810 03:49:03.764" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:05.032">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:49:05.033">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:49:05.033" starttime="20170810 03:49:03.767" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:05.039">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:49:05.039" starttime="20170810 03:49:05.034" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:05.040">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:49:05.040" starttime="20170810 03:49:05.040" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:05.040" starttime="20170810 03:49:05.039" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:05.040" starttime="20170810 03:49:05.034" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:05.040" starttime="20170810 03:49:05.033" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:49:05.041">Delete All Sessions</msg>
<status endtime="20170810 03:49:05.041" starttime="20170810 03:49:05.041" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:05.041">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:49:05.041" starttime="20170810 03:49:03.333" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:05.042">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:49:05.042" starttime="20170810 03:49:05.041" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:05.042">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:49:05.042">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:49:05.042">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:49:05.043" starttime="20170810 03:49:05.042" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:05.043">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 03:49:05.043" starttime="20170810 03:49:03.332" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:05.043">${power_state} = On</msg>
<status endtime="20170810 03:49:05.043" starttime="20170810 03:49:03.332" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 03:49:05.044" starttime="20170810 03:49:05.043" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:05.044" starttime="20170810 03:49:03.331" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:05.047">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:49:05.048" starttime="20170810 03:49:05.047" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:05.048">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:49:05.048" starttime="20170810 03:49:05.048" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:05.049">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:49:05.049" starttime="20170810 03:49:05.049" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:05.050">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:49:05.050" starttime="20170810 03:49:05.049" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:05.490">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:49:05.490" starttime="20170810 03:49:05.050" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:05.490">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:49:05.490">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:49:05.490" starttime="20170810 03:49:05.050" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:05.491">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:49:05.491" starttime="20170810 03:49:05.491" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:05.492">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:49:05.492" starttime="20170810 03:49:05.492" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:05.493" starttime="20170810 03:49:05.046" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:05.493" starttime="20170810 03:49:05.046" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:05.493" starttime="20170810 03:49:05.046" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:05.494">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 03:49:05.494" starttime="20170810 03:49:05.493" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:05.525">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:49:05.525" starttime="20170810 03:49:05.496" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:05.527">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:49:05.527" starttime="20170810 03:49:05.526" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:05.527" starttime="20170810 03:49:05.525" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:05.527" starttime="20170810 03:49:05.495" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:05.527" starttime="20170810 03:49:05.494" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:06.198">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:49:06.198">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:49:06.198" starttime="20170810 03:49:05.528" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:06.200">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:49:06.200" starttime="20170810 03:49:06.199" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:06.201">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:49:06.201" starttime="20170810 03:49:06.201" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:06.201" starttime="20170810 03:49:06.200" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:06.201" starttime="20170810 03:49:06.199" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:06.201" starttime="20170810 03:49:06.199" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:49:06.202">Delete All Sessions</msg>
<status endtime="20170810 03:49:06.202" starttime="20170810 03:49:06.202" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:06.202">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:49:06.202" starttime="20170810 03:49:05.045" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:06.203">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:49:06.203" starttime="20170810 03:49:06.202" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:06.203">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:49:06.203">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:49:06.203">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:49:06.203" starttime="20170810 03:49:06.203" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:06.204">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 03:49:06.204" starttime="20170810 03:49:05.044" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:06.204">${host_state} = Running</msg>
<status endtime="20170810 03:49:06.204" starttime="20170810 03:49:05.044" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 03:49:06.205" starttime="20170810 03:49:06.205" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:06.209">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:49:06.209" starttime="20170810 03:49:06.208" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:06.210">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:49:06.210" starttime="20170810 03:49:06.210" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:06.211">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:49:06.211" starttime="20170810 03:49:06.210" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:06.211">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:49:06.211" starttime="20170810 03:49:06.211" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:06.558">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:49:06.558" starttime="20170810 03:49:06.212" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:06.559">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:49:06.559">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:49:06.559" starttime="20170810 03:49:06.211" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:06.559">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:49:06.559" starttime="20170810 03:49:06.559" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:06.560">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:49:06.560" starttime="20170810 03:49:06.560" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:06.560" starttime="20170810 03:49:06.208" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:06.560" starttime="20170810 03:49:06.207" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:06.560" starttime="20170810 03:49:06.207" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:06.561">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 03:49:06.561" starttime="20170810 03:49:06.561" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:06.563">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:49:06.563" starttime="20170810 03:49:06.562" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:06.564">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:49:06.564" starttime="20170810 03:49:06.564" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:06.564" starttime="20170810 03:49:06.563" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:06.564" starttime="20170810 03:49:06.562" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:06.564" starttime="20170810 03:49:06.561" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:07.176">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:49:07.176">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:49:07.176" starttime="20170810 03:49:06.565" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:07.178">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:49:07.178" starttime="20170810 03:49:07.177" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:07.178">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:49:07.179" starttime="20170810 03:49:07.178" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:07.179" starttime="20170810 03:49:07.178" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:07.179" starttime="20170810 03:49:07.177" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:07.179" starttime="20170810 03:49:07.176" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:49:07.179">Delete All Sessions</msg>
<status endtime="20170810 03:49:07.179" starttime="20170810 03:49:07.179" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:07.179">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:49:07.180" starttime="20170810 03:49:06.206" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:07.180">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:49:07.180" starttime="20170810 03:49:07.180" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:07.181">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:49:07.181">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:49:07.181">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:49:07.181" starttime="20170810 03:49:07.180" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:07.181">${state} = Off</msg>
<status endtime="20170810 03:49:07.181" starttime="20170810 03:49:06.206" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:07.181">${boot_progress} = Off</msg>
<status endtime="20170810 03:49:07.181" starttime="20170810 03:49:06.205" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:49:07.182">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 03:49:07.182" starttime="20170810 03:49:07.182" status="FAIL"></status>
</kw>
<status endtime="20170810 03:49:07.182" starttime="20170810 03:49:06.205" status="FAIL"></status>
</kw>
<status endtime="20170810 03:49:07.182" starttime="20170810 03:49:03.331" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:17.187">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:49:17.188" starttime="20170810 03:49:17.187" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:17.188">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:49:17.188" starttime="20170810 03:49:17.188" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:17.189">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:49:17.189" starttime="20170810 03:49:17.189" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:17.190">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:49:17.190" starttime="20170810 03:49:17.189" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:17.553">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:49:17.553" starttime="20170810 03:49:17.190" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:17.553">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:49:17.553">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:49:17.553" starttime="20170810 03:49:17.190" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:17.554">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:49:17.554" starttime="20170810 03:49:17.553" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:17.554">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:49:17.555" starttime="20170810 03:49:17.554" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:17.555" starttime="20170810 03:49:17.187" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:17.555" starttime="20170810 03:49:17.186" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:17.555" starttime="20170810 03:49:17.186" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:17.555">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 03:49:17.555" starttime="20170810 03:49:17.555" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:17.558">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:49:17.558" starttime="20170810 03:49:17.557" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:17.559">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:49:17.559" starttime="20170810 03:49:17.559" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:17.559" starttime="20170810 03:49:17.558" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:17.559" starttime="20170810 03:49:17.556" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:17.559" starttime="20170810 03:49:17.556" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:17.981">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:49:17.982">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:49:17.982" starttime="20170810 03:49:17.560" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:17.983">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:49:17.983" starttime="20170810 03:49:17.983" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:17.984">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:49:17.984" starttime="20170810 03:49:17.984" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:17.985" starttime="20170810 03:49:17.984" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:17.985" starttime="20170810 03:49:17.982" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:17.985" starttime="20170810 03:49:17.982" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:49:17.985">Delete All Sessions</msg>
<status endtime="20170810 03:49:17.985" starttime="20170810 03:49:17.985" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:17.985">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:49:17.985" starttime="20170810 03:49:17.185" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:17.986">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:49:17.986" starttime="20170810 03:49:17.986" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:17.987">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:49:17.987">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:49:17.987">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:49:17.987" starttime="20170810 03:49:17.986" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:17.987">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 03:49:17.987" starttime="20170810 03:49:17.184" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:17.987">${power_state} = On</msg>
<status endtime="20170810 03:49:17.987" starttime="20170810 03:49:17.184" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 03:49:17.988" starttime="20170810 03:49:17.988" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:17.988" starttime="20170810 03:49:17.183" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:17.991">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:49:17.992" starttime="20170810 03:49:17.991" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:17.992">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:49:17.992" starttime="20170810 03:49:17.992" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:17.993">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:49:17.993" starttime="20170810 03:49:17.993" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:17.994">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:49:17.994" starttime="20170810 03:49:17.993" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:18.545">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:49:18.545" starttime="20170810 03:49:17.994" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:18.545">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:49:18.546">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:49:18.546" starttime="20170810 03:49:17.994" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:18.546">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:49:18.546" starttime="20170810 03:49:18.546" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:18.547">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:49:18.547" starttime="20170810 03:49:18.547" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:18.547" starttime="20170810 03:49:17.991" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:18.547" starttime="20170810 03:49:17.990" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:18.547" starttime="20170810 03:49:17.990" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:18.548">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 03:49:18.548" starttime="20170810 03:49:18.547" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:18.550">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:49:18.550" starttime="20170810 03:49:18.549" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:18.551">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:49:18.551" starttime="20170810 03:49:18.551" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:18.551" starttime="20170810 03:49:18.550" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:18.551" starttime="20170810 03:49:18.549" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:18.551" starttime="20170810 03:49:18.548" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:19.069">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:49:19.069">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:49:19.069" starttime="20170810 03:49:18.551" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:19.070">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:49:19.070" starttime="20170810 03:49:19.070" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:19.071">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:49:19.071" starttime="20170810 03:49:19.071" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:19.072" starttime="20170810 03:49:19.071" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:19.072" starttime="20170810 03:49:19.069" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:19.072" starttime="20170810 03:49:19.069" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:49:19.072">Delete All Sessions</msg>
<status endtime="20170810 03:49:19.072" starttime="20170810 03:49:19.072" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:19.072">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:49:19.072" starttime="20170810 03:49:17.989" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:19.073">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:49:19.073" starttime="20170810 03:49:19.073" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:19.074">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:49:19.074">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:49:19.074">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:49:19.074" starttime="20170810 03:49:19.073" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:19.074">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 03:49:19.074" starttime="20170810 03:49:17.989" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:19.074">${host_state} = Running</msg>
<status endtime="20170810 03:49:19.074" starttime="20170810 03:49:17.988" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 03:49:19.075" starttime="20170810 03:49:19.075" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:19.079">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:49:19.079" starttime="20170810 03:49:19.079" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:19.080">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:49:19.080" starttime="20170810 03:49:19.080" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:19.081">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:49:19.081" starttime="20170810 03:49:19.080" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:19.081">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:49:19.081" starttime="20170810 03:49:19.081" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:19.452">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:49:19.452" starttime="20170810 03:49:19.082" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:19.452">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:49:19.453">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:49:19.453" starttime="20170810 03:49:19.082" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:19.453">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:49:19.453" starttime="20170810 03:49:19.453" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:19.454">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:49:19.454" starttime="20170810 03:49:19.453" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:19.454" starttime="20170810 03:49:19.078" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:19.454" starttime="20170810 03:49:19.078" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:19.454" starttime="20170810 03:49:19.077" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:19.455">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 03:49:19.455" starttime="20170810 03:49:19.454" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:19.457">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:49:19.457" starttime="20170810 03:49:19.456" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:19.458">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:49:19.458" starttime="20170810 03:49:19.457" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:19.458" starttime="20170810 03:49:19.457" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:19.458" starttime="20170810 03:49:19.456" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:19.458" starttime="20170810 03:49:19.455" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:20.034">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:49:20.034">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:49:20.034" starttime="20170810 03:49:19.458" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:20.035">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:49:20.036" starttime="20170810 03:49:20.035" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:20.037">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:49:20.037" starttime="20170810 03:49:20.036" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:20.037" starttime="20170810 03:49:20.036" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:20.037" starttime="20170810 03:49:20.035" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:20.037" starttime="20170810 03:49:20.034" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:49:20.037">Delete All Sessions</msg>
<status endtime="20170810 03:49:20.038" starttime="20170810 03:49:20.037" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:20.038">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:49:20.038" starttime="20170810 03:49:19.076" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:20.038">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:49:20.038" starttime="20170810 03:49:20.038" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:20.039">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:49:20.039">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:49:20.039">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:49:20.039" starttime="20170810 03:49:20.039" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:20.039">${state} = Off</msg>
<status endtime="20170810 03:49:20.039" starttime="20170810 03:49:19.076" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:20.040">${boot_progress} = Off</msg>
<status endtime="20170810 03:49:20.040" starttime="20170810 03:49:19.075" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:49:20.040">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 03:49:20.040" starttime="20170810 03:49:20.040" status="FAIL"></status>
</kw>
<status endtime="20170810 03:49:20.041" starttime="20170810 03:49:19.075" status="FAIL"></status>
</kw>
<status endtime="20170810 03:49:20.041" starttime="20170810 03:49:17.183" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:30.045">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:49:30.046" starttime="20170810 03:49:30.045" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:30.046">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:49:30.046" starttime="20170810 03:49:30.046" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:30.047">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:49:30.047" starttime="20170810 03:49:30.046" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:30.047">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:49:30.047" starttime="20170810 03:49:30.047" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:30.367">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:49:30.367" starttime="20170810 03:49:30.048" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:30.367">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:49:30.367">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:49:30.367" starttime="20170810 03:49:30.048" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:30.368">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:49:30.368" starttime="20170810 03:49:30.367" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:30.368">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:49:30.369" starttime="20170810 03:49:30.368" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:30.369" starttime="20170810 03:49:30.044" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:30.369" starttime="20170810 03:49:30.044" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:30.369" starttime="20170810 03:49:30.043" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:30.369">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 03:49:30.369" starttime="20170810 03:49:30.369" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:30.371">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:49:30.371" starttime="20170810 03:49:30.371" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:30.372">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:49:30.372" starttime="20170810 03:49:30.372" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:30.373" starttime="20170810 03:49:30.372" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:30.373" starttime="20170810 03:49:30.370" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:30.373" starttime="20170810 03:49:30.370" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:30.847">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:49:30.847">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:49:30.847" starttime="20170810 03:49:30.373" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:30.849">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:49:30.849" starttime="20170810 03:49:30.848" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:30.850">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:49:30.850" starttime="20170810 03:49:30.849" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:30.850" starttime="20170810 03:49:30.849" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:30.850" starttime="20170810 03:49:30.848" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:30.850" starttime="20170810 03:49:30.847" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:49:30.850">Delete All Sessions</msg>
<status endtime="20170810 03:49:30.850" starttime="20170810 03:49:30.850" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:30.851">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:49:30.851" starttime="20170810 03:49:30.043" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:30.851">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:49:30.851" starttime="20170810 03:49:30.851" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:30.852">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:49:30.852">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:49:30.852">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:49:30.852" starttime="20170810 03:49:30.852" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:30.852">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 03:49:30.852" starttime="20170810 03:49:30.042" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:30.853">${power_state} = On</msg>
<status endtime="20170810 03:49:30.853" starttime="20170810 03:49:30.042" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 03:49:30.853" starttime="20170810 03:49:30.853" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:30.853" starttime="20170810 03:49:30.041" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:30.857">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:49:30.858" starttime="20170810 03:49:30.857" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:30.858">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:49:30.858" starttime="20170810 03:49:30.858" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:30.859">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:49:30.859" starttime="20170810 03:49:30.858" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:30.859">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:49:30.859" starttime="20170810 03:49:30.859" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:31.265">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:49:31.265" starttime="20170810 03:49:30.860" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:31.265">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:49:31.265">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:49:31.265" starttime="20170810 03:49:30.860" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:31.266">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:49:31.266" starttime="20170810 03:49:31.266" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:31.267">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:49:31.267" starttime="20170810 03:49:31.266" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:31.267" starttime="20170810 03:49:30.856" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:31.267" starttime="20170810 03:49:30.856" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:31.267" starttime="20170810 03:49:30.855" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:31.268">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 03:49:31.268" starttime="20170810 03:49:31.267" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:31.270">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:49:31.270" starttime="20170810 03:49:31.269" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:31.271">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:49:31.271" starttime="20170810 03:49:31.270" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:31.271" starttime="20170810 03:49:31.270" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:31.271" starttime="20170810 03:49:31.268" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:31.271" starttime="20170810 03:49:31.268" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:31.898">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:49:31.898">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:49:31.899" starttime="20170810 03:49:31.271" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:31.900">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:49:31.900" starttime="20170810 03:49:31.900" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:31.901">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:49:31.901" starttime="20170810 03:49:31.901" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:31.901" starttime="20170810 03:49:31.900" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:31.901" starttime="20170810 03:49:31.899" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:31.901" starttime="20170810 03:49:31.899" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:49:31.902">Delete All Sessions</msg>
<status endtime="20170810 03:49:31.902" starttime="20170810 03:49:31.902" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:31.902">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:49:31.902" starttime="20170810 03:49:30.854" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:31.903">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:49:31.903" starttime="20170810 03:49:31.902" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:31.903">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:49:31.903">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:49:31.903">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:49:31.904" starttime="20170810 03:49:31.903" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:31.904">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 03:49:31.904" starttime="20170810 03:49:30.854" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:31.904">${host_state} = Running</msg>
<status endtime="20170810 03:49:31.904" starttime="20170810 03:49:30.854" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 03:49:31.905" starttime="20170810 03:49:31.904" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:31.909">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:49:31.909" starttime="20170810 03:49:31.908" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:31.910">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:49:31.910" starttime="20170810 03:49:31.909" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:31.910">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:49:31.910" starttime="20170810 03:49:31.910" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:31.911">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:49:31.911" starttime="20170810 03:49:31.911" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:32.587">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:49:32.588" starttime="20170810 03:49:31.912" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:32.588">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:49:32.588">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:49:32.588" starttime="20170810 03:49:31.911" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:32.588">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:49:32.588" starttime="20170810 03:49:32.588" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:32.589">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:49:32.589" starttime="20170810 03:49:32.589" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:32.589" starttime="20170810 03:49:31.908" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:32.589" starttime="20170810 03:49:31.907" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:32.589" starttime="20170810 03:49:31.907" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:32.590">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 03:49:32.590" starttime="20170810 03:49:32.590" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:32.592">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:49:32.592" starttime="20170810 03:49:32.591" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:32.593">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:49:32.593" starttime="20170810 03:49:32.593" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:32.593" starttime="20170810 03:49:32.592" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:32.594" starttime="20170810 03:49:32.591" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:32.594" starttime="20170810 03:49:32.590" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:32.944">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:49:32.944">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:49:32.944" starttime="20170810 03:49:32.594" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:32.946">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:49:32.946" starttime="20170810 03:49:32.945" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:32.947">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:49:32.947" starttime="20170810 03:49:32.947" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:32.947" starttime="20170810 03:49:32.946" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:32.947" starttime="20170810 03:49:32.945" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:32.947" starttime="20170810 03:49:32.945" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:49:32.948">Delete All Sessions</msg>
<status endtime="20170810 03:49:32.948" starttime="20170810 03:49:32.947" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:32.948">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:49:32.948" starttime="20170810 03:49:31.906" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:32.948">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:49:32.949" starttime="20170810 03:49:32.948" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:32.949">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:49:32.949">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:49:32.949">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:49:32.949" starttime="20170810 03:49:32.949" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:32.950">${state} = Off</msg>
<status endtime="20170810 03:49:32.950" starttime="20170810 03:49:31.906" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:32.950">${boot_progress} = Off</msg>
<status endtime="20170810 03:49:32.950" starttime="20170810 03:49:31.905" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:49:32.950">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 03:49:32.950" starttime="20170810 03:49:32.950" status="FAIL"></status>
</kw>
<status endtime="20170810 03:49:32.951" starttime="20170810 03:49:31.905" status="FAIL"></status>
</kw>
<status endtime="20170810 03:49:32.951" starttime="20170810 03:49:30.041" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:42.955">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:49:42.956" starttime="20170810 03:49:42.955" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:42.956">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:49:42.956" starttime="20170810 03:49:42.956" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:42.957">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:49:42.957" starttime="20170810 03:49:42.956" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:42.957">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:49:42.957" starttime="20170810 03:49:42.957" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:43.524">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:49:43.524" starttime="20170810 03:49:42.959" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:43.524">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:49:43.524">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:49:43.524" starttime="20170810 03:49:42.958" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:43.525">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:49:43.525" starttime="20170810 03:49:43.525" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:43.526">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:49:43.526" starttime="20170810 03:49:43.525" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:43.526" starttime="20170810 03:49:42.954" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:43.526" starttime="20170810 03:49:42.954" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:43.526" starttime="20170810 03:49:42.953" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:43.527">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 03:49:43.527" starttime="20170810 03:49:43.526" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:43.529">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:49:43.529" starttime="20170810 03:49:43.528" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:43.530">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:49:43.530" starttime="20170810 03:49:43.529" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:43.530" starttime="20170810 03:49:43.529" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:43.530" starttime="20170810 03:49:43.527" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:43.530" starttime="20170810 03:49:43.527" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:43.760">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:49:43.760">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:49:43.760" starttime="20170810 03:49:43.530" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:43.762">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:49:43.762" starttime="20170810 03:49:43.761" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:43.763">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:49:43.763" starttime="20170810 03:49:43.763" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:43.763" starttime="20170810 03:49:43.762" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:43.763" starttime="20170810 03:49:43.761" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:43.763" starttime="20170810 03:49:43.760" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:49:43.764">Delete All Sessions</msg>
<status endtime="20170810 03:49:43.764" starttime="20170810 03:49:43.763" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:43.764">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:49:43.764" starttime="20170810 03:49:42.953" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:43.765">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:49:43.765" starttime="20170810 03:49:43.764" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:43.765">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:49:43.765">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:49:43.765">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:49:43.766" starttime="20170810 03:49:43.765" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:43.766">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 03:49:43.766" starttime="20170810 03:49:42.952" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:43.766">${power_state} = On</msg>
<status endtime="20170810 03:49:43.766" starttime="20170810 03:49:42.952" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 03:49:43.767" starttime="20170810 03:49:43.767" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:43.767" starttime="20170810 03:49:42.952" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:43.775">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:49:43.775" starttime="20170810 03:49:43.774" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:43.776">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:49:43.776" starttime="20170810 03:49:43.775" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:43.777">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:49:43.777" starttime="20170810 03:49:43.776" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:43.777">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:49:43.777" starttime="20170810 03:49:43.777" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:44.069">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:49:44.069" starttime="20170810 03:49:43.778" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:44.069">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:49:44.069">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:49:44.069" starttime="20170810 03:49:43.777" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:44.070">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:49:44.070" starttime="20170810 03:49:44.070" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:44.071">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:49:44.071" starttime="20170810 03:49:44.070" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:44.071" starttime="20170810 03:49:43.770" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:44.071" starttime="20170810 03:49:43.769" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:44.071" starttime="20170810 03:49:43.769" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:44.072">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 03:49:44.072" starttime="20170810 03:49:44.071" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:44.074">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:49:44.074" starttime="20170810 03:49:44.073" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:44.075">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:49:44.075" starttime="20170810 03:49:44.075" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:44.075" starttime="20170810 03:49:44.074" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:44.075" starttime="20170810 03:49:44.072" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:44.075" starttime="20170810 03:49:44.072" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:44.200">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:49:44.200">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:49:44.200" starttime="20170810 03:49:44.076" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:44.202">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:49:44.202" starttime="20170810 03:49:44.202" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:44.203">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:49:44.204" starttime="20170810 03:49:44.203" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:44.204" starttime="20170810 03:49:44.202" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:44.204" starttime="20170810 03:49:44.201" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:44.204" starttime="20170810 03:49:44.201" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:49:44.204">Delete All Sessions</msg>
<status endtime="20170810 03:49:44.204" starttime="20170810 03:49:44.204" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:44.205">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:49:44.205" starttime="20170810 03:49:43.768" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:44.205">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:49:44.205" starttime="20170810 03:49:44.205" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:44.206">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:49:44.206">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:49:44.206">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:49:44.206" starttime="20170810 03:49:44.206" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:44.206">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 03:49:44.206" starttime="20170810 03:49:43.768" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:44.207">${host_state} = Running</msg>
<status endtime="20170810 03:49:44.207" starttime="20170810 03:49:43.767" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 03:49:44.207" starttime="20170810 03:49:44.207" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:44.211">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:49:44.212" starttime="20170810 03:49:44.211" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:44.212">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:49:44.212" starttime="20170810 03:49:44.212" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:44.213">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:49:44.213" starttime="20170810 03:49:44.212" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:44.213">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:49:44.213" starttime="20170810 03:49:44.213" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:44.452">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:49:44.452" starttime="20170810 03:49:44.214" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:44.452">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:49:44.452">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:49:44.452" starttime="20170810 03:49:44.214" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:44.453">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:49:44.453" starttime="20170810 03:49:44.452" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:44.454">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:49:44.454" starttime="20170810 03:49:44.453" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:44.454" starttime="20170810 03:49:44.210" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:44.454" starttime="20170810 03:49:44.210" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:44.454" starttime="20170810 03:49:44.209" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:44.455">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 03:49:44.455" starttime="20170810 03:49:44.454" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:44.457">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:49:44.457" starttime="20170810 03:49:44.456" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:44.458">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:49:44.458" starttime="20170810 03:49:44.458" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:44.458" starttime="20170810 03:49:44.457" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:44.458" starttime="20170810 03:49:44.456" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:44.458" starttime="20170810 03:49:44.455" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:44.554">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:49:44.554">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:49:44.554" starttime="20170810 03:49:44.458" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:44.556">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:49:44.556" starttime="20170810 03:49:44.556" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:44.557">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:49:44.557" starttime="20170810 03:49:44.557" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:44.557" starttime="20170810 03:49:44.556" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:44.557" starttime="20170810 03:49:44.555" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:44.557" starttime="20170810 03:49:44.555" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:49:44.558">Delete All Sessions</msg>
<status endtime="20170810 03:49:44.558" starttime="20170810 03:49:44.558" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:44.558">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:49:44.558" starttime="20170810 03:49:44.209" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:44.559">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:49:44.559" starttime="20170810 03:49:44.558" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:44.559">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:49:44.559">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:49:44.559">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:49:44.559" starttime="20170810 03:49:44.559" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:44.560">${state} = Off</msg>
<status endtime="20170810 03:49:44.560" starttime="20170810 03:49:44.208" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:44.560">${boot_progress} = Off</msg>
<status endtime="20170810 03:49:44.560" starttime="20170810 03:49:44.208" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:49:44.561">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 03:49:44.561" starttime="20170810 03:49:44.560" status="FAIL"></status>
</kw>
<status endtime="20170810 03:49:44.561" starttime="20170810 03:49:44.207" status="FAIL"></status>
</kw>
<status endtime="20170810 03:49:44.561" starttime="20170810 03:49:42.951" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:54.566">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:49:54.567" starttime="20170810 03:49:54.566" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:54.567">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:49:54.567" starttime="20170810 03:49:54.567" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:54.568">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:49:54.568" starttime="20170810 03:49:54.567" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:54.568">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:49:54.568" starttime="20170810 03:49:54.568" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:54.810">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:49:54.810" starttime="20170810 03:49:54.569" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:54.810">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:49:54.810">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:49:54.810" starttime="20170810 03:49:54.569" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:54.811">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:49:54.811" starttime="20170810 03:49:54.810" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:54.811">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:49:54.812" starttime="20170810 03:49:54.811" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:54.812" starttime="20170810 03:49:54.565" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:54.812" starttime="20170810 03:49:54.564" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:54.812" starttime="20170810 03:49:54.564" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:54.812">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 03:49:54.812" starttime="20170810 03:49:54.812" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:54.814">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:49:54.814" starttime="20170810 03:49:54.814" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:54.815">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:49:54.815" starttime="20170810 03:49:54.815" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:54.816" starttime="20170810 03:49:54.815" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:54.816" starttime="20170810 03:49:54.813" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:54.816" starttime="20170810 03:49:54.813" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:54.881">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:49:54.882">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:49:54.882" starttime="20170810 03:49:54.816" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:54.883">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:49:54.883" starttime="20170810 03:49:54.883" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:54.884">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:49:54.885" starttime="20170810 03:49:54.884" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:54.885" starttime="20170810 03:49:54.883" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:54.885" starttime="20170810 03:49:54.882" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:54.885" starttime="20170810 03:49:54.882" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:49:54.885">Delete All Sessions</msg>
<status endtime="20170810 03:49:54.885" starttime="20170810 03:49:54.885" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:54.886">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:49:54.886" starttime="20170810 03:49:54.563" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:54.886">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:49:54.886" starttime="20170810 03:49:54.886" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:54.887">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:49:54.887">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:49:54.887">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:49:54.887" starttime="20170810 03:49:54.886" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:54.887">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 03:49:54.887" starttime="20170810 03:49:54.563" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:54.887">${power_state} = On</msg>
<status endtime="20170810 03:49:54.888" starttime="20170810 03:49:54.562" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 03:49:54.888" starttime="20170810 03:49:54.888" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:54.888" starttime="20170810 03:49:54.562" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:54.892">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:49:54.892" starttime="20170810 03:49:54.891" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:54.892">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:49:54.893" starttime="20170810 03:49:54.892" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:54.893">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:49:54.893" starttime="20170810 03:49:54.893" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:54.894">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:49:54.894" starttime="20170810 03:49:54.893" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:55.079">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:49:55.079" starttime="20170810 03:49:54.894" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:55.079">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:49:55.080">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:49:55.080" starttime="20170810 03:49:54.894" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:55.080">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:49:55.080" starttime="20170810 03:49:55.080" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:55.081">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:49:55.081" starttime="20170810 03:49:55.080" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:55.081" starttime="20170810 03:49:54.891" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:55.081" starttime="20170810 03:49:54.890" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:55.081" starttime="20170810 03:49:54.890" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:55.082">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 03:49:55.082" starttime="20170810 03:49:55.081" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:55.084">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:49:55.084" starttime="20170810 03:49:55.083" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:55.085">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:49:55.085" starttime="20170810 03:49:55.085" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:55.085" starttime="20170810 03:49:55.084" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:55.085" starttime="20170810 03:49:55.083" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:55.086" starttime="20170810 03:49:55.082" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:55.200">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:49:55.200">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:49:55.200" starttime="20170810 03:49:55.086" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:55.201">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:49:55.201" starttime="20170810 03:49:55.201" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:55.202">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:49:55.202" starttime="20170810 03:49:55.202" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:55.203" starttime="20170810 03:49:55.202" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:55.203" starttime="20170810 03:49:55.201" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:55.203" starttime="20170810 03:49:55.200" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:49:55.203">Delete All Sessions</msg>
<status endtime="20170810 03:49:55.203" starttime="20170810 03:49:55.203" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:55.203">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:49:55.203" starttime="20170810 03:49:54.889" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:55.204">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:49:55.204" starttime="20170810 03:49:55.204" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:55.205">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:49:55.205">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:49:55.205">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:49:55.205" starttime="20170810 03:49:55.204" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:55.205">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 03:49:55.205" starttime="20170810 03:49:54.889" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:55.205">${host_state} = Running</msg>
<status endtime="20170810 03:49:55.205" starttime="20170810 03:49:54.888" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 03:49:55.206" starttime="20170810 03:49:55.206" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:55.210">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:49:55.210" starttime="20170810 03:49:55.209" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:55.211">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:49:55.211" starttime="20170810 03:49:55.210" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:55.211">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:49:55.211" starttime="20170810 03:49:55.211" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:55.212">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:49:55.212" starttime="20170810 03:49:55.212" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:55.387">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:49:55.387" starttime="20170810 03:49:55.213" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:55.387">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:49:55.387">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:49:55.387" starttime="20170810 03:49:55.212" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:55.388">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:49:55.388" starttime="20170810 03:49:55.388" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:55.389">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:49:55.389" starttime="20170810 03:49:55.388" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:55.389" starttime="20170810 03:49:55.209" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:55.389" starttime="20170810 03:49:55.209" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:55.389" starttime="20170810 03:49:55.208" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:55.390">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 03:49:55.390" starttime="20170810 03:49:55.389" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:55.392">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:49:55.392" starttime="20170810 03:49:55.391" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:55.392">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:49:55.393" starttime="20170810 03:49:55.392" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:55.393" starttime="20170810 03:49:55.392" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:55.393" starttime="20170810 03:49:55.390" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:55.393" starttime="20170810 03:49:55.390" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:55.476">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:49:55.476">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:49:55.476" starttime="20170810 03:49:55.393" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:55.478">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:49:55.478" starttime="20170810 03:49:55.477" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:55.479">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:49:55.479" starttime="20170810 03:49:55.479" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:55.479" starttime="20170810 03:49:55.478" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:55.479" starttime="20170810 03:49:55.477" status="PASS"></status>
</kw>
<status endtime="20170810 03:49:55.479" starttime="20170810 03:49:55.476" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:49:55.480">Delete All Sessions</msg>
<status endtime="20170810 03:49:55.480" starttime="20170810 03:49:55.479" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:55.480">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:49:55.480" starttime="20170810 03:49:55.207" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:49:55.480">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:49:55.481" starttime="20170810 03:49:55.480" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:49:55.481">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:49:55.481">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:49:55.481">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:49:55.481" starttime="20170810 03:49:55.481" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:55.481">${state} = Off</msg>
<status endtime="20170810 03:49:55.482" starttime="20170810 03:49:55.207" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:49:55.482">${boot_progress} = Off</msg>
<status endtime="20170810 03:49:55.482" starttime="20170810 03:49:55.206" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:49:55.482">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 03:49:55.482" starttime="20170810 03:49:55.482" status="FAIL"></status>
</kw>
<status endtime="20170810 03:49:55.483" starttime="20170810 03:49:55.206" status="FAIL"></status>
</kw>
<status endtime="20170810 03:49:55.483" starttime="20170810 03:49:54.561" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:05.488">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:50:05.489" starttime="20170810 03:50:05.488" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:05.489">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:50:05.489" starttime="20170810 03:50:05.489" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:05.490">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:50:05.490" starttime="20170810 03:50:05.490" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:05.491">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:50:05.491" starttime="20170810 03:50:05.490" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:05.722">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:50:05.723" starttime="20170810 03:50:05.491" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:05.723">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:50:05.723">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:50:05.723" starttime="20170810 03:50:05.491" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:05.724">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:50:05.724" starttime="20170810 03:50:05.723" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:05.724">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:50:05.724" starttime="20170810 03:50:05.724" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:05.725" starttime="20170810 03:50:05.487" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:05.725" starttime="20170810 03:50:05.487" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:05.725" starttime="20170810 03:50:05.486" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:05.725">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 03:50:05.725" starttime="20170810 03:50:05.725" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:05.728">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:50:05.728" starttime="20170810 03:50:05.727" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:05.728">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:50:05.729" starttime="20170810 03:50:05.728" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:05.729" starttime="20170810 03:50:05.728" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:05.729" starttime="20170810 03:50:05.726" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:05.729" starttime="20170810 03:50:05.726" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:05.894">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:50:05.894">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:50:05.894" starttime="20170810 03:50:05.729" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:05.896">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:50:05.896" starttime="20170810 03:50:05.896" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:05.897">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:50:05.897" starttime="20170810 03:50:05.897" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:05.898" starttime="20170810 03:50:05.897" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:05.898" starttime="20170810 03:50:05.895" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:05.898" starttime="20170810 03:50:05.895" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:50:05.898">Delete All Sessions</msg>
<status endtime="20170810 03:50:05.898" starttime="20170810 03:50:05.898" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:05.898">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:50:05.898" starttime="20170810 03:50:05.485" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:05.899">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:50:05.899" starttime="20170810 03:50:05.899" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:05.900">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:50:05.900">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:50:05.900">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:50:05.900" starttime="20170810 03:50:05.899" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:05.900">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 03:50:05.900" starttime="20170810 03:50:05.485" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:05.900">${power_state} = On</msg>
<status endtime="20170810 03:50:05.901" starttime="20170810 03:50:05.484" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 03:50:05.901" starttime="20170810 03:50:05.901" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:05.901" starttime="20170810 03:50:05.484" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:05.905">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:50:05.905" starttime="20170810 03:50:05.904" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:05.906">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:50:05.906" starttime="20170810 03:50:05.905" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:05.906">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:50:05.906" starttime="20170810 03:50:05.906" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:05.907">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:50:05.907" starttime="20170810 03:50:05.907" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:06.093">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:50:06.093" starttime="20170810 03:50:05.908" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:06.093">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:50:06.093">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:50:06.093" starttime="20170810 03:50:05.907" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:06.094">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:50:06.094" starttime="20170810 03:50:06.093" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:06.094">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:50:06.094" starttime="20170810 03:50:06.094" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:06.095" starttime="20170810 03:50:05.904" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:06.095" starttime="20170810 03:50:05.903" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:06.095" starttime="20170810 03:50:05.903" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:06.095">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 03:50:06.095" starttime="20170810 03:50:06.095" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:06.098">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:50:06.098" starttime="20170810 03:50:06.097" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:06.099">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:50:06.099" starttime="20170810 03:50:06.099" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:06.099" starttime="20170810 03:50:06.098" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:06.099" starttime="20170810 03:50:06.096" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:06.099" starttime="20170810 03:50:06.096" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:06.189">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:50:06.189">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:50:06.189" starttime="20170810 03:50:06.100" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:06.190">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:50:06.190" starttime="20170810 03:50:06.190" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:06.191">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:50:06.191" starttime="20170810 03:50:06.191" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:06.192" starttime="20170810 03:50:06.191" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:06.192" starttime="20170810 03:50:06.189" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:06.192" starttime="20170810 03:50:06.189" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:50:06.192">Delete All Sessions</msg>
<status endtime="20170810 03:50:06.192" starttime="20170810 03:50:06.192" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:06.192">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:50:06.192" starttime="20170810 03:50:05.902" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:06.193">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:50:06.193" starttime="20170810 03:50:06.193" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:06.194">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:50:06.194">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:50:06.194">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:50:06.194" starttime="20170810 03:50:06.193" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:06.194">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 03:50:06.194" starttime="20170810 03:50:05.902" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:06.194">${host_state} = Running</msg>
<status endtime="20170810 03:50:06.194" starttime="20170810 03:50:05.901" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 03:50:06.195" starttime="20170810 03:50:06.195" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:06.199">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:50:06.199" starttime="20170810 03:50:06.198" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:06.200">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:50:06.200" starttime="20170810 03:50:06.199" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:06.200">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:50:06.200" starttime="20170810 03:50:06.200" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:06.201">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:50:06.201" starttime="20170810 03:50:06.201" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:06.381">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:50:06.381" starttime="20170810 03:50:06.202" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:06.382">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:50:06.382">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:50:06.382" starttime="20170810 03:50:06.201" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:06.382">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:50:06.382" starttime="20170810 03:50:06.382" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:06.383">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:50:06.383" starttime="20170810 03:50:06.383" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:06.383" starttime="20170810 03:50:06.198" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:06.383" starttime="20170810 03:50:06.198" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:06.383" starttime="20170810 03:50:06.197" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:06.384">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 03:50:06.384" starttime="20170810 03:50:06.384" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:06.386">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:50:06.386" starttime="20170810 03:50:06.385" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:06.387">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:50:06.387" starttime="20170810 03:50:06.387" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:06.387" starttime="20170810 03:50:06.386" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:06.387" starttime="20170810 03:50:06.385" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:06.387" starttime="20170810 03:50:06.384" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:06.458">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:50:06.458">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:50:06.458" starttime="20170810 03:50:06.388" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:06.459">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:50:06.459" starttime="20170810 03:50:06.459" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:06.460">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:50:06.460" starttime="20170810 03:50:06.460" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:06.461" starttime="20170810 03:50:06.460" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:06.461" starttime="20170810 03:50:06.458" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:06.461" starttime="20170810 03:50:06.458" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:50:06.461">Delete All Sessions</msg>
<status endtime="20170810 03:50:06.461" starttime="20170810 03:50:06.461" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:06.461">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:50:06.461" starttime="20170810 03:50:06.196" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:06.462">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:50:06.462" starttime="20170810 03:50:06.462" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:06.463">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:50:06.463">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:50:06.463">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:50:06.463" starttime="20170810 03:50:06.462" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:06.463">${state} = Off</msg>
<status endtime="20170810 03:50:06.463" starttime="20170810 03:50:06.196" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:06.463">${boot_progress} = Off</msg>
<status endtime="20170810 03:50:06.463" starttime="20170810 03:50:06.195" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:50:06.464">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 03:50:06.464" starttime="20170810 03:50:06.464" status="FAIL"></status>
</kw>
<status endtime="20170810 03:50:06.464" starttime="20170810 03:50:06.195" status="FAIL"></status>
</kw>
<status endtime="20170810 03:50:06.464" starttime="20170810 03:50:05.483" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:16.470">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:50:16.470" starttime="20170810 03:50:16.469" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:16.471">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:50:16.471" starttime="20170810 03:50:16.470" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:16.471">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:50:16.471" starttime="20170810 03:50:16.471" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:16.472">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:50:16.472" starttime="20170810 03:50:16.471" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:16.707">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:50:16.707" starttime="20170810 03:50:16.473" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:16.707">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:50:16.707">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:50:16.707" starttime="20170810 03:50:16.472" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:16.708">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:50:16.708" starttime="20170810 03:50:16.707" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:16.708">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:50:16.708" starttime="20170810 03:50:16.708" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:16.709" starttime="20170810 03:50:16.469" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:16.709" starttime="20170810 03:50:16.468" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:16.709" starttime="20170810 03:50:16.467" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:16.709">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 03:50:16.709" starttime="20170810 03:50:16.709" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:16.711">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:50:16.711" starttime="20170810 03:50:16.711" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:16.712">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:50:16.712" starttime="20170810 03:50:16.712" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:16.713" starttime="20170810 03:50:16.712" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:16.713" starttime="20170810 03:50:16.710" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:16.713" starttime="20170810 03:50:16.710" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:16.776">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:50:16.776">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:50:16.776" starttime="20170810 03:50:16.713" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:16.782">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:50:16.782" starttime="20170810 03:50:16.777" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:16.783">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:50:16.783" starttime="20170810 03:50:16.783" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:16.783" starttime="20170810 03:50:16.782" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:16.783" starttime="20170810 03:50:16.777" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:16.784" starttime="20170810 03:50:16.776" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:50:16.784">Delete All Sessions</msg>
<status endtime="20170810 03:50:16.784" starttime="20170810 03:50:16.784" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:16.784">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:50:16.784" starttime="20170810 03:50:16.467" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:16.785">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:50:16.785" starttime="20170810 03:50:16.785" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:16.785">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:50:16.786">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:50:16.786">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:50:16.786" starttime="20170810 03:50:16.785" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:16.786">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 03:50:16.786" starttime="20170810 03:50:16.466" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:16.786">${power_state} = On</msg>
<status endtime="20170810 03:50:16.786" starttime="20170810 03:50:16.466" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 03:50:16.787" starttime="20170810 03:50:16.787" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:16.787" starttime="20170810 03:50:16.465" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:16.790">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:50:16.791" starttime="20170810 03:50:16.790" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:16.791">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:50:16.791" starttime="20170810 03:50:16.791" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:16.792">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:50:16.792" starttime="20170810 03:50:16.792" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:16.793">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:50:16.793" starttime="20170810 03:50:16.792" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:16.979">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:50:16.979" starttime="20170810 03:50:16.793" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:16.979">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:50:16.979">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:50:16.979" starttime="20170810 03:50:16.793" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:16.980">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:50:16.980" starttime="20170810 03:50:16.980" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:16.981">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:50:16.981" starttime="20170810 03:50:16.980" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:16.981" starttime="20170810 03:50:16.790" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:16.981" starttime="20170810 03:50:16.789" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:16.981" starttime="20170810 03:50:16.789" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:16.982">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 03:50:16.982" starttime="20170810 03:50:16.981" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:16.984">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:50:16.984" starttime="20170810 03:50:16.983" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:16.985">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:50:16.985" starttime="20170810 03:50:16.985" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:16.985" starttime="20170810 03:50:16.984" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:16.985" starttime="20170810 03:50:16.982" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:16.985" starttime="20170810 03:50:16.982" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:17.075">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:50:17.076">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:50:17.076" starttime="20170810 03:50:16.986" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:17.077">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:50:17.077" starttime="20170810 03:50:17.077" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:17.078">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:50:17.078" starttime="20170810 03:50:17.078" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:17.079" starttime="20170810 03:50:17.078" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:17.079" starttime="20170810 03:50:17.076" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:17.079" starttime="20170810 03:50:17.076" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:50:17.079">Delete All Sessions</msg>
<status endtime="20170810 03:50:17.079" starttime="20170810 03:50:17.079" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:17.079">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:50:17.079" starttime="20170810 03:50:16.788" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:17.080">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:50:17.080" starttime="20170810 03:50:17.080" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:17.081">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:50:17.081">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:50:17.081">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:50:17.081" starttime="20170810 03:50:17.080" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:17.081">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 03:50:17.081" starttime="20170810 03:50:16.788" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:17.081">${host_state} = Running</msg>
<status endtime="20170810 03:50:17.081" starttime="20170810 03:50:16.787" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 03:50:17.082" starttime="20170810 03:50:17.082" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:17.086">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:50:17.086" starttime="20170810 03:50:17.085" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:17.087">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:50:17.087" starttime="20170810 03:50:17.086" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:17.087">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:50:17.087" starttime="20170810 03:50:17.087" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:17.088">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:50:17.088" starttime="20170810 03:50:17.088" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:17.301">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:50:17.301" starttime="20170810 03:50:17.089" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:17.301">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:50:17.301">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:50:17.301" starttime="20170810 03:50:17.088" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:17.302">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:50:17.302" starttime="20170810 03:50:17.301" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:17.302">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:50:17.302" starttime="20170810 03:50:17.302" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:17.302" starttime="20170810 03:50:17.085" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:17.303" starttime="20170810 03:50:17.085" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:17.303" starttime="20170810 03:50:17.084" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:17.303">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 03:50:17.303" starttime="20170810 03:50:17.303" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:17.305">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:50:17.305" starttime="20170810 03:50:17.305" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:17.306">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:50:17.307" starttime="20170810 03:50:17.306" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:17.307" starttime="20170810 03:50:17.306" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:17.307" starttime="20170810 03:50:17.304" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:17.307" starttime="20170810 03:50:17.304" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:17.373">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:50:17.373">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:50:17.373" starttime="20170810 03:50:17.307" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:17.375">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:50:17.375" starttime="20170810 03:50:17.375" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:17.376">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:50:17.376" starttime="20170810 03:50:17.376" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:17.376" starttime="20170810 03:50:17.375" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:17.376" starttime="20170810 03:50:17.374" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:17.376" starttime="20170810 03:50:17.374" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:50:17.377">Delete All Sessions</msg>
<status endtime="20170810 03:50:17.377" starttime="20170810 03:50:17.377" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:17.377">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:50:17.377" starttime="20170810 03:50:17.083" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:17.378">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:50:17.378" starttime="20170810 03:50:17.377" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:17.378">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:50:17.378">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:50:17.379">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:50:17.379" starttime="20170810 03:50:17.378" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:17.379">${state} = Off</msg>
<status endtime="20170810 03:50:17.379" starttime="20170810 03:50:17.083" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:17.379">${boot_progress} = Off</msg>
<status endtime="20170810 03:50:17.379" starttime="20170810 03:50:17.082" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:50:17.380">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 03:50:17.380" starttime="20170810 03:50:17.379" status="FAIL"></status>
</kw>
<status endtime="20170810 03:50:17.380" starttime="20170810 03:50:17.082" status="FAIL"></status>
</kw>
<status endtime="20170810 03:50:17.380" starttime="20170810 03:50:16.465" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:27.385">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:50:27.386" starttime="20170810 03:50:27.385" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:27.387">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:50:27.387" starttime="20170810 03:50:27.386" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:27.387">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:50:27.387" starttime="20170810 03:50:27.387" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:27.388">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:50:27.388" starttime="20170810 03:50:27.387" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:27.584">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:50:27.584" starttime="20170810 03:50:27.389" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:27.584">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:50:27.584">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:50:27.584" starttime="20170810 03:50:27.388" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:27.585">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:50:27.585" starttime="20170810 03:50:27.585" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:27.586">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:50:27.586" starttime="20170810 03:50:27.585" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:27.586" starttime="20170810 03:50:27.385" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:27.586" starttime="20170810 03:50:27.384" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:27.586" starttime="20170810 03:50:27.383" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:27.587">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 03:50:27.587" starttime="20170810 03:50:27.586" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:27.589">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:50:27.589" starttime="20170810 03:50:27.588" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:27.590">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:50:27.590" starttime="20170810 03:50:27.590" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:27.590" starttime="20170810 03:50:27.589" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:27.590" starttime="20170810 03:50:27.588" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:27.590" starttime="20170810 03:50:27.587" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:27.669">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:50:27.670">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:50:27.670" starttime="20170810 03:50:27.590" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:27.672">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:50:27.672" starttime="20170810 03:50:27.671" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:27.673">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:50:27.673" starttime="20170810 03:50:27.673" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:27.673" starttime="20170810 03:50:27.672" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:27.673" starttime="20170810 03:50:27.671" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:27.673" starttime="20170810 03:50:27.670" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:50:27.674">Delete All Sessions</msg>
<status endtime="20170810 03:50:27.674" starttime="20170810 03:50:27.674" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:27.674">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:50:27.674" starttime="20170810 03:50:27.382" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:27.675">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:50:27.675" starttime="20170810 03:50:27.674" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:27.675">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:50:27.675">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:50:27.675">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:50:27.675" starttime="20170810 03:50:27.675" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:27.676">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 03:50:27.676" starttime="20170810 03:50:27.382" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:27.676">${power_state} = On</msg>
<status endtime="20170810 03:50:27.676" starttime="20170810 03:50:27.381" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 03:50:27.677" starttime="20170810 03:50:27.676" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:27.677" starttime="20170810 03:50:27.381" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:27.681">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:50:27.681" starttime="20170810 03:50:27.680" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:27.681">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:50:27.682" starttime="20170810 03:50:27.681" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:27.682">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:50:27.682" starttime="20170810 03:50:27.682" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:27.683">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:50:27.683" starttime="20170810 03:50:27.682" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:27.860">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:50:27.860" starttime="20170810 03:50:27.684" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:27.860">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:50:27.860">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:50:27.861" starttime="20170810 03:50:27.683" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:27.861">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:50:27.861" starttime="20170810 03:50:27.861" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:27.862">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:50:27.862" starttime="20170810 03:50:27.862" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:27.862" starttime="20170810 03:50:27.680" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:27.862" starttime="20170810 03:50:27.679" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:27.862" starttime="20170810 03:50:27.679" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:27.863">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 03:50:27.863" starttime="20170810 03:50:27.863" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:27.866">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:50:27.866" starttime="20170810 03:50:27.865" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:27.867">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:50:27.867" starttime="20170810 03:50:27.867" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:27.867" starttime="20170810 03:50:27.866" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:27.868" starttime="20170810 03:50:27.864" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:27.868" starttime="20170810 03:50:27.864" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:27.958">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:50:27.958">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:50:27.958" starttime="20170810 03:50:27.868" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:27.961">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:50:27.961" starttime="20170810 03:50:27.960" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:27.962">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:50:27.962" starttime="20170810 03:50:27.961" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:27.962" starttime="20170810 03:50:27.961" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:27.962" starttime="20170810 03:50:27.959" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:27.962" starttime="20170810 03:50:27.959" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:50:27.963">Delete All Sessions</msg>
<status endtime="20170810 03:50:27.963" starttime="20170810 03:50:27.962" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:27.963">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:50:27.963" starttime="20170810 03:50:27.678" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:27.964">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:50:27.964" starttime="20170810 03:50:27.963" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:27.964">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:50:27.964">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:50:27.965">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:50:27.965" starttime="20170810 03:50:27.964" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:27.965">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 03:50:27.965" starttime="20170810 03:50:27.677" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:27.965">${host_state} = Running</msg>
<status endtime="20170810 03:50:27.965" starttime="20170810 03:50:27.677" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 03:50:27.966" starttime="20170810 03:50:27.966" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:27.971">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:50:27.971" starttime="20170810 03:50:27.970" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:27.972">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:50:27.972" starttime="20170810 03:50:27.971" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:27.972">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:50:27.972" starttime="20170810 03:50:27.972" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:27.973">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:50:27.973" starttime="20170810 03:50:27.973" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:28.187">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:50:28.187" starttime="20170810 03:50:27.974" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:28.187">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:50:28.187">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:50:28.187" starttime="20170810 03:50:27.973" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:28.188">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:50:28.188" starttime="20170810 03:50:28.187" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:28.188">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:50:28.189" starttime="20170810 03:50:28.188" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:28.189" starttime="20170810 03:50:27.969" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:28.189" starttime="20170810 03:50:27.969" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:28.189" starttime="20170810 03:50:27.968" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:28.189">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 03:50:28.189" starttime="20170810 03:50:28.189" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:28.192">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:50:28.192" starttime="20170810 03:50:28.191" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:28.192">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:50:28.193" starttime="20170810 03:50:28.192" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:28.193" starttime="20170810 03:50:28.192" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:28.193" starttime="20170810 03:50:28.190" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:28.193" starttime="20170810 03:50:28.190" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:28.259">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:50:28.260">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:50:28.260" starttime="20170810 03:50:28.193" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:28.261">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:50:28.261" starttime="20170810 03:50:28.261" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:28.262">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:50:28.263" starttime="20170810 03:50:28.262" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:28.263" starttime="20170810 03:50:28.262" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:28.263" starttime="20170810 03:50:28.260" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:28.263" starttime="20170810 03:50:28.260" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:50:28.263">Delete All Sessions</msg>
<status endtime="20170810 03:50:28.263" starttime="20170810 03:50:28.263" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:28.263">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:50:28.264" starttime="20170810 03:50:27.967" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:28.264">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:50:28.264" starttime="20170810 03:50:28.264" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:28.265">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:50:28.265">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:50:28.265">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:50:28.265" starttime="20170810 03:50:28.264" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:28.265">${state} = Off</msg>
<status endtime="20170810 03:50:28.265" starttime="20170810 03:50:27.967" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:28.265">${boot_progress} = Off</msg>
<status endtime="20170810 03:50:28.265" starttime="20170810 03:50:27.966" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:50:28.266">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 03:50:28.266" starttime="20170810 03:50:28.266" status="FAIL"></status>
</kw>
<status endtime="20170810 03:50:28.266" starttime="20170810 03:50:27.966" status="FAIL"></status>
</kw>
<status endtime="20170810 03:50:28.267" starttime="20170810 03:50:27.381" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:38.272">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:50:38.272" starttime="20170810 03:50:38.272" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:38.273">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:50:38.273" starttime="20170810 03:50:38.273" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:38.274">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:50:38.274" starttime="20170810 03:50:38.273" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:38.274">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:50:38.274" starttime="20170810 03:50:38.274" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:38.551">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:50:38.551" starttime="20170810 03:50:38.275" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:38.551">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:50:38.551">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:50:38.551" starttime="20170810 03:50:38.275" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:38.552">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:50:38.552" starttime="20170810 03:50:38.551" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:38.553">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:50:38.553" starttime="20170810 03:50:38.552" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:38.553" starttime="20170810 03:50:38.271" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:38.553" starttime="20170810 03:50:38.270" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:38.553" starttime="20170810 03:50:38.270" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:38.554">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 03:50:38.554" starttime="20170810 03:50:38.553" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:38.556">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:50:38.556" starttime="20170810 03:50:38.555" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:38.557">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:50:38.557" starttime="20170810 03:50:38.556" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:38.557" starttime="20170810 03:50:38.556" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:38.557" starttime="20170810 03:50:38.554" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:38.557" starttime="20170810 03:50:38.554" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:44.586">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:50:44.586">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:50:44.586" starttime="20170810 03:50:38.557" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:44.589">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:50:44.589" starttime="20170810 03:50:44.588" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:44.590">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:50:44.590" starttime="20170810 03:50:44.589" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:44.590" starttime="20170810 03:50:44.589" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:44.590" starttime="20170810 03:50:44.587" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:44.590" starttime="20170810 03:50:44.587" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:50:44.590">Delete All Sessions</msg>
<status endtime="20170810 03:50:44.590" starttime="20170810 03:50:44.590" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:44.591">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:50:44.591" starttime="20170810 03:50:38.269" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:44.591">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:50:44.591" starttime="20170810 03:50:44.591" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:44.592">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:50:44.592">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:50:44.592">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:50:44.592" starttime="20170810 03:50:44.592" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:44.592">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 03:50:44.592" starttime="20170810 03:50:38.268" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:44.593">${power_state} = On</msg>
<status endtime="20170810 03:50:44.593" starttime="20170810 03:50:38.268" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 03:50:44.593" starttime="20170810 03:50:44.593" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:44.593" starttime="20170810 03:50:38.268" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:44.597">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:50:44.597" starttime="20170810 03:50:44.597" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:44.598">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:50:44.598" starttime="20170810 03:50:44.598" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:44.598">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:50:44.598" starttime="20170810 03:50:44.598" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:44.599">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:50:44.599" starttime="20170810 03:50:44.599" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:45.009">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:50:45.009" starttime="20170810 03:50:44.600" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:45.009">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:50:45.009">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:50:45.009" starttime="20170810 03:50:44.599" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:45.010">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:50:45.010" starttime="20170810 03:50:45.010" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:45.011">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:50:45.011" starttime="20170810 03:50:45.010" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:45.011" starttime="20170810 03:50:44.596" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:45.011" starttime="20170810 03:50:44.596" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:45.011" starttime="20170810 03:50:44.595" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:45.012">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 03:50:45.012" starttime="20170810 03:50:45.011" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:45.014">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:50:45.014" starttime="20170810 03:50:45.013" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:45.015">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:50:45.015" starttime="20170810 03:50:45.015" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:45.015" starttime="20170810 03:50:45.014" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:45.015" starttime="20170810 03:50:45.012" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:45.016" starttime="20170810 03:50:45.012" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:45.234">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:50:45.234">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:50:45.235" starttime="20170810 03:50:45.016" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:45.236">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:50:45.236" starttime="20170810 03:50:45.236" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:45.237">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:50:45.237" starttime="20170810 03:50:45.237" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:45.238" starttime="20170810 03:50:45.237" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:45.238" starttime="20170810 03:50:45.235" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:45.238" starttime="20170810 03:50:45.235" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:50:45.238">Delete All Sessions</msg>
<status endtime="20170810 03:50:45.238" starttime="20170810 03:50:45.238" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:45.238">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:50:45.238" starttime="20170810 03:50:44.594" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:45.239">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:50:45.239" starttime="20170810 03:50:45.239" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:45.240">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:50:45.240">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:50:45.240">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:50:45.240" starttime="20170810 03:50:45.239" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:45.240">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 03:50:45.240" starttime="20170810 03:50:44.594" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:45.240">${host_state} = Running</msg>
<status endtime="20170810 03:50:45.240" starttime="20170810 03:50:44.593" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 03:50:45.241" starttime="20170810 03:50:45.241" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:45.245">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:50:45.245" starttime="20170810 03:50:45.244" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:45.246">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:50:45.246" starttime="20170810 03:50:45.245" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:45.246">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:50:45.246" starttime="20170810 03:50:45.246" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:45.247">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:50:45.247" starttime="20170810 03:50:45.247" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:45.760">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:50:45.760" starttime="20170810 03:50:45.248" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:45.760">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:50:45.761">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:50:45.761" starttime="20170810 03:50:45.247" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:45.761">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:50:45.761" starttime="20170810 03:50:45.761" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:45.762">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:50:45.762" starttime="20170810 03:50:45.762" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:45.762" starttime="20170810 03:50:45.244" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:45.762" starttime="20170810 03:50:45.244" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:45.762" starttime="20170810 03:50:45.243" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:45.763">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 03:50:45.763" starttime="20170810 03:50:45.763" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:45.765">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:50:45.765" starttime="20170810 03:50:45.764" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:45.766">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:50:45.766" starttime="20170810 03:50:45.766" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:45.766" starttime="20170810 03:50:45.765" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:45.766" starttime="20170810 03:50:45.764" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:45.766" starttime="20170810 03:50:45.763" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:45.849">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:50:45.849">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:50:45.849" starttime="20170810 03:50:45.767" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:45.851">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:50:45.851" starttime="20170810 03:50:45.850" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:45.852">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:50:45.852" starttime="20170810 03:50:45.852" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:45.852" starttime="20170810 03:50:45.851" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:45.853" starttime="20170810 03:50:45.850" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:45.853" starttime="20170810 03:50:45.850" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:50:45.853">Delete All Sessions</msg>
<status endtime="20170810 03:50:45.853" starttime="20170810 03:50:45.853" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:45.853">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:50:45.853" starttime="20170810 03:50:45.242" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:45.854">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:50:45.854" starttime="20170810 03:50:45.854" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:45.854">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:50:45.855">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:50:45.855">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:50:45.855" starttime="20170810 03:50:45.854" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:45.855">${state} = Off</msg>
<status endtime="20170810 03:50:45.855" starttime="20170810 03:50:45.242" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:45.855">${boot_progress} = Off</msg>
<status endtime="20170810 03:50:45.855" starttime="20170810 03:50:45.241" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:50:45.856">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 03:50:45.856" starttime="20170810 03:50:45.855" status="FAIL"></status>
</kw>
<status endtime="20170810 03:50:45.856" starttime="20170810 03:50:45.241" status="FAIL"></status>
</kw>
<status endtime="20170810 03:50:45.856" starttime="20170810 03:50:38.267" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:55.862">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:50:55.862" starttime="20170810 03:50:55.861" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:55.863">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:50:55.863" starttime="20170810 03:50:55.862" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:55.863">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:50:55.863" starttime="20170810 03:50:55.863" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:55.864">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:50:55.864" starttime="20170810 03:50:55.863" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:56.271">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:50:56.271" starttime="20170810 03:50:55.865" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:56.271">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:50:56.271">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:50:56.271" starttime="20170810 03:50:55.864" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:56.272">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:50:56.272" starttime="20170810 03:50:56.271" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:56.272">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:50:56.272" starttime="20170810 03:50:56.272" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:56.272" starttime="20170810 03:50:55.861" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:56.273" starttime="20170810 03:50:55.860" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:56.273" starttime="20170810 03:50:55.859" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:56.273">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 03:50:56.273" starttime="20170810 03:50:56.273" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:56.275">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:50:56.275" starttime="20170810 03:50:56.275" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:56.276">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:50:56.276" starttime="20170810 03:50:56.276" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:56.277" starttime="20170810 03:50:56.276" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:56.277" starttime="20170810 03:50:56.274" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:56.277" starttime="20170810 03:50:56.274" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:58.195">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:50:58.196">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:50:58.196" starttime="20170810 03:50:56.277" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:58.200">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:50:58.200" starttime="20170810 03:50:58.200" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:58.201">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:50:58.202" starttime="20170810 03:50:58.201" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:58.202" starttime="20170810 03:50:58.201" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:58.202" starttime="20170810 03:50:58.197" status="PASS"></status>
</kw>
<status endtime="20170810 03:50:58.202" starttime="20170810 03:50:58.196" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:50:58.202">Delete All Sessions</msg>
<status endtime="20170810 03:50:58.202" starttime="20170810 03:50:58.202" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:58.202">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:50:58.203" starttime="20170810 03:50:55.859" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:50:58.203">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:50:58.203" starttime="20170810 03:50:58.203" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:50:58.204">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:50:58.204">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:50:58.204">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:50:58.204" starttime="20170810 03:50:58.203" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:58.204">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170810 03:50:58.204" starttime="20170810 03:50:55.858" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:50:58.204">${power_state} = Off</msg>
<status endtime="20170810 03:50:58.205" starttime="20170810 03:50:55.858" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:50:58.205">On != Off</msg>
<status endtime="20170810 03:50:58.205" starttime="20170810 03:50:58.205" status="FAIL"></status>
</kw>
<status endtime="20170810 03:50:58.205" starttime="20170810 03:50:55.857" status="FAIL"></status>
</kw>
<status endtime="20170810 03:50:58.206" starttime="20170810 03:50:55.857" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:08.210">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:51:08.211" starttime="20170810 03:51:08.210" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:08.211">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:51:08.211" starttime="20170810 03:51:08.211" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:08.212">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:51:08.212" starttime="20170810 03:51:08.212" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:08.213">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:51:08.213" starttime="20170810 03:51:08.212" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:08.808">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:51:08.808" starttime="20170810 03:51:08.214" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:08.809">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:51:08.809">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:51:08.809" starttime="20170810 03:51:08.213" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:08.809">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:51:08.809" starttime="20170810 03:51:08.809" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:08.810">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:51:08.810" starttime="20170810 03:51:08.810" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:08.810" starttime="20170810 03:51:08.210" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:08.810" starttime="20170810 03:51:08.209" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:08.810" starttime="20170810 03:51:08.208" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:08.811">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 03:51:08.811" starttime="20170810 03:51:08.811" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:08.813">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:51:08.813" starttime="20170810 03:51:08.812" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:08.814">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:51:08.814" starttime="20170810 03:51:08.814" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:08.814" starttime="20170810 03:51:08.813" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:08.814" starttime="20170810 03:51:08.812" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:08.814" starttime="20170810 03:51:08.811" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:09.386">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:51:09.387">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:51:09.387" starttime="20170810 03:51:08.815" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:09.388">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:51:09.389" starttime="20170810 03:51:09.388" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:09.389">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:51:09.390" starttime="20170810 03:51:09.389" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:09.390" starttime="20170810 03:51:09.389" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:09.390" starttime="20170810 03:51:09.387" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:09.390" starttime="20170810 03:51:09.387" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:51:09.390">Delete All Sessions</msg>
<status endtime="20170810 03:51:09.390" starttime="20170810 03:51:09.390" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:09.390">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:51:09.391" starttime="20170810 03:51:08.208" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:09.391">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:51:09.391" starttime="20170810 03:51:09.391" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:09.392">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:51:09.392">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:51:09.392">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:51:09.392" starttime="20170810 03:51:09.391" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:09.392">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 03:51:09.392" starttime="20170810 03:51:08.207" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:09.393">${power_state} = On</msg>
<status endtime="20170810 03:51:09.393" starttime="20170810 03:51:08.207" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 03:51:09.393" starttime="20170810 03:51:09.393" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:09.393" starttime="20170810 03:51:08.206" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:09.397">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:51:09.398" starttime="20170810 03:51:09.396" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:09.398">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:51:09.398" starttime="20170810 03:51:09.398" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:09.399">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:51:09.399" starttime="20170810 03:51:09.398" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:09.399">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:51:09.399" starttime="20170810 03:51:09.399" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:09.880">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:51:09.880" starttime="20170810 03:51:09.400" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:09.881">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:51:09.881">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:51:09.881" starttime="20170810 03:51:09.400" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:09.881">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:51:09.881" starttime="20170810 03:51:09.881" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:09.882">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:51:09.882" starttime="20170810 03:51:09.882" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:09.882" starttime="20170810 03:51:09.396" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:09.882" starttime="20170810 03:51:09.396" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:09.882" starttime="20170810 03:51:09.395" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:09.883">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 03:51:09.883" starttime="20170810 03:51:09.883" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:09.885">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:51:09.885" starttime="20170810 03:51:09.884" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:09.886">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:51:09.886" starttime="20170810 03:51:09.886" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:09.886" starttime="20170810 03:51:09.885" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:09.886" starttime="20170810 03:51:09.884" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:09.886" starttime="20170810 03:51:09.883" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:10.509">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:51:10.509">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:51:10.509" starttime="20170810 03:51:09.887" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:10.511">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:51:10.511" starttime="20170810 03:51:10.511" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:10.512">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:51:10.512" starttime="20170810 03:51:10.512" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:10.512" starttime="20170810 03:51:10.511" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:10.512" starttime="20170810 03:51:10.510" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:10.512" starttime="20170810 03:51:10.510" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:51:10.513">Delete All Sessions</msg>
<status endtime="20170810 03:51:10.513" starttime="20170810 03:51:10.513" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:10.513">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:51:10.513" starttime="20170810 03:51:09.394" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:10.514">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:51:10.514" starttime="20170810 03:51:10.513" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:10.514">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:51:10.514">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:51:10.515">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:51:10.515" starttime="20170810 03:51:10.514" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:10.515">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 03:51:10.515" starttime="20170810 03:51:09.394" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:10.515">${host_state} = Running</msg>
<status endtime="20170810 03:51:10.515" starttime="20170810 03:51:09.393" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 03:51:10.516" starttime="20170810 03:51:10.515" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:10.520">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:51:10.520" starttime="20170810 03:51:10.520" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:10.521">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:51:10.521" starttime="20170810 03:51:10.521" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:10.522">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:51:10.522" starttime="20170810 03:51:10.521" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:10.522">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:51:10.522" starttime="20170810 03:51:10.522" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:10.712">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:51:10.712" starttime="20170810 03:51:10.523" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:10.712">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:51:10.712">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:51:10.712" starttime="20170810 03:51:10.523" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:10.713">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:51:10.713" starttime="20170810 03:51:10.712" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:10.713">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:51:10.714" starttime="20170810 03:51:10.713" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:10.714" starttime="20170810 03:51:10.519" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:10.714" starttime="20170810 03:51:10.519" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:10.714" starttime="20170810 03:51:10.518" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:10.714">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 03:51:10.714" starttime="20170810 03:51:10.714" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:10.716">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:51:10.717" starttime="20170810 03:51:10.716" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:10.717">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:51:10.718" starttime="20170810 03:51:10.717" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:10.718" starttime="20170810 03:51:10.717" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:10.718" starttime="20170810 03:51:10.715" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:10.718" starttime="20170810 03:51:10.715" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:10.959">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:51:10.959">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:51:10.959" starttime="20170810 03:51:10.718" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:10.961">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:51:10.961" starttime="20170810 03:51:10.961" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:10.962">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:51:10.962" starttime="20170810 03:51:10.962" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:10.962" starttime="20170810 03:51:10.961" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:10.962" starttime="20170810 03:51:10.960" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:10.963" starttime="20170810 03:51:10.960" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:51:10.963">Delete All Sessions</msg>
<status endtime="20170810 03:51:10.963" starttime="20170810 03:51:10.963" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:10.963">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:51:10.963" starttime="20170810 03:51:10.517" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:10.964">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:51:10.964" starttime="20170810 03:51:10.964" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:10.964">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:51:10.965">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:51:10.965">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:51:10.965" starttime="20170810 03:51:10.964" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:10.965">${state} = Off</msg>
<status endtime="20170810 03:51:10.965" starttime="20170810 03:51:10.517" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:10.965">${boot_progress} = Off</msg>
<status endtime="20170810 03:51:10.965" starttime="20170810 03:51:10.516" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:51:10.966">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 03:51:10.966" starttime="20170810 03:51:10.965" status="FAIL"></status>
</kw>
<status endtime="20170810 03:51:10.966" starttime="20170810 03:51:10.516" status="FAIL"></status>
</kw>
<status endtime="20170810 03:51:10.966" starttime="20170810 03:51:08.206" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:20.971">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:51:20.971" starttime="20170810 03:51:20.971" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:20.972">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:51:20.972" starttime="20170810 03:51:20.972" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:20.973">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:51:20.973" starttime="20170810 03:51:20.972" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:20.973">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:51:20.973" starttime="20170810 03:51:20.973" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:21.186">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:51:21.186" starttime="20170810 03:51:20.974" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:21.186">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:51:21.186">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:51:21.186" starttime="20170810 03:51:20.974" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:21.187">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:51:21.187" starttime="20170810 03:51:21.186" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:21.187">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:51:21.188" starttime="20170810 03:51:21.187" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:21.188" starttime="20170810 03:51:20.970" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:21.188" starttime="20170810 03:51:20.970" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:21.188" starttime="20170810 03:51:20.969" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:21.188">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 03:51:21.189" starttime="20170810 03:51:21.188" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:21.191">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:51:21.191" starttime="20170810 03:51:21.190" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:21.191">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:51:21.192" starttime="20170810 03:51:21.191" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:21.192" starttime="20170810 03:51:21.191" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:21.192" starttime="20170810 03:51:21.189" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:21.192" starttime="20170810 03:51:21.189" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:21.255">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:51:21.255">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:51:21.255" starttime="20170810 03:51:21.192" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:21.257">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:51:21.257" starttime="20170810 03:51:21.256" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:21.258">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:51:21.258" starttime="20170810 03:51:21.258" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:21.258" starttime="20170810 03:51:21.257" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:21.258" starttime="20170810 03:51:21.256" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:21.258" starttime="20170810 03:51:21.255" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:51:21.259">Delete All Sessions</msg>
<status endtime="20170810 03:51:21.259" starttime="20170810 03:51:21.258" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:21.259">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:51:21.259" starttime="20170810 03:51:20.969" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:21.259">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:51:21.260" starttime="20170810 03:51:21.259" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:21.260">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:51:21.260">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:51:21.260">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:51:21.260" starttime="20170810 03:51:21.260" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:21.261">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 03:51:21.261" starttime="20170810 03:51:20.968" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:21.261">${power_state} = On</msg>
<status endtime="20170810 03:51:21.261" starttime="20170810 03:51:20.968" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 03:51:21.261" starttime="20170810 03:51:21.261" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:21.262" starttime="20170810 03:51:20.967" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:21.265">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:51:21.266" starttime="20170810 03:51:21.265" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:21.266">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:51:21.266" starttime="20170810 03:51:21.266" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:21.267">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:51:21.267" starttime="20170810 03:51:21.267" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:21.268">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:51:21.268" starttime="20170810 03:51:21.267" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:21.449">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:51:21.449" starttime="20170810 03:51:21.268" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:21.449">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:51:21.449">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:51:21.449" starttime="20170810 03:51:21.268" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:21.450">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:51:21.450" starttime="20170810 03:51:21.450" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:21.451">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:51:21.451" starttime="20170810 03:51:21.450" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:21.451" starttime="20170810 03:51:21.264" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:21.451" starttime="20170810 03:51:21.264" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:21.451" starttime="20170810 03:51:21.263" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:21.452">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 03:51:21.452" starttime="20170810 03:51:21.451" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:21.454">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:51:21.454" starttime="20170810 03:51:21.453" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:21.455">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:51:21.455" starttime="20170810 03:51:21.454" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:21.455" starttime="20170810 03:51:21.454" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:21.455" starttime="20170810 03:51:21.452" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:21.455" starttime="20170810 03:51:21.452" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:21.544">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:51:21.544">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:51:21.544" starttime="20170810 03:51:21.455" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:21.546">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:51:21.546" starttime="20170810 03:51:21.545" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:21.547">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:51:21.547" starttime="20170810 03:51:21.547" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:21.547" starttime="20170810 03:51:21.546" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:21.547" starttime="20170810 03:51:21.545" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:21.547" starttime="20170810 03:51:21.544" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:51:21.548">Delete All Sessions</msg>
<status endtime="20170810 03:51:21.548" starttime="20170810 03:51:21.548" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:21.548">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:51:21.548" starttime="20170810 03:51:21.263" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:21.549">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:51:21.549" starttime="20170810 03:51:21.548" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:21.549">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:51:21.549">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:51:21.549">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:51:21.549" starttime="20170810 03:51:21.549" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:21.550">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 03:51:21.550" starttime="20170810 03:51:21.262" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:21.550">${host_state} = Running</msg>
<status endtime="20170810 03:51:21.550" starttime="20170810 03:51:21.262" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 03:51:21.551" starttime="20170810 03:51:21.550" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:21.555">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:51:21.555" starttime="20170810 03:51:21.555" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:21.556">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:51:21.556" starttime="20170810 03:51:21.555" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:21.556">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:51:21.556" starttime="20170810 03:51:21.556" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:21.557">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:51:21.557" starttime="20170810 03:51:21.557" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:21.832">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:51:21.832" starttime="20170810 03:51:21.558" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:21.832">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:51:21.832">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:51:21.832" starttime="20170810 03:51:21.557" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:21.833">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:51:21.833" starttime="20170810 03:51:21.833" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:21.834">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:51:21.834" starttime="20170810 03:51:21.833" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:21.834" starttime="20170810 03:51:21.554" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:21.834" starttime="20170810 03:51:21.554" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:21.834" starttime="20170810 03:51:21.553" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:21.835">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 03:51:21.835" starttime="20170810 03:51:21.834" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:21.837">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:51:21.837" starttime="20170810 03:51:21.836" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:21.838">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:51:21.838" starttime="20170810 03:51:21.838" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:21.838" starttime="20170810 03:51:21.837" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:21.838" starttime="20170810 03:51:21.835" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:21.838" starttime="20170810 03:51:21.835" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:21.913">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:51:21.913">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:51:21.914" starttime="20170810 03:51:21.838" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:21.915">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:51:21.915" starttime="20170810 03:51:21.915" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:21.916">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:51:21.916" starttime="20170810 03:51:21.916" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:21.916" starttime="20170810 03:51:21.915" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:21.916" starttime="20170810 03:51:21.914" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:21.917" starttime="20170810 03:51:21.914" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:51:21.917">Delete All Sessions</msg>
<status endtime="20170810 03:51:21.917" starttime="20170810 03:51:21.917" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:21.917">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:51:21.917" starttime="20170810 03:51:21.552" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:21.918">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:51:21.918" starttime="20170810 03:51:21.918" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:21.919">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:51:21.919">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:51:21.919">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:51:21.919" starttime="20170810 03:51:21.918" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:21.919">${state} = Off</msg>
<status endtime="20170810 03:51:21.919" starttime="20170810 03:51:21.551" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:21.920">${boot_progress} = Off</msg>
<status endtime="20170810 03:51:21.920" starttime="20170810 03:51:21.551" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:51:21.921">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 03:51:21.921" starttime="20170810 03:51:21.920" status="FAIL"></status>
</kw>
<status endtime="20170810 03:51:21.921" starttime="20170810 03:51:21.551" status="FAIL"></status>
</kw>
<status endtime="20170810 03:51:21.921" starttime="20170810 03:51:20.967" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:31.926">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:51:31.926" starttime="20170810 03:51:31.926" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:31.927">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:51:31.927" starttime="20170810 03:51:31.927" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:31.928">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:51:31.928" starttime="20170810 03:51:31.927" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:31.928">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:51:31.928" starttime="20170810 03:51:31.928" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:32.248">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:51:32.249" starttime="20170810 03:51:31.929" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:32.249">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:51:32.249">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:51:32.249" starttime="20170810 03:51:31.929" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:32.249">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:51:32.250" starttime="20170810 03:51:32.249" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:32.250">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:51:32.250" starttime="20170810 03:51:32.250" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:32.251" starttime="20170810 03:51:31.925" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:32.251" starttime="20170810 03:51:31.925" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:32.251" starttime="20170810 03:51:31.924" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:32.251">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 03:51:32.251" starttime="20170810 03:51:32.251" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:32.253">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:51:32.253" starttime="20170810 03:51:32.253" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:32.254">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:51:32.254" starttime="20170810 03:51:32.254" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:32.254" starttime="20170810 03:51:32.254" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:32.255" starttime="20170810 03:51:32.252" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:32.255" starttime="20170810 03:51:32.252" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:32.801">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:51:32.801">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:51:32.802" starttime="20170810 03:51:32.255" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:32.803">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:51:32.803" starttime="20170810 03:51:32.803" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:32.804">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:51:32.804" starttime="20170810 03:51:32.804" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:32.805" starttime="20170810 03:51:32.804" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:32.805" starttime="20170810 03:51:32.802" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:32.805" starttime="20170810 03:51:32.802" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:51:32.805">Delete All Sessions</msg>
<status endtime="20170810 03:51:32.805" starttime="20170810 03:51:32.805" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:32.805">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:51:32.805" starttime="20170810 03:51:31.923" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:32.806">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:51:32.806" starttime="20170810 03:51:32.806" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:32.807">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:51:32.807">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:51:32.807">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:51:32.807" starttime="20170810 03:51:32.806" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:32.807">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 03:51:32.807" starttime="20170810 03:51:31.923" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:32.807">${power_state} = On</msg>
<status endtime="20170810 03:51:32.808" starttime="20170810 03:51:31.922" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 03:51:32.808" starttime="20170810 03:51:32.808" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:32.808" starttime="20170810 03:51:31.922" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:32.812">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:51:32.812" starttime="20170810 03:51:32.811" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:32.813">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:51:32.813" starttime="20170810 03:51:32.813" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:32.814">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:51:32.814" starttime="20170810 03:51:32.813" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:32.814">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:51:32.814" starttime="20170810 03:51:32.814" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:33.196">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:51:33.196" starttime="20170810 03:51:32.815" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:33.196">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:51:33.196">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:51:33.196" starttime="20170810 03:51:32.815" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:33.197">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:51:33.197" starttime="20170810 03:51:33.197" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:33.198">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:51:33.198" starttime="20170810 03:51:33.197" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:33.198" starttime="20170810 03:51:32.811" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:33.198" starttime="20170810 03:51:32.810" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:33.198" starttime="20170810 03:51:32.810" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:33.199">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 03:51:33.199" starttime="20170810 03:51:33.198" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:33.201">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:51:33.201" starttime="20170810 03:51:33.200" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:33.202">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:51:33.202" starttime="20170810 03:51:33.202" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:33.202" starttime="20170810 03:51:33.201" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:33.202" starttime="20170810 03:51:33.199" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:33.202" starttime="20170810 03:51:33.199" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:34.081">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:51:34.081">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:51:34.081" starttime="20170810 03:51:33.203" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:34.083">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:51:34.083" starttime="20170810 03:51:34.083" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:34.084">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:51:34.084" starttime="20170810 03:51:34.084" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:34.084" starttime="20170810 03:51:34.083" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:34.084" starttime="20170810 03:51:34.082" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:34.084" starttime="20170810 03:51:34.082" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:51:34.085">Delete All Sessions</msg>
<status endtime="20170810 03:51:34.085" starttime="20170810 03:51:34.085" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:34.085">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:51:34.085" starttime="20170810 03:51:32.809" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:34.086">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:51:34.086" starttime="20170810 03:51:34.085" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:34.086">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:51:34.086">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:51:34.086">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:51:34.086" starttime="20170810 03:51:34.086" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:34.087">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 03:51:34.087" starttime="20170810 03:51:32.809" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:34.087">${host_state} = Running</msg>
<status endtime="20170810 03:51:34.087" starttime="20170810 03:51:32.808" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 03:51:34.088" starttime="20170810 03:51:34.087" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:34.092">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:51:34.092" starttime="20170810 03:51:34.092" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:34.093">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:51:34.093" starttime="20170810 03:51:34.092" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:34.094">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:51:34.094" starttime="20170810 03:51:34.094" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:34.095">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:51:34.095" starttime="20170810 03:51:34.094" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:34.479">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:51:34.479" starttime="20170810 03:51:34.095" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:34.479">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:51:34.479">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:51:34.479" starttime="20170810 03:51:34.095" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:34.480">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:51:34.480" starttime="20170810 03:51:34.479" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:34.481">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:51:34.481" starttime="20170810 03:51:34.480" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:34.481" starttime="20170810 03:51:34.091" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:34.481" starttime="20170810 03:51:34.091" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:34.481" starttime="20170810 03:51:34.090" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:34.481">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 03:51:34.482" starttime="20170810 03:51:34.481" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:34.484">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:51:34.484" starttime="20170810 03:51:34.483" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:34.487">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:51:34.487" starttime="20170810 03:51:34.487" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:34.488" starttime="20170810 03:51:34.484" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:34.488" starttime="20170810 03:51:34.482" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:34.488" starttime="20170810 03:51:34.482" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:34.992">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:51:34.992">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:51:34.992" starttime="20170810 03:51:34.488" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:34.994">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:51:34.994" starttime="20170810 03:51:34.993" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:34.995">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:51:34.995" starttime="20170810 03:51:34.994" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:34.995" starttime="20170810 03:51:34.994" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:34.995" starttime="20170810 03:51:34.993" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:34.995" starttime="20170810 03:51:34.992" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:51:34.995">Delete All Sessions</msg>
<status endtime="20170810 03:51:34.996" starttime="20170810 03:51:34.995" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:34.996">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:51:34.996" starttime="20170810 03:51:34.089" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:34.996">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:51:34.996" starttime="20170810 03:51:34.996" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:34.997">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:51:34.997">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:51:34.997">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:51:34.997" starttime="20170810 03:51:34.997" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:34.997">${state} = Off</msg>
<status endtime="20170810 03:51:34.998" starttime="20170810 03:51:34.089" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:34.998">${boot_progress} = Off</msg>
<status endtime="20170810 03:51:34.998" starttime="20170810 03:51:34.088" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:51:34.998">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 03:51:34.999" starttime="20170810 03:51:34.998" status="FAIL"></status>
</kw>
<status endtime="20170810 03:51:34.999" starttime="20170810 03:51:34.088" status="FAIL"></status>
</kw>
<status endtime="20170810 03:51:34.999" starttime="20170810 03:51:31.922" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:45.004">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:51:45.004" starttime="20170810 03:51:45.004" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:45.005">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:51:45.005" starttime="20170810 03:51:45.005" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:45.005">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:51:45.006" starttime="20170810 03:51:45.005" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:45.006">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:51:45.006" starttime="20170810 03:51:45.006" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:45.350">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:51:45.350" starttime="20170810 03:51:45.007" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:45.350">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:51:45.350">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:51:45.350" starttime="20170810 03:51:45.006" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:45.351">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:51:45.351" starttime="20170810 03:51:45.351" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:45.352">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:51:45.352" starttime="20170810 03:51:45.351" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:45.352" starttime="20170810 03:51:45.003" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:45.352" starttime="20170810 03:51:45.003" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:45.352" starttime="20170810 03:51:45.002" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:45.353">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 03:51:45.353" starttime="20170810 03:51:45.352" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:45.355">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:51:45.355" starttime="20170810 03:51:45.354" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:45.356">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:51:45.356" starttime="20170810 03:51:45.355" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:45.356" starttime="20170810 03:51:45.355" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:45.356" starttime="20170810 03:51:45.353" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:45.356" starttime="20170810 03:51:45.353" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:46.183">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:51:46.183">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:51:46.183" starttime="20170810 03:51:45.356" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:46.185">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:51:46.185" starttime="20170810 03:51:46.184" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:46.186">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:51:46.186" starttime="20170810 03:51:46.186" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:46.186" starttime="20170810 03:51:46.185" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:46.186" starttime="20170810 03:51:46.184" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:46.186" starttime="20170810 03:51:46.183" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:51:46.187">Delete All Sessions</msg>
<status endtime="20170810 03:51:46.187" starttime="20170810 03:51:46.186" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:46.187">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:51:46.187" starttime="20170810 03:51:45.001" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:46.187">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:51:46.188" starttime="20170810 03:51:46.187" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:46.188">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:51:46.188">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:51:46.188">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:51:46.188" starttime="20170810 03:51:46.188" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:46.189">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 03:51:46.189" starttime="20170810 03:51:45.001" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:46.189">${power_state} = On</msg>
<status endtime="20170810 03:51:46.189" starttime="20170810 03:51:45.000" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 03:51:46.190" starttime="20170810 03:51:46.189" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:46.190" starttime="20170810 03:51:45.000" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:46.194">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:51:46.194" starttime="20170810 03:51:46.193" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:46.195">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:51:46.195" starttime="20170810 03:51:46.194" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:46.195">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:51:46.195" starttime="20170810 03:51:46.195" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:46.196">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:51:46.196" starttime="20170810 03:51:46.196" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:46.684">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:51:46.684" starttime="20170810 03:51:46.197" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:46.685">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:51:46.685">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:51:46.685" starttime="20170810 03:51:46.196" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:46.685">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:51:46.685" starttime="20170810 03:51:46.685" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:46.686">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:51:46.686" starttime="20170810 03:51:46.686" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:46.686" starttime="20170810 03:51:46.193" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:46.686" starttime="20170810 03:51:46.192" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:46.686" starttime="20170810 03:51:46.192" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:46.687">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 03:51:46.687" starttime="20170810 03:51:46.687" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:46.689">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:51:46.689" starttime="20170810 03:51:46.688" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:46.690">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:51:46.690" starttime="20170810 03:51:46.690" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:46.690" starttime="20170810 03:51:46.689" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:46.690" starttime="20170810 03:51:46.688" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:46.691" starttime="20170810 03:51:46.687" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:47.272">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:51:47.272">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:51:47.272" starttime="20170810 03:51:46.691" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:47.274">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:51:47.274" starttime="20170810 03:51:47.273" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:47.275">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:51:47.275" starttime="20170810 03:51:47.275" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:47.275" starttime="20170810 03:51:47.274" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:47.275" starttime="20170810 03:51:47.273" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:47.275" starttime="20170810 03:51:47.272" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:51:47.276">Delete All Sessions</msg>
<status endtime="20170810 03:51:47.276" starttime="20170810 03:51:47.276" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:47.276">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:51:47.276" starttime="20170810 03:51:46.191" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:47.277">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:51:47.277" starttime="20170810 03:51:47.276" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:47.277">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:51:47.277">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:51:47.277">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:51:47.277" starttime="20170810 03:51:47.277" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:47.278">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 03:51:47.278" starttime="20170810 03:51:46.190" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:47.278">${host_state} = Running</msg>
<status endtime="20170810 03:51:47.278" starttime="20170810 03:51:46.190" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 03:51:47.279" starttime="20170810 03:51:47.278" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:47.283">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:51:47.283" starttime="20170810 03:51:47.282" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:47.284">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:51:47.284" starttime="20170810 03:51:47.283" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:47.284">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:51:47.285" starttime="20170810 03:51:47.284" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:47.285">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:51:47.285" starttime="20170810 03:51:47.285" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:47.803">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:51:47.803" starttime="20170810 03:51:47.286" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:47.803">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:51:47.803">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:51:47.803" starttime="20170810 03:51:47.286" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:47.804">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:51:47.804" starttime="20170810 03:51:47.803" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:47.804">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:51:47.804" starttime="20170810 03:51:47.804" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:47.805" starttime="20170810 03:51:47.282" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:47.805" starttime="20170810 03:51:47.281" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:47.805" starttime="20170810 03:51:47.281" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:47.805">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 03:51:47.805" starttime="20170810 03:51:47.805" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:47.807">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:51:47.807" starttime="20170810 03:51:47.807" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:47.809">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:51:47.809" starttime="20170810 03:51:47.808" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:47.809" starttime="20170810 03:51:47.808" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:47.809" starttime="20170810 03:51:47.806" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:47.809" starttime="20170810 03:51:47.806" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:48.326">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:51:48.326">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:51:48.326" starttime="20170810 03:51:47.809" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:48.328">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:51:48.328" starttime="20170810 03:51:48.327" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:48.329">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:51:48.329" starttime="20170810 03:51:48.329" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:48.329" starttime="20170810 03:51:48.328" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:48.329" starttime="20170810 03:51:48.327" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:48.329" starttime="20170810 03:51:48.326" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:51:48.330">Delete All Sessions</msg>
<status endtime="20170810 03:51:48.330" starttime="20170810 03:51:48.329" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:48.330">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:51:48.330" starttime="20170810 03:51:47.280" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:48.330">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:51:48.331" starttime="20170810 03:51:48.330" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:48.331">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:51:48.331">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:51:48.331">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:51:48.331" starttime="20170810 03:51:48.331" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:48.332">${state} = Off</msg>
<status endtime="20170810 03:51:48.332" starttime="20170810 03:51:47.280" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:48.332">${boot_progress} = Off</msg>
<status endtime="20170810 03:51:48.332" starttime="20170810 03:51:47.279" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:51:48.333">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 03:51:48.333" starttime="20170810 03:51:48.332" status="FAIL"></status>
</kw>
<status endtime="20170810 03:51:48.333" starttime="20170810 03:51:47.279" status="FAIL"></status>
</kw>
<status endtime="20170810 03:51:48.333" starttime="20170810 03:51:44.999" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:58.338">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:51:58.339" starttime="20170810 03:51:58.338" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:58.339">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:51:58.339" starttime="20170810 03:51:58.339" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:58.340">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:51:58.340" starttime="20170810 03:51:58.339" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:58.340">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:51:58.340" starttime="20170810 03:51:58.340" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:58.713">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:51:58.713" starttime="20170810 03:51:58.341" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:58.714">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:51:58.714">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:51:58.714" starttime="20170810 03:51:58.341" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:58.714">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:51:58.714" starttime="20170810 03:51:58.714" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:58.715">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:51:58.715" starttime="20170810 03:51:58.715" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:58.715" starttime="20170810 03:51:58.337" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:58.715" starttime="20170810 03:51:58.337" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:58.715" starttime="20170810 03:51:58.336" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:58.716">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 03:51:58.716" starttime="20170810 03:51:58.716" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:58.718">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:51:58.718" starttime="20170810 03:51:58.717" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:58.719">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:51:58.719" starttime="20170810 03:51:58.719" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:58.719" starttime="20170810 03:51:58.718" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:58.719" starttime="20170810 03:51:58.717" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:58.720" starttime="20170810 03:51:58.716" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:59.207">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:51:59.207">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:51:59.207" starttime="20170810 03:51:58.720" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:59.209">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:51:59.209" starttime="20170810 03:51:59.208" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:59.210">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:51:59.210" starttime="20170810 03:51:59.210" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:59.210" starttime="20170810 03:51:59.209" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:59.210" starttime="20170810 03:51:59.208" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:59.210" starttime="20170810 03:51:59.207" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:51:59.211">Delete All Sessions</msg>
<status endtime="20170810 03:51:59.211" starttime="20170810 03:51:59.210" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:59.211">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:51:59.211" starttime="20170810 03:51:58.336" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:59.211">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:51:59.212" starttime="20170810 03:51:59.211" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:59.212">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:51:59.212">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:51:59.212">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:51:59.212" starttime="20170810 03:51:59.212" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:59.213">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 03:51:59.213" starttime="20170810 03:51:58.335" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:59.213">${power_state} = On</msg>
<status endtime="20170810 03:51:59.213" starttime="20170810 03:51:58.335" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 03:51:59.213" starttime="20170810 03:51:59.213" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:59.214" starttime="20170810 03:51:58.334" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:59.217">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:51:59.218" starttime="20170810 03:51:59.217" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:59.218">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:51:59.219" starttime="20170810 03:51:59.218" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:59.219">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:51:59.219" starttime="20170810 03:51:59.219" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:59.220">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:51:59.220" starttime="20170810 03:51:59.219" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:59.531">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:51:59.531" starttime="20170810 03:51:59.220" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:51:59.531">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:51:59.531">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:51:59.532" starttime="20170810 03:51:59.220" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:59.532">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:51:59.532" starttime="20170810 03:51:59.532" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:59.533">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:51:59.533" starttime="20170810 03:51:59.533" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:59.533" starttime="20170810 03:51:59.216" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:59.533" starttime="20170810 03:51:59.216" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:59.533" starttime="20170810 03:51:59.215" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:59.534">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 03:51:59.534" starttime="20170810 03:51:59.533" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:51:59.536">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:51:59.536" starttime="20170810 03:51:59.535" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:51:59.537">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:51:59.537" starttime="20170810 03:51:59.537" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:59.537" starttime="20170810 03:51:59.536" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:59.537" starttime="20170810 03:51:59.535" status="PASS"></status>
</kw>
<status endtime="20170810 03:51:59.537" starttime="20170810 03:51:59.534" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:00.318">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:52:00.319">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:52:00.319" starttime="20170810 03:51:59.537" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:00.321">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:52:00.321" starttime="20170810 03:52:00.320" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:00.322">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:52:00.322" starttime="20170810 03:52:00.321" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:00.322" starttime="20170810 03:52:00.321" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:00.322" starttime="20170810 03:52:00.320" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:00.322" starttime="20170810 03:52:00.319" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:52:00.322">Delete All Sessions</msg>
<status endtime="20170810 03:52:00.322" starttime="20170810 03:52:00.322" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:00.323">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:52:00.323" starttime="20170810 03:51:59.215" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:00.323">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:52:00.323" starttime="20170810 03:52:00.323" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:00.324">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:52:00.324">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:52:00.324">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:52:00.324" starttime="20170810 03:52:00.324" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:00.324">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 03:52:00.324" starttime="20170810 03:51:59.214" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:00.325">${host_state} = Running</msg>
<status endtime="20170810 03:52:00.325" starttime="20170810 03:51:59.214" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 03:52:00.325" starttime="20170810 03:52:00.325" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:00.330">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:52:00.330" starttime="20170810 03:52:00.329" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:00.331">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:52:00.331" starttime="20170810 03:52:00.330" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:00.331">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:52:00.331" starttime="20170810 03:52:00.331" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:00.332">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:52:00.332" starttime="20170810 03:52:00.331" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:00.712">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:52:00.712" starttime="20170810 03:52:00.333" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:00.712">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:52:00.712">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:52:00.712" starttime="20170810 03:52:00.332" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:00.713">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:52:00.713" starttime="20170810 03:52:00.713" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:00.714">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:52:00.714" starttime="20170810 03:52:00.713" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:00.714" starttime="20170810 03:52:00.329" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:00.714" starttime="20170810 03:52:00.328" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:00.714" starttime="20170810 03:52:00.328" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:00.715">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 03:52:00.715" starttime="20170810 03:52:00.714" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:00.717">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:52:00.717" starttime="20170810 03:52:00.716" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:00.718">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:52:00.718" starttime="20170810 03:52:00.718" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:00.718" starttime="20170810 03:52:00.717" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:00.719" starttime="20170810 03:52:00.716" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:00.719" starttime="20170810 03:52:00.715" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:01.421">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:52:01.421">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:52:01.421" starttime="20170810 03:52:00.719" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:01.423">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:52:01.423" starttime="20170810 03:52:01.422" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:01.424">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:52:01.424" starttime="20170810 03:52:01.424" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:01.424" starttime="20170810 03:52:01.423" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:01.424" starttime="20170810 03:52:01.422" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:01.424" starttime="20170810 03:52:01.421" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:52:01.425">Delete All Sessions</msg>
<status endtime="20170810 03:52:01.425" starttime="20170810 03:52:01.425" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:01.425">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:52:01.425" starttime="20170810 03:52:00.327" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:01.426">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:52:01.426" starttime="20170810 03:52:01.425" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:01.426">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:52:01.426">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:52:01.426">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:52:01.426" starttime="20170810 03:52:01.426" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:01.427">${state} = Off</msg>
<status endtime="20170810 03:52:01.427" starttime="20170810 03:52:00.326" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:01.427">${boot_progress} = Off</msg>
<status endtime="20170810 03:52:01.427" starttime="20170810 03:52:00.326" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:52:01.428">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 03:52:01.428" starttime="20170810 03:52:01.427" status="FAIL"></status>
</kw>
<status endtime="20170810 03:52:01.428" starttime="20170810 03:52:00.325" status="FAIL"></status>
</kw>
<status endtime="20170810 03:52:01.428" starttime="20170810 03:51:58.333" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:11.433">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:52:11.433" starttime="20170810 03:52:11.433" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:11.434">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:52:11.434" starttime="20170810 03:52:11.434" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:11.435">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:52:11.435" starttime="20170810 03:52:11.434" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:11.435">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:52:11.435" starttime="20170810 03:52:11.435" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:11.807">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:52:11.807" starttime="20170810 03:52:11.436" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:11.807">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:52:11.807">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:52:11.807" starttime="20170810 03:52:11.436" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:11.808">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:52:11.808" starttime="20170810 03:52:11.808" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:11.809">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:52:11.809" starttime="20170810 03:52:11.808" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:11.809" starttime="20170810 03:52:11.432" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:11.809" starttime="20170810 03:52:11.432" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:11.809" starttime="20170810 03:52:11.431" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:11.810">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 03:52:11.810" starttime="20170810 03:52:11.809" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:11.812">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:52:11.812" starttime="20170810 03:52:11.811" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:11.813">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:52:11.813" starttime="20170810 03:52:11.813" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:11.813" starttime="20170810 03:52:11.812" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:11.813" starttime="20170810 03:52:11.811" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:11.813" starttime="20170810 03:52:11.810" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:12.082">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:52:12.082">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:52:12.082" starttime="20170810 03:52:11.813" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:12.084">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:52:12.084" starttime="20170810 03:52:12.083" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:12.085">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:52:12.085" starttime="20170810 03:52:12.085" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:12.085" starttime="20170810 03:52:12.084" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:12.085" starttime="20170810 03:52:12.083" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:12.085" starttime="20170810 03:52:12.082" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:52:12.086">Delete All Sessions</msg>
<status endtime="20170810 03:52:12.086" starttime="20170810 03:52:12.086" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:12.086">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:52:12.086" starttime="20170810 03:52:11.430" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:12.087">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:52:12.087" starttime="20170810 03:52:12.086" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:12.087">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:52:12.087">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:52:12.087">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:52:12.087" starttime="20170810 03:52:12.087" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:12.088">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 03:52:12.088" starttime="20170810 03:52:11.430" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:12.088">${power_state} = On</msg>
<status endtime="20170810 03:52:12.088" starttime="20170810 03:52:11.429" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 03:52:12.089" starttime="20170810 03:52:12.088" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:12.089" starttime="20170810 03:52:11.429" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:12.093">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:52:12.093" starttime="20170810 03:52:12.092" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:12.094">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:52:12.094" starttime="20170810 03:52:12.093" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:12.094">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:52:12.094" starttime="20170810 03:52:12.094" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:12.095">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:52:12.095" starttime="20170810 03:52:12.094" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:12.422">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:52:12.422" starttime="20170810 03:52:12.095" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:12.422">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:52:12.422">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:52:12.422" starttime="20170810 03:52:12.095" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:12.423">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:52:12.423" starttime="20170810 03:52:12.423" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:12.424">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:52:12.424" starttime="20170810 03:52:12.424" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:12.425" starttime="20170810 03:52:12.091" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:12.425" starttime="20170810 03:52:12.091" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:12.425" starttime="20170810 03:52:12.090" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:12.425">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 03:52:12.425" starttime="20170810 03:52:12.425" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:12.427">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:52:12.427" starttime="20170810 03:52:12.427" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:12.428">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:52:12.428" starttime="20170810 03:52:12.428" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:12.428" starttime="20170810 03:52:12.428" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:12.429" starttime="20170810 03:52:12.426" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:12.429" starttime="20170810 03:52:12.426" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:13.154">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:52:13.155">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:52:13.155" starttime="20170810 03:52:12.429" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:13.156">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:52:13.157" starttime="20170810 03:52:13.156" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:13.157">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:52:13.157" starttime="20170810 03:52:13.157" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:13.158" starttime="20170810 03:52:13.157" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:13.158" starttime="20170810 03:52:13.155" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:13.158" starttime="20170810 03:52:13.155" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:52:13.158">Delete All Sessions</msg>
<status endtime="20170810 03:52:13.158" starttime="20170810 03:52:13.158" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:13.158">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:52:13.158" starttime="20170810 03:52:12.090" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:13.159">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:52:13.159" starttime="20170810 03:52:13.159" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:13.160">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:52:13.160">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:52:13.160">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:52:13.160" starttime="20170810 03:52:13.159" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:13.160">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 03:52:13.160" starttime="20170810 03:52:12.089" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:13.161">${host_state} = Running</msg>
<status endtime="20170810 03:52:13.161" starttime="20170810 03:52:12.089" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 03:52:13.161" starttime="20170810 03:52:13.161" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:13.166">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:52:13.166" starttime="20170810 03:52:13.165" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:13.166">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:52:13.166" starttime="20170810 03:52:13.166" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:13.167">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:52:13.167" starttime="20170810 03:52:13.167" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:13.168">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:52:13.168" starttime="20170810 03:52:13.167" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:13.503">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:52:13.503" starttime="20170810 03:52:13.168" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:13.503">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:52:13.503">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:52:13.503" starttime="20170810 03:52:13.168" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:13.504">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:52:13.504" starttime="20170810 03:52:13.504" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:13.505">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:52:13.505" starttime="20170810 03:52:13.504" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:13.505" starttime="20170810 03:52:13.165" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:13.505" starttime="20170810 03:52:13.164" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:13.505" starttime="20170810 03:52:13.164" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:13.506">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 03:52:13.506" starttime="20170810 03:52:13.505" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:13.510">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:52:13.510" starttime="20170810 03:52:13.507" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:13.511">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:52:13.511" starttime="20170810 03:52:13.511" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:13.512" starttime="20170810 03:52:13.511" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:13.512" starttime="20170810 03:52:13.506" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:13.512" starttime="20170810 03:52:13.506" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:14.078">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:52:14.078">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:52:14.078" starttime="20170810 03:52:13.512" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:14.080">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:52:14.080" starttime="20170810 03:52:14.080" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:14.081">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:52:14.081" starttime="20170810 03:52:14.081" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:14.081" starttime="20170810 03:52:14.080" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:14.081" starttime="20170810 03:52:14.079" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:14.081" starttime="20170810 03:52:14.079" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:52:14.082">Delete All Sessions</msg>
<status endtime="20170810 03:52:14.082" starttime="20170810 03:52:14.082" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:14.082">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:52:14.082" starttime="20170810 03:52:13.163" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:14.083">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:52:14.083" starttime="20170810 03:52:14.082" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:14.083">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:52:14.083">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:52:14.084">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:52:14.084" starttime="20170810 03:52:14.083" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:14.084">${state} = Off</msg>
<status endtime="20170810 03:52:14.084" starttime="20170810 03:52:13.162" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:14.084">${boot_progress} = Off</msg>
<status endtime="20170810 03:52:14.084" starttime="20170810 03:52:13.162" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:52:14.085">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 03:52:14.085" starttime="20170810 03:52:14.084" status="FAIL"></status>
</kw>
<status endtime="20170810 03:52:14.085" starttime="20170810 03:52:13.161" status="FAIL"></status>
</kw>
<status endtime="20170810 03:52:14.085" starttime="20170810 03:52:11.428" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:24.090">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:52:24.090" starttime="20170810 03:52:24.090" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:24.091">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:52:24.091" starttime="20170810 03:52:24.091" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:24.092">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:52:24.092" starttime="20170810 03:52:24.091" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:24.092">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:52:24.092" starttime="20170810 03:52:24.092" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:24.328">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:52:24.328" starttime="20170810 03:52:24.093" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:24.328">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:52:24.328">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:52:24.328" starttime="20170810 03:52:24.093" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:24.329">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:52:24.329" starttime="20170810 03:52:24.328" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:24.329">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:52:24.330" starttime="20170810 03:52:24.329" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:24.330" starttime="20170810 03:52:24.089" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:24.330" starttime="20170810 03:52:24.089" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:24.330" starttime="20170810 03:52:24.088" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:24.330">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 03:52:24.330" starttime="20170810 03:52:24.330" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:24.333">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:52:24.333" starttime="20170810 03:52:24.332" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:24.334">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:52:24.334" starttime="20170810 03:52:24.333" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:24.334" starttime="20170810 03:52:24.333" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:24.334" starttime="20170810 03:52:24.331" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:24.334" starttime="20170810 03:52:24.331" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:24.466">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:52:24.466">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:52:24.466" starttime="20170810 03:52:24.334" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:24.467">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:52:24.468" starttime="20170810 03:52:24.467" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:24.468">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:52:24.468" starttime="20170810 03:52:24.468" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:24.469" starttime="20170810 03:52:24.468" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:24.469" starttime="20170810 03:52:24.466" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:24.469" starttime="20170810 03:52:24.466" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:52:24.469">Delete All Sessions</msg>
<status endtime="20170810 03:52:24.469" starttime="20170810 03:52:24.469" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:24.469">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:52:24.470" starttime="20170810 03:52:24.087" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:24.470">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:52:24.470" starttime="20170810 03:52:24.470" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:24.471">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:52:24.471">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:52:24.471">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:52:24.471" starttime="20170810 03:52:24.470" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:24.471">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 03:52:24.471" starttime="20170810 03:52:24.087" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:24.472">${power_state} = On</msg>
<status endtime="20170810 03:52:24.472" starttime="20170810 03:52:24.086" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 03:52:24.472" starttime="20170810 03:52:24.472" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:24.472" starttime="20170810 03:52:24.086" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:24.476">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:52:24.476" starttime="20170810 03:52:24.476" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:24.477">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:52:24.477" starttime="20170810 03:52:24.477" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:24.478">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:52:24.478" starttime="20170810 03:52:24.477" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:24.478">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:52:24.478" starttime="20170810 03:52:24.478" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:24.797">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:52:24.797" starttime="20170810 03:52:24.479" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:24.797">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:52:24.797">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:52:24.797" starttime="20170810 03:52:24.479" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:24.798">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:52:24.798" starttime="20170810 03:52:24.797" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:24.798">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:52:24.798" starttime="20170810 03:52:24.798" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:24.798" starttime="20170810 03:52:24.475" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:24.799" starttime="20170810 03:52:24.474" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:24.799" starttime="20170810 03:52:24.474" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:24.799">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 03:52:24.799" starttime="20170810 03:52:24.799" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:24.801">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:52:24.801" starttime="20170810 03:52:24.801" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:24.802">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:52:24.802" starttime="20170810 03:52:24.802" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:24.802" starttime="20170810 03:52:24.802" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:24.803" starttime="20170810 03:52:24.800" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:24.803" starttime="20170810 03:52:24.800" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:24.948">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:52:24.948">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:52:24.948" starttime="20170810 03:52:24.803" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:24.950">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:52:24.950" starttime="20170810 03:52:24.950" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:24.951">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:52:24.951" starttime="20170810 03:52:24.951" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:24.951" starttime="20170810 03:52:24.950" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:24.951" starttime="20170810 03:52:24.949" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:24.952" starttime="20170810 03:52:24.949" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:52:24.952">Delete All Sessions</msg>
<status endtime="20170810 03:52:24.952" starttime="20170810 03:52:24.952" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:24.952">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:52:24.952" starttime="20170810 03:52:24.473" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:24.953">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:52:24.953" starttime="20170810 03:52:24.952" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:24.953">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:52:24.953">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:52:24.954">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:52:24.954" starttime="20170810 03:52:24.953" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:24.954">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 03:52:24.954" starttime="20170810 03:52:24.473" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:24.954">${host_state} = Running</msg>
<status endtime="20170810 03:52:24.954" starttime="20170810 03:52:24.472" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 03:52:24.955" starttime="20170810 03:52:24.954" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:24.959">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:52:24.959" starttime="20170810 03:52:24.958" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:24.960">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:52:24.960" starttime="20170810 03:52:24.959" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:24.960">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:52:24.960" starttime="20170810 03:52:24.960" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:24.961">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:52:24.961" starttime="20170810 03:52:24.961" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:25.249">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:52:25.249" starttime="20170810 03:52:24.962" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:25.249">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:52:25.249">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:52:25.249" starttime="20170810 03:52:24.961" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:25.250">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:52:25.250" starttime="20170810 03:52:25.249" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:25.250">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:52:25.251" starttime="20170810 03:52:25.250" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:25.251" starttime="20170810 03:52:24.958" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:25.251" starttime="20170810 03:52:24.958" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:25.251" starttime="20170810 03:52:24.957" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:25.251">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 03:52:25.252" starttime="20170810 03:52:25.251" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:25.254">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:52:25.254" starttime="20170810 03:52:25.253" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:25.255">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:52:25.255" starttime="20170810 03:52:25.255" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:25.255" starttime="20170810 03:52:25.254" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:25.255" starttime="20170810 03:52:25.252" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:25.255" starttime="20170810 03:52:25.252" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:25.349">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:52:25.349">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:52:25.349" starttime="20170810 03:52:25.256" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:25.351">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:52:25.351" starttime="20170810 03:52:25.350" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:25.352">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:52:25.352" starttime="20170810 03:52:25.351" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:25.352" starttime="20170810 03:52:25.351" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:25.352" starttime="20170810 03:52:25.350" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:25.352" starttime="20170810 03:52:25.349" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:52:25.352">Delete All Sessions</msg>
<status endtime="20170810 03:52:25.352" starttime="20170810 03:52:25.352" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:25.353">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:52:25.353" starttime="20170810 03:52:24.956" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:25.353">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:52:25.353" starttime="20170810 03:52:25.353" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:25.354">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:52:25.354">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:52:25.354">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:52:25.354" starttime="20170810 03:52:25.354" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:25.354">${state} = Off</msg>
<status endtime="20170810 03:52:25.354" starttime="20170810 03:52:24.956" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:25.355">${boot_progress} = Off</msg>
<status endtime="20170810 03:52:25.355" starttime="20170810 03:52:24.955" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:52:25.355">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 03:52:25.355" starttime="20170810 03:52:25.355" status="FAIL"></status>
</kw>
<status endtime="20170810 03:52:25.356" starttime="20170810 03:52:24.955" status="FAIL"></status>
</kw>
<status endtime="20170810 03:52:25.356" starttime="20170810 03:52:24.086" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:35.361">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:52:35.361" starttime="20170810 03:52:35.360" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:35.362">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:52:35.362" starttime="20170810 03:52:35.361" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:35.362">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:52:35.362" starttime="20170810 03:52:35.362" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:35.363">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:52:35.363" starttime="20170810 03:52:35.363" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:35.743">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:52:35.744" starttime="20170810 03:52:35.364" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:35.744">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:52:35.744">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:52:35.744" starttime="20170810 03:52:35.363" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:35.744">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:52:35.744" starttime="20170810 03:52:35.744" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:35.745">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:52:35.745" starttime="20170810 03:52:35.745" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:35.745" starttime="20170810 03:52:35.360" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:35.746" starttime="20170810 03:52:35.359" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:35.746" starttime="20170810 03:52:35.359" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:35.746">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 03:52:35.746" starttime="20170810 03:52:35.746" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:35.748">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:52:35.748" starttime="20170810 03:52:35.748" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:35.749">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:52:35.750" starttime="20170810 03:52:35.749" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:35.750" starttime="20170810 03:52:35.749" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:35.750" starttime="20170810 03:52:35.747" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:35.750" starttime="20170810 03:52:35.747" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:35.814">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:52:35.814">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:52:35.814" starttime="20170810 03:52:35.750" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:35.816">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:52:35.816" starttime="20170810 03:52:35.815" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:35.817">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:52:35.817" starttime="20170810 03:52:35.816" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:35.817" starttime="20170810 03:52:35.816" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:35.817" starttime="20170810 03:52:35.815" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:35.817" starttime="20170810 03:52:35.814" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:52:35.817">Delete All Sessions</msg>
<status endtime="20170810 03:52:35.817" starttime="20170810 03:52:35.817" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:35.818">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:52:35.818" starttime="20170810 03:52:35.358" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:35.818">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:52:35.818" starttime="20170810 03:52:35.818" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:35.819">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:52:35.819">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:52:35.819">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:52:35.819" starttime="20170810 03:52:35.819" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:35.819">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 03:52:35.819" starttime="20170810 03:52:35.358" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:35.820">${power_state} = On</msg>
<status endtime="20170810 03:52:35.820" starttime="20170810 03:52:35.357" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 03:52:35.820" starttime="20170810 03:52:35.820" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:35.820" starttime="20170810 03:52:35.357" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:35.824">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:52:35.825" starttime="20170810 03:52:35.824" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:35.825">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:52:35.825" starttime="20170810 03:52:35.825" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:35.826">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:52:35.826" starttime="20170810 03:52:35.825" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:35.827">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:52:35.827" starttime="20170810 03:52:35.826" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:36.554">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:52:36.554" starttime="20170810 03:52:35.827" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:36.554">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:52:36.554">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:52:36.554" starttime="20170810 03:52:35.827" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:36.554">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:52:36.555" starttime="20170810 03:52:36.554" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:36.555">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:52:36.555" starttime="20170810 03:52:36.555" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:36.555" starttime="20170810 03:52:35.823" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:36.556" starttime="20170810 03:52:35.823" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:36.556" starttime="20170810 03:52:35.822" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:36.557">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 03:52:36.557" starttime="20170810 03:52:36.556" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:36.560">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:52:36.560" starttime="20170810 03:52:36.559" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:36.561">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:52:36.561" starttime="20170810 03:52:36.561" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:36.561" starttime="20170810 03:52:36.560" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:36.561" starttime="20170810 03:52:36.558" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:36.562" starttime="20170810 03:52:36.557" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:36.652">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:52:36.652">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:52:36.652" starttime="20170810 03:52:36.562" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:36.654">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:52:36.654" starttime="20170810 03:52:36.654" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:36.655">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:52:36.655" starttime="20170810 03:52:36.655" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:36.655" starttime="20170810 03:52:36.654" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:36.655" starttime="20170810 03:52:36.653" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:36.655" starttime="20170810 03:52:36.653" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:52:36.656">Delete All Sessions</msg>
<status endtime="20170810 03:52:36.656" starttime="20170810 03:52:36.656" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:36.656">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:52:36.656" starttime="20170810 03:52:35.821" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:36.657">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:52:36.657" starttime="20170810 03:52:36.656" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:36.657">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:52:36.657">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:52:36.658">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:52:36.658" starttime="20170810 03:52:36.657" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:36.658">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 03:52:36.658" starttime="20170810 03:52:35.821" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:36.658">${host_state} = Running</msg>
<status endtime="20170810 03:52:36.658" starttime="20170810 03:52:35.821" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 03:52:36.659" starttime="20170810 03:52:36.658" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:36.664">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:52:36.664" starttime="20170810 03:52:36.663" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:36.665">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:52:36.665" starttime="20170810 03:52:36.665" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:36.666">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:52:36.666" starttime="20170810 03:52:36.665" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:36.667">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:52:36.667" starttime="20170810 03:52:36.666" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:36.920">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:52:36.920" starttime="20170810 03:52:36.668" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:36.920">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:52:36.920">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:52:36.920" starttime="20170810 03:52:36.667" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:36.921">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:52:36.921" starttime="20170810 03:52:36.920" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:36.921">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:52:36.921" starttime="20170810 03:52:36.921" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:36.922" starttime="20170810 03:52:36.662" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:36.922" starttime="20170810 03:52:36.662" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:36.922" starttime="20170810 03:52:36.661" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:36.922">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 03:52:36.922" starttime="20170810 03:52:36.922" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:36.925">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:52:36.925" starttime="20170810 03:52:36.924" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:36.926">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:52:36.926" starttime="20170810 03:52:36.925" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:36.926" starttime="20170810 03:52:36.925" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:36.926" starttime="20170810 03:52:36.923" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:36.926" starttime="20170810 03:52:36.923" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:36.994">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:52:36.994">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:52:36.994" starttime="20170810 03:52:36.926" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:36.996">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:52:36.996" starttime="20170810 03:52:36.995" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:36.997">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:52:36.997" starttime="20170810 03:52:36.996" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:36.997" starttime="20170810 03:52:36.996" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:36.997" starttime="20170810 03:52:36.995" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:36.997" starttime="20170810 03:52:36.994" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:52:36.997">Delete All Sessions</msg>
<status endtime="20170810 03:52:36.998" starttime="20170810 03:52:36.997" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:36.998">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:52:36.998" starttime="20170810 03:52:36.660" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:36.998">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:52:36.998" starttime="20170810 03:52:36.998" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:36.999">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:52:36.999">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:52:36.999">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:52:36.999" starttime="20170810 03:52:36.999" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:36.999">${state} = Off</msg>
<status endtime="20170810 03:52:37.000" starttime="20170810 03:52:36.660" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:37.000">${boot_progress} = Off</msg>
<status endtime="20170810 03:52:37.000" starttime="20170810 03:52:36.659" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:52:37.000">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 03:52:37.001" starttime="20170810 03:52:37.000" status="FAIL"></status>
</kw>
<status endtime="20170810 03:52:37.001" starttime="20170810 03:52:36.659" status="FAIL"></status>
</kw>
<status endtime="20170810 03:52:37.001" starttime="20170810 03:52:35.356" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:47.006">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:52:47.006" starttime="20170810 03:52:47.006" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:47.007">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:52:47.007" starttime="20170810 03:52:47.007" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:47.008">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:52:47.008" starttime="20170810 03:52:47.007" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:47.008">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:52:47.008" starttime="20170810 03:52:47.008" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:47.187">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:52:47.187" starttime="20170810 03:52:47.009" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:47.187">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:52:47.187">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:52:47.187" starttime="20170810 03:52:47.009" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:47.188">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:52:47.188" starttime="20170810 03:52:47.188" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:47.189">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:52:47.189" starttime="20170810 03:52:47.188" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:47.189" starttime="20170810 03:52:47.005" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:47.189" starttime="20170810 03:52:47.005" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:47.189" starttime="20170810 03:52:47.004" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:47.190">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 03:52:47.190" starttime="20170810 03:52:47.189" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:47.192">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:52:47.192" starttime="20170810 03:52:47.191" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:47.193">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:52:47.193" starttime="20170810 03:52:47.192" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:47.193" starttime="20170810 03:52:47.192" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:47.193" starttime="20170810 03:52:47.190" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:47.193" starttime="20170810 03:52:47.190" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:51.222">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:52:51.223">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:52:51.223" starttime="20170810 03:52:47.193" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:51.225">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:52:51.225" starttime="20170810 03:52:51.224" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:51.225">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:52:51.226" starttime="20170810 03:52:51.225" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:51.227" starttime="20170810 03:52:51.225" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:51.227" starttime="20170810 03:52:51.224" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:51.227" starttime="20170810 03:52:51.223" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:52:51.227">Delete All Sessions</msg>
<status endtime="20170810 03:52:51.227" starttime="20170810 03:52:51.227" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:51.227">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:52:51.227" starttime="20170810 03:52:47.003" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:51.228">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:52:51.228" starttime="20170810 03:52:51.228" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:51.229">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:52:51.229">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:52:51.229">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:52:51.229" starttime="20170810 03:52:51.228" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:51.229">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 03:52:51.229" starttime="20170810 03:52:47.003" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:51.229">${power_state} = On</msg>
<status endtime="20170810 03:52:51.230" starttime="20170810 03:52:47.002" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 03:52:51.230" starttime="20170810 03:52:51.230" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:51.230" starttime="20170810 03:52:47.002" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:51.234">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:52:51.234" starttime="20170810 03:52:51.234" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:51.235">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:52:51.235" starttime="20170810 03:52:51.235" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:51.236">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:52:51.236" starttime="20170810 03:52:51.235" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:51.236">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:52:51.236" starttime="20170810 03:52:51.236" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:51.981">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:52:51.982" starttime="20170810 03:52:51.237" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:51.982">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:52:51.982">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:52:51.982" starttime="20170810 03:52:51.237" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:51.982">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:52:51.983" starttime="20170810 03:52:51.982" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:51.983">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:52:51.983" starttime="20170810 03:52:51.983" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:51.983" starttime="20170810 03:52:51.233" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:51.983" starttime="20170810 03:52:51.232" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:51.984" starttime="20170810 03:52:51.232" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:51.984">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 03:52:51.984" starttime="20170810 03:52:51.984" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:51.986">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:52:51.986" starttime="20170810 03:52:51.986" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:51.987">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:52:51.987" starttime="20170810 03:52:51.987" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:51.987" starttime="20170810 03:52:51.986" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:51.988" starttime="20170810 03:52:51.985" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:51.988" starttime="20170810 03:52:51.985" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:52.113">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:52:52.113">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:52:52.113" starttime="20170810 03:52:51.988" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:52.115">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:52:52.115" starttime="20170810 03:52:52.114" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:52.116">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:52:52.116" starttime="20170810 03:52:52.115" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:52.116" starttime="20170810 03:52:52.115" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:52.116" starttime="20170810 03:52:52.114" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:52.116" starttime="20170810 03:52:52.113" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:52:52.116">Delete All Sessions</msg>
<status endtime="20170810 03:52:52.116" starttime="20170810 03:52:52.116" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:52.117">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:52:52.117" starttime="20170810 03:52:51.231" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:52.117">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:52:52.117" starttime="20170810 03:52:52.117" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:52.118">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:52:52.118">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:52:52.118">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:52:52.118" starttime="20170810 03:52:52.118" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:52.118">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 03:52:52.118" starttime="20170810 03:52:51.231" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:52.119">${host_state} = Running</msg>
<status endtime="20170810 03:52:52.119" starttime="20170810 03:52:51.230" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 03:52:52.119" starttime="20170810 03:52:52.119" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:52.123">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:52:52.124" starttime="20170810 03:52:52.123" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:52.124">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:52:52.124" starttime="20170810 03:52:52.124" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:52.125">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:52:52.125" starttime="20170810 03:52:52.125" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:52.126">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:52:52.126" starttime="20170810 03:52:52.125" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:52.380">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:52:52.380" starttime="20170810 03:52:52.126" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:52.380">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:52:52.380">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:52:52.380" starttime="20170810 03:52:52.126" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:52.381">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:52:52.381" starttime="20170810 03:52:52.380" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:52.381">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:52:52.382" starttime="20170810 03:52:52.381" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:52.382" starttime="20170810 03:52:52.123" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:52.382" starttime="20170810 03:52:52.122" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:52.382" starttime="20170810 03:52:52.122" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:52.382">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 03:52:52.382" starttime="20170810 03:52:52.382" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:52.389">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:52:52.389" starttime="20170810 03:52:52.388" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:52.390">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:52:52.390" starttime="20170810 03:52:52.390" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:52.390" starttime="20170810 03:52:52.389" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:52.391" starttime="20170810 03:52:52.383" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:52.391" starttime="20170810 03:52:52.383" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:52.491">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:52:52.491">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:52:52.491" starttime="20170810 03:52:52.391" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:52.493">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:52:52.493" starttime="20170810 03:52:52.492" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:52.494">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:52:52.494" starttime="20170810 03:52:52.494" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:52.494" starttime="20170810 03:52:52.493" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:52.495" starttime="20170810 03:52:52.492" status="PASS"></status>
</kw>
<status endtime="20170810 03:52:52.495" starttime="20170810 03:52:52.491" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:52:52.495">Delete All Sessions</msg>
<status endtime="20170810 03:52:52.495" starttime="20170810 03:52:52.495" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:52.495">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:52:52.495" starttime="20170810 03:52:52.121" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:52:52.496">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:52:52.496" starttime="20170810 03:52:52.496" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:52:52.496">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:52:52.497">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:52:52.497">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:52:52.497" starttime="20170810 03:52:52.496" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:52.497">${state} = Off</msg>
<status endtime="20170810 03:52:52.497" starttime="20170810 03:52:52.120" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:52:52.497">${boot_progress} = Off</msg>
<status endtime="20170810 03:52:52.497" starttime="20170810 03:52:52.120" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:52:52.498">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 03:52:52.498" starttime="20170810 03:52:52.497" status="FAIL"></status>
</kw>
<status endtime="20170810 03:52:52.498" starttime="20170810 03:52:52.119" status="FAIL"></status>
</kw>
<status endtime="20170810 03:52:52.498" starttime="20170810 03:52:47.001" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:02.503">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:53:02.503" starttime="20170810 03:53:02.503" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:02.504">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:53:02.504" starttime="20170810 03:53:02.504" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:02.505">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:53:02.505" starttime="20170810 03:53:02.504" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:02.506">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:53:02.506" starttime="20170810 03:53:02.505" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:03.287">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:53:03.287" starttime="20170810 03:53:02.506" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:03.288">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:53:03.288">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:53:03.288" starttime="20170810 03:53:02.506" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:03.288">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:53:03.288" starttime="20170810 03:53:03.288" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:03.289">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:53:03.289" starttime="20170810 03:53:03.289" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:03.289" starttime="20170810 03:53:02.502" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:03.289" starttime="20170810 03:53:02.502" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:03.289" starttime="20170810 03:53:02.501" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:03.290">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 03:53:03.290" starttime="20170810 03:53:03.290" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:03.292">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:53:03.292" starttime="20170810 03:53:03.291" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:03.293">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:53:03.293" starttime="20170810 03:53:03.293" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:03.293" starttime="20170810 03:53:03.292" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:03.293" starttime="20170810 03:53:03.291" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:03.293" starttime="20170810 03:53:03.290" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:10.371">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:53:10.372">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:53:10.372" starttime="20170810 03:53:03.294" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:10.374">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:53:10.374" starttime="20170810 03:53:10.374" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:10.375">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:53:10.375" starttime="20170810 03:53:10.375" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:10.375" starttime="20170810 03:53:10.374" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:10.375" starttime="20170810 03:53:10.373" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:10.375" starttime="20170810 03:53:10.373" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:53:10.376">Delete All Sessions</msg>
<status endtime="20170810 03:53:10.376" starttime="20170810 03:53:10.376" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:10.376">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:53:10.376" starttime="20170810 03:53:02.500" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:10.377">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:53:10.377" starttime="20170810 03:53:10.376" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:10.377">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:53:10.377">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:53:10.378">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:53:10.378" starttime="20170810 03:53:10.377" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:10.378">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170810 03:53:10.378" starttime="20170810 03:53:02.500" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:10.378">${power_state} = Off</msg>
<status endtime="20170810 03:53:10.378" starttime="20170810 03:53:02.499" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:53:10.379">On != Off</msg>
<status endtime="20170810 03:53:10.379" starttime="20170810 03:53:10.378" status="FAIL"></status>
</kw>
<status endtime="20170810 03:53:10.379" starttime="20170810 03:53:02.499" status="FAIL"></status>
</kw>
<status endtime="20170810 03:53:10.379" starttime="20170810 03:53:02.499" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:20.384">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:53:20.385" starttime="20170810 03:53:20.384" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:20.385">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:53:20.385" starttime="20170810 03:53:20.385" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:20.386">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:53:20.386" starttime="20170810 03:53:20.386" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:20.387">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:53:20.387" starttime="20170810 03:53:20.386" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:20.767">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:53:20.767" starttime="20170810 03:53:20.387" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:20.767">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:53:20.767">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:53:20.767" starttime="20170810 03:53:20.387" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:20.768">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:53:20.768" starttime="20170810 03:53:20.768" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:20.769">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:53:20.769" starttime="20170810 03:53:20.768" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:20.769" starttime="20170810 03:53:20.384" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:20.769" starttime="20170810 03:53:20.383" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:20.769" starttime="20170810 03:53:20.383" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:20.770">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 03:53:20.770" starttime="20170810 03:53:20.769" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:20.772">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:53:20.772" starttime="20170810 03:53:20.771" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:20.773">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:53:20.773" starttime="20170810 03:53:20.773" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:20.773" starttime="20170810 03:53:20.772" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:20.773" starttime="20170810 03:53:20.771" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:20.773" starttime="20170810 03:53:20.770" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:21.291">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:53:21.291">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:53:21.292" starttime="20170810 03:53:20.773" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:21.294">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:53:21.294" starttime="20170810 03:53:21.293" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:21.294">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:53:21.295" starttime="20170810 03:53:21.294" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:21.295" starttime="20170810 03:53:21.294" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:21.295" starttime="20170810 03:53:21.292" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:21.295" starttime="20170810 03:53:21.292" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:53:21.295">Delete All Sessions</msg>
<status endtime="20170810 03:53:21.295" starttime="20170810 03:53:21.295" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:21.296">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:53:21.296" starttime="20170810 03:53:20.382" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:21.296">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:53:21.296" starttime="20170810 03:53:21.296" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:21.297">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:53:21.297">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:53:21.297">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:53:21.297" starttime="20170810 03:53:21.296" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:21.297">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 03:53:21.297" starttime="20170810 03:53:20.381" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:21.298">${power_state} = On</msg>
<status endtime="20170810 03:53:21.298" starttime="20170810 03:53:20.381" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 03:53:21.298" starttime="20170810 03:53:21.298" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:21.298" starttime="20170810 03:53:20.380" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:21.302">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:53:21.302" starttime="20170810 03:53:21.301" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:21.303">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:53:21.303" starttime="20170810 03:53:21.302" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:21.303">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:53:21.303" starttime="20170810 03:53:21.303" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:21.304">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:53:21.304" starttime="20170810 03:53:21.304" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:21.602">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:53:21.603" starttime="20170810 03:53:21.305" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:21.603">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:53:21.603">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:53:21.603" starttime="20170810 03:53:21.304" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:21.603">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:53:21.603" starttime="20170810 03:53:21.603" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:21.604">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:53:21.604" starttime="20170810 03:53:21.604" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:21.604" starttime="20170810 03:53:21.301" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:21.604" starttime="20170810 03:53:21.301" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:21.604" starttime="20170810 03:53:21.300" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:21.605">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 03:53:21.605" starttime="20170810 03:53:21.605" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:21.607">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:53:21.607" starttime="20170810 03:53:21.606" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:21.608">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:53:21.609" starttime="20170810 03:53:21.608" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:21.609" starttime="20170810 03:53:21.608" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:21.609" starttime="20170810 03:53:21.606" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:21.609" starttime="20170810 03:53:21.605" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:21.698">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:53:21.698">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:53:21.698" starttime="20170810 03:53:21.609" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:21.700">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:53:21.700" starttime="20170810 03:53:21.699" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:21.701">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:53:21.701" starttime="20170810 03:53:21.700" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:21.701" starttime="20170810 03:53:21.700" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:21.701" starttime="20170810 03:53:21.699" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:21.701" starttime="20170810 03:53:21.698" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:53:21.701">Delete All Sessions</msg>
<status endtime="20170810 03:53:21.701" starttime="20170810 03:53:21.701" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:21.702">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:53:21.702" starttime="20170810 03:53:21.299" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:21.702">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:53:21.702" starttime="20170810 03:53:21.702" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:21.703">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:53:21.703">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:53:21.703">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:53:21.703" starttime="20170810 03:53:21.703" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:21.703">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 03:53:21.703" starttime="20170810 03:53:21.299" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:21.704">${host_state} = Running</msg>
<status endtime="20170810 03:53:21.704" starttime="20170810 03:53:21.298" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 03:53:21.704" starttime="20170810 03:53:21.704" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:21.708">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:53:21.708" starttime="20170810 03:53:21.708" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:21.709">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:53:21.709" starttime="20170810 03:53:21.709" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:21.710">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:53:21.710" starttime="20170810 03:53:21.709" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:21.710">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:53:21.710" starttime="20170810 03:53:21.710" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:21.925">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:53:21.925" starttime="20170810 03:53:21.711" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:21.925">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:53:21.925">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:53:21.925" starttime="20170810 03:53:21.711" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:21.925">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:53:21.926" starttime="20170810 03:53:21.925" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:21.926">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:53:21.926" starttime="20170810 03:53:21.926" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:21.926" starttime="20170810 03:53:21.707" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:21.926" starttime="20170810 03:53:21.707" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:21.927" starttime="20170810 03:53:21.706" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:21.927">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 03:53:21.927" starttime="20170810 03:53:21.927" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:21.929">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:53:21.929" starttime="20170810 03:53:21.929" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:21.930">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:53:21.930" starttime="20170810 03:53:21.930" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:21.931" starttime="20170810 03:53:21.929" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:21.931" starttime="20170810 03:53:21.928" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:21.931" starttime="20170810 03:53:21.927" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:22.013">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:53:22.014">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:53:22.014" starttime="20170810 03:53:21.931" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:22.015">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:53:22.015" starttime="20170810 03:53:22.015" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:22.016">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:53:22.016" starttime="20170810 03:53:22.016" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:22.016" starttime="20170810 03:53:22.015" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:22.017" starttime="20170810 03:53:22.014" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:22.017" starttime="20170810 03:53:22.014" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:53:22.017">Delete All Sessions</msg>
<status endtime="20170810 03:53:22.017" starttime="20170810 03:53:22.017" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:22.017">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:53:22.017" starttime="20170810 03:53:21.706" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:22.018">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:53:22.018" starttime="20170810 03:53:22.018" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:22.018">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:53:22.018">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:53:22.019">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:53:22.019" starttime="20170810 03:53:22.018" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:22.019">${state} = Off</msg>
<status endtime="20170810 03:53:22.019" starttime="20170810 03:53:21.705" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:22.019">${boot_progress} = Off</msg>
<status endtime="20170810 03:53:22.019" starttime="20170810 03:53:21.705" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:53:22.020">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 03:53:22.020" starttime="20170810 03:53:22.019" status="FAIL"></status>
</kw>
<status endtime="20170810 03:53:22.020" starttime="20170810 03:53:21.704" status="FAIL"></status>
</kw>
<status endtime="20170810 03:53:22.020" starttime="20170810 03:53:20.380" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:32.025">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:53:32.026" starttime="20170810 03:53:32.025" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:32.026">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:53:32.026" starttime="20170810 03:53:32.026" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:32.027">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:53:32.027" starttime="20170810 03:53:32.026" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:32.028">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:53:32.028" starttime="20170810 03:53:32.027" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:32.274">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:53:32.274" starttime="20170810 03:53:32.028" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:32.274">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:53:32.274">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:53:32.274" starttime="20170810 03:53:32.028" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:32.274">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:53:32.275" starttime="20170810 03:53:32.274" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:32.275">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:53:32.275" starttime="20170810 03:53:32.275" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:32.275" starttime="20170810 03:53:32.024" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:32.275" starttime="20170810 03:53:32.024" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:32.276" starttime="20170810 03:53:32.023" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:32.276">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 03:53:32.276" starttime="20170810 03:53:32.276" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:32.278">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:53:32.278" starttime="20170810 03:53:32.278" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:32.279">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:53:32.279" starttime="20170810 03:53:32.279" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:32.279" starttime="20170810 03:53:32.278" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:32.279" starttime="20170810 03:53:32.277" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:32.279" starttime="20170810 03:53:32.276" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:32.369">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:53:32.369">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:53:32.369" starttime="20170810 03:53:32.280" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:32.371">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:53:32.371" starttime="20170810 03:53:32.370" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:32.372">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:53:32.372" starttime="20170810 03:53:32.372" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:32.372" starttime="20170810 03:53:32.371" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:32.372" starttime="20170810 03:53:32.370" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:32.372" starttime="20170810 03:53:32.369" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:53:32.373">Delete All Sessions</msg>
<status endtime="20170810 03:53:32.373" starttime="20170810 03:53:32.373" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:32.373">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:53:32.373" starttime="20170810 03:53:32.022" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:32.374">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:53:32.374" starttime="20170810 03:53:32.373" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:32.374">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:53:32.374">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:53:32.375">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:53:32.375" starttime="20170810 03:53:32.374" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:32.375">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 03:53:32.375" starttime="20170810 03:53:32.022" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:32.375">${power_state} = On</msg>
<status endtime="20170810 03:53:32.375" starttime="20170810 03:53:32.021" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 03:53:32.376" starttime="20170810 03:53:32.375" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:32.376" starttime="20170810 03:53:32.021" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:32.379">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:53:32.380" starttime="20170810 03:53:32.379" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:32.380">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:53:32.380" starttime="20170810 03:53:32.380" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:32.381">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:53:32.381" starttime="20170810 03:53:32.380" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:32.382">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:53:32.382" starttime="20170810 03:53:32.381" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:32.593">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:53:32.593" starttime="20170810 03:53:32.383" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:32.593">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:53:32.593">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:53:32.593" starttime="20170810 03:53:32.382" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:32.594">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:53:32.594" starttime="20170810 03:53:32.593" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:32.594">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:53:32.594" starttime="20170810 03:53:32.594" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:32.594" starttime="20170810 03:53:32.378" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:32.594" starttime="20170810 03:53:32.378" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:32.595" starttime="20170810 03:53:32.377" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:32.595">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 03:53:32.595" starttime="20170810 03:53:32.595" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:32.598">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:53:32.598" starttime="20170810 03:53:32.597" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:32.599">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:53:32.599" starttime="20170810 03:53:32.598" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:32.599" starttime="20170810 03:53:32.598" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:32.599" starttime="20170810 03:53:32.596" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:32.599" starttime="20170810 03:53:32.595" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:32.688">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:53:32.688">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:53:32.688" starttime="20170810 03:53:32.599" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:32.690">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:53:32.690" starttime="20170810 03:53:32.689" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:32.691">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:53:32.691" starttime="20170810 03:53:32.691" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:32.691" starttime="20170810 03:53:32.690" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:32.691" starttime="20170810 03:53:32.689" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:32.691" starttime="20170810 03:53:32.689" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:53:32.692">Delete All Sessions</msg>
<status endtime="20170810 03:53:32.692" starttime="20170810 03:53:32.692" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:32.692">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:53:32.692" starttime="20170810 03:53:32.377" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:32.693">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:53:32.693" starttime="20170810 03:53:32.692" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:32.693">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:53:32.693">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:53:32.693">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:53:32.693" starttime="20170810 03:53:32.693" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:32.694">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 03:53:32.694" starttime="20170810 03:53:32.376" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:32.694">${host_state} = Running</msg>
<status endtime="20170810 03:53:32.694" starttime="20170810 03:53:32.376" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 03:53:32.695" starttime="20170810 03:53:32.694" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:32.698">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:53:32.699" starttime="20170810 03:53:32.698" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:32.699">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:53:32.699" starttime="20170810 03:53:32.699" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:32.700">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:53:32.700" starttime="20170810 03:53:32.700" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:32.701">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:53:32.701" starttime="20170810 03:53:32.700" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:32.887">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:53:32.887" starttime="20170810 03:53:32.701" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:32.887">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:53:32.887">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:53:32.887" starttime="20170810 03:53:32.701" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:32.888">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:53:32.888" starttime="20170810 03:53:32.888" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:32.889">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:53:32.889" starttime="20170810 03:53:32.888" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:32.889" starttime="20170810 03:53:32.698" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:32.889" starttime="20170810 03:53:32.697" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:32.889" starttime="20170810 03:53:32.697" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:32.890">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 03:53:32.890" starttime="20170810 03:53:32.889" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:32.892">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:53:32.892" starttime="20170810 03:53:32.891" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:32.893">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:53:32.893" starttime="20170810 03:53:32.892" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:32.893" starttime="20170810 03:53:32.892" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:32.893" starttime="20170810 03:53:32.890" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:32.893" starttime="20170810 03:53:32.890" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:32.959">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:53:32.959">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:53:32.959" starttime="20170810 03:53:32.893" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:32.961">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:53:32.961" starttime="20170810 03:53:32.961" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:32.962">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:53:32.962" starttime="20170810 03:53:32.962" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:32.962" starttime="20170810 03:53:32.961" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:32.962" starttime="20170810 03:53:32.960" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:32.963" starttime="20170810 03:53:32.960" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:53:32.963">Delete All Sessions</msg>
<status endtime="20170810 03:53:32.963" starttime="20170810 03:53:32.963" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:32.963">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:53:32.963" starttime="20170810 03:53:32.696" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:32.964">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:53:32.964" starttime="20170810 03:53:32.964" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:32.964">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:53:32.965">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:53:32.965">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:53:32.965" starttime="20170810 03:53:32.964" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:32.965">${state} = Off</msg>
<status endtime="20170810 03:53:32.965" starttime="20170810 03:53:32.695" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:32.965">${boot_progress} = Off</msg>
<status endtime="20170810 03:53:32.965" starttime="20170810 03:53:32.695" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:53:32.966">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 03:53:32.966" starttime="20170810 03:53:32.965" status="FAIL"></status>
</kw>
<status endtime="20170810 03:53:32.966" starttime="20170810 03:53:32.695" status="FAIL"></status>
</kw>
<status endtime="20170810 03:53:32.966" starttime="20170810 03:53:32.021" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:42.972">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:53:42.972" starttime="20170810 03:53:42.971" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:42.972">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:53:42.973" starttime="20170810 03:53:42.972" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:42.973">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:53:42.973" starttime="20170810 03:53:42.973" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:42.974">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:53:42.974" starttime="20170810 03:53:42.973" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:43.329">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:53:43.329" starttime="20170810 03:53:42.974" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:43.329">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:53:43.329">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:53:43.330" starttime="20170810 03:53:42.974" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:43.330">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:53:43.330" starttime="20170810 03:53:43.330" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:43.331">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:53:43.331" starttime="20170810 03:53:43.330" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:43.331" starttime="20170810 03:53:42.971" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:43.331" starttime="20170810 03:53:42.970" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:43.331" starttime="20170810 03:53:42.969" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:43.332">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 03:53:43.332" starttime="20170810 03:53:43.332" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:43.334">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:53:43.334" starttime="20170810 03:53:43.333" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:43.335">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:53:43.335" starttime="20170810 03:53:43.335" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:43.335" starttime="20170810 03:53:43.334" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:43.335" starttime="20170810 03:53:43.333" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:43.335" starttime="20170810 03:53:43.332" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:44.233">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:53:44.233">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:53:44.233" starttime="20170810 03:53:43.336" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:44.235">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:53:44.235" starttime="20170810 03:53:44.234" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:44.236">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:53:44.236" starttime="20170810 03:53:44.236" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:44.236" starttime="20170810 03:53:44.235" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:44.237" starttime="20170810 03:53:44.234" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:44.237" starttime="20170810 03:53:44.233" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:53:44.237">Delete All Sessions</msg>
<status endtime="20170810 03:53:44.237" starttime="20170810 03:53:44.237" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:44.237">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:53:44.237" starttime="20170810 03:53:42.968" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:44.238">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:53:44.238" starttime="20170810 03:53:44.238" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:44.238">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:53:44.238">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:53:44.239">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:53:44.239" starttime="20170810 03:53:44.238" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:44.239">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 03:53:44.239" starttime="20170810 03:53:42.968" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:44.239">${power_state} = On</msg>
<status endtime="20170810 03:53:44.239" starttime="20170810 03:53:42.967" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 03:53:44.240" starttime="20170810 03:53:44.240" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:44.240" starttime="20170810 03:53:42.967" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:44.244">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:53:44.244" starttime="20170810 03:53:44.243" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:44.245">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:53:44.245" starttime="20170810 03:53:44.244" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:44.245">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:53:44.245" starttime="20170810 03:53:44.245" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:44.246">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:53:44.246" starttime="20170810 03:53:44.246" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:44.673">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:53:44.673" starttime="20170810 03:53:44.247" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:44.673">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:53:44.673">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:53:44.673" starttime="20170810 03:53:44.246" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:44.674">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:53:44.674" starttime="20170810 03:53:44.673" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:44.674">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:53:44.675" starttime="20170810 03:53:44.674" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:44.675" starttime="20170810 03:53:44.243" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:44.675" starttime="20170810 03:53:44.242" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:44.675" starttime="20170810 03:53:44.242" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:44.675">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 03:53:44.675" starttime="20170810 03:53:44.675" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:44.681">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:53:44.682" starttime="20170810 03:53:44.677" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:44.682">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:53:44.683" starttime="20170810 03:53:44.682" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:44.683" starttime="20170810 03:53:44.682" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:44.683" starttime="20170810 03:53:44.676" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:44.683" starttime="20170810 03:53:44.676" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:45.195">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:53:45.195">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:53:45.195" starttime="20170810 03:53:44.683" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:45.197">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:53:45.197" starttime="20170810 03:53:45.197" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:45.198">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:53:45.198" starttime="20170810 03:53:45.198" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:45.198" starttime="20170810 03:53:45.197" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:45.198" starttime="20170810 03:53:45.196" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:45.198" starttime="20170810 03:53:45.196" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:53:45.199">Delete All Sessions</msg>
<status endtime="20170810 03:53:45.199" starttime="20170810 03:53:45.199" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:45.199">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:53:45.199" starttime="20170810 03:53:44.241" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:45.200">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:53:45.200" starttime="20170810 03:53:45.199" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:45.200">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:53:45.200">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:53:45.200">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:53:45.201" starttime="20170810 03:53:45.200" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:45.201">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 03:53:45.201" starttime="20170810 03:53:44.241" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:45.201">${host_state} = Running</msg>
<status endtime="20170810 03:53:45.201" starttime="20170810 03:53:44.240" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 03:53:45.202" starttime="20170810 03:53:45.201" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:45.206">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:53:45.206" starttime="20170810 03:53:45.205" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:45.207">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:53:45.207" starttime="20170810 03:53:45.206" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:45.207">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:53:45.207" starttime="20170810 03:53:45.207" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:45.208">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:53:45.208" starttime="20170810 03:53:45.207" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:45.626">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:53:45.626" starttime="20170810 03:53:45.209" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:45.626">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:53:45.626">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:53:45.626" starttime="20170810 03:53:45.208" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:45.627">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:53:45.627" starttime="20170810 03:53:45.626" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:45.627">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:53:45.628" starttime="20170810 03:53:45.627" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:45.628" starttime="20170810 03:53:45.205" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:45.628" starttime="20170810 03:53:45.204" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:45.628" starttime="20170810 03:53:45.204" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:45.629">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 03:53:45.629" starttime="20170810 03:53:45.628" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:45.631">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:53:45.631" starttime="20170810 03:53:45.630" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:45.632">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:53:45.632" starttime="20170810 03:53:45.631" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:45.632" starttime="20170810 03:53:45.631" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:45.632" starttime="20170810 03:53:45.629" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:45.632" starttime="20170810 03:53:45.629" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:46.164">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:53:46.164">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:53:46.164" starttime="20170810 03:53:45.632" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:46.166">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:53:46.166" starttime="20170810 03:53:46.165" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:46.167">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:53:46.167" starttime="20170810 03:53:46.167" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:46.167" starttime="20170810 03:53:46.166" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:46.167" starttime="20170810 03:53:46.165" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:46.168" starttime="20170810 03:53:46.164" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:53:46.168">Delete All Sessions</msg>
<status endtime="20170810 03:53:46.168" starttime="20170810 03:53:46.168" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:46.168">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:53:46.168" starttime="20170810 03:53:45.203" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:46.169">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:53:46.169" starttime="20170810 03:53:46.168" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:46.169">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:53:46.169">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:53:46.170">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:53:46.170" starttime="20170810 03:53:46.169" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:46.170">${state} = Off</msg>
<status endtime="20170810 03:53:46.170" starttime="20170810 03:53:45.203" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:46.170">${boot_progress} = Off</msg>
<status endtime="20170810 03:53:46.170" starttime="20170810 03:53:45.202" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:53:46.171">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 03:53:46.171" starttime="20170810 03:53:46.170" status="FAIL"></status>
</kw>
<status endtime="20170810 03:53:46.171" starttime="20170810 03:53:45.202" status="FAIL"></status>
</kw>
<status endtime="20170810 03:53:46.171" starttime="20170810 03:53:42.967" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:56.176">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:53:56.177" starttime="20170810 03:53:56.176" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:56.177">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:53:56.177" starttime="20170810 03:53:56.177" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:56.178">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:53:56.178" starttime="20170810 03:53:56.178" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:56.179">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:53:56.179" starttime="20170810 03:53:56.178" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:56.639">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:53:56.639" starttime="20170810 03:53:56.180" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:56.639">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:53:56.639">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:53:56.639" starttime="20170810 03:53:56.179" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:56.640">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:53:56.640" starttime="20170810 03:53:56.640" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:56.641">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:53:56.641" starttime="20170810 03:53:56.640" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:56.641" starttime="20170810 03:53:56.176" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:56.641" starttime="20170810 03:53:56.175" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:56.641" starttime="20170810 03:53:56.174" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:56.642">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 03:53:56.642" starttime="20170810 03:53:56.641" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:56.644">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:53:56.644" starttime="20170810 03:53:56.643" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:56.645">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:53:56.645" starttime="20170810 03:53:56.644" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:56.645" starttime="20170810 03:53:56.644" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:56.645" starttime="20170810 03:53:56.642" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:56.645" starttime="20170810 03:53:56.642" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:56.923">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:53:56.924">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:53:56.924" starttime="20170810 03:53:56.645" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:56.926">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:53:56.926" starttime="20170810 03:53:56.925" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:56.927">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:53:56.927" starttime="20170810 03:53:56.927" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:56.927" starttime="20170810 03:53:56.926" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:56.927" starttime="20170810 03:53:56.924" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:56.927" starttime="20170810 03:53:56.924" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:53:56.928">Delete All Sessions</msg>
<status endtime="20170810 03:53:56.928" starttime="20170810 03:53:56.927" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:56.928">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:53:56.928" starttime="20170810 03:53:56.173" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:56.928">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:53:56.929" starttime="20170810 03:53:56.928" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:56.929">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:53:56.929">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:53:56.929">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:53:56.929" starttime="20170810 03:53:56.929" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:56.930">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 03:53:56.930" starttime="20170810 03:53:56.173" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:56.930">${power_state} = On</msg>
<status endtime="20170810 03:53:56.930" starttime="20170810 03:53:56.172" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 03:53:56.930" starttime="20170810 03:53:56.930" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:56.931" starttime="20170810 03:53:56.172" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:56.934">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:53:56.935" starttime="20170810 03:53:56.934" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:56.935">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:53:56.935" starttime="20170810 03:53:56.935" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:56.936">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:53:56.936" starttime="20170810 03:53:56.935" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:56.936">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:53:56.936" starttime="20170810 03:53:56.936" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:57.282">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:53:57.282" starttime="20170810 03:53:56.937" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:57.282">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:53:57.282">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:53:57.282" starttime="20170810 03:53:56.937" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:57.283">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:53:57.283" starttime="20170810 03:53:57.283" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:57.284">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:53:57.284" starttime="20170810 03:53:57.284" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:57.284" starttime="20170810 03:53:56.933" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:57.284" starttime="20170810 03:53:56.933" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:57.284" starttime="20170810 03:53:56.932" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:57.285">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 03:53:57.285" starttime="20170810 03:53:57.285" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:57.287">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:53:57.287" starttime="20170810 03:53:57.286" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:57.288">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:53:57.288" starttime="20170810 03:53:57.288" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:57.288" starttime="20170810 03:53:57.287" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:57.289" starttime="20170810 03:53:57.286" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:57.289" starttime="20170810 03:53:57.285" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:57.987">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:53:57.987">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:53:57.987" starttime="20170810 03:53:57.289" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:57.989">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:53:57.989" starttime="20170810 03:53:57.988" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:57.990">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:53:57.990" starttime="20170810 03:53:57.989" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:57.990" starttime="20170810 03:53:57.989" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:57.990" starttime="20170810 03:53:57.988" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:57.990" starttime="20170810 03:53:57.987" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:53:57.990">Delete All Sessions</msg>
<status endtime="20170810 03:53:57.991" starttime="20170810 03:53:57.990" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:57.991">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:53:57.991" starttime="20170810 03:53:56.932" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:57.991">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:53:57.991" starttime="20170810 03:53:57.991" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:57.992">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:53:57.992">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:53:57.992">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:53:57.992" starttime="20170810 03:53:57.992" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:57.992">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 03:53:57.993" starttime="20170810 03:53:56.931" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:57.993">${host_state} = Running</msg>
<status endtime="20170810 03:53:57.993" starttime="20170810 03:53:56.931" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 03:53:57.993" starttime="20170810 03:53:57.993" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:57.997">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:53:57.998" starttime="20170810 03:53:57.997" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:57.998">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:53:57.998" starttime="20170810 03:53:57.998" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:57.999">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:53:57.999" starttime="20170810 03:53:57.998" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:57.999">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:53:57.999" starttime="20170810 03:53:57.999" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:58.305">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:53:58.305" starttime="20170810 03:53:58.000" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:58.305">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:53:58.305">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:53:58.305" starttime="20170810 03:53:58.000" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:58.306">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:53:58.306" starttime="20170810 03:53:58.306" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:58.307">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:53:58.307" starttime="20170810 03:53:58.306" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:58.307" starttime="20170810 03:53:57.996" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:58.307" starttime="20170810 03:53:57.996" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:58.307" starttime="20170810 03:53:57.995" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:58.308">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 03:53:58.308" starttime="20170810 03:53:58.307" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:58.310">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:53:58.310" starttime="20170810 03:53:58.309" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:58.311">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:53:58.311" starttime="20170810 03:53:58.310" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:58.311" starttime="20170810 03:53:58.310" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:58.311" starttime="20170810 03:53:58.308" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:58.311" starttime="20170810 03:53:58.308" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:58.952">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:53:58.952">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:53:58.953" starttime="20170810 03:53:58.311" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:58.954">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:53:58.954" starttime="20170810 03:53:58.954" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:58.955">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:53:58.955" starttime="20170810 03:53:58.955" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:58.955" starttime="20170810 03:53:58.954" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:58.955" starttime="20170810 03:53:58.953" status="PASS"></status>
</kw>
<status endtime="20170810 03:53:58.956" starttime="20170810 03:53:58.953" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:53:58.956">Delete All Sessions</msg>
<status endtime="20170810 03:53:58.956" starttime="20170810 03:53:58.956" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:58.956">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:53:58.956" starttime="20170810 03:53:57.995" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:53:58.957">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:53:58.957" starttime="20170810 03:53:58.957" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:53:58.958">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:53:58.958">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:53:58.958">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:53:58.958" starttime="20170810 03:53:58.957" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:58.958">${state} = Off</msg>
<status endtime="20170810 03:53:58.958" starttime="20170810 03:53:57.994" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:53:58.958">${boot_progress} = Off</msg>
<status endtime="20170810 03:53:58.958" starttime="20170810 03:53:57.994" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:53:58.959">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 03:53:58.959" starttime="20170810 03:53:58.959" status="FAIL"></status>
</kw>
<status endtime="20170810 03:53:58.959" starttime="20170810 03:53:57.994" status="FAIL"></status>
</kw>
<status endtime="20170810 03:53:58.959" starttime="20170810 03:53:56.172" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:08.965">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:54:08.965" starttime="20170810 03:54:08.965" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:08.966">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:54:08.966" starttime="20170810 03:54:08.966" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:08.967">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:54:08.967" starttime="20170810 03:54:08.966" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:08.967">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:54:08.967" starttime="20170810 03:54:08.967" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:09.291">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:54:09.291" starttime="20170810 03:54:08.968" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:54:09.291">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:54:09.291">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:54:09.291" starttime="20170810 03:54:08.967" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:09.292">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:54:09.292" starttime="20170810 03:54:09.292" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:09.293">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:54:09.293" starttime="20170810 03:54:09.292" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:09.293" starttime="20170810 03:54:08.964" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:09.293" starttime="20170810 03:54:08.963" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:09.293" starttime="20170810 03:54:08.962" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:09.294">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 03:54:09.294" starttime="20170810 03:54:09.294" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:09.296">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:54:09.296" starttime="20170810 03:54:09.295" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:09.297">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:54:09.297" starttime="20170810 03:54:09.297" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:09.297" starttime="20170810 03:54:09.296" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:09.297" starttime="20170810 03:54:09.295" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:09.297" starttime="20170810 03:54:09.294" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:09.908">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:54:09.908">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:54:09.908" starttime="20170810 03:54:09.298" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:09.910">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:54:09.910" starttime="20170810 03:54:09.909" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:09.911">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:54:09.911" starttime="20170810 03:54:09.911" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:09.911" starttime="20170810 03:54:09.910" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:09.911" starttime="20170810 03:54:09.909" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:09.911" starttime="20170810 03:54:09.908" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:54:09.912">Delete All Sessions</msg>
<status endtime="20170810 03:54:09.912" starttime="20170810 03:54:09.912" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:54:09.912">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:54:09.912" starttime="20170810 03:54:08.962" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:09.913">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:54:09.913" starttime="20170810 03:54:09.913" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:09.913">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:54:09.914">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:54:09.914">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:54:09.914" starttime="20170810 03:54:09.913" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:54:09.914">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 03:54:09.914" starttime="20170810 03:54:08.961" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:54:09.914">${power_state} = On</msg>
<status endtime="20170810 03:54:09.914" starttime="20170810 03:54:08.961" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 03:54:09.915" starttime="20170810 03:54:09.915" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:09.915" starttime="20170810 03:54:08.960" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:09.919">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:54:09.919" starttime="20170810 03:54:09.918" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:09.919">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:54:09.920" starttime="20170810 03:54:09.919" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:09.920">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:54:09.920" starttime="20170810 03:54:09.920" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:09.921">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:54:09.921" starttime="20170810 03:54:09.921" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:10.290">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:54:10.291" starttime="20170810 03:54:09.922" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:54:10.291">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:54:10.291">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:54:10.291" starttime="20170810 03:54:09.921" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:10.292">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:54:10.292" starttime="20170810 03:54:10.291" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:10.292">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:54:10.292" starttime="20170810 03:54:10.292" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:10.293" starttime="20170810 03:54:09.918" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:10.293" starttime="20170810 03:54:09.917" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:10.293" starttime="20170810 03:54:09.917" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:10.293">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 03:54:10.293" starttime="20170810 03:54:10.293" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:10.296">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:54:10.296" starttime="20170810 03:54:10.295" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:10.297">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:54:10.297" starttime="20170810 03:54:10.297" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:10.297" starttime="20170810 03:54:10.296" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:10.297" starttime="20170810 03:54:10.294" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:10.297" starttime="20170810 03:54:10.294" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:11.288">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:54:11.288">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:54:11.288" starttime="20170810 03:54:10.297" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:11.290">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:54:11.290" starttime="20170810 03:54:11.290" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:11.291">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:54:11.291" starttime="20170810 03:54:11.291" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:11.291" starttime="20170810 03:54:11.290" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:11.291" starttime="20170810 03:54:11.289" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:11.291" starttime="20170810 03:54:11.289" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:54:11.292">Delete All Sessions</msg>
<status endtime="20170810 03:54:11.292" starttime="20170810 03:54:11.292" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:54:11.292">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:54:11.292" starttime="20170810 03:54:09.916" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:11.293">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:54:11.293" starttime="20170810 03:54:11.292" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:11.293">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:54:11.293">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:54:11.294">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:54:11.294" starttime="20170810 03:54:11.293" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:54:11.294">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 03:54:11.294" starttime="20170810 03:54:09.916" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:54:11.294">${host_state} = Running</msg>
<status endtime="20170810 03:54:11.294" starttime="20170810 03:54:09.915" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 03:54:11.295" starttime="20170810 03:54:11.295" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:11.299">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:54:11.299" starttime="20170810 03:54:11.298" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:11.300">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:54:11.300" starttime="20170810 03:54:11.299" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:11.300">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:54:11.300" starttime="20170810 03:54:11.300" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:11.301">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:54:11.301" starttime="20170810 03:54:11.301" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:11.547">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:54:11.548" starttime="20170810 03:54:11.302" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:54:11.548">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:54:11.548">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:54:11.548" starttime="20170810 03:54:11.301" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:11.548">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:54:11.549" starttime="20170810 03:54:11.548" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:11.549">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:54:11.549" starttime="20170810 03:54:11.549" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:11.549" starttime="20170810 03:54:11.298" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:11.549" starttime="20170810 03:54:11.298" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:11.550" starttime="20170810 03:54:11.297" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:11.550">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 03:54:11.550" starttime="20170810 03:54:11.550" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:11.552">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:54:11.552" starttime="20170810 03:54:11.552" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:11.553">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:54:11.553" starttime="20170810 03:54:11.553" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:11.553" starttime="20170810 03:54:11.553" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:11.554" starttime="20170810 03:54:11.551" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:11.554" starttime="20170810 03:54:11.550" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:12.322">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:54:12.323">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:54:12.323" starttime="20170810 03:54:11.554" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:12.325">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:54:12.325" starttime="20170810 03:54:12.324" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:12.326">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:54:12.326" starttime="20170810 03:54:12.325" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:12.326" starttime="20170810 03:54:12.325" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:12.326" starttime="20170810 03:54:12.324" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:12.326" starttime="20170810 03:54:12.323" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:54:12.326">Delete All Sessions</msg>
<status endtime="20170810 03:54:12.327" starttime="20170810 03:54:12.326" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:54:12.327">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:54:12.327" starttime="20170810 03:54:11.296" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:12.327">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:54:12.327" starttime="20170810 03:54:12.327" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:12.328">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:54:12.328">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:54:12.328">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:54:12.328" starttime="20170810 03:54:12.328" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:54:12.329">${state} = Off</msg>
<status endtime="20170810 03:54:12.329" starttime="20170810 03:54:11.296" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:54:12.329">${boot_progress} = Off</msg>
<status endtime="20170810 03:54:12.329" starttime="20170810 03:54:11.295" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:54:12.329">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 03:54:12.329" starttime="20170810 03:54:12.329" status="FAIL"></status>
</kw>
<status endtime="20170810 03:54:12.330" starttime="20170810 03:54:11.295" status="FAIL"></status>
</kw>
<status endtime="20170810 03:54:12.330" starttime="20170810 03:54:08.960" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:22.336">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:54:22.336" starttime="20170810 03:54:22.335" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:22.337">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:54:22.337" starttime="20170810 03:54:22.336" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:22.337">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:54:22.337" starttime="20170810 03:54:22.337" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:22.338">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:54:22.338" starttime="20170810 03:54:22.338" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:22.642">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:54:22.643" starttime="20170810 03:54:22.339" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:54:22.643">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:54:22.643">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:54:22.643" starttime="20170810 03:54:22.338" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:22.644">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:54:22.644" starttime="20170810 03:54:22.643" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:22.644">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:54:22.644" starttime="20170810 03:54:22.644" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:22.645" starttime="20170810 03:54:22.335" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:22.645" starttime="20170810 03:54:22.334" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:22.645" starttime="20170810 03:54:22.333" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:22.645">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 03:54:22.645" starttime="20170810 03:54:22.645" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:22.648">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:54:22.648" starttime="20170810 03:54:22.647" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:22.649">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:54:22.649" starttime="20170810 03:54:22.648" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:22.649" starttime="20170810 03:54:22.648" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:22.649" starttime="20170810 03:54:22.646" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:22.649" starttime="20170810 03:54:22.646" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:22.974">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:54:22.974">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:54:22.974" starttime="20170810 03:54:22.649" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:22.977">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:54:22.977" starttime="20170810 03:54:22.976" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:22.978">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:54:22.978" starttime="20170810 03:54:22.977" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:22.978" starttime="20170810 03:54:22.977" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:22.978" starttime="20170810 03:54:22.975" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:22.978" starttime="20170810 03:54:22.975" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:54:22.978">Delete All Sessions</msg>
<status endtime="20170810 03:54:22.979" starttime="20170810 03:54:22.978" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:54:22.979">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:54:22.979" starttime="20170810 03:54:22.332" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:22.979">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:54:22.979" starttime="20170810 03:54:22.979" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:22.980">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:54:22.980">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:54:22.980">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:54:22.980" starttime="20170810 03:54:22.980" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:54:22.980">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 03:54:22.980" starttime="20170810 03:54:22.332" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:54:22.981">${power_state} = On</msg>
<status endtime="20170810 03:54:22.981" starttime="20170810 03:54:22.331" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 03:54:22.981" starttime="20170810 03:54:22.981" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:22.981" starttime="20170810 03:54:22.331" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:22.985">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:54:22.986" starttime="20170810 03:54:22.985" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:22.986">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:54:22.986" starttime="20170810 03:54:22.986" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:22.987">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:54:22.987" starttime="20170810 03:54:22.987" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:22.988">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:54:22.988" starttime="20170810 03:54:22.987" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:23.275">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:54:23.275" starttime="20170810 03:54:22.988" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:54:23.275">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:54:23.275">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:54:23.275" starttime="20170810 03:54:22.988" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:23.276">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:54:23.276" starttime="20170810 03:54:23.276" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:23.277">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:54:23.277" starttime="20170810 03:54:23.276" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:23.277" starttime="20170810 03:54:22.985" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:23.277" starttime="20170810 03:54:22.984" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:23.277" starttime="20170810 03:54:22.983" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:23.278">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 03:54:23.278" starttime="20170810 03:54:23.277" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:23.283">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:54:23.283" starttime="20170810 03:54:23.279" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:23.284">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:54:23.284" starttime="20170810 03:54:23.284" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:23.284" starttime="20170810 03:54:23.283" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:23.284" starttime="20170810 03:54:23.278" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:23.284" starttime="20170810 03:54:23.278" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:24.062">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:54:24.062">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:54:24.063" starttime="20170810 03:54:23.285" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:24.064">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:54:24.064" starttime="20170810 03:54:24.064" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:24.065">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:54:24.065" starttime="20170810 03:54:24.065" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:24.066" starttime="20170810 03:54:24.065" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:24.066" starttime="20170810 03:54:24.063" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:24.066" starttime="20170810 03:54:24.063" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:54:24.066">Delete All Sessions</msg>
<status endtime="20170810 03:54:24.066" starttime="20170810 03:54:24.066" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:54:24.066">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:54:24.066" starttime="20170810 03:54:22.983" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:24.067">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:54:24.067" starttime="20170810 03:54:24.067" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:24.068">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:54:24.068">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:54:24.068">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:54:24.068" starttime="20170810 03:54:24.067" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:54:24.068">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 03:54:24.068" starttime="20170810 03:54:22.982" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:54:24.068">${host_state} = Running</msg>
<status endtime="20170810 03:54:24.069" starttime="20170810 03:54:22.982" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 03:54:24.069" starttime="20170810 03:54:24.069" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:24.073">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:54:24.073" starttime="20170810 03:54:24.073" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:24.074">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:54:24.074" starttime="20170810 03:54:24.074" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:24.074">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:54:24.075" starttime="20170810 03:54:24.074" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:24.075">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:54:24.075" starttime="20170810 03:54:24.075" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:24.402">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:54:24.403" starttime="20170810 03:54:24.076" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:54:24.403">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:54:24.403">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:54:24.403" starttime="20170810 03:54:24.075" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:24.403">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:54:24.404" starttime="20170810 03:54:24.403" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:24.404">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:54:24.404" starttime="20170810 03:54:24.404" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:24.404" starttime="20170810 03:54:24.072" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:24.404" starttime="20170810 03:54:24.072" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:24.405" starttime="20170810 03:54:24.071" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:24.405">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 03:54:24.405" starttime="20170810 03:54:24.405" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:24.407">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:54:24.407" starttime="20170810 03:54:24.407" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:24.408">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:54:24.408" starttime="20170810 03:54:24.408" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:24.408" starttime="20170810 03:54:24.407" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:24.409" starttime="20170810 03:54:24.406" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:24.409" starttime="20170810 03:54:24.405" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:25.113">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:54:25.113">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:54:25.113" starttime="20170810 03:54:24.409" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:25.115">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:54:25.115" starttime="20170810 03:54:25.115" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:25.116">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:54:25.116" starttime="20170810 03:54:25.116" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:25.116" starttime="20170810 03:54:25.115" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:25.116" starttime="20170810 03:54:25.114" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:25.117" starttime="20170810 03:54:25.114" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:54:25.117">Delete All Sessions</msg>
<status endtime="20170810 03:54:25.117" starttime="20170810 03:54:25.117" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:54:25.117">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:54:25.117" starttime="20170810 03:54:24.070" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:25.118">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:54:25.118" starttime="20170810 03:54:25.117" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:25.118">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:54:25.118">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:54:25.119">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:54:25.119" starttime="20170810 03:54:25.118" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:54:25.119">${state} = Off</msg>
<status endtime="20170810 03:54:25.119" starttime="20170810 03:54:24.070" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:54:25.119">${boot_progress} = Off</msg>
<status endtime="20170810 03:54:25.119" starttime="20170810 03:54:24.070" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:54:25.120">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 03:54:25.120" starttime="20170810 03:54:25.119" status="FAIL"></status>
</kw>
<status endtime="20170810 03:54:25.120" starttime="20170810 03:54:24.069" status="FAIL"></status>
</kw>
<status endtime="20170810 03:54:25.120" starttime="20170810 03:54:22.330" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:35.126">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:54:35.126" starttime="20170810 03:54:35.126" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:35.127">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:54:35.127" starttime="20170810 03:54:35.127" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:35.128">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:54:35.128" starttime="20170810 03:54:35.127" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:35.128">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:54:35.128" starttime="20170810 03:54:35.128" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:35.385">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:54:35.385" starttime="20170810 03:54:35.129" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:54:35.385">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:54:35.385">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:54:35.385" starttime="20170810 03:54:35.129" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:35.386">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:54:35.386" starttime="20170810 03:54:35.386" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:35.387">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:54:35.387" starttime="20170810 03:54:35.386" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:35.387" starttime="20170810 03:54:35.125" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:35.387" starttime="20170810 03:54:35.124" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:35.387" starttime="20170810 03:54:35.123" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:35.388">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 03:54:35.388" starttime="20170810 03:54:35.387" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:35.390">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:54:35.390" starttime="20170810 03:54:35.389" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:35.391">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:54:35.391" starttime="20170810 03:54:35.390" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:35.391" starttime="20170810 03:54:35.390" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:35.391" starttime="20170810 03:54:35.388" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:35.391" starttime="20170810 03:54:35.388" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:35.481">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:54:35.481">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:54:35.481" starttime="20170810 03:54:35.391" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:35.483">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:54:35.483" starttime="20170810 03:54:35.482" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:35.484">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:54:35.484" starttime="20170810 03:54:35.484" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:35.485" starttime="20170810 03:54:35.483" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:35.485" starttime="20170810 03:54:35.482" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:35.485" starttime="20170810 03:54:35.481" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:54:35.485">Delete All Sessions</msg>
<status endtime="20170810 03:54:35.485" starttime="20170810 03:54:35.485" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:54:35.485">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:54:35.485" starttime="20170810 03:54:35.123" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:35.486">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:54:35.486" starttime="20170810 03:54:35.486" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:35.487">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:54:35.487">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:54:35.487">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:54:35.487" starttime="20170810 03:54:35.486" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:54:35.487">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 03:54:35.487" starttime="20170810 03:54:35.122" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:54:35.487">${power_state} = On</msg>
<status endtime="20170810 03:54:35.487" starttime="20170810 03:54:35.122" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 03:54:35.488" starttime="20170810 03:54:35.488" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:35.488" starttime="20170810 03:54:35.121" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:35.492">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:54:35.492" starttime="20170810 03:54:35.491" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:35.493">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:54:35.493" starttime="20170810 03:54:35.492" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:35.493">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:54:35.493" starttime="20170810 03:54:35.493" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:35.494">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:54:35.494" starttime="20170810 03:54:35.493" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:35.905">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:54:35.905" starttime="20170810 03:54:35.495" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:54:35.905">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:54:35.905">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:54:35.905" starttime="20170810 03:54:35.494" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:35.906">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:54:35.906" starttime="20170810 03:54:35.906" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:35.907">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:54:35.907" starttime="20170810 03:54:35.907" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:35.907" starttime="20170810 03:54:35.491" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:35.907" starttime="20170810 03:54:35.490" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:35.907" starttime="20170810 03:54:35.490" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:35.908">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 03:54:35.908" starttime="20170810 03:54:35.908" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:35.910">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:54:35.911" starttime="20170810 03:54:35.909" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:35.911">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:54:35.912" starttime="20170810 03:54:35.911" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:35.912" starttime="20170810 03:54:35.911" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:35.912" starttime="20170810 03:54:35.909" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:35.912" starttime="20170810 03:54:35.908" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:36.054">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:54:36.054">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:54:36.054" starttime="20170810 03:54:35.912" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:36.056">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:54:36.056" starttime="20170810 03:54:36.056" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:36.057">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:54:36.057" starttime="20170810 03:54:36.057" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:36.057" starttime="20170810 03:54:36.056" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:36.058" starttime="20170810 03:54:36.055" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:36.058" starttime="20170810 03:54:36.055" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:54:36.058">Delete All Sessions</msg>
<status endtime="20170810 03:54:36.058" starttime="20170810 03:54:36.058" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:54:36.059">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:54:36.059" starttime="20170810 03:54:35.489" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:36.059">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:54:36.059" starttime="20170810 03:54:36.059" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:36.060">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:54:36.060">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:54:36.060">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:54:36.060" starttime="20170810 03:54:36.059" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:54:36.060">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 03:54:36.060" starttime="20170810 03:54:35.489" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:54:36.061">${host_state} = Running</msg>
<status endtime="20170810 03:54:36.061" starttime="20170810 03:54:35.488" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 03:54:36.061" starttime="20170810 03:54:36.061" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:36.065">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:54:36.066" starttime="20170810 03:54:36.065" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:36.066">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:54:36.066" starttime="20170810 03:54:36.066" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:36.067">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:54:36.067" starttime="20170810 03:54:36.066" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:36.067">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:54:36.068" starttime="20170810 03:54:36.067" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:36.339">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:54:36.339" starttime="20170810 03:54:36.068" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:54:36.340">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:54:36.340">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:54:36.340" starttime="20170810 03:54:36.068" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:36.340">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:54:36.340" starttime="20170810 03:54:36.340" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:36.341">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:54:36.341" starttime="20170810 03:54:36.341" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:36.341" starttime="20170810 03:54:36.064" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:36.341" starttime="20170810 03:54:36.064" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:36.342" starttime="20170810 03:54:36.063" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:36.342">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 03:54:36.342" starttime="20170810 03:54:36.342" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:36.344">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:54:36.344" starttime="20170810 03:54:36.344" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:36.345">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:54:36.345" starttime="20170810 03:54:36.345" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:36.346" starttime="20170810 03:54:36.344" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:36.346" starttime="20170810 03:54:36.343" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:36.346" starttime="20170810 03:54:36.342" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:36.428">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:54:36.428">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:54:36.428" starttime="20170810 03:54:36.346" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:36.430">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:54:36.430" starttime="20170810 03:54:36.429" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:36.430">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:54:36.431" starttime="20170810 03:54:36.430" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:36.431" starttime="20170810 03:54:36.430" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:36.431" starttime="20170810 03:54:36.428" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:36.431" starttime="20170810 03:54:36.428" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:54:36.431">Delete All Sessions</msg>
<status endtime="20170810 03:54:36.431" starttime="20170810 03:54:36.431" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:54:36.432">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:54:36.432" starttime="20170810 03:54:36.063" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:36.432">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:54:36.432" starttime="20170810 03:54:36.432" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:36.433">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:54:36.433">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:54:36.433">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:54:36.433" starttime="20170810 03:54:36.433" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:54:36.433">${state} = Off</msg>
<status endtime="20170810 03:54:36.433" starttime="20170810 03:54:36.062" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:54:36.434">${boot_progress} = Off</msg>
<status endtime="20170810 03:54:36.434" starttime="20170810 03:54:36.062" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:54:36.434">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 03:54:36.434" starttime="20170810 03:54:36.434" status="FAIL"></status>
</kw>
<status endtime="20170810 03:54:36.435" starttime="20170810 03:54:36.061" status="FAIL"></status>
</kw>
<status endtime="20170810 03:54:36.435" starttime="20170810 03:54:35.121" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:46.440">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:54:46.441" starttime="20170810 03:54:46.440" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:46.441">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:54:46.441" starttime="20170810 03:54:46.441" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:46.442">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:54:46.442" starttime="20170810 03:54:46.441" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:46.442">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:54:46.442" starttime="20170810 03:54:46.442" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:46.781">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:54:46.781" starttime="20170810 03:54:46.443" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:54:46.781">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:54:46.781">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:54:46.781" starttime="20170810 03:54:46.443" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:46.782">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:54:46.782" starttime="20170810 03:54:46.782" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:46.783">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:54:46.783" starttime="20170810 03:54:46.782" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:46.783" starttime="20170810 03:54:46.439" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:46.783" starttime="20170810 03:54:46.438" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:46.783" starttime="20170810 03:54:46.438" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:46.784">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 03:54:46.784" starttime="20170810 03:54:46.784" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:46.786">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:54:46.786" starttime="20170810 03:54:46.785" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:46.787">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:54:46.787" starttime="20170810 03:54:46.787" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:46.787" starttime="20170810 03:54:46.786" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:46.787" starttime="20170810 03:54:46.785" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:46.787" starttime="20170810 03:54:46.784" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:46.921">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:54:46.921">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:54:46.921" starttime="20170810 03:54:46.788" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:46.923">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:54:46.923" starttime="20170810 03:54:46.922" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:46.924">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:54:46.924" starttime="20170810 03:54:46.924" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:46.924" starttime="20170810 03:54:46.923" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:46.925" starttime="20170810 03:54:46.922" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:46.925" starttime="20170810 03:54:46.921" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:54:46.925">Delete All Sessions</msg>
<status endtime="20170810 03:54:46.925" starttime="20170810 03:54:46.925" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:54:46.925">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:54:46.925" starttime="20170810 03:54:46.437" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:46.926">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:54:46.926" starttime="20170810 03:54:46.926" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:46.926">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:54:46.927">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:54:46.927">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:54:46.927" starttime="20170810 03:54:46.926" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:54:46.927">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 03:54:46.927" starttime="20170810 03:54:46.436" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:54:46.927">${power_state} = On</msg>
<status endtime="20170810 03:54:46.927" starttime="20170810 03:54:46.436" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 03:54:46.928" starttime="20170810 03:54:46.928" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:46.928" starttime="20170810 03:54:46.436" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:46.932">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:54:46.932" starttime="20170810 03:54:46.931" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:46.932">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:54:46.933" starttime="20170810 03:54:46.932" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:46.933">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:54:46.933" starttime="20170810 03:54:46.933" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:46.934">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:54:46.934" starttime="20170810 03:54:46.933" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:47.151">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:54:47.151" starttime="20170810 03:54:46.935" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:54:47.151">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:54:47.151">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:54:47.151" starttime="20170810 03:54:46.934" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:47.152">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:54:47.152" starttime="20170810 03:54:47.151" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:47.152">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:54:47.152" starttime="20170810 03:54:47.152" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:47.153" starttime="20170810 03:54:46.931" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:47.153" starttime="20170810 03:54:46.930" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:47.153" starttime="20170810 03:54:46.930" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:47.153">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 03:54:47.153" starttime="20170810 03:54:47.153" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:47.156">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:54:47.156" starttime="20170810 03:54:47.155" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:47.157">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:54:47.157" starttime="20170810 03:54:47.157" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:47.157" starttime="20170810 03:54:47.156" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:47.157" starttime="20170810 03:54:47.154" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:47.157" starttime="20170810 03:54:47.154" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:47.271">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:54:47.271">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:54:47.271" starttime="20170810 03:54:47.157" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:47.273">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:54:47.273" starttime="20170810 03:54:47.272" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:47.274">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:54:47.274" starttime="20170810 03:54:47.274" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:47.274" starttime="20170810 03:54:47.273" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:47.274" starttime="20170810 03:54:47.272" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:47.274" starttime="20170810 03:54:47.271" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:54:47.275">Delete All Sessions</msg>
<status endtime="20170810 03:54:47.275" starttime="20170810 03:54:47.275" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:54:47.275">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:54:47.275" starttime="20170810 03:54:46.929" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:47.276">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:54:47.276" starttime="20170810 03:54:47.275" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:47.276">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:54:47.276">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:54:47.276">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:54:47.276" starttime="20170810 03:54:47.276" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:54:47.277">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 03:54:47.277" starttime="20170810 03:54:46.929" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:54:47.277">${host_state} = Running</msg>
<status endtime="20170810 03:54:47.277" starttime="20170810 03:54:46.928" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 03:54:47.278" starttime="20170810 03:54:47.277" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:47.281">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:54:47.282" starttime="20170810 03:54:47.281" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:47.282">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:54:47.282" starttime="20170810 03:54:47.282" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:47.283">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:54:47.283" starttime="20170810 03:54:47.283" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:47.284">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:54:47.284" starttime="20170810 03:54:47.283" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:47.549">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:54:47.549" starttime="20170810 03:54:47.284" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:54:47.549">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:54:47.549">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:54:47.549" starttime="20170810 03:54:47.284" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:47.550">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:54:47.550" starttime="20170810 03:54:47.550" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:47.551">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:54:47.551" starttime="20170810 03:54:47.550" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:47.551" starttime="20170810 03:54:47.281" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:47.551" starttime="20170810 03:54:47.280" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:47.551" starttime="20170810 03:54:47.280" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:47.552">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 03:54:47.552" starttime="20170810 03:54:47.551" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:47.554">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:54:47.554" starttime="20170810 03:54:47.553" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:47.555">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:54:47.555" starttime="20170810 03:54:47.555" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:47.555" starttime="20170810 03:54:47.554" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:47.555" starttime="20170810 03:54:47.553" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:47.555" starttime="20170810 03:54:47.552" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:47.870">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:54:47.870">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:54:47.870" starttime="20170810 03:54:47.555" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:47.872">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:54:47.872" starttime="20170810 03:54:47.872" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:47.873">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:54:47.873" starttime="20170810 03:54:47.873" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:47.874" starttime="20170810 03:54:47.872" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:47.874" starttime="20170810 03:54:47.871" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:47.874" starttime="20170810 03:54:47.871" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:54:47.874">Delete All Sessions</msg>
<status endtime="20170810 03:54:47.874" starttime="20170810 03:54:47.874" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:54:47.874">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:54:47.874" starttime="20170810 03:54:47.279" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:47.875">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:54:47.875" starttime="20170810 03:54:47.875" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:47.876">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:54:47.876">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:54:47.876">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:54:47.876" starttime="20170810 03:54:47.875" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:54:47.876">${state} = Off</msg>
<status endtime="20170810 03:54:47.877" starttime="20170810 03:54:47.278" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:54:47.877">${boot_progress} = Off</msg>
<status endtime="20170810 03:54:47.877" starttime="20170810 03:54:47.278" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:54:47.878">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 03:54:47.878" starttime="20170810 03:54:47.877" status="FAIL"></status>
</kw>
<status endtime="20170810 03:54:47.878" starttime="20170810 03:54:47.278" status="FAIL"></status>
</kw>
<status endtime="20170810 03:54:47.878" starttime="20170810 03:54:46.435" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:57.883">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:54:57.884" starttime="20170810 03:54:57.883" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:57.884">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:54:57.885" starttime="20170810 03:54:57.884" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:57.885">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:54:57.885" starttime="20170810 03:54:57.885" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:57.886">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:54:57.886" starttime="20170810 03:54:57.885" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:58.267">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:54:58.267" starttime="20170810 03:54:57.886" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:54:58.267">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:54:58.267">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:54:58.267" starttime="20170810 03:54:57.886" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:58.268">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:54:58.268" starttime="20170810 03:54:58.267" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:58.269">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:54:58.269" starttime="20170810 03:54:58.268" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:58.269" starttime="20170810 03:54:57.882" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:58.269" starttime="20170810 03:54:57.882" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:58.269" starttime="20170810 03:54:57.881" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:58.270">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 03:54:58.270" starttime="20170810 03:54:58.269" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:54:58.272">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:54:58.272" starttime="20170810 03:54:58.271" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:54:58.273">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:54:58.273" starttime="20170810 03:54:58.272" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:58.273" starttime="20170810 03:54:58.272" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:58.273" starttime="20170810 03:54:58.270" status="PASS"></status>
</kw>
<status endtime="20170810 03:54:58.273" starttime="20170810 03:54:58.270" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:03.761">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:55:03.762">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:55:03.762" starttime="20170810 03:54:58.274" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:03.764">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:55:03.764" starttime="20170810 03:55:03.763" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:03.765">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:55:03.765" starttime="20170810 03:55:03.765" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:03.765" starttime="20170810 03:55:03.764" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:03.765" starttime="20170810 03:55:03.763" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:03.765" starttime="20170810 03:55:03.762" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:55:03.766">Delete All Sessions</msg>
<status endtime="20170810 03:55:03.766" starttime="20170810 03:55:03.766" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:55:03.766">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:55:03.766" starttime="20170810 03:54:57.880" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:03.767">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:55:03.767" starttime="20170810 03:55:03.766" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:03.767">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:55:03.767">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:55:03.767">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:55:03.768" starttime="20170810 03:55:03.767" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:55:03.768">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 03:55:03.768" starttime="20170810 03:54:57.880" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:55:03.768">${power_state} = On</msg>
<status endtime="20170810 03:55:03.768" starttime="20170810 03:54:57.879" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 03:55:03.769" starttime="20170810 03:55:03.768" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:03.769" starttime="20170810 03:54:57.879" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:03.772">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:55:03.773" starttime="20170810 03:55:03.772" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:03.773">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:55:03.773" starttime="20170810 03:55:03.773" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:03.774">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:55:03.774" starttime="20170810 03:55:03.774" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:03.775">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:55:03.775" starttime="20170810 03:55:03.774" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:04.229">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:55:04.230" starttime="20170810 03:55:03.775" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:55:04.230">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:55:04.230">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:55:04.230" starttime="20170810 03:55:03.775" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:04.230">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:55:04.231" starttime="20170810 03:55:04.230" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:04.231">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:55:04.231" starttime="20170810 03:55:04.231" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:04.231" starttime="20170810 03:55:03.771" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:04.231" starttime="20170810 03:55:03.771" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:04.232" starttime="20170810 03:55:03.770" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:04.232">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 03:55:04.232" starttime="20170810 03:55:04.232" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:04.238">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:55:04.238" starttime="20170810 03:55:04.234" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:04.239">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:55:04.239" starttime="20170810 03:55:04.239" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:04.239" starttime="20170810 03:55:04.238" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:04.239" starttime="20170810 03:55:04.233" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:04.239" starttime="20170810 03:55:04.232" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:04.838">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:55:04.838">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:55:04.838" starttime="20170810 03:55:04.240" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:04.840">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:55:04.840" starttime="20170810 03:55:04.840" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:04.841">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:55:04.841" starttime="20170810 03:55:04.841" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:04.841" starttime="20170810 03:55:04.840" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:04.841" starttime="20170810 03:55:04.839" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:04.842" starttime="20170810 03:55:04.839" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:55:04.842">Delete All Sessions</msg>
<status endtime="20170810 03:55:04.842" starttime="20170810 03:55:04.842" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:55:04.842">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:55:04.842" starttime="20170810 03:55:03.770" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:04.843">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:55:04.843" starttime="20170810 03:55:04.842" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:04.844">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:55:04.844">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:55:04.844">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:55:04.844" starttime="20170810 03:55:04.843" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:55:04.844">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 03:55:04.844" starttime="20170810 03:55:03.769" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:55:04.845">${host_state} = Running</msg>
<status endtime="20170810 03:55:04.845" starttime="20170810 03:55:03.769" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 03:55:04.845" starttime="20170810 03:55:04.845" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:04.849">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:55:04.850" starttime="20170810 03:55:04.849" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:04.851">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:55:04.851" starttime="20170810 03:55:04.850" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:04.851">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:55:04.851" starttime="20170810 03:55:04.851" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:04.852">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:55:04.852" starttime="20170810 03:55:04.852" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:05.141">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:55:05.142" starttime="20170810 03:55:04.853" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:55:05.142">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:55:05.142">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:55:05.142" starttime="20170810 03:55:04.852" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:05.143">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:55:05.143" starttime="20170810 03:55:05.142" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:05.143">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:55:05.143" starttime="20170810 03:55:05.143" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:05.144" starttime="20170810 03:55:04.849" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:05.144" starttime="20170810 03:55:04.848" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:05.144" starttime="20170810 03:55:04.847" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:05.144">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 03:55:05.144" starttime="20170810 03:55:05.144" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:05.147">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:55:05.147" starttime="20170810 03:55:05.146" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:05.148">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:55:05.148" starttime="20170810 03:55:05.147" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:05.148" starttime="20170810 03:55:05.147" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:05.148" starttime="20170810 03:55:05.145" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:05.148" starttime="20170810 03:55:05.145" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:05.214">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:55:05.214">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:55:05.214" starttime="20170810 03:55:05.148" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:05.216">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:55:05.216" starttime="20170810 03:55:05.215" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:05.217">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:55:05.217" starttime="20170810 03:55:05.216" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:05.217" starttime="20170810 03:55:05.216" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:05.217" starttime="20170810 03:55:05.215" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:05.217" starttime="20170810 03:55:05.214" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:55:05.217">Delete All Sessions</msg>
<status endtime="20170810 03:55:05.217" starttime="20170810 03:55:05.217" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:55:05.218">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:55:05.218" starttime="20170810 03:55:04.847" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:05.218">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:55:05.218" starttime="20170810 03:55:05.218" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:05.219">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:55:05.219">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:55:05.219">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:55:05.219" starttime="20170810 03:55:05.219" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:55:05.219">${state} = Off</msg>
<status endtime="20170810 03:55:05.219" starttime="20170810 03:55:04.846" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:55:05.220">${boot_progress} = Off</msg>
<status endtime="20170810 03:55:05.220" starttime="20170810 03:55:04.846" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:55:05.220">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 03:55:05.220" starttime="20170810 03:55:05.220" status="FAIL"></status>
</kw>
<status endtime="20170810 03:55:05.220" starttime="20170810 03:55:04.845" status="FAIL"></status>
</kw>
<status endtime="20170810 03:55:05.221" starttime="20170810 03:54:57.878" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:15.227">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:55:15.227" starttime="20170810 03:55:15.226" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:15.228">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:55:15.228" starttime="20170810 03:55:15.228" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:15.229">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:55:15.229" starttime="20170810 03:55:15.228" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:15.229">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:55:15.229" starttime="20170810 03:55:15.229" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:16.319">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:55:16.319" starttime="20170810 03:55:15.230" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:55:16.319">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:55:16.319">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:55:16.320" starttime="20170810 03:55:15.230" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:16.320">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:55:16.320" starttime="20170810 03:55:16.320" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:16.321">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:55:16.321" starttime="20170810 03:55:16.321" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:16.321" starttime="20170810 03:55:15.226" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:16.321" starttime="20170810 03:55:15.225" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:16.321" starttime="20170810 03:55:15.224" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:16.322">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 03:55:16.322" starttime="20170810 03:55:16.322" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:16.324">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:55:16.324" starttime="20170810 03:55:16.323" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:16.325">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:55:16.325" starttime="20170810 03:55:16.325" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:16.325" starttime="20170810 03:55:16.324" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:16.325" starttime="20170810 03:55:16.323" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:16.325" starttime="20170810 03:55:16.322" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:23.476">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:55:23.476">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:55:23.476" starttime="20170810 03:55:16.326" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:23.479">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:55:23.479" starttime="20170810 03:55:23.478" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:23.480">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:55:23.480" starttime="20170810 03:55:23.479" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:23.480" starttime="20170810 03:55:23.479" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:23.480" starttime="20170810 03:55:23.477" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:23.480" starttime="20170810 03:55:23.477" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:55:23.480">Delete All Sessions</msg>
<status endtime="20170810 03:55:23.481" starttime="20170810 03:55:23.480" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:55:23.481">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:55:23.481" starttime="20170810 03:55:15.223" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:23.481">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:55:23.481" starttime="20170810 03:55:23.481" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:23.482">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:55:23.482">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:55:23.482">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:55:23.482" starttime="20170810 03:55:23.482" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:55:23.482">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170810 03:55:23.483" starttime="20170810 03:55:15.223" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:55:23.483">${power_state} = Off</msg>
<status endtime="20170810 03:55:23.483" starttime="20170810 03:55:15.223" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:55:23.483">On != Off</msg>
<status endtime="20170810 03:55:23.484" starttime="20170810 03:55:23.483" status="FAIL"></status>
</kw>
<status endtime="20170810 03:55:23.484" starttime="20170810 03:55:15.222" status="FAIL"></status>
</kw>
<status endtime="20170810 03:55:23.484" starttime="20170810 03:55:15.222" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:33.489">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:55:33.490" starttime="20170810 03:55:33.489" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:33.490">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:55:33.490" starttime="20170810 03:55:33.490" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:33.491">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:55:33.491" starttime="20170810 03:55:33.490" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:33.492">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:55:33.492" starttime="20170810 03:55:33.491" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:33.810">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:55:33.810" starttime="20170810 03:55:33.492" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:55:33.810">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:55:33.810">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:55:33.810" starttime="20170810 03:55:33.492" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:33.811">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:55:33.811" starttime="20170810 03:55:33.810" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:33.812">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:55:33.812" starttime="20170810 03:55:33.811" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:33.812" starttime="20170810 03:55:33.488" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:33.812" starttime="20170810 03:55:33.488" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:33.812" starttime="20170810 03:55:33.487" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:33.813">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 03:55:33.813" starttime="20170810 03:55:33.812" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:33.815">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:55:33.815" starttime="20170810 03:55:33.814" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:33.816">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:55:33.816" starttime="20170810 03:55:33.816" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:33.816" starttime="20170810 03:55:33.815" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:33.816" starttime="20170810 03:55:33.813" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:33.816" starttime="20170810 03:55:33.813" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:34.370">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:55:34.370">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:55:34.370" starttime="20170810 03:55:33.817" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:34.372">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:55:34.372" starttime="20170810 03:55:34.371" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:34.373">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:55:34.373" starttime="20170810 03:55:34.373" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:34.373" starttime="20170810 03:55:34.372" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:34.373" starttime="20170810 03:55:34.371" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:34.373" starttime="20170810 03:55:34.370" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:55:34.374">Delete All Sessions</msg>
<status endtime="20170810 03:55:34.374" starttime="20170810 03:55:34.374" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:55:34.374">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:55:34.374" starttime="20170810 03:55:33.487" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:34.375">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:55:34.375" starttime="20170810 03:55:34.374" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:34.375">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:55:34.375">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:55:34.376">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:55:34.376" starttime="20170810 03:55:34.375" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:55:34.376">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 03:55:34.376" starttime="20170810 03:55:33.486" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:55:34.376">${power_state} = On</msg>
<status endtime="20170810 03:55:34.376" starttime="20170810 03:55:33.486" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 03:55:34.377" starttime="20170810 03:55:34.376" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:34.377" starttime="20170810 03:55:33.485" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:34.380">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:55:34.381" starttime="20170810 03:55:34.380" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:34.382">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:55:34.382" starttime="20170810 03:55:34.382" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:34.382">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:55:34.382" starttime="20170810 03:55:34.382" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:34.383">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:55:34.383" starttime="20170810 03:55:34.383" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:34.859">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:55:34.859" starttime="20170810 03:55:34.384" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:55:34.859">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:55:34.859">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:55:34.859" starttime="20170810 03:55:34.383" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:34.860">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:55:34.860" starttime="20170810 03:55:34.859" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:34.861">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:55:34.861" starttime="20170810 03:55:34.860" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:34.861" starttime="20170810 03:55:34.380" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:34.861" starttime="20170810 03:55:34.379" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:34.861" starttime="20170810 03:55:34.379" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:34.862">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 03:55:34.862" starttime="20170810 03:55:34.861" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:34.864">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:55:34.864" starttime="20170810 03:55:34.863" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:34.865">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:55:34.865" starttime="20170810 03:55:34.864" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:34.865" starttime="20170810 03:55:34.864" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:34.865" starttime="20170810 03:55:34.862" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:34.865" starttime="20170810 03:55:34.862" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:35.192">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:55:35.192">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:55:35.192" starttime="20170810 03:55:34.865" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:35.194">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:55:35.194" starttime="20170810 03:55:35.194" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:35.195">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:55:35.195" starttime="20170810 03:55:35.195" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:35.196" starttime="20170810 03:55:35.195" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:35.196" starttime="20170810 03:55:35.193" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:35.196" starttime="20170810 03:55:35.193" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:55:35.196">Delete All Sessions</msg>
<status endtime="20170810 03:55:35.196" starttime="20170810 03:55:35.196" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:55:35.196">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:55:35.196" starttime="20170810 03:55:34.378" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:35.197">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:55:35.197" starttime="20170810 03:55:35.197" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:35.198">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:55:35.198">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:55:35.198">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:55:35.198" starttime="20170810 03:55:35.197" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:55:35.198">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 03:55:35.198" starttime="20170810 03:55:34.377" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:55:35.198">${host_state} = Running</msg>
<status endtime="20170810 03:55:35.198" starttime="20170810 03:55:34.377" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 03:55:35.199" starttime="20170810 03:55:35.199" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:35.203">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:55:35.204" starttime="20170810 03:55:35.203" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:35.204">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:55:35.204" starttime="20170810 03:55:35.204" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:35.205">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:55:35.205" starttime="20170810 03:55:35.204" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:35.205">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:55:35.206" starttime="20170810 03:55:35.205" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:35.726">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:55:35.726" starttime="20170810 03:55:35.206" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:55:35.726">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:55:35.726">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:55:35.726" starttime="20170810 03:55:35.206" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:35.727">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:55:35.727" starttime="20170810 03:55:35.727" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:35.728">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:55:35.728" starttime="20170810 03:55:35.727" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:35.728" starttime="20170810 03:55:35.202" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:35.728" starttime="20170810 03:55:35.202" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:35.728" starttime="20170810 03:55:35.201" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:35.729">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 03:55:35.729" starttime="20170810 03:55:35.728" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:35.731">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:55:35.731" starttime="20170810 03:55:35.730" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:35.733">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:55:35.733" starttime="20170810 03:55:35.732" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:35.733" starttime="20170810 03:55:35.732" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:35.733" starttime="20170810 03:55:35.729" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:35.733" starttime="20170810 03:55:35.729" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:36.105">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:55:36.105">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:55:36.105" starttime="20170810 03:55:35.733" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:36.107">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:55:36.107" starttime="20170810 03:55:36.107" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:36.108">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:55:36.108" starttime="20170810 03:55:36.108" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:36.108" starttime="20170810 03:55:36.107" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:36.108" starttime="20170810 03:55:36.106" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:36.109" starttime="20170810 03:55:36.106" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:55:36.109">Delete All Sessions</msg>
<status endtime="20170810 03:55:36.109" starttime="20170810 03:55:36.109" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:55:36.109">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:55:36.109" starttime="20170810 03:55:35.200" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:36.110">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:55:36.110" starttime="20170810 03:55:36.109" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:36.110">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:55:36.110">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:55:36.111">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:55:36.111" starttime="20170810 03:55:36.110" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:55:36.111">${state} = Off</msg>
<status endtime="20170810 03:55:36.111" starttime="20170810 03:55:35.200" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:55:36.111">${boot_progress} = Off</msg>
<status endtime="20170810 03:55:36.111" starttime="20170810 03:55:35.199" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:55:36.112">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 03:55:36.112" starttime="20170810 03:55:36.111" status="FAIL"></status>
</kw>
<status endtime="20170810 03:55:36.112" starttime="20170810 03:55:35.199" status="FAIL"></status>
</kw>
<status endtime="20170810 03:55:36.112" starttime="20170810 03:55:33.485" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:46.117">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:55:46.118" starttime="20170810 03:55:46.117" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:46.118">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:55:46.118" starttime="20170810 03:55:46.118" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:46.119">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:55:46.119" starttime="20170810 03:55:46.119" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:46.120">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:55:46.120" starttime="20170810 03:55:46.119" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:46.301">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:55:46.301" starttime="20170810 03:55:46.120" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:55:46.301">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:55:46.301">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:55:46.301" starttime="20170810 03:55:46.120" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:46.302">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:55:46.302" starttime="20170810 03:55:46.302" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:46.303">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:55:46.303" starttime="20170810 03:55:46.302" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:46.303" starttime="20170810 03:55:46.117" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:46.303" starttime="20170810 03:55:46.116" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:46.303" starttime="20170810 03:55:46.115" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:46.304">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 03:55:46.304" starttime="20170810 03:55:46.303" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:46.306">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:55:46.306" starttime="20170810 03:55:46.305" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:46.307">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:55:46.307" starttime="20170810 03:55:46.307" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:46.307" starttime="20170810 03:55:46.306" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:46.307" starttime="20170810 03:55:46.305" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:46.307" starttime="20170810 03:55:46.304" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:46.371">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:55:46.371">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:55:46.371" starttime="20170810 03:55:46.308" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:46.373">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:55:46.373" starttime="20170810 03:55:46.373" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:46.374">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:55:46.374" starttime="20170810 03:55:46.374" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:46.374" starttime="20170810 03:55:46.373" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:46.374" starttime="20170810 03:55:46.372" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:46.375" starttime="20170810 03:55:46.372" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:55:46.375">Delete All Sessions</msg>
<status endtime="20170810 03:55:46.375" starttime="20170810 03:55:46.375" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:55:46.375">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:55:46.375" starttime="20170810 03:55:46.115" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:46.376">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:55:46.376" starttime="20170810 03:55:46.376" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:46.376">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:55:46.377">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:55:46.377">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:55:46.377" starttime="20170810 03:55:46.376" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:55:46.377">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 03:55:46.377" starttime="20170810 03:55:46.114" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:55:46.377">${power_state} = On</msg>
<status endtime="20170810 03:55:46.377" starttime="20170810 03:55:46.114" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 03:55:46.378" starttime="20170810 03:55:46.378" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:46.378" starttime="20170810 03:55:46.113" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:46.381">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:55:46.382" starttime="20170810 03:55:46.381" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:46.383">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:55:46.383" starttime="20170810 03:55:46.383" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:46.384">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:55:46.384" starttime="20170810 03:55:46.383" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:46.384">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:55:46.384" starttime="20170810 03:55:46.384" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:46.599">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:55:46.599" starttime="20170810 03:55:46.385" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:55:46.599">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:55:46.599">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:55:46.599" starttime="20170810 03:55:46.385" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:46.600">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:55:46.600" starttime="20170810 03:55:46.599" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:46.601">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:55:46.601" starttime="20170810 03:55:46.600" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:46.601" starttime="20170810 03:55:46.381" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:46.601" starttime="20170810 03:55:46.380" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:46.601" starttime="20170810 03:55:46.380" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:46.602">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 03:55:46.602" starttime="20170810 03:55:46.601" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:46.604">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:55:46.604" starttime="20170810 03:55:46.603" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:46.605">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:55:46.605" starttime="20170810 03:55:46.604" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:46.605" starttime="20170810 03:55:46.604" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:46.605" starttime="20170810 03:55:46.602" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:46.605" starttime="20170810 03:55:46.602" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:46.749">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:55:46.750">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:55:46.750" starttime="20170810 03:55:46.605" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:46.751">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:55:46.752" starttime="20170810 03:55:46.751" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:46.752">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:55:46.753" starttime="20170810 03:55:46.752" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:46.753" starttime="20170810 03:55:46.752" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:46.753" starttime="20170810 03:55:46.750" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:46.753" starttime="20170810 03:55:46.750" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:55:46.753">Delete All Sessions</msg>
<status endtime="20170810 03:55:46.753" starttime="20170810 03:55:46.753" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:55:46.753">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:55:46.754" starttime="20170810 03:55:46.379" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:46.754">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:55:46.754" starttime="20170810 03:55:46.754" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:46.755">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:55:46.755">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:55:46.755">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:55:46.755" starttime="20170810 03:55:46.754" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:55:46.755">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 03:55:46.755" starttime="20170810 03:55:46.378" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:55:46.756">${host_state} = Running</msg>
<status endtime="20170810 03:55:46.756" starttime="20170810 03:55:46.378" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 03:55:46.756" starttime="20170810 03:55:46.756" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:46.760">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:55:46.761" starttime="20170810 03:55:46.760" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:46.761">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:55:46.761" starttime="20170810 03:55:46.761" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:46.762">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:55:46.762" starttime="20170810 03:55:46.762" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:46.763">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:55:46.763" starttime="20170810 03:55:46.762" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:46.958">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:55:46.959" starttime="20170810 03:55:46.763" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:55:46.959">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:55:46.959">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:55:46.959" starttime="20170810 03:55:46.763" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:46.959">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:55:46.960" starttime="20170810 03:55:46.959" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:46.960">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:55:46.960" starttime="20170810 03:55:46.960" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:46.960" starttime="20170810 03:55:46.760" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:46.960" starttime="20170810 03:55:46.759" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:46.961" starttime="20170810 03:55:46.759" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:46.961">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 03:55:46.961" starttime="20170810 03:55:46.961" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:46.964">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:55:46.964" starttime="20170810 03:55:46.963" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:46.965">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:55:46.965" starttime="20170810 03:55:46.965" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:46.965" starttime="20170810 03:55:46.964" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:46.965" starttime="20170810 03:55:46.962" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:46.965" starttime="20170810 03:55:46.961" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:47.046">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:55:47.046">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:55:47.046" starttime="20170810 03:55:46.965" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:47.048">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:55:47.048" starttime="20170810 03:55:47.047" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:47.049">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:55:47.049" starttime="20170810 03:55:47.049" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:47.049" starttime="20170810 03:55:47.048" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:47.050" starttime="20170810 03:55:47.047" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:47.050" starttime="20170810 03:55:47.046" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:55:47.050">Delete All Sessions</msg>
<status endtime="20170810 03:55:47.050" starttime="20170810 03:55:47.050" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:55:47.050">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:55:47.050" starttime="20170810 03:55:46.758" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:47.051">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:55:47.051" starttime="20170810 03:55:47.051" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:47.051">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:55:47.052">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:55:47.052">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:55:47.052" starttime="20170810 03:55:47.051" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:55:47.052">${state} = Off</msg>
<status endtime="20170810 03:55:47.052" starttime="20170810 03:55:46.757" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:55:47.052">${boot_progress} = Off</msg>
<status endtime="20170810 03:55:47.052" starttime="20170810 03:55:46.757" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:55:47.053">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 03:55:47.053" starttime="20170810 03:55:47.052" status="FAIL"></status>
</kw>
<status endtime="20170810 03:55:47.053" starttime="20170810 03:55:46.756" status="FAIL"></status>
</kw>
<status endtime="20170810 03:55:47.053" starttime="20170810 03:55:46.113" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:57.059">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:55:57.059" starttime="20170810 03:55:57.058" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:57.060">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:55:57.060" starttime="20170810 03:55:57.060" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:57.061">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:55:57.061" starttime="20170810 03:55:57.060" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:57.061">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:55:57.061" starttime="20170810 03:55:57.061" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:57.413">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:55:57.413" starttime="20170810 03:55:57.062" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:55:57.413">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:55:57.413">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:55:57.413" starttime="20170810 03:55:57.062" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:57.414">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:55:57.414" starttime="20170810 03:55:57.414" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:57.415">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:55:57.415" starttime="20170810 03:55:57.414" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:57.415" starttime="20170810 03:55:57.058" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:57.415" starttime="20170810 03:55:57.057" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:57.415" starttime="20170810 03:55:57.057" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:57.416">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 03:55:57.416" starttime="20170810 03:55:57.415" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:57.418">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:55:57.418" starttime="20170810 03:55:57.417" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:57.419">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:55:57.419" starttime="20170810 03:55:57.418" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:57.419" starttime="20170810 03:55:57.418" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:57.419" starttime="20170810 03:55:57.416" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:57.419" starttime="20170810 03:55:57.416" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:57.983">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:55:57.983">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:55:57.983" starttime="20170810 03:55:57.419" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:57.985">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:55:57.985" starttime="20170810 03:55:57.985" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:57.986">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:55:57.986" starttime="20170810 03:55:57.986" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:57.986" starttime="20170810 03:55:57.985" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:57.986" starttime="20170810 03:55:57.984" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:57.986" starttime="20170810 03:55:57.984" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:55:57.987">Delete All Sessions</msg>
<status endtime="20170810 03:55:57.987" starttime="20170810 03:55:57.987" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:55:57.987">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:55:57.987" starttime="20170810 03:55:57.056" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:57.988">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:55:57.988" starttime="20170810 03:55:57.987" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:57.989">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:55:57.989">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:55:57.989">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:55:57.989" starttime="20170810 03:55:57.988" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:55:57.989">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 03:55:57.989" starttime="20170810 03:55:57.055" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:55:57.990">${power_state} = On</msg>
<status endtime="20170810 03:55:57.990" starttime="20170810 03:55:57.055" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 03:55:57.990" starttime="20170810 03:55:57.990" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:57.990" starttime="20170810 03:55:57.055" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:57.994">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:55:57.995" starttime="20170810 03:55:57.993" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:57.995">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:55:57.995" starttime="20170810 03:55:57.995" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:57.996">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:55:57.996" starttime="20170810 03:55:57.995" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:57.996">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:55:57.996" starttime="20170810 03:55:57.996" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:58.364">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:55:58.364" starttime="20170810 03:55:57.997" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:55:58.364">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:55:58.364">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:55:58.364" starttime="20170810 03:55:57.997" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:58.365">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:55:58.365" starttime="20170810 03:55:58.364" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:58.366">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:55:58.366" starttime="20170810 03:55:58.365" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:58.366" starttime="20170810 03:55:57.993" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:58.366" starttime="20170810 03:55:57.993" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:58.366" starttime="20170810 03:55:57.992" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:58.367">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 03:55:58.367" starttime="20170810 03:55:58.366" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:58.370">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:55:58.370" starttime="20170810 03:55:58.369" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:58.371">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:55:58.371" starttime="20170810 03:55:58.371" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:58.371" starttime="20170810 03:55:58.370" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:58.372" starttime="20170810 03:55:58.368" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:58.372" starttime="20170810 03:55:58.368" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:58.981">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:55:58.981">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:55:58.981" starttime="20170810 03:55:58.372" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:58.983">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:55:58.983" starttime="20170810 03:55:58.982" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:58.984">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:55:58.984" starttime="20170810 03:55:58.983" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:58.984" starttime="20170810 03:55:58.983" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:58.984" starttime="20170810 03:55:58.982" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:58.984" starttime="20170810 03:55:58.981" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:55:58.984">Delete All Sessions</msg>
<status endtime="20170810 03:55:58.984" starttime="20170810 03:55:58.984" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:55:58.985">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:55:58.985" starttime="20170810 03:55:57.991" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:58.985">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:55:58.985" starttime="20170810 03:55:58.985" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:58.986">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:55:58.986">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:55:58.986">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:55:58.986" starttime="20170810 03:55:58.986" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:55:58.986">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 03:55:58.987" starttime="20170810 03:55:57.991" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:55:58.987">${host_state} = Running</msg>
<status endtime="20170810 03:55:58.987" starttime="20170810 03:55:57.990" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 03:55:58.987" starttime="20170810 03:55:58.987" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:58.991">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:55:58.992" starttime="20170810 03:55:58.991" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:58.992">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:55:58.992" starttime="20170810 03:55:58.992" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:58.993">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:55:58.993" starttime="20170810 03:55:58.993" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:58.994">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:55:58.994" starttime="20170810 03:55:58.993" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:59.585">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:55:59.585" starttime="20170810 03:55:58.994" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:55:59.585">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:55:59.585">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:55:59.585" starttime="20170810 03:55:58.994" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:59.586">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:55:59.586" starttime="20170810 03:55:59.586" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:59.587">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:55:59.587" starttime="20170810 03:55:59.586" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:59.587" starttime="20170810 03:55:58.991" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:59.587" starttime="20170810 03:55:58.990" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:59.587" starttime="20170810 03:55:58.990" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:59.588">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 03:55:59.588" starttime="20170810 03:55:59.587" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:55:59.590">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:55:59.590" starttime="20170810 03:55:59.589" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:55:59.591">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:55:59.591" starttime="20170810 03:55:59.590" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:59.591" starttime="20170810 03:55:59.590" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:59.591" starttime="20170810 03:55:59.588" status="PASS"></status>
</kw>
<status endtime="20170810 03:55:59.591" starttime="20170810 03:55:59.588" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:00.314">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:56:00.315">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:56:00.315" starttime="20170810 03:55:59.591" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:00.317">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:56:00.317" starttime="20170810 03:56:00.316" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:00.318">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:56:00.318" starttime="20170810 03:56:00.317" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:00.318" starttime="20170810 03:56:00.317" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:00.318" starttime="20170810 03:56:00.315" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:00.318" starttime="20170810 03:56:00.315" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:56:00.318">Delete All Sessions</msg>
<status endtime="20170810 03:56:00.318" starttime="20170810 03:56:00.318" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:00.319">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:56:00.319" starttime="20170810 03:55:58.989" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:00.320">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:56:00.320" starttime="20170810 03:56:00.319" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:00.320">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:56:00.321">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:56:00.321">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:56:00.321" starttime="20170810 03:56:00.320" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:00.321">${state} = Off</msg>
<status endtime="20170810 03:56:00.321" starttime="20170810 03:55:58.988" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:00.321">${boot_progress} = Off</msg>
<status endtime="20170810 03:56:00.321" starttime="20170810 03:55:58.988" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:56:00.322">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 03:56:00.322" starttime="20170810 03:56:00.321" status="FAIL"></status>
</kw>
<status endtime="20170810 03:56:00.322" starttime="20170810 03:55:58.987" status="FAIL"></status>
</kw>
<status endtime="20170810 03:56:00.322" starttime="20170810 03:55:57.054" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:10.327">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:56:10.327" starttime="20170810 03:56:10.327" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:10.328">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:56:10.328" starttime="20170810 03:56:10.328" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:10.329">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:56:10.329" starttime="20170810 03:56:10.328" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:10.329">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:56:10.329" starttime="20170810 03:56:10.329" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:10.752">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:56:10.752" starttime="20170810 03:56:10.330" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:10.752">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:56:10.752">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:56:10.752" starttime="20170810 03:56:10.330" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:10.753">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:56:10.753" starttime="20170810 03:56:10.753" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:10.754">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:56:10.754" starttime="20170810 03:56:10.753" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:10.754" starttime="20170810 03:56:10.326" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:10.754" starttime="20170810 03:56:10.326" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:10.754" starttime="20170810 03:56:10.325" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:10.755">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 03:56:10.755" starttime="20170810 03:56:10.754" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:10.757">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:56:10.757" starttime="20170810 03:56:10.756" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:10.758">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:56:10.758" starttime="20170810 03:56:10.757" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:10.758" starttime="20170810 03:56:10.757" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:10.758" starttime="20170810 03:56:10.755" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:10.758" starttime="20170810 03:56:10.755" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:11.377">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:56:11.377">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:56:11.377" starttime="20170810 03:56:10.758" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:11.379">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:56:11.379" starttime="20170810 03:56:11.378" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:11.380">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:56:11.380" starttime="20170810 03:56:11.380" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:11.380" starttime="20170810 03:56:11.379" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:11.380" starttime="20170810 03:56:11.378" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:11.380" starttime="20170810 03:56:11.377" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:56:11.381">Delete All Sessions</msg>
<status endtime="20170810 03:56:11.381" starttime="20170810 03:56:11.380" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:11.381">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:56:11.381" starttime="20170810 03:56:10.325" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:11.381">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:56:11.382" starttime="20170810 03:56:11.381" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:11.382">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:56:11.382">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:56:11.382">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:56:11.382" starttime="20170810 03:56:11.382" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:11.383">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 03:56:11.383" starttime="20170810 03:56:10.324" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:11.383">${power_state} = On</msg>
<status endtime="20170810 03:56:11.383" starttime="20170810 03:56:10.324" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 03:56:11.383" starttime="20170810 03:56:11.383" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:11.384" starttime="20170810 03:56:10.323" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:11.387">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:56:11.388" starttime="20170810 03:56:11.387" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:11.388">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:56:11.389" starttime="20170810 03:56:11.388" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:11.389">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:56:11.389" starttime="20170810 03:56:11.389" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:11.390">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:56:11.390" starttime="20170810 03:56:11.390" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:11.966">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:56:11.966" starttime="20170810 03:56:11.391" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:11.966">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:56:11.966">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:56:11.966" starttime="20170810 03:56:11.391" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:11.967">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:56:11.967" starttime="20170810 03:56:11.967" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:11.968">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:56:11.968" starttime="20170810 03:56:11.967" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:11.968" starttime="20170810 03:56:11.386" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:11.968" starttime="20170810 03:56:11.386" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:11.968" starttime="20170810 03:56:11.385" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:11.969">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 03:56:11.969" starttime="20170810 03:56:11.968" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:11.971">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:56:11.971" starttime="20170810 03:56:11.970" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:11.972">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:56:11.972" starttime="20170810 03:56:11.971" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:11.972" starttime="20170810 03:56:11.971" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:11.972" starttime="20170810 03:56:11.969" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:11.972" starttime="20170810 03:56:11.969" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:12.700">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:56:12.701">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:56:12.701" starttime="20170810 03:56:11.972" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:12.702">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:56:12.703" starttime="20170810 03:56:12.702" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:12.703">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:56:12.704" starttime="20170810 03:56:12.703" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:12.704" starttime="20170810 03:56:12.703" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:12.704" starttime="20170810 03:56:12.702" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:12.704" starttime="20170810 03:56:12.701" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:56:12.704">Delete All Sessions</msg>
<status endtime="20170810 03:56:12.704" starttime="20170810 03:56:12.704" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:12.705">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:56:12.705" starttime="20170810 03:56:11.385" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:12.705">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:56:12.705" starttime="20170810 03:56:12.705" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:12.706">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:56:12.706">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:56:12.706">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:56:12.706" starttime="20170810 03:56:12.706" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:12.706">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 03:56:12.706" starttime="20170810 03:56:11.384" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:12.707">${host_state} = Running</msg>
<status endtime="20170810 03:56:12.707" starttime="20170810 03:56:11.384" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 03:56:12.707" starttime="20170810 03:56:12.707" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:12.711">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:56:12.712" starttime="20170810 03:56:12.711" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:12.712">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:56:12.712" starttime="20170810 03:56:12.712" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:12.713">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:56:12.713" starttime="20170810 03:56:12.713" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:12.714">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:56:12.714" starttime="20170810 03:56:12.713" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:13.052">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:56:13.052" starttime="20170810 03:56:12.714" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:13.052">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:56:13.052">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:56:13.053" starttime="20170810 03:56:12.714" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:13.053">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:56:13.053" starttime="20170810 03:56:13.053" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:13.054">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:56:13.054" starttime="20170810 03:56:13.053" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:13.054" starttime="20170810 03:56:12.711" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:13.054" starttime="20170810 03:56:12.710" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:13.054" starttime="20170810 03:56:12.710" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:13.055">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 03:56:13.055" starttime="20170810 03:56:13.054" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:13.057">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:56:13.057" starttime="20170810 03:56:13.056" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:13.058">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:56:13.058" starttime="20170810 03:56:13.058" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:13.058" starttime="20170810 03:56:13.057" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:13.058" starttime="20170810 03:56:13.056" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:13.058" starttime="20170810 03:56:13.055" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:13.729">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:56:13.729">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:56:13.729" starttime="20170810 03:56:13.059" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:13.731">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:56:13.731" starttime="20170810 03:56:13.730" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:13.732">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:56:13.732" starttime="20170810 03:56:13.731" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:13.732" starttime="20170810 03:56:13.731" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:13.732" starttime="20170810 03:56:13.730" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:13.732" starttime="20170810 03:56:13.729" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:56:13.732">Delete All Sessions</msg>
<status endtime="20170810 03:56:13.733" starttime="20170810 03:56:13.732" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:13.733">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:56:13.733" starttime="20170810 03:56:12.709" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:13.733">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:56:13.733" starttime="20170810 03:56:13.733" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:13.734">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:56:13.734">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:56:13.734">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:56:13.734" starttime="20170810 03:56:13.734" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:13.735">${state} = Off</msg>
<status endtime="20170810 03:56:13.735" starttime="20170810 03:56:12.708" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:13.735">${boot_progress} = Off</msg>
<status endtime="20170810 03:56:13.735" starttime="20170810 03:56:12.708" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:56:13.736">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 03:56:13.736" starttime="20170810 03:56:13.735" status="FAIL"></status>
</kw>
<status endtime="20170810 03:56:13.736" starttime="20170810 03:56:12.707" status="FAIL"></status>
</kw>
<status endtime="20170810 03:56:13.736" starttime="20170810 03:56:10.323" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:23.741">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:56:23.741" starttime="20170810 03:56:23.741" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:23.742">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:56:23.742" starttime="20170810 03:56:23.741" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:23.742">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:56:23.742" starttime="20170810 03:56:23.742" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:23.743">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:56:23.743" starttime="20170810 03:56:23.743" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:24.236">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:56:24.236" starttime="20170810 03:56:23.744" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:24.236">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:56:24.236">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:56:24.236" starttime="20170810 03:56:23.743" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:24.237">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:56:24.237" starttime="20170810 03:56:24.236" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:24.238">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:56:24.238" starttime="20170810 03:56:24.237" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:24.238" starttime="20170810 03:56:23.740" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:24.238" starttime="20170810 03:56:23.739" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:24.238" starttime="20170810 03:56:23.739" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:24.238">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 03:56:24.239" starttime="20170810 03:56:24.238" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:24.241">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:56:24.241" starttime="20170810 03:56:24.240" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:24.242">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:56:24.242" starttime="20170810 03:56:24.242" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:24.242" starttime="20170810 03:56:24.241" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:24.242" starttime="20170810 03:56:24.239" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:24.243" starttime="20170810 03:56:24.239" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:24.959">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:56:24.960">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:56:24.960" starttime="20170810 03:56:24.243" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:24.961">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:56:24.962" starttime="20170810 03:56:24.961" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:24.962">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:56:24.962" starttime="20170810 03:56:24.962" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:24.963" starttime="20170810 03:56:24.962" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:24.963" starttime="20170810 03:56:24.960" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:24.963" starttime="20170810 03:56:24.960" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:56:24.963">Delete All Sessions</msg>
<status endtime="20170810 03:56:24.963" starttime="20170810 03:56:24.963" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:24.963">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:56:24.963" starttime="20170810 03:56:23.738" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:24.964">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:56:24.964" starttime="20170810 03:56:24.964" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:24.965">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:56:24.965">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:56:24.965">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:56:24.965" starttime="20170810 03:56:24.964" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:24.965">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 03:56:24.965" starttime="20170810 03:56:23.738" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:24.966">${power_state} = On</msg>
<status endtime="20170810 03:56:24.966" starttime="20170810 03:56:23.737" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 03:56:24.966" starttime="20170810 03:56:24.966" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:24.966" starttime="20170810 03:56:23.737" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:24.970">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:56:24.970" starttime="20170810 03:56:24.969" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:24.971">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:56:24.971" starttime="20170810 03:56:24.971" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:24.972">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:56:24.972" starttime="20170810 03:56:24.971" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:24.972">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:56:24.972" starttime="20170810 03:56:24.972" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:25.352">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:56:25.352" starttime="20170810 03:56:24.973" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:25.352">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:56:25.352">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:56:25.352" starttime="20170810 03:56:24.973" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:25.353">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:56:25.353" starttime="20170810 03:56:25.353" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:25.354">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:56:25.354" starttime="20170810 03:56:25.353" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:25.354" starttime="20170810 03:56:24.969" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:25.354" starttime="20170810 03:56:24.968" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:25.354" starttime="20170810 03:56:24.968" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:25.355">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 03:56:25.355" starttime="20170810 03:56:25.354" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:25.357">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:56:25.357" starttime="20170810 03:56:25.356" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:25.358">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:56:25.358" starttime="20170810 03:56:25.358" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:25.358" starttime="20170810 03:56:25.357" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:25.358" starttime="20170810 03:56:25.356" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:25.358" starttime="20170810 03:56:25.355" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:25.951">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:56:25.952">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:56:25.952" starttime="20170810 03:56:25.358" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:25.953">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:56:25.954" starttime="20170810 03:56:25.953" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:25.954">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:56:25.954" starttime="20170810 03:56:25.954" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:25.955" starttime="20170810 03:56:25.954" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:25.955" starttime="20170810 03:56:25.952" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:25.955" starttime="20170810 03:56:25.952" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:56:25.955">Delete All Sessions</msg>
<status endtime="20170810 03:56:25.955" starttime="20170810 03:56:25.955" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:25.955">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:56:25.956" starttime="20170810 03:56:24.967" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:25.956">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:56:25.956" starttime="20170810 03:56:25.956" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:25.957">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:56:25.957">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:56:25.957">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:56:25.957" starttime="20170810 03:56:25.956" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:25.957">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 03:56:25.957" starttime="20170810 03:56:24.967" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:25.957">${host_state} = Running</msg>
<status endtime="20170810 03:56:25.958" starttime="20170810 03:56:24.966" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 03:56:25.958" starttime="20170810 03:56:25.958" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:25.962">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:56:25.963" starttime="20170810 03:56:25.962" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:25.963">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:56:25.963" starttime="20170810 03:56:25.963" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:25.964">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:56:25.964" starttime="20170810 03:56:25.963" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:25.964">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:56:25.964" starttime="20170810 03:56:25.964" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:26.352">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:56:26.352" starttime="20170810 03:56:25.965" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:26.352">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:56:26.352">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:56:26.352" starttime="20170810 03:56:25.965" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:26.353">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:56:26.353" starttime="20170810 03:56:26.352" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:26.353">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:56:26.353" starttime="20170810 03:56:26.353" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:26.354" starttime="20170810 03:56:25.961" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:26.354" starttime="20170810 03:56:25.961" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:26.354" starttime="20170810 03:56:25.960" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:26.354">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 03:56:26.354" starttime="20170810 03:56:26.354" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:26.356">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:56:26.356" starttime="20170810 03:56:26.356" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:26.357">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:56:26.357" starttime="20170810 03:56:26.357" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:26.358" starttime="20170810 03:56:26.357" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:26.358" starttime="20170810 03:56:26.355" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:26.358" starttime="20170810 03:56:26.355" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:27.003">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:56:27.004">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:56:27.004" starttime="20170810 03:56:26.358" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:27.006">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:56:27.006" starttime="20170810 03:56:27.005" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:27.006">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:56:27.007" starttime="20170810 03:56:27.006" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:27.007" starttime="20170810 03:56:27.006" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:27.007" starttime="20170810 03:56:27.004" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:27.007" starttime="20170810 03:56:27.004" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:56:27.007">Delete All Sessions</msg>
<status endtime="20170810 03:56:27.007" starttime="20170810 03:56:27.007" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:27.007">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:56:27.008" starttime="20170810 03:56:25.960" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:27.008">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:56:27.008" starttime="20170810 03:56:27.008" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:27.009">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:56:27.009">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:56:27.009">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:56:27.009" starttime="20170810 03:56:27.008" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:27.009">${state} = Off</msg>
<status endtime="20170810 03:56:27.009" starttime="20170810 03:56:25.959" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:27.009">${boot_progress} = Off</msg>
<status endtime="20170810 03:56:27.009" starttime="20170810 03:56:25.958" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:56:27.010">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 03:56:27.010" starttime="20170810 03:56:27.010" status="FAIL"></status>
</kw>
<status endtime="20170810 03:56:27.010" starttime="20170810 03:56:25.958" status="FAIL"></status>
</kw>
<status endtime="20170810 03:56:27.010" starttime="20170810 03:56:23.736" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:37.015">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:56:37.015" starttime="20170810 03:56:37.015" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:37.016">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:56:37.016" starttime="20170810 03:56:37.016" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:37.017">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:56:37.017" starttime="20170810 03:56:37.016" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:37.017">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:56:37.017" starttime="20170810 03:56:37.017" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:37.225">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:56:37.225" starttime="20170810 03:56:37.018" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:37.225">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:56:37.225">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:56:37.225" starttime="20170810 03:56:37.018" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:37.226">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:56:37.226" starttime="20170810 03:56:37.225" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:37.226">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:56:37.227" starttime="20170810 03:56:37.226" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:37.227" starttime="20170810 03:56:37.014" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:37.227" starttime="20170810 03:56:37.014" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:37.227" starttime="20170810 03:56:37.013" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:37.227">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 03:56:37.227" starttime="20170810 03:56:37.227" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:37.229">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:56:37.229" starttime="20170810 03:56:37.229" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:37.230">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:56:37.230" starttime="20170810 03:56:37.230" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:37.231" starttime="20170810 03:56:37.230" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:37.231" starttime="20170810 03:56:37.228" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:37.231" starttime="20170810 03:56:37.228" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:38.355">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:56:38.355">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:56:38.355" starttime="20170810 03:56:37.231" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:38.357">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:56:38.357" starttime="20170810 03:56:38.356" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:38.358">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:56:38.358" starttime="20170810 03:56:38.357" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:38.358" starttime="20170810 03:56:38.357" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:38.358" starttime="20170810 03:56:38.356" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:38.358" starttime="20170810 03:56:38.355" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:56:38.358">Delete All Sessions</msg>
<status endtime="20170810 03:56:38.358" starttime="20170810 03:56:38.358" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:38.359">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:56:38.359" starttime="20170810 03:56:37.013" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:38.359">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:56:38.359" starttime="20170810 03:56:38.359" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:38.360">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:56:38.360">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:56:38.360">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:56:38.360" starttime="20170810 03:56:38.360" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:38.360">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 03:56:38.360" starttime="20170810 03:56:37.012" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:38.361">${power_state} = On</msg>
<status endtime="20170810 03:56:38.361" starttime="20170810 03:56:37.012" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 03:56:38.361" starttime="20170810 03:56:38.361" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:38.361" starttime="20170810 03:56:37.011" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:38.365">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:56:38.366" starttime="20170810 03:56:38.365" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:38.366">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:56:38.366" starttime="20170810 03:56:38.366" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:38.367">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:56:38.367" starttime="20170810 03:56:38.367" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:38.368">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:56:38.368" starttime="20170810 03:56:38.367" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:38.736">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:56:38.737" starttime="20170810 03:56:38.368" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:38.737">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:56:38.737">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:56:38.737" starttime="20170810 03:56:38.368" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:38.737">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:56:38.737" starttime="20170810 03:56:38.737" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:38.738">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:56:38.738" starttime="20170810 03:56:38.738" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:38.738" starttime="20170810 03:56:38.364" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:38.738" starttime="20170810 03:56:38.364" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:38.738" starttime="20170810 03:56:38.363" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:38.739">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 03:56:38.739" starttime="20170810 03:56:38.739" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:38.741">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:56:38.741" starttime="20170810 03:56:38.740" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:38.742">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:56:38.742" starttime="20170810 03:56:38.742" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:38.742" starttime="20170810 03:56:38.741" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:38.742" starttime="20170810 03:56:38.740" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:38.742" starttime="20170810 03:56:38.739" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:39.489">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:56:39.489">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:56:39.489" starttime="20170810 03:56:38.743" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:39.491">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:56:39.491" starttime="20170810 03:56:39.491" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:39.492">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:56:39.492" starttime="20170810 03:56:39.492" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:39.492" starttime="20170810 03:56:39.491" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:39.492" starttime="20170810 03:56:39.490" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:39.493" starttime="20170810 03:56:39.490" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:56:39.493">Delete All Sessions</msg>
<status endtime="20170810 03:56:39.493" starttime="20170810 03:56:39.493" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:39.493">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:56:39.493" starttime="20170810 03:56:38.363" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:39.494">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:56:39.494" starttime="20170810 03:56:39.493" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:39.494">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:56:39.494">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:56:39.495">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:56:39.495" starttime="20170810 03:56:39.494" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:39.495">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 03:56:39.495" starttime="20170810 03:56:38.362" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:39.495">${host_state} = Running</msg>
<status endtime="20170810 03:56:39.495" starttime="20170810 03:56:38.362" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 03:56:39.496" starttime="20170810 03:56:39.495" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:39.500">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:56:39.500" starttime="20170810 03:56:39.500" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:39.501">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:56:39.501" starttime="20170810 03:56:39.501" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:39.501">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:56:39.501" starttime="20170810 03:56:39.501" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:39.502">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:56:39.502" starttime="20170810 03:56:39.502" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:39.679">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:56:39.680" starttime="20170810 03:56:39.503" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:39.680">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:56:39.680">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:56:39.680" starttime="20170810 03:56:39.502" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:39.680">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:56:39.680" starttime="20170810 03:56:39.680" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:39.681">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:56:39.681" starttime="20170810 03:56:39.681" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:39.681" starttime="20170810 03:56:39.499" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:39.681" starttime="20170810 03:56:39.499" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:39.681" starttime="20170810 03:56:39.498" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:39.682">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 03:56:39.682" starttime="20170810 03:56:39.682" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:39.684">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:56:39.684" starttime="20170810 03:56:39.683" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:39.685">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:56:39.685" starttime="20170810 03:56:39.685" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:39.685" starttime="20170810 03:56:39.684" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:39.685" starttime="20170810 03:56:39.683" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:39.685" starttime="20170810 03:56:39.682" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:40.341">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:56:40.341">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:56:40.341" starttime="20170810 03:56:39.686" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:40.343">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:56:40.343" starttime="20170810 03:56:40.343" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:40.344">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:56:40.344" starttime="20170810 03:56:40.344" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:40.344" starttime="20170810 03:56:40.343" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:40.344" starttime="20170810 03:56:40.342" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:40.344" starttime="20170810 03:56:40.342" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:56:40.345">Delete All Sessions</msg>
<status endtime="20170810 03:56:40.345" starttime="20170810 03:56:40.345" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:40.345">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:56:40.345" starttime="20170810 03:56:39.497" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:40.346">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:56:40.346" starttime="20170810 03:56:40.345" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:40.346">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:56:40.346">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:56:40.347">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:56:40.347" starttime="20170810 03:56:40.346" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:40.347">${state} = Off</msg>
<status endtime="20170810 03:56:40.347" starttime="20170810 03:56:39.497" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:40.347">${boot_progress} = Off</msg>
<status endtime="20170810 03:56:40.347" starttime="20170810 03:56:39.496" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:56:40.348">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 03:56:40.348" starttime="20170810 03:56:40.347" status="FAIL"></status>
</kw>
<status endtime="20170810 03:56:40.348" starttime="20170810 03:56:39.496" status="FAIL"></status>
</kw>
<status endtime="20170810 03:56:40.348" starttime="20170810 03:56:37.011" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:50.355">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:56:50.355" starttime="20170810 03:56:50.354" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:50.356">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:56:50.356" starttime="20170810 03:56:50.356" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:50.357">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:56:50.357" starttime="20170810 03:56:50.357" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:50.358">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:56:50.358" starttime="20170810 03:56:50.357" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:50.626">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:56:50.626" starttime="20170810 03:56:50.359" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:50.626">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:56:50.626">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:56:50.626" starttime="20170810 03:56:50.358" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:50.627">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:56:50.627" starttime="20170810 03:56:50.626" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:50.627">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:56:50.627" starttime="20170810 03:56:50.627" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:50.627" starttime="20170810 03:56:50.353" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:50.628" starttime="20170810 03:56:50.353" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:50.628" starttime="20170810 03:56:50.352" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:50.628">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 03:56:50.628" starttime="20170810 03:56:50.628" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:50.630">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:56:50.630" starttime="20170810 03:56:50.630" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:50.631">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:56:50.631" starttime="20170810 03:56:50.631" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:50.632" starttime="20170810 03:56:50.631" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:50.632" starttime="20170810 03:56:50.629" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:50.632" starttime="20170810 03:56:50.629" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:50.708">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:56:50.709">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:56:50.709" starttime="20170810 03:56:50.632" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:50.710">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:56:50.710" starttime="20170810 03:56:50.710" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:50.711">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:56:50.711" starttime="20170810 03:56:50.711" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:50.711" starttime="20170810 03:56:50.711" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:50.712" starttime="20170810 03:56:50.709" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:50.712" starttime="20170810 03:56:50.709" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:56:50.712">Delete All Sessions</msg>
<status endtime="20170810 03:56:50.712" starttime="20170810 03:56:50.712" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:50.712">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:56:50.712" starttime="20170810 03:56:50.351" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:50.713">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:56:50.713" starttime="20170810 03:56:50.713" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:50.714">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:56:50.714">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:56:50.714">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:56:50.714" starttime="20170810 03:56:50.713" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:50.714">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 03:56:50.714" starttime="20170810 03:56:50.350" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:50.714">${power_state} = On</msg>
<status endtime="20170810 03:56:50.714" starttime="20170810 03:56:50.350" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 03:56:50.715" starttime="20170810 03:56:50.715" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:50.715" starttime="20170810 03:56:50.349" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:50.719">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:56:50.719" starttime="20170810 03:56:50.718" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:50.720">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:56:50.720" starttime="20170810 03:56:50.720" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:50.721">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:56:50.721" starttime="20170810 03:56:50.720" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:50.721">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:56:50.721" starttime="20170810 03:56:50.721" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:50.985">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:56:50.985" starttime="20170810 03:56:50.722" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:50.986">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:56:50.986">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:56:50.986" starttime="20170810 03:56:50.722" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:50.986">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:56:50.986" starttime="20170810 03:56:50.986" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:50.987">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:56:50.987" starttime="20170810 03:56:50.987" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:50.987" starttime="20170810 03:56:50.718" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:50.987" starttime="20170810 03:56:50.717" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:50.987" starttime="20170810 03:56:50.717" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:50.988">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 03:56:50.988" starttime="20170810 03:56:50.988" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:50.990">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:56:50.990" starttime="20170810 03:56:50.989" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:50.991">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:56:50.991" starttime="20170810 03:56:50.991" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:50.991" starttime="20170810 03:56:50.990" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:50.991" starttime="20170810 03:56:50.989" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:50.991" starttime="20170810 03:56:50.988" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:51.116">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:56:51.116">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:56:51.116" starttime="20170810 03:56:50.992" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:51.118">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:56:51.118" starttime="20170810 03:56:51.117" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:51.119">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:56:51.119" starttime="20170810 03:56:51.119" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:51.119" starttime="20170810 03:56:51.118" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:51.119" starttime="20170810 03:56:51.117" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:51.119" starttime="20170810 03:56:51.116" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:56:51.120">Delete All Sessions</msg>
<status endtime="20170810 03:56:51.120" starttime="20170810 03:56:51.119" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:51.120">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:56:51.120" starttime="20170810 03:56:50.716" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:51.121">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:56:51.121" starttime="20170810 03:56:51.120" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:51.121">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:56:51.121">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:56:51.121">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:56:51.121" starttime="20170810 03:56:51.121" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:51.122">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 03:56:51.122" starttime="20170810 03:56:50.716" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:51.122">${host_state} = Running</msg>
<status endtime="20170810 03:56:51.122" starttime="20170810 03:56:50.715" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 03:56:51.122" starttime="20170810 03:56:51.122" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:51.127">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:56:51.127" starttime="20170810 03:56:51.126" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:51.128">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:56:51.128" starttime="20170810 03:56:51.127" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:51.128">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:56:51.128" starttime="20170810 03:56:51.128" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:51.129">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:56:51.129" starttime="20170810 03:56:51.128" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:51.518">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:56:51.518" starttime="20170810 03:56:51.130" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:51.519">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:56:51.519">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:56:51.519" starttime="20170810 03:56:51.129" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:51.519">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:56:51.519" starttime="20170810 03:56:51.519" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:51.520">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:56:51.520" starttime="20170810 03:56:51.520" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:51.520" starttime="20170810 03:56:51.126" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:51.520" starttime="20170810 03:56:51.125" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:51.520" starttime="20170810 03:56:51.125" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:51.521">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 03:56:51.521" starttime="20170810 03:56:51.521" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:51.523">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:56:51.523" starttime="20170810 03:56:51.522" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:51.524">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:56:51.524" starttime="20170810 03:56:51.524" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:51.524" starttime="20170810 03:56:51.523" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:51.524" starttime="20170810 03:56:51.522" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:51.524" starttime="20170810 03:56:51.521" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:51.614">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:56:51.614">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:56:51.614" starttime="20170810 03:56:51.525" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:51.616">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:56:51.616" starttime="20170810 03:56:51.615" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:51.617">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:56:51.617" starttime="20170810 03:56:51.617" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:51.617" starttime="20170810 03:56:51.616" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:51.617" starttime="20170810 03:56:51.615" status="PASS"></status>
</kw>
<status endtime="20170810 03:56:51.617" starttime="20170810 03:56:51.614" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:56:51.618">Delete All Sessions</msg>
<status endtime="20170810 03:56:51.618" starttime="20170810 03:56:51.617" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:51.618">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:56:51.618" starttime="20170810 03:56:51.124" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:56:51.618">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:56:51.619" starttime="20170810 03:56:51.618" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:56:51.619">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:56:51.619">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:56:51.619">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:56:51.619" starttime="20170810 03:56:51.619" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:51.620">${state} = Off</msg>
<status endtime="20170810 03:56:51.620" starttime="20170810 03:56:51.123" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:56:51.620">${boot_progress} = Off</msg>
<status endtime="20170810 03:56:51.620" starttime="20170810 03:56:51.123" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:56:51.620">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 03:56:51.621" starttime="20170810 03:56:51.620" status="FAIL"></status>
</kw>
<status endtime="20170810 03:56:51.621" starttime="20170810 03:56:51.123" status="FAIL"></status>
</kw>
<status endtime="20170810 03:56:51.621" starttime="20170810 03:56:50.349" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:01.626">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:57:01.626" starttime="20170810 03:57:01.625" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:01.627">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:57:01.627" starttime="20170810 03:57:01.626" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:01.627">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:57:01.627" starttime="20170810 03:57:01.627" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:01.628">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:57:01.628" starttime="20170810 03:57:01.628" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:02.302">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:57:02.302" starttime="20170810 03:57:01.629" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:57:02.303">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:57:02.303">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:57:02.303" starttime="20170810 03:57:01.628" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:02.303">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:57:02.303" starttime="20170810 03:57:02.303" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:02.304">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:57:02.304" starttime="20170810 03:57:02.304" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:02.304" starttime="20170810 03:57:01.625" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:02.304" starttime="20170810 03:57:01.624" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:02.304" starttime="20170810 03:57:01.624" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:02.305">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 03:57:02.305" starttime="20170810 03:57:02.305" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:02.307">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:57:02.307" starttime="20170810 03:57:02.306" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:02.308">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:57:02.308" starttime="20170810 03:57:02.308" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:02.308" starttime="20170810 03:57:02.307" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:02.308" starttime="20170810 03:57:02.306" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:02.308" starttime="20170810 03:57:02.305" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:02.455">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:57:02.455">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:57:02.455" starttime="20170810 03:57:02.309" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:02.457">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:57:02.457" starttime="20170810 03:57:02.456" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:02.458">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:57:02.458" starttime="20170810 03:57:02.457" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:02.458" starttime="20170810 03:57:02.457" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:02.458" starttime="20170810 03:57:02.456" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:02.458" starttime="20170810 03:57:02.455" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:57:02.459">Delete All Sessions</msg>
<status endtime="20170810 03:57:02.459" starttime="20170810 03:57:02.458" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:57:02.459">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:57:02.459" starttime="20170810 03:57:01.623" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:02.459">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:57:02.460" starttime="20170810 03:57:02.459" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:02.460">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:57:02.460">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:57:02.460">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:57:02.460" starttime="20170810 03:57:02.460" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:57:02.461">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 03:57:02.461" starttime="20170810 03:57:01.622" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:57:02.461">${power_state} = On</msg>
<status endtime="20170810 03:57:02.461" starttime="20170810 03:57:01.622" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 03:57:02.461" starttime="20170810 03:57:02.461" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:02.462" starttime="20170810 03:57:01.622" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:02.465">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:57:02.466" starttime="20170810 03:57:02.465" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:02.467">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:57:02.467" starttime="20170810 03:57:02.466" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:02.468">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:57:02.468" starttime="20170810 03:57:02.467" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:02.468">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:57:02.469" starttime="20170810 03:57:02.468" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:02.674">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:57:02.674" starttime="20170810 03:57:02.469" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:57:02.674">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:57:02.674">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:57:02.675" starttime="20170810 03:57:02.469" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:02.675">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:57:02.675" starttime="20170810 03:57:02.675" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:02.676">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:57:02.676" starttime="20170810 03:57:02.675" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:02.676" starttime="20170810 03:57:02.464" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:02.677" starttime="20170810 03:57:02.464" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:02.677" starttime="20170810 03:57:02.463" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:02.677">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 03:57:02.678" starttime="20170810 03:57:02.677" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:02.680">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:57:02.680" starttime="20170810 03:57:02.679" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:02.680">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:57:02.681" starttime="20170810 03:57:02.680" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:02.681" starttime="20170810 03:57:02.680" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:02.681" starttime="20170810 03:57:02.678" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:02.681" starttime="20170810 03:57:02.678" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:02.795">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:57:02.795">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:57:02.795" starttime="20170810 03:57:02.681" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:02.797">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:57:02.797" starttime="20170810 03:57:02.797" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:02.798">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:57:02.798" starttime="20170810 03:57:02.798" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:02.798" starttime="20170810 03:57:02.797" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:02.798" starttime="20170810 03:57:02.796" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:02.798" starttime="20170810 03:57:02.796" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:57:02.799">Delete All Sessions</msg>
<status endtime="20170810 03:57:02.799" starttime="20170810 03:57:02.799" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:57:02.799">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:57:02.799" starttime="20170810 03:57:02.463" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:02.800">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:57:02.800" starttime="20170810 03:57:02.799" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:02.800">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:57:02.800">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:57:02.800">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:57:02.800" starttime="20170810 03:57:02.800" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:57:02.801">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 03:57:02.801" starttime="20170810 03:57:02.462" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:57:02.801">${host_state} = Running</msg>
<status endtime="20170810 03:57:02.801" starttime="20170810 03:57:02.462" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 03:57:02.802" starttime="20170810 03:57:02.801" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:02.806">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:57:02.806" starttime="20170810 03:57:02.805" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:02.807">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:57:02.807" starttime="20170810 03:57:02.806" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:02.807">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:57:02.807" starttime="20170810 03:57:02.807" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:02.808">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:57:02.808" starttime="20170810 03:57:02.808" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:03.022">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:57:03.022" starttime="20170810 03:57:02.809" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:57:03.022">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:57:03.022">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:57:03.022" starttime="20170810 03:57:02.808" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:03.023">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:57:03.023" starttime="20170810 03:57:03.022" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:03.023">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:57:03.023" starttime="20170810 03:57:03.023" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:03.024" starttime="20170810 03:57:02.805" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:03.024" starttime="20170810 03:57:02.804" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:03.024" starttime="20170810 03:57:02.804" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:03.024">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 03:57:03.024" starttime="20170810 03:57:03.024" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:03.026">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:57:03.026" starttime="20170810 03:57:03.026" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:03.028">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:57:03.028" starttime="20170810 03:57:03.027" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:03.028" starttime="20170810 03:57:03.027" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:03.028" starttime="20170810 03:57:03.025" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:03.028" starttime="20170810 03:57:03.025" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:03.102">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:57:03.102">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:57:03.102" starttime="20170810 03:57:03.028" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:03.103">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:57:03.104" starttime="20170810 03:57:03.103" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:03.104">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:57:03.105" starttime="20170810 03:57:03.104" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:03.105" starttime="20170810 03:57:03.104" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:03.105" starttime="20170810 03:57:03.102" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:03.105" starttime="20170810 03:57:03.102" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:57:03.105">Delete All Sessions</msg>
<status endtime="20170810 03:57:03.105" starttime="20170810 03:57:03.105" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:57:03.105">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:57:03.106" starttime="20170810 03:57:02.803" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:03.106">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:57:03.106" starttime="20170810 03:57:03.106" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:03.107">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:57:03.107">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:57:03.107">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:57:03.107" starttime="20170810 03:57:03.107" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:57:03.107">${state} = Off</msg>
<status endtime="20170810 03:57:03.107" starttime="20170810 03:57:02.802" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:57:03.107">${boot_progress} = Off</msg>
<status endtime="20170810 03:57:03.108" starttime="20170810 03:57:02.802" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:57:03.108">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 03:57:03.108" starttime="20170810 03:57:03.108" status="FAIL"></status>
</kw>
<status endtime="20170810 03:57:03.108" starttime="20170810 03:57:02.802" status="FAIL"></status>
</kw>
<status endtime="20170810 03:57:03.109" starttime="20170810 03:57:01.621" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:13.114">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:57:13.114" starttime="20170810 03:57:13.113" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:13.115">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:57:13.115" starttime="20170810 03:57:13.115" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:13.116">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:57:13.116" starttime="20170810 03:57:13.115" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:13.116">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:57:13.116" starttime="20170810 03:57:13.116" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:13.323">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:57:13.323" starttime="20170810 03:57:13.117" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:57:13.323">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:57:13.323">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:57:13.323" starttime="20170810 03:57:13.117" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:13.324">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:57:13.324" starttime="20170810 03:57:13.323" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:13.324">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:57:13.325" starttime="20170810 03:57:13.324" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:13.325" starttime="20170810 03:57:13.113" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:13.325" starttime="20170810 03:57:13.112" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:13.325" starttime="20170810 03:57:13.112" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:13.325">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 03:57:13.325" starttime="20170810 03:57:13.325" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:13.328">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:57:13.328" starttime="20170810 03:57:13.327" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:13.328">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:57:13.329" starttime="20170810 03:57:13.328" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:13.329" starttime="20170810 03:57:13.328" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:13.329" starttime="20170810 03:57:13.326" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:13.329" starttime="20170810 03:57:13.326" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:19.607">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:57:19.607">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:57:19.607" starttime="20170810 03:57:13.329" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:19.609">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:57:19.609" starttime="20170810 03:57:19.609" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:19.610">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:57:19.610" starttime="20170810 03:57:19.610" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:19.610" starttime="20170810 03:57:19.609" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:19.611" starttime="20170810 03:57:19.608" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:19.611" starttime="20170810 03:57:19.608" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:57:19.611">Delete All Sessions</msg>
<status endtime="20170810 03:57:19.611" starttime="20170810 03:57:19.611" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:57:19.611">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:57:19.611" starttime="20170810 03:57:13.111" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:19.612">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:57:19.612" starttime="20170810 03:57:19.612" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:19.612">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:57:19.613">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:57:19.613">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:57:19.613" starttime="20170810 03:57:19.612" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:57:19.613">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 03:57:19.613" starttime="20170810 03:57:13.111" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:57:19.613">${power_state} = On</msg>
<status endtime="20170810 03:57:19.613" starttime="20170810 03:57:13.110" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 03:57:19.614" starttime="20170810 03:57:19.614" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:19.614" starttime="20170810 03:57:13.110" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:19.618">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:57:19.618" starttime="20170810 03:57:19.618" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:19.619">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:57:19.619" starttime="20170810 03:57:19.619" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:19.619">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:57:19.619" starttime="20170810 03:57:19.619" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:19.620">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:57:19.620" starttime="20170810 03:57:19.620" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:20.201">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:57:20.201" starttime="20170810 03:57:19.621" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:57:20.201">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:57:20.201">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:57:20.201" starttime="20170810 03:57:19.620" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:20.202">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:57:20.202" starttime="20170810 03:57:20.201" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:20.202">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:57:20.202" starttime="20170810 03:57:20.202" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:20.203" starttime="20170810 03:57:19.617" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:20.203" starttime="20170810 03:57:19.616" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:20.203" starttime="20170810 03:57:19.616" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:20.203">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 03:57:20.203" starttime="20170810 03:57:20.203" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:20.205">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:57:20.205" starttime="20170810 03:57:20.205" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:20.206">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:57:20.206" starttime="20170810 03:57:20.206" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:20.207" starttime="20170810 03:57:20.206" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:20.207" starttime="20170810 03:57:20.204" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:20.207" starttime="20170810 03:57:20.204" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:20.296">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:57:20.296">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:57:20.296" starttime="20170810 03:57:20.207" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:20.298">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:57:20.298" starttime="20170810 03:57:20.297" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:20.299">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:57:20.299" starttime="20170810 03:57:20.299" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:20.299" starttime="20170810 03:57:20.298" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:20.299" starttime="20170810 03:57:20.297" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:20.299" starttime="20170810 03:57:20.297" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:57:20.300">Delete All Sessions</msg>
<status endtime="20170810 03:57:20.300" starttime="20170810 03:57:20.300" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:57:20.300">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:57:20.300" starttime="20170810 03:57:19.615" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:20.301">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:57:20.301" starttime="20170810 03:57:20.301" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:20.302">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:57:20.302">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:57:20.302">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:57:20.302" starttime="20170810 03:57:20.302" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:57:20.303">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 03:57:20.303" starttime="20170810 03:57:19.615" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:57:20.303">${host_state} = Running</msg>
<status endtime="20170810 03:57:20.303" starttime="20170810 03:57:19.614" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 03:57:20.304" starttime="20170810 03:57:20.303" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:20.309">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:57:20.310" starttime="20170810 03:57:20.309" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:20.310">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:57:20.310" starttime="20170810 03:57:20.310" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:20.311">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:57:20.311" starttime="20170810 03:57:20.310" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:20.311">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:57:20.311" starttime="20170810 03:57:20.311" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:20.989">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:57:20.989" starttime="20170810 03:57:20.312" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:57:20.989">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:57:20.990">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:57:20.990" starttime="20170810 03:57:20.312" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:20.990">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:57:20.990" starttime="20170810 03:57:20.990" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:20.991">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:57:20.991" starttime="20170810 03:57:20.991" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:20.991" starttime="20170810 03:57:20.308" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:20.991" starttime="20170810 03:57:20.308" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:20.991" starttime="20170810 03:57:20.307" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:20.992">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 03:57:20.992" starttime="20170810 03:57:20.992" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:20.995">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:57:20.995" starttime="20170810 03:57:20.993" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:20.996">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:57:20.996" starttime="20170810 03:57:20.996" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:20.996" starttime="20170810 03:57:20.995" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:20.996" starttime="20170810 03:57:20.993" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:20.996" starttime="20170810 03:57:20.992" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:21.075">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:57:21.075">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:57:21.075" starttime="20170810 03:57:20.997" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:21.077">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:57:21.077" starttime="20170810 03:57:21.076" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:21.078">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:57:21.078" starttime="20170810 03:57:21.078" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:21.078" starttime="20170810 03:57:21.077" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:21.078" starttime="20170810 03:57:21.076" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:21.078" starttime="20170810 03:57:21.075" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:57:21.079">Delete All Sessions</msg>
<status endtime="20170810 03:57:21.079" starttime="20170810 03:57:21.079" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:57:21.079">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:57:21.079" starttime="20170810 03:57:20.306" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:21.080">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:57:21.080" starttime="20170810 03:57:21.079" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:21.080">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:57:21.080">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:57:21.080">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:57:21.080" starttime="20170810 03:57:21.080" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:57:21.081">${state} = Off</msg>
<status endtime="20170810 03:57:21.081" starttime="20170810 03:57:20.305" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:57:21.081">${boot_progress} = Off</msg>
<status endtime="20170810 03:57:21.081" starttime="20170810 03:57:20.305" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:57:21.082">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 03:57:21.082" starttime="20170810 03:57:21.081" status="FAIL"></status>
</kw>
<status endtime="20170810 03:57:21.082" starttime="20170810 03:57:20.304" status="FAIL"></status>
</kw>
<status endtime="20170810 03:57:21.082" starttime="20170810 03:57:13.109" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:31.087">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:57:31.087" starttime="20170810 03:57:31.086" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:31.088">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:57:31.088" starttime="20170810 03:57:31.087" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:31.088">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:57:31.088" starttime="20170810 03:57:31.088" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:31.089">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:57:31.089" starttime="20170810 03:57:31.089" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:31.943">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:57:31.943" starttime="20170810 03:57:31.090" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:57:31.943">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:57:31.943">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:57:31.943" starttime="20170810 03:57:31.089" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:31.944">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:57:31.944" starttime="20170810 03:57:31.943" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:31.944">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:57:31.944" starttime="20170810 03:57:31.944" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:31.945" starttime="20170810 03:57:31.086" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:31.945" starttime="20170810 03:57:31.085" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:31.945" starttime="20170810 03:57:31.085" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:31.945">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 03:57:31.945" starttime="20170810 03:57:31.945" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:31.947">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:57:31.947" starttime="20170810 03:57:31.947" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:31.948">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:57:31.948" starttime="20170810 03:57:31.948" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:31.949" starttime="20170810 03:57:31.948" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:31.949" starttime="20170810 03:57:31.946" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:31.949" starttime="20170810 03:57:31.946" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:37.560">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:57:37.561">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:57:37.561" starttime="20170810 03:57:31.949" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:37.562">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:57:37.562" starttime="20170810 03:57:37.562" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:37.563">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:57:37.563" starttime="20170810 03:57:37.563" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:37.564" starttime="20170810 03:57:37.563" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:37.564" starttime="20170810 03:57:37.561" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:37.564" starttime="20170810 03:57:37.561" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:57:37.564">Delete All Sessions</msg>
<status endtime="20170810 03:57:37.564" starttime="20170810 03:57:37.564" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:57:37.564">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:57:37.564" starttime="20170810 03:57:31.084" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:37.565">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:57:37.565" starttime="20170810 03:57:37.565" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:37.566">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:57:37.566">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:57:37.566">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:57:37.566" starttime="20170810 03:57:37.565" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:57:37.566">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170810 03:57:37.566" starttime="20170810 03:57:31.084" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:57:37.566">${power_state} = Off</msg>
<status endtime="20170810 03:57:37.566" starttime="20170810 03:57:31.083" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:57:37.567">On != Off</msg>
<status endtime="20170810 03:57:37.567" starttime="20170810 03:57:37.567" status="FAIL"></status>
</kw>
<status endtime="20170810 03:57:37.567" starttime="20170810 03:57:31.083" status="FAIL"></status>
</kw>
<status endtime="20170810 03:57:37.568" starttime="20170810 03:57:31.082" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:47.573">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:57:47.573" starttime="20170810 03:57:47.572" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:47.574">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:57:47.574" starttime="20170810 03:57:47.573" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:47.574">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:57:47.574" starttime="20170810 03:57:47.574" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:47.575">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:57:47.575" starttime="20170810 03:57:47.574" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:47.776">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:57:47.776" starttime="20170810 03:57:47.576" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:57:47.776">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:57:47.776">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:57:47.776" starttime="20170810 03:57:47.575" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:47.777">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:57:47.777" starttime="20170810 03:57:47.777" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:47.778">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:57:47.778" starttime="20170810 03:57:47.777" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:47.778" starttime="20170810 03:57:47.572" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:47.778" starttime="20170810 03:57:47.571" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:47.778" starttime="20170810 03:57:47.570" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:47.779">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 03:57:47.779" starttime="20170810 03:57:47.778" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:47.781">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:57:47.781" starttime="20170810 03:57:47.780" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:47.782">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:57:47.782" starttime="20170810 03:57:47.781" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:47.782" starttime="20170810 03:57:47.781" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:47.782" starttime="20170810 03:57:47.779" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:47.782" starttime="20170810 03:57:47.779" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:48.244">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:57:48.244">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:57:48.244" starttime="20170810 03:57:47.782" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:48.246">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:57:48.246" starttime="20170810 03:57:48.245" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:48.247">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:57:48.247" starttime="20170810 03:57:48.247" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:48.247" starttime="20170810 03:57:48.246" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:48.248" starttime="20170810 03:57:48.245" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:48.248" starttime="20170810 03:57:48.244" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:57:48.248">Delete All Sessions</msg>
<status endtime="20170810 03:57:48.248" starttime="20170810 03:57:48.248" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:57:48.248">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:57:48.248" starttime="20170810 03:57:47.570" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:48.249">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:57:48.249" starttime="20170810 03:57:48.249" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:48.250">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:57:48.250">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:57:48.250">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:57:48.250" starttime="20170810 03:57:48.249" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:57:48.250">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 03:57:48.250" starttime="20170810 03:57:47.569" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:57:48.250">${power_state} = On</msg>
<status endtime="20170810 03:57:48.250" starttime="20170810 03:57:47.569" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 03:57:48.251" starttime="20170810 03:57:48.251" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:48.251" starttime="20170810 03:57:47.568" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:48.255">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:57:48.255" starttime="20170810 03:57:48.254" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:48.256">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:57:48.256" starttime="20170810 03:57:48.255" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:48.256">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:57:48.256" starttime="20170810 03:57:48.256" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:48.257">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:57:48.257" starttime="20170810 03:57:48.256" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:48.662">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:57:48.662" starttime="20170810 03:57:48.258" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:57:48.662">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:57:48.662">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:57:48.662" starttime="20170810 03:57:48.257" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:48.663">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:57:48.663" starttime="20170810 03:57:48.662" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:48.663">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:57:48.663" starttime="20170810 03:57:48.663" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:48.664" starttime="20170810 03:57:48.254" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:48.664" starttime="20170810 03:57:48.253" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:48.664" starttime="20170810 03:57:48.253" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:48.664">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 03:57:48.664" starttime="20170810 03:57:48.664" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:48.667">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:57:48.667" starttime="20170810 03:57:48.666" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:48.668">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:57:48.668" starttime="20170810 03:57:48.668" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:48.668" starttime="20170810 03:57:48.667" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:48.668" starttime="20170810 03:57:48.665" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:48.668" starttime="20170810 03:57:48.665" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:49.091">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:57:49.091">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:57:49.091" starttime="20170810 03:57:48.669" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:49.093">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:57:49.093" starttime="20170810 03:57:49.092" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:49.093">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:57:49.094" starttime="20170810 03:57:49.093" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:49.094" starttime="20170810 03:57:49.093" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:49.094" starttime="20170810 03:57:49.092" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:49.094" starttime="20170810 03:57:49.091" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:57:49.094">Delete All Sessions</msg>
<status endtime="20170810 03:57:49.094" starttime="20170810 03:57:49.094" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:57:49.095">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:57:49.095" starttime="20170810 03:57:48.252" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:49.095">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:57:49.095" starttime="20170810 03:57:49.095" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:49.096">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:57:49.096">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:57:49.096">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:57:49.096" starttime="20170810 03:57:49.095" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:57:49.096">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 03:57:49.096" starttime="20170810 03:57:48.251" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:57:49.097">${host_state} = Running</msg>
<status endtime="20170810 03:57:49.097" starttime="20170810 03:57:48.251" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 03:57:49.097" starttime="20170810 03:57:49.097" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:49.101">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:57:49.101" starttime="20170810 03:57:49.101" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:49.102">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:57:49.102" starttime="20170810 03:57:49.102" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:49.103">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:57:49.103" starttime="20170810 03:57:49.102" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:49.103">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:57:49.103" starttime="20170810 03:57:49.103" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:49.522">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:57:49.523" starttime="20170810 03:57:49.104" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:57:49.523">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:57:49.523">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:57:49.523" starttime="20170810 03:57:49.104" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:49.523">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:57:49.523" starttime="20170810 03:57:49.523" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:49.524">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:57:49.524" starttime="20170810 03:57:49.524" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:49.524" starttime="20170810 03:57:49.100" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:49.524" starttime="20170810 03:57:49.100" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:49.524" starttime="20170810 03:57:49.099" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:49.525">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 03:57:49.525" starttime="20170810 03:57:49.525" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:49.527">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:57:49.527" starttime="20170810 03:57:49.526" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:49.528">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:57:49.528" starttime="20170810 03:57:49.528" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:49.528" starttime="20170810 03:57:49.527" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:49.528" starttime="20170810 03:57:49.526" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:49.529" starttime="20170810 03:57:49.525" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:49.669">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:57:49.669">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:57:49.669" starttime="20170810 03:57:49.529" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:49.671">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:57:49.671" starttime="20170810 03:57:49.670" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:49.672">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:57:49.672" starttime="20170810 03:57:49.671" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:49.672" starttime="20170810 03:57:49.671" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:49.672" starttime="20170810 03:57:49.670" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:49.672" starttime="20170810 03:57:49.669" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:57:49.672">Delete All Sessions</msg>
<status endtime="20170810 03:57:49.673" starttime="20170810 03:57:49.672" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:57:49.673">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:57:49.673" starttime="20170810 03:57:49.099" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:49.673">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:57:49.673" starttime="20170810 03:57:49.673" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:49.674">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:57:49.674">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:57:49.674">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:57:49.674" starttime="20170810 03:57:49.674" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:57:49.674">${state} = Off</msg>
<status endtime="20170810 03:57:49.674" starttime="20170810 03:57:49.098" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:57:49.675">${boot_progress} = Off</msg>
<status endtime="20170810 03:57:49.675" starttime="20170810 03:57:49.098" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:57:49.675">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 03:57:49.675" starttime="20170810 03:57:49.675" status="FAIL"></status>
</kw>
<status endtime="20170810 03:57:49.676" starttime="20170810 03:57:49.097" status="FAIL"></status>
</kw>
<status endtime="20170810 03:57:49.676" starttime="20170810 03:57:47.568" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:59.681">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:57:59.681" starttime="20170810 03:57:59.681" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:59.682">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:57:59.682" starttime="20170810 03:57:59.682" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:59.683">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:57:59.683" starttime="20170810 03:57:59.682" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:59.683">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:57:59.683" starttime="20170810 03:57:59.683" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:59.890">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:57:59.890" starttime="20170810 03:57:59.684" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:57:59.890">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:57:59.891">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:57:59.891" starttime="20170810 03:57:59.683" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:59.891">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:57:59.891" starttime="20170810 03:57:59.891" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:59.892">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:57:59.892" starttime="20170810 03:57:59.892" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:59.892" starttime="20170810 03:57:59.680" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:59.892" starttime="20170810 03:57:59.679" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:59.892" starttime="20170810 03:57:59.679" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:59.893">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 03:57:59.893" starttime="20170810 03:57:59.893" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:59.895">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:57:59.895" starttime="20170810 03:57:59.894" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:59.896">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:57:59.896" starttime="20170810 03:57:59.896" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:59.896" starttime="20170810 03:57:59.895" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:59.897" starttime="20170810 03:57:59.894" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:59.897" starttime="20170810 03:57:59.893" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:59.962">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:57:59.962">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:57:59.962" starttime="20170810 03:57:59.897" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:59.964">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:57:59.964" starttime="20170810 03:57:59.963" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:59.965">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:57:59.965" starttime="20170810 03:57:59.964" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:59.965" starttime="20170810 03:57:59.964" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:59.965" starttime="20170810 03:57:59.962" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:59.965" starttime="20170810 03:57:59.962" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:57:59.965">Delete All Sessions</msg>
<status endtime="20170810 03:57:59.965" starttime="20170810 03:57:59.965" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:57:59.966">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:57:59.966" starttime="20170810 03:57:59.678" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:59.966">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:57:59.966" starttime="20170810 03:57:59.966" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:59.967">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:57:59.967">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:57:59.967">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:57:59.967" starttime="20170810 03:57:59.967" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:57:59.967">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 03:57:59.967" starttime="20170810 03:57:59.677" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:57:59.968">${power_state} = On</msg>
<status endtime="20170810 03:57:59.968" starttime="20170810 03:57:59.677" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 03:57:59.968" starttime="20170810 03:57:59.968" status="PASS"></status>
</kw>
<status endtime="20170810 03:57:59.968" starttime="20170810 03:57:59.677" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:57:59.972">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:57:59.972" starttime="20170810 03:57:59.972" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:59.973">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:57:59.973" starttime="20170810 03:57:59.973" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:59.973">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:57:59.974" starttime="20170810 03:57:59.973" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:57:59.974">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:57:59.974" starttime="20170810 03:57:59.974" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:00.162">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:58:00.162" starttime="20170810 03:57:59.975" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:00.162">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:58:00.162">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:00.162" starttime="20170810 03:57:59.974" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:00.163">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:00.163" starttime="20170810 03:58:00.162" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:00.163">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:00.164" starttime="20170810 03:58:00.163" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:00.164" starttime="20170810 03:57:59.971" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:00.164" starttime="20170810 03:57:59.971" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:00.164" starttime="20170810 03:57:59.970" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:00.164">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 03:58:00.164" starttime="20170810 03:58:00.164" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:00.167">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:58:00.167" starttime="20170810 03:58:00.166" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:00.168">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:58:00.168" starttime="20170810 03:58:00.167" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:00.168" starttime="20170810 03:58:00.167" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:00.168" starttime="20170810 03:58:00.165" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:00.168" starttime="20170810 03:58:00.165" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:00.271">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:58:00.271">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:00.271" starttime="20170810 03:58:00.168" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:00.272">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:58:00.273" starttime="20170810 03:58:00.272" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:00.273">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:58:00.274" starttime="20170810 03:58:00.273" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:00.274" starttime="20170810 03:58:00.273" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:00.274" starttime="20170810 03:58:00.272" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:00.274" starttime="20170810 03:58:00.271" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:58:00.274">Delete All Sessions</msg>
<status endtime="20170810 03:58:00.274" starttime="20170810 03:58:00.274" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:00.275">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:00.275" starttime="20170810 03:57:59.969" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:00.275">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:00.275" starttime="20170810 03:58:00.275" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:00.276">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:58:00.276">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:58:00.276">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:58:00.276" starttime="20170810 03:58:00.275" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:00.276">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 03:58:00.276" starttime="20170810 03:57:59.969" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:00.277">${host_state} = Running</msg>
<status endtime="20170810 03:58:00.277" starttime="20170810 03:57:59.969" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 03:58:00.277" starttime="20170810 03:58:00.277" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:00.281">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:58:00.281" starttime="20170810 03:58:00.281" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:00.282">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:58:00.282" starttime="20170810 03:58:00.282" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:00.282">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:58:00.283" starttime="20170810 03:58:00.282" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:00.283">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:58:00.283" starttime="20170810 03:58:00.283" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:00.505">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:58:00.505" starttime="20170810 03:58:00.288" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:00.505">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:58:00.505">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:00.505" starttime="20170810 03:58:00.283" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:00.506">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:00.506" starttime="20170810 03:58:00.506" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:00.507">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:00.507" starttime="20170810 03:58:00.506" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:00.507" starttime="20170810 03:58:00.280" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:00.507" starttime="20170810 03:58:00.280" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:00.507" starttime="20170810 03:58:00.279" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:00.508">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 03:58:00.508" starttime="20170810 03:58:00.507" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:00.510">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:58:00.510" starttime="20170810 03:58:00.509" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:00.511">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:58:00.511" starttime="20170810 03:58:00.511" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:00.511" starttime="20170810 03:58:00.510" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:00.511" starttime="20170810 03:58:00.509" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:00.511" starttime="20170810 03:58:00.508" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:00.604">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:58:00.604">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:00.604" starttime="20170810 03:58:00.511" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:00.606">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:58:00.606" starttime="20170810 03:58:00.606" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:00.607">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:58:00.607" starttime="20170810 03:58:00.607" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:00.607" starttime="20170810 03:58:00.606" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:00.607" starttime="20170810 03:58:00.605" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:00.608" starttime="20170810 03:58:00.605" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:58:00.608">Delete All Sessions</msg>
<status endtime="20170810 03:58:00.608" starttime="20170810 03:58:00.608" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:00.608">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:00.608" starttime="20170810 03:58:00.279" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:00.609">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:00.609" starttime="20170810 03:58:00.609" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:00.610">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:58:00.610">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:58:00.610">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:58:00.610" starttime="20170810 03:58:00.609" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:00.610">${state} = Off</msg>
<status endtime="20170810 03:58:00.610" starttime="20170810 03:58:00.278" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:00.610">${boot_progress} = Off</msg>
<status endtime="20170810 03:58:00.610" starttime="20170810 03:58:00.278" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:58:00.611">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 03:58:00.611" starttime="20170810 03:58:00.610" status="FAIL"></status>
</kw>
<status endtime="20170810 03:58:00.611" starttime="20170810 03:58:00.277" status="FAIL"></status>
</kw>
<status endtime="20170810 03:58:00.611" starttime="20170810 03:57:59.676" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:10.617">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:58:10.617" starttime="20170810 03:58:10.616" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:10.618">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:58:10.618" starttime="20170810 03:58:10.617" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:10.618">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:58:10.618" starttime="20170810 03:58:10.618" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:10.619">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:58:10.619" starttime="20170810 03:58:10.619" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:11.026">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:58:11.026" starttime="20170810 03:58:10.620" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:11.026">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:58:11.026">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:11.026" starttime="20170810 03:58:10.619" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:11.027">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:11.027" starttime="20170810 03:58:11.027" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:11.028">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:11.028" starttime="20170810 03:58:11.028" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:11.028" starttime="20170810 03:58:10.616" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:11.028" starttime="20170810 03:58:10.615" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:11.028" starttime="20170810 03:58:10.614" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:11.029">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 03:58:11.029" starttime="20170810 03:58:11.029" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:11.031">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:58:11.031" starttime="20170810 03:58:11.030" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:11.032">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 03:58:11.032" starttime="20170810 03:58:11.032" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:11.032" starttime="20170810 03:58:11.031" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:11.032" starttime="20170810 03:58:11.030" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:11.033" starttime="20170810 03:58:11.029" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:11.888">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:58:11.888">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:11.888" starttime="20170810 03:58:11.033" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:11.890">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:58:11.890" starttime="20170810 03:58:11.889" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:11.891">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:58:11.891" starttime="20170810 03:58:11.891" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:11.891" starttime="20170810 03:58:11.890" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:11.892" starttime="20170810 03:58:11.889" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:11.892" starttime="20170810 03:58:11.888" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:58:11.892">Delete All Sessions</msg>
<status endtime="20170810 03:58:11.892" starttime="20170810 03:58:11.892" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:11.892">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:11.892" starttime="20170810 03:58:10.614" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:11.893">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:11.893" starttime="20170810 03:58:11.893" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:11.893">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:58:11.894">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:58:11.894">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:58:11.894" starttime="20170810 03:58:11.893" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:11.894">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 03:58:11.894" starttime="20170810 03:58:10.613" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:11.894">${power_state} = On</msg>
<status endtime="20170810 03:58:11.894" starttime="20170810 03:58:10.613" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 03:58:11.895" starttime="20170810 03:58:11.895" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:11.895" starttime="20170810 03:58:10.612" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:11.899">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:58:11.899" starttime="20170810 03:58:11.898" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:11.900">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:58:11.900" starttime="20170810 03:58:11.899" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:11.900">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:58:11.900" starttime="20170810 03:58:11.900" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:11.901">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:58:11.901" starttime="20170810 03:58:11.901" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:12.316">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:58:12.316" starttime="20170810 03:58:11.902" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:12.316">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:58:12.316">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:12.316" starttime="20170810 03:58:11.901" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:12.317">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:12.317" starttime="20170810 03:58:12.317" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:12.318">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:12.318" starttime="20170810 03:58:12.317" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:12.318" starttime="20170810 03:58:11.898" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:12.318" starttime="20170810 03:58:11.897" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:12.318" starttime="20170810 03:58:11.897" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:12.319">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 03:58:12.319" starttime="20170810 03:58:12.318" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:12.321">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:58:12.321" starttime="20170810 03:58:12.320" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:12.322">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:58:12.322" starttime="20170810 03:58:12.322" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:12.322" starttime="20170810 03:58:12.321" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:12.322" starttime="20170810 03:58:12.319" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:12.322" starttime="20170810 03:58:12.319" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:12.960">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:58:12.960">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:12.960" starttime="20170810 03:58:12.323" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:12.962">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:58:12.962" starttime="20170810 03:58:12.961" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:12.963">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:58:12.963" starttime="20170810 03:58:12.962" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:12.963" starttime="20170810 03:58:12.962" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:12.963" starttime="20170810 03:58:12.961" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:12.963" starttime="20170810 03:58:12.960" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:58:12.963">Delete All Sessions</msg>
<status endtime="20170810 03:58:12.963" starttime="20170810 03:58:12.963" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:12.964">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:12.964" starttime="20170810 03:58:11.896" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:12.964">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:12.964" starttime="20170810 03:58:12.964" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:12.965">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:58:12.965">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:58:12.965">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:58:12.965" starttime="20170810 03:58:12.965" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:12.966">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 03:58:12.966" starttime="20170810 03:58:11.895" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:12.966">${host_state} = Running</msg>
<status endtime="20170810 03:58:12.966" starttime="20170810 03:58:11.895" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 03:58:12.967" starttime="20170810 03:58:12.966" status="PASS"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:12.971">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:58:12.971" starttime="20170810 03:58:12.970" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:12.972">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:58:12.972" starttime="20170810 03:58:12.971" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:12.972">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:58:12.972" starttime="20170810 03:58:12.972" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:12.973">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:58:12.973" starttime="20170810 03:58:12.973" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:13.463">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:58:13.463" starttime="20170810 03:58:12.974" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:13.463">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:58:13.463">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:13.463" starttime="20170810 03:58:12.973" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:13.464">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:13.464" starttime="20170810 03:58:13.464" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:13.465">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:13.465" starttime="20170810 03:58:13.464" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:13.465" starttime="20170810 03:58:12.970" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:13.465" starttime="20170810 03:58:12.969" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:13.465" starttime="20170810 03:58:12.969" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:13.466">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 03:58:13.466" starttime="20170810 03:58:13.465" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:13.468">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:58:13.468" starttime="20170810 03:58:13.467" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:13.469">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 03:58:13.470" starttime="20170810 03:58:13.469" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:13.470" starttime="20170810 03:58:13.468" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:13.470" starttime="20170810 03:58:13.466" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:13.470" starttime="20170810 03:58:13.466" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:14.185">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:58:14.185">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:14.186" starttime="20170810 03:58:13.470" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:14.187">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:58:14.187" starttime="20170810 03:58:14.187" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:14.188">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:58:14.188" starttime="20170810 03:58:14.188" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:14.189" starttime="20170810 03:58:14.188" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:14.189" starttime="20170810 03:58:14.186" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:14.189" starttime="20170810 03:58:14.186" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:58:14.189">Delete All Sessions</msg>
<status endtime="20170810 03:58:14.189" starttime="20170810 03:58:14.189" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:14.189">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:14.189" starttime="20170810 03:58:12.968" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:14.190">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:14.190" starttime="20170810 03:58:14.190" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:14.191">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:58:14.191">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:58:14.191">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:58:14.191" starttime="20170810 03:58:14.191" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:14.192">${state} = Off</msg>
<status endtime="20170810 03:58:14.192" starttime="20170810 03:58:12.968" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:14.192">${boot_progress} = Off</msg>
<status endtime="20170810 03:58:14.192" starttime="20170810 03:58:12.967" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:58:14.193">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 03:58:14.193" starttime="20170810 03:58:14.192" status="FAIL"></status>
</kw>
<status endtime="20170810 03:58:14.193" starttime="20170810 03:58:12.967" status="FAIL"></status>
</kw>
<status endtime="20170810 03:58:14.193" starttime="20170810 03:58:10.612" status="FAIL"></status>
</kw>
<msg level="FAIL" timestamp="20170810 03:58:14.193">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: Off != FW Progress, Starting OS</msg>
<status endtime="20170810 03:58:14.193" starttime="20170810 03:48:03.776" status="FAIL"></status>
</kw>
<status endtime="20170810 03:58:14.193" starttime="20170810 03:48:02.536" status="FAIL"></status>
</kw>
<status endtime="20170810 03:58:14.194" starttime="20170810 03:47:55.092" status="FAIL"></status>
</kw>
<status endtime="20170810 03:58:14.194" starttime="20170810 03:47:55.091" status="FAIL"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Collect FFDC and SOL log.</doc>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:14.199">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:58:14.199" starttime="20170810 03:58:14.199" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:14.200">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:58:14.200" starttime="20170810 03:58:14.199" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:14.200">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:58:14.200" starttime="20170810 03:58:14.200" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:14.201">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:58:14.201" starttime="20170810 03:58:14.201" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:14.667">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:58:14.667" starttime="20170810 03:58:14.202" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:14.667">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:58:14.667">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:14.668" starttime="20170810 03:58:14.201" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:14.668">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:14.668" starttime="20170810 03:58:14.668" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:14.669">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:14.669" starttime="20170810 03:58:14.669" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:14.669" starttime="20170810 03:58:14.198" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:14.669" starttime="20170810 03:58:14.197" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:14.669" starttime="20170810 03:58:14.197" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:14.670">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 03:58:14.670" starttime="20170810 03:58:14.670" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:14.672">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:58:14.672" starttime="20170810 03:58:14.671" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:14.673">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 03:58:14.673" starttime="20170810 03:58:14.673" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:14.673" starttime="20170810 03:58:14.672" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:14.674" starttime="20170810 03:58:14.671" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:14.674" starttime="20170810 03:58:14.670" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:15.217">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:58:15.217">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:15.217" starttime="20170810 03:58:14.674" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:15.219">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:58:15.219" starttime="20170810 03:58:15.218" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:15.220">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 03:58:15.220" starttime="20170810 03:58:15.219" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:15.220" starttime="20170810 03:58:15.219" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:15.220" starttime="20170810 03:58:15.218" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:15.220" starttime="20170810 03:58:15.217" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:58:15.221">Delete All Sessions</msg>
<status endtime="20170810 03:58:15.221" starttime="20170810 03:58:15.221" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:15.221">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:15.221" starttime="20170810 03:58:14.196" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:15.222">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:15.222" starttime="20170810 03:58:15.221" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:15.222">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:58:15.222">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:58:15.222">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:58:15.223" starttime="20170810 03:58:15.222" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:15.223">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 03:58:15.223" starttime="20170810 03:58:14.195" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:15.223">${host_state} = Running</msg>
<status endtime="20170810 03:58:15.223" starttime="20170810 03:58:14.195" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:58:15.224">Running != Quiesced</msg>
<status endtime="20170810 03:58:15.224" starttime="20170810 03:58:15.224" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:15.224">${status} = False</msg>
<status endtime="20170810 03:58:15.224" starttime="20170810 03:58:15.223" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:15.225">${status} = False</msg>
<status endtime="20170810 03:58:15.225" starttime="20170810 03:58:14.195" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw library="openbmc_ffdc" name="Ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw library="utils" name="Ping Host">
<arguments>
<arg>9.41.166.169</arg>
</arguments>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:15.248">Length is 12</msg>
<status endtime="20170810 03:58:15.248" starttime="20170810 03:58:15.248" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:15.254">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170810 03:58:18.266">${RC} = 0</msg>
<msg level="INFO" timestamp="20170810 03:58:18.267">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=1.31 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.551 ms
64 bytes from 9.41.166.169...</msg>
<status endtime="20170810 03:58:18.268" starttime="20170810 03:58:15.249" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:18.281">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=1.31 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.551 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.556 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=0.679 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.551/0.775/1.317/0.318 ms</msg>
<status endtime="20170810 03:58:18.282" starttime="20170810 03:58:18.278" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170810 03:58:18.283" starttime="20170810 03:58:18.282" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:18.284" starttime="20170810 03:58:15.247" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:18.315">${cur_time} = 2017-08-10 03:58:18:314042</msg>
<status endtime="20170810 03:58:18.315" starttime="20170810 03:58:18.314" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:18.315">${cur_time} = 20170810035818314042</msg>
<status endtime="20170810 03:58:18.315" starttime="20170810 03:58:18.315" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:18.315" starttime="20170810 03:58:18.313" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:18.317">${FFDC_TIME} = 20170810035818314042</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:18.327">${suite_name} = TestsTestBasicPoweron</msg>
<status endtime="20170810 03:58:18.327" starttime="20170810 03:58:18.327" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:18.328">${suite_name} = 20170810035818314042_TestsTestBasicPoweron</msg>
<status endtime="20170810 03:58:18.328" starttime="20170810 03:58:18.327" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:18.328">${test_name} = PowerOnTest</msg>
<status endtime="20170810 03:58:18.328" starttime="20170810 03:58:18.328" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:18.329">${test_name} = 20170810035818314042_PowerOnTest</msg>
<status endtime="20170810 03:58:18.329" starttime="20170810 03:58:18.329" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:18.329" starttime="20170810 03:58:18.326" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:18.330">${FFDC_DIR_PATH} = /tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/</msg>
<msg level="INFO" timestamp="20170810 03:58:18.330">${FFDC_PREFIX} = 20170810035818314042_</msg>
<msg level="INFO" timestamp="20170810 03:58:18.349">${LOG_PREFIX} = /tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_</msg>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:58:18.350">Created directory '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest&lt;/a&gt;'.</msg>
<status endtime="20170810 03:58:18.350" starttime="20170810 03:58:18.350" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:18.355">${FFDC_FILE_PATH} = /tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt</msg>
<kw library="openbmc_ffdc_utils" name="Header Message">
<doc>Write header message to the report document manifest.</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:58:18.375">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:58:18.375" starttime="20170810 03:58:18.374" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:18.375" starttime="20170810 03:58:18.374" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:58:18.376">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:58:18.376" starttime="20170810 03:58:18.376" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:18.376" starttime="20170810 03:58:18.375" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:58:18.377">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:58:18.378" starttime="20170810 03:58:18.377" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:18.378" starttime="20170810 03:58:18.376" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:58:18.379">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:58:18.379" starttime="20170810 03:58:18.378" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:18.379" starttime="20170810 03:58:18.378" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:58:18.381">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:58:18.381" starttime="20170810 03:58:18.380" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:18.381" starttime="20170810 03:58:18.379" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:58:18.382">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:58:18.382" starttime="20170810 03:58:18.382" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:18.382" starttime="20170810 03:58:18.381" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:58:18.383">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:58:18.384" starttime="20170810 03:58:18.383" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:18.384" starttime="20170810 03:58:18.382" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:58:18.385">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:58:18.385" starttime="20170810 03:58:18.385" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:18.385" starttime="20170810 03:58:18.384" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:58:18.387">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:58:18.387" starttime="20170810 03:58:18.386" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:18.387" starttime="20170810 03:58:18.386" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Test Setup Info">
<doc>BMC IP, Model and other information</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:58:18.388">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:58:18.389" starttime="20170810 03:58:18.388" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:18.389" starttime="20170810 03:58:18.388" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:58:18.390">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:58:18.390" starttime="20170810 03:58:18.389" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:18.390" starttime="20170810 03:58:18.389" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:58:18.391">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:58:18.391" starttime="20170810 03:58:18.391" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:18.391" starttime="20170810 03:58:18.390" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:58:18.392">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:58:18.392" starttime="20170810 03:58:18.392" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:18.393" starttime="20170810 03:58:18.391" status="PASS"></status>
</kw>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:18.421">encoding=UTF-8
height=24
prompt=# 
port=22
term_type=vt100
index=1
timeout=25 seconds
host=9.41.166.169
alias=bmc_connection
path_separator=/
newline=

width=80</msg>
<msg level="INFO" timestamp="20170810 03:58:18.422">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170810 03:58:18.529">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170810 03:58:18.539">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170810 03:58:18.539">${stderr} = </msg>
<msg level="INFO" timestamp="20170810 03:58:18.539">${rc} = 0</msg>
<status endtime="20170810 03:58:18.539" starttime="20170810 03:58:18.393" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:18.540">Length is 0</msg>
<status endtime="20170810 03:58:18.540" starttime="20170810 03:58:18.539" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:18.540">Length is 11</msg>
<status endtime="20170810 03:58:18.540" starttime="20170810 03:58:18.540" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:18.540">${model_name} = Witherspoon</msg>
<status endtime="20170810 03:58:18.541" starttime="20170810 03:58:18.393" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:58:18.542">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:58:18.542" starttime="20170810 03:58:18.541" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:18.542" starttime="20170810 03:58:18.541" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:18.542" starttime="20170810 03:58:18.387" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:58:18.543">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:58:18.543" starttime="20170810 03:58:18.543" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:18.543" starttime="20170810 03:58:18.542" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:18.544">@{entries} = [ DRIVER INFO | APPLICATION DATA | BMC DATA ]</msg>
<status endtime="20170810 03:58:18.544" starttime="20170810 03:58:18.544" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = DRIVER INFO" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:58:18.546">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:58:18.546" starttime="20170810 03:58:18.545" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:18.546" starttime="20170810 03:58:18.544" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:58:18.547">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:58:18.547" starttime="20170810 03:58:18.547" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:18.547" starttime="20170810 03:58:18.546" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:18.547" starttime="20170810 03:58:18.544" status="PASS"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:58:18.548">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:58:18.549" starttime="20170810 03:58:18.548" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:18.549" starttime="20170810 03:58:18.547" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:58:18.550">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:58:18.550" starttime="20170810 03:58:18.549" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:18.550" starttime="20170810 03:58:18.549" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:18.550" starttime="20170810 03:58:18.547" status="PASS"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:58:18.551">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:58:18.551" starttime="20170810 03:58:18.551" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:18.551" starttime="20170810 03:58:18.550" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:58:18.552">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:58:18.552" starttime="20170810 03:58:18.552" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:18.553" starttime="20170810 03:58:18.551" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:18.553" starttime="20170810 03:58:18.550" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:18.553" starttime="20170810 03:58:18.544" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:58:18.554">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:58:18.554" starttime="20170810 03:58:18.553" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:18.554" starttime="20170810 03:58:18.553" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:18.554" starttime="20170810 03:58:18.373" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Call FFDC Methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:18.560">@{entries} = [ BMC LOGS ]</msg>
<status endtime="20170810 03:58:18.560" starttime="20170810 03:58:18.560" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC LOGS" type="foritem">
<kw library="openbmc_ffdc_methods" name="Method Call Keyword List">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Call">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:18.562">@{method_list} = [ ('Core Files', 'SCP Coredump Files') | ('OS FFDC', 'OS FFDC Files') | ('SEL Log', 'Collect eSEL Log') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('BMC Specific Files', 'BMC FFDC Files') | ('F...</msg>
<status endtime="20170810 03:58:18.562" starttime="20170810 03:58:18.561" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Desc">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status endtime="20170810 03:58:18.563" starttime="20170810 03:58:18.563" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:18.563">@{ffdc_function_list} = [ Core Files | OS FFDC | SEL Log | Get Request FFDC | BMC Specific Files | FFDC Generic Report ]</msg>
<status endtime="20170810 03:58:18.563" starttime="20170810 03:58:18.562" status="PASS"></status>
</kw>
<kw name="${method} IN [ @{method_list} ]" type="for">
<kw name="${method} = ('Core Files', 'SCP Coredump Files')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170810 03:58:18.565" starttime="20170810 03:58:18.565" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:18.565">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:58:18.565">${ret_values} = None</msg>
<status endtime="20170810 03:58:18.565" starttime="20170810 03:58:18.564" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170810 03:58:18.566" starttime="20170810 03:58:18.566" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="SCP Coredump Files">
<doc>Copy core dump file from BMC to local system.</doc>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:18.626">encoding=UTF-8
height=24
prompt=# 
port=22
term_type=vt100
index=1
timeout=25 seconds
host=9.41.166.169
alias=bmc_connection
path_separator=/
newline=

width=80</msg>
<msg level="INFO" timestamp="20170810 03:58:18.626">Executing command 'ls /tmp/core_*'.</msg>
<msg level="INFO" timestamp="20170810 03:58:18.834">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170810 03:58:18.845">${core_files} = /tmp/core_openpower-occ-c.1087
/tmp/core_openpower-occ-c.1532
/tmp/core_openpower-occ-c.1534
/tmp/core_openpower-occ-c.1536
/tmp/core_openpower-occ-c.1538
/tmp/core_openpower-occ-c.1540</msg>
<msg level="INFO" timestamp="20170810 03:58:18.845">${stderr} = </msg>
<msg level="INFO" timestamp="20170810 03:58:18.845">${rc} = 0</msg>
<status endtime="20170810 03:58:18.846" starttime="20170810 03:58:18.594" status="PASS"></status>
</kw>
<kw library="String" name="Split String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:18.847">@{core_list} = [ /tmp/core_openpower-occ-c.1087 | /tmp/core_openpower-occ-c.1532 | /tmp/core_openpower-occ-c.1534 | /tmp/core_openpower-occ-c.1536 | /tmp/core_openpower-occ-c.1538 | /tmp/core_openpower-occ-c.1540 ]</msg>
<status endtime="20170810 03:58:18.847" starttime="20170810 03:58:18.846" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key U">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw library="connection_client" name="Open Connection for SCP">
<kw library="BuiltIn" name="Import Library">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status endtime="20170810 03:58:18.876" starttime="20170810 03:58:18.857" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="scp" name="Open Connection">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status endtime="20170810 03:58:20.087" starttime="20170810 03:58:18.877" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:20.087" starttime="20170810 03:58:18.877" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:20.087" starttime="20170810 03:58:18.876" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:20.087" starttime="20170810 03:58:18.856" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:20.087" starttime="20170810 03:58:18.847" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{core_list} ]" type="for">
<kw name="${index} = /tmp/core_openpower-occ-c.1087" type="foritem">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170810 03:58:21.271" starttime="20170810 03:58:20.088" status="PASS"></status>
</kw>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:21.307">encoding=UTF-8
height=24
prompt=# 
port=22
term_type=vt100
index=1
timeout=25 seconds
host=9.41.166.169
alias=bmc_connection
path_separator=/
newline=

width=80</msg>
<msg level="INFO" timestamp="20170810 03:58:21.307">Executing command 'rm /tmp/core_openpower-occ-c.1087'.</msg>
<msg level="INFO" timestamp="20170810 03:58:21.365">Command exited with return code 0.</msg>
<status endtime="20170810 03:58:21.378" starttime="20170810 03:58:21.271" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:21.378" starttime="20170810 03:58:20.087" status="PASS"></status>
</kw>
<kw name="${index} = /tmp/core_openpower-occ-c.1532" type="foritem">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170810 03:58:21.950" starttime="20170810 03:58:21.378" status="PASS"></status>
</kw>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:21.983">encoding=UTF-8
height=24
prompt=# 
port=22
term_type=vt100
index=1
timeout=25 seconds
host=9.41.166.169
alias=bmc_connection
path_separator=/
newline=

width=80</msg>
<msg level="INFO" timestamp="20170810 03:58:21.984">Executing command 'rm /tmp/core_openpower-occ-c.1532'.</msg>
<msg level="INFO" timestamp="20170810 03:58:22.052">Command exited with return code 0.</msg>
<status endtime="20170810 03:58:22.063" starttime="20170810 03:58:21.951" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:22.063" starttime="20170810 03:58:21.378" status="PASS"></status>
</kw>
<kw name="${index} = /tmp/core_openpower-occ-c.1534" type="foritem">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170810 03:58:22.934" starttime="20170810 03:58:22.064" status="PASS"></status>
</kw>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:22.967">encoding=UTF-8
height=24
prompt=# 
port=22
term_type=vt100
index=1
timeout=25 seconds
host=9.41.166.169
alias=bmc_connection
path_separator=/
newline=

width=80</msg>
<msg level="INFO" timestamp="20170810 03:58:22.968">Executing command 'rm /tmp/core_openpower-occ-c.1534'.</msg>
<msg level="INFO" timestamp="20170810 03:58:23.014">Command exited with return code 0.</msg>
<status endtime="20170810 03:58:23.026" starttime="20170810 03:58:22.935" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:23.026" starttime="20170810 03:58:22.063" status="PASS"></status>
</kw>
<kw name="${index} = /tmp/core_openpower-occ-c.1536" type="foritem">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170810 03:58:23.885" starttime="20170810 03:58:23.026" status="PASS"></status>
</kw>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:23.918">encoding=UTF-8
height=24
prompt=# 
port=22
term_type=vt100
index=1
timeout=25 seconds
host=9.41.166.169
alias=bmc_connection
path_separator=/
newline=

width=80</msg>
<msg level="INFO" timestamp="20170810 03:58:23.919">Executing command 'rm /tmp/core_openpower-occ-c.1536'.</msg>
<msg level="INFO" timestamp="20170810 03:58:23.997">Command exited with return code 0.</msg>
<status endtime="20170810 03:58:24.008" starttime="20170810 03:58:23.885" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:24.008" starttime="20170810 03:58:23.026" status="PASS"></status>
</kw>
<kw name="${index} = /tmp/core_openpower-occ-c.1538" type="foritem">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170810 03:58:24.285" starttime="20170810 03:58:24.009" status="PASS"></status>
</kw>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:24.318">encoding=UTF-8
height=24
prompt=# 
port=22
term_type=vt100
index=1
timeout=25 seconds
host=9.41.166.169
alias=bmc_connection
path_separator=/
newline=

width=80</msg>
<msg level="INFO" timestamp="20170810 03:58:24.319">Executing command 'rm /tmp/core_openpower-occ-c.1538'.</msg>
<msg level="INFO" timestamp="20170810 03:58:24.415">Command exited with return code 0.</msg>
<status endtime="20170810 03:58:24.427" starttime="20170810 03:58:24.285" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:24.427" starttime="20170810 03:58:24.008" status="PASS"></status>
</kw>
<kw name="${index} = /tmp/core_openpower-occ-c.1540" type="foritem">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170810 03:58:25.177" starttime="20170810 03:58:24.427" status="PASS"></status>
</kw>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:25.209">encoding=UTF-8
height=24
prompt=# 
port=22
term_type=vt100
index=1
timeout=25 seconds
host=9.41.166.169
alias=bmc_connection
path_separator=/
newline=

width=80</msg>
<msg level="INFO" timestamp="20170810 03:58:25.210">Executing command 'rm /tmp/core_openpower-occ-c.1540'.</msg>
<msg level="INFO" timestamp="20170810 03:58:25.286">Command exited with return code 0.</msg>
<status endtime="20170810 03:58:25.298" starttime="20170810 03:58:25.177" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:25.298" starttime="20170810 03:58:24.427" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:25.298" starttime="20170810 03:58:20.087" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:25.298" starttime="20170810 03:58:18.593" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:25.298" starttime="20170810 03:58:18.566" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:25.299" starttime="20170810 03:58:18.563" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:25.299" starttime="20170810 03:58:18.563" status="PASS"></status>
</kw>
<kw name="${method} = ('OS FFDC', 'OS FFDC Files')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170810 03:58:25.301" starttime="20170810 03:58:25.300" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:25.301">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:58:25.301">${ret_values} = None</msg>
<status endtime="20170810 03:58:25.301" starttime="20170810 03:58:25.300" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170810 03:58:25.301" starttime="20170810 03:58:25.301" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="OS FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:25.331">Returning from the enclosing user keyword.</msg>
<status endtime="20170810 03:58:25.331" starttime="20170810 03:58:25.331" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:25.332" starttime="20170810 03:58:25.330" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:25.332" starttime="20170810 03:58:25.302" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:25.332" starttime="20170810 03:58:25.299" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:25.332" starttime="20170810 03:58:25.299" status="PASS"></status>
</kw>
<kw name="${method} = ('SEL Log', 'Collect eSEL Log')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170810 03:58:25.334" starttime="20170810 03:58:25.333" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:25.334">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:58:25.334">${ret_values} = None</msg>
<status endtime="20170810 03:58:25.334" starttime="20170810 03:58:25.333" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170810 03:58:25.334" starttime="20170810 03:58:25.334" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="Collect eSEL Log">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:25.362">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:58:25.363" starttime="20170810 03:58:25.362" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:25.363">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:58:25.363" starttime="20170810 03:58:25.363" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:25.364">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:58:25.364" starttime="20170810 03:58:25.364" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:25.365">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:58:25.365" starttime="20170810 03:58:25.364" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:25.701">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:58:25.701" starttime="20170810 03:58:25.365" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:25.701">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:58:25.701">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:25.701" starttime="20170810 03:58:25.365" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:25.702">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:25.702" starttime="20170810 03:58:25.701" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:25.702">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:25.703" starttime="20170810 03:58:25.702" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:25.703" starttime="20170810 03:58:25.361" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:25.703" starttime="20170810 03:58:25.361" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:25.703" starttime="20170810 03:58:25.360" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:25.703">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status endtime="20170810 03:58:25.703" starttime="20170810 03:58:25.703" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 03:58:25.704" starttime="20170810 03:58:25.704" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:28.335">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:58:28.335">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:28.335" starttime="20170810 03:58:25.704" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 03:58:28.336" starttime="20170810 03:58:28.335" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:58:28.336">Delete All Sessions</msg>
<status endtime="20170810 03:58:28.336" starttime="20170810 03:58:28.336" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:28.336">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:28.336" starttime="20170810 03:58:25.359" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:28.337">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:28.337" starttime="20170810 03:58:28.337" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:28.338">${status} = True</msg>
<status endtime="20170810 03:58:28.338" starttime="20170810 03:58:28.337" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status endtime="20170810 03:58:28.338" starttime="20170810 03:58:28.338" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:28.340">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/10": {
      "AdditionalData": [], 
      "Id": 10, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775747880, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/11": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 09 06 89 19 d2 00 00 00 09 06 8a 6b 0a 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 4a 90 00 00 4a 55 48 00 18 01 00 06 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 24 03 00 48 00 00 00 e0 00 00 02 00 00 00 00 00 00 20 00 00 0f ff fe 00 00 00 00 02 00 00 00 00 00 00 02 00 42 43 38 41 32 34 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 00 00 00 55 44 00 90 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 07 1e b4 00 00 00 00 00 07 25 dc 00 00 00 00 00 07 28 24 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 64 54 00 00 00 00 00 07 ad e4 00 00 00 00 00 07 b6 6c 00 00 00 00 00 07 b7 9c 00 00 00 00 00 07 bc 90 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 66 b0 00 00 00 00 00 07 61 14 00 00 00 00 00 07 71 20 00 00 00 00 00 07 81 88 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 ec 01 15 31 00 01 28 00 42 50 4e 4f 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 e4 00 00 00 00 00 00 03 e4 00 00 00 17 00 00 00 00 00 00 00 4b 09 65 cc 4e 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 4e 00 00 00 00 00 24 00 00 00 4b 09 65 d9 16 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 09 65 e5 58 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f e0 00 00 00 00 00 24 00 00 00 4b 09 7f ed fb 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4b 09 7f fc 16 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 22 20 00 00 00 00 00 01 22 22 00 00 00 00 00 00 00 20 00 00 00 00 3c 00 00 00 4b 09 80 0c 20 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4b 09 80 78 65 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4b 09 83 82 f1 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4b 09 84 04 dd 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c6 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4b 09 84 17 6f 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4b 09 84 24 81 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 22 10 00 00 00 00 24 00 00 00 4b 09 84 31 0a 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 09 84 3d cd 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0c 60 00 00 00 00 00 24 00 00 00 4b 0d e5 ae 24 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4b 0d e5 c3 aa 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 32 10 00 00 00 00 00 01 32 10 00 00 00 00 00 00 00 10 00 00 00 00 3c 00 00 00 4b 0d e5 d4 69 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4b 0d e6 4a 72 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4b 12 4e b4 47 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4b 12 4f 41 28 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4b 12 4f 55 06 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4b 12 4f 63 84 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 32 10 00 00 00 00 24 00 00 00 4b 12 4f 70 58 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 12 4f 7d a0 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f f0 00 00 00 00 00 24"
      ], 
      "Id": 11, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775875485, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/11/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/12": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 09 05 af 06 8a 00 00 00 09 07 99 fa 1f 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 4b 90 00 00 4b 55 48 00 18 01 00 05 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 05 06 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 01 b3 00 00 00 00 00 00 00 01 42 43 38 41 30 35 30 36 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 00 00 00 55 44 01 08 01 07 01 00 57 20 32 6b 72 20 75 70 20 32 31 70 33 34 20 64 6f 69 31 64 72 20 6f 6e 32 31 33 6e 65 33 35 32 20 64 6f 6e 20 65 0a 64 0a 65 6f 0a 6e 65 0a 4c 6f 61 64 69 6e 67 20 50 4e 4f 52 20 73 65 63 74 69 6f 6e 20 36 20 28 50 41 59 4c 4f 41 44 29 20 31 30 34 38 35 37 36 20 62 79 74 65 73 20 40 30 78 30 0a 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 0d 55 6e 68 61 6e 64 6c 65 64 20 6d 73 67 20 72 63 20 34 32 39 34 39 36 37 32 39 31 20 28 2d 45 49 4f 29 20 66 6f 72 20 6b 65 79 20 30 78 38 31 30 31 61 30 30 30 20 6f 6e 20 74 61 73 6b 20 34 33 35 20 40 20 30 78 32 36 62 66 30 0a 55 44 00 3c 01 01 01 00 68 6f 73 74 5f 72 75 6e 74 69 6d 65 5f 73 65 74 75 70 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 55 44 00 48 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 06 64 40 00 00 00 00 40 2b 97 10 00 00 00 00 40 2b 9f 10 00 00 00 00 40 2b ae 30 00 00 00 00 40 2b b1 2c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 12, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775877324, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/12/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/13": {
      "AdditionalData": [], 
      "Id": 13, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775883661, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775115423, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775046407, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 25 00 00 00 00 10 fc f4 49 26 00 00 00 10 fc f4 fe 4d 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 12 90 00 00 12 55 48 00 18 01 00 22 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 25 07 00 48 00 00 00 e0 00 00 03 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 cb 00 00 00 07 00 00 00 00 42 43 38 41 32 35 30 37 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 40 4e c3 4c 00 00 00 00 40 4e c5 4c 00 00 00 00 40 4e ce d0 00 00 00 00 40 3f 1f 38 00 00 00 00 40 3f 2d 7c 00 00 00 00 40 0b 65 b0 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 e4 01 15 31 00 01 28 00 42 49 50 4d 49 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 11 00 00 00 00 00 00 00 5b 2e 9a 72 9c 00 00 00 84 00 10 43 4f 8d 9a 22 cc 00 00 00 96 00 00 00 00 00 00 00 38 00 00 00 00 00 00 00 a8 00 00 00 2c 00 00 00 5b 2e 9a c2 1b 00 00 00 84 00 10 43 4f 13 70 70 70 00 00 03 de 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 12 00 00 00 2c 00 00 00 5b 2e 9c 7e d3 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 89 00 00 00 00 00 00 00 3b 00 00 00 00 00 00 00 44 00 00 00 5b 34 90 46 28 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 2c 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 89 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 5b 34 90 73 7a 00 00 00 84 00 10 43 4f 8d 9a 22 cc 00 00 00 96 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 e0 00 00 00 2c 00 00 00 5b 34 90 c2 e8 00 00 00 84 00 10 43 4f 13 70 70 70 00 00 03 de 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 12 00 00 00 2c 00 00 00 5b 34 91 e5 73 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 8a 00 00 00 00 00 00 00 23 00 00 00 00 00 00 00 44 00 00 00 5b 3a 86 51 d0 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 2c 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 8a 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 8e 0d 8e d4 95 00 00 00 c7 00 10 43 4f 44 ff d1 f1 00 00 04 1d 00 00 00 00 00 00 00 18 00 00 00 00 00 00 00 22 00 00 00 2c 00 00 00 8e 0d ae 0d 65 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 18 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00 8b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 44 00 00 00 8e 0d d4 ca db 00 00 00 c7 00 10 43 4f 13 70 70 70 00 00 03 de 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 2d 00 00 00 2c 00 00 00 8e 18 3a ad 93 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00 8b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 8e 18 3b 10 a2 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 2d 00 00 00 00 00 00 00 8c 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 44 00 00 00 8e 1e 30 ba 33 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 2d 00 00 00 00 00 00 00 8c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 cb 00 00 00 00 00 00 00 4c 00 00 00 8e 1e 30 e2 fe 00 00 00 c7 00 08 43 4f f8 d7 6e 14 00 00 00 52 00 00 00 00 00 00 00 cb 00 00 00 24 00 00 00 8e 1e 30 f0 56 00 00 00 c7 00 00 43 4f 91 46 a7 43 00 00 00 96 00 00 00 1c 00 00 00 8e 1e 31 01 29 00 00 00 c7 00 10 43 4f 48 93 e8 7c 00 00 00 b2 00 00 00 00 00 00 00 07 00 00 00 00 00 00 00 00 00 00 00 2c 80 00 04 04 07 01 10 3f 00 00 00 00 00 00 c0 c0 80 00 08 04 07 01 10 3f 00 00 00 00 00 00 0f 00 80 00 0c 04 07 01 10 3f 00 00 00 00 00 00 c3 00 80 00 10 04 07 01 10 3f 00 00 00 00 00 00 c0 00 7e 60 00 00 00 7f e4 fb 78 8d eb c2 f8 e0 3d 20 00 8c 1e fb a1 00 70 61 29 0d 84 00 fb a1 00 78 7f c3 f3 78 4a 91 21 56 00 00 00 00 00 00 00 08 00 00 00 00 00 85 09 d0 00 00 00 00 00 00 86 40 80 00 04 05 07 01 10 3f 00 00 00 00 00 00 86 40 80 00 08 05 07 01 10 3f 00 00 00 00 00 00 86 40 80 00 0c 05 07 01 10 3f 00 00 00 00 00 00 86 40 80 00 10 05 07 01 10 3f 00 00 00 00 00 00 86 40 80 00 00 01 07 01 10 3f 00 00 00 00 00 00 00 00 80 00 04 01 07 01 10 3f 00 00 00 00 00 00 00 00 00 28 5c 39 20 00 01 56 00 00 00 00 00 00 00 03 00 00 00 00 00 85 0b a0 00 00 00 00 40 65 94 88 00 00 00 00 00 00 00 00 00 00 00 00 00 85 0b a8 00 00 00 00 00 9d 77 68 00 00 00 00 00 00 86 40 80 00 0c 05 07 01 10 3f 00 00 00 00 00 00 86 40 21 00 87 7a 39 20 00 56 00 00 00 00 00 00 00 06 00 00 00 00 00 85 0d c0 00 00 00 00 07 01 23 59 00 00 00 00 07 01 23 5a 00 00 00 00 07 01 23 5b 00 00 00 00 07 01 23 5c 00 00 00 00 07 01 23 5d 00 00 00 00 07 01 23 5e 00 00 00 00 07 01 23 5f 00 00 00 00 07 01 23 60 00 00 00 00 00 00 ff ff 80 00 00 01 07 01 10 3f 00 00 00 00 00 00 00 00 4b f8 7b 61 e8 41 00 28 6f 2f a3 00 00 41 9e 07 e4 ae 7f e3 fb 78 4b 56 00 00 00 00 00 00 00 03 00 00 00 00 00 85 09 80 00 00 00 00 40 65 94 a0 00 00 00 00 00 00 00 00 00 00 00 00 00 85 09 88 00 00 00 00 00 9d 77 68 3c 82 00 01 7f 87 e3 78 ad 38 c0 00 00 38 84 e6 9c 8f 7f 03 c3 78 38 a0 01 b8 85 4b f8 75 c9 56 00 00 00 00 00 00 00 04 00 00 00 00 00 85 0d 40 80 00 00 a4 07 01 10 3f 80 00 00 a5 07 01 10 3f 80 00 04 a4 07 01 10 3f 80 00 04 a5 07 01 10 3f 80 00 08 a4 07 01 10 3f 80 00 08 a5 07 01 10 3f 80 00 0c a4 07 01 10 3f 80 00 0c a5 07 01 10 3f 80 00 10 a4 07 01 10 3f 90 91 3e 00 20 bf 4b f8 75 f1 e8 41 00 28 d6 48 00 03 6c 60 42 00 00 41 60 00 00 00 e8 79 00 00 7c 7f e9 fb 78 e8 82 56 00 00 00 00 00 00 00 06 00 00 00 00 00 85 0e 90 00 00 00 00 00 00 ff ff 80 00 04 00 07 01 10 3f 00 00 00 00 00 00 ff ff 80 00 08 00 07 01 10 3f 00 00 00 00 00 00 ff ff 80 00 0c 00 07 01 10 3f 00 00 00 00 00 00 ff ff"
      ], 
      "Id": 4, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775487835, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/4/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 09 22 8c b0 48 00 00 00 09 22 8d f8 16 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 24 90 00 00 24 55 48 00 18 01 00 06 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 24 03 00 48 00 00 00 e0 00 00 02 00 00 00 00 00 00 20 00 00 0f ff fe 00 00 00 00 02 00 00 00 00 00 00 02 00 42 43 38 41 32 34 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 00 00 00 55 44 00 90 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 07 1e b4 00 00 00 00 00 07 25 dc 00 00 00 00 00 07 28 24 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 64 54 00 00 00 00 00 07 ad e4 00 00 00 00 00 07 b6 6c 00 00 00 00 00 07 b7 9c 00 00 00 00 00 07 bc 90 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 66 b0 00 00 00 00 00 07 61 14 00 00 00 00 00 07 71 20 00 00 00 00 00 07 81 88 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 ec 01 15 31 00 01 28 00 42 50 4e 4f 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 e4 00 00 00 00 00 00 03 e4 00 00 00 17 00 00 00 00 00 00 00 4b 24 af bb e7 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 4e 00 00 00 00 00 24 00 00 00 4b 24 af c8 6a 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 24 af d5 99 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f e0 00 00 00 00 00 24 00 00 00 4b 24 c9 cc bd 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4b 24 c9 da 27 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 22 20 00 00 00 00 00 01 22 22 00 00 00 00 00 00 00 20 00 00 00 00 3c 00 00 00 4b 24 c9 ea 25 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4b 24 ca 54 54 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4b 24 cd 16 8f 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4b 24 cd 98 58 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 32 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c6 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4b 24 cd ab 34 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4b 24 cd b8 4b 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 22 10 00 00 00 00 24 00 00 00 4b 24 cd c4 cd 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 24 cd d1 da 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0c 60 00 00 00 00 00 24 00 00 00 4c 00 83 7a 24 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4c 00 83 8d 56 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 32 10 00 00 00 00 00 01 32 10 00 00 00 00 00 00 00 10 00 00 00 00 3c 00 00 00 4c 00 83 9d 21 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4c 00 84 09 e7 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4c 0d a7 31 db 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4c 0d a7 b9 8a 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 33 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4c 0d a7 cd a8 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4c 0d a7 dc e9 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 32 10 00 00 00 00 24 00 00 00 4c 0d a7 e9 6a 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4c 0d a7 f6 50 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f f0 00 00 00 00 00 24"
      ], 
      "Id": 5, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775607402, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/5/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 09 22 8e 17 4a 00 00 00 09 18 d3 37 ad 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 25 90 00 00 25 55 48 00 18 01 00 05 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 05 06 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 01 b3 00 00 00 00 00 00 00 01 42 43 38 41 30 35 30 36 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 00 00 40 55 44 01 08 01 07 01 00 32 31 6b 33 75 70 34 20 20 70 69 64 57 6f 72 6b 6e 75 20 70 65 20 0a 32 70 31 69 33 72 35 20 20 32 64 31 6f 33 33 6e 20 65 64 0a 6f 6e 65 0a 4c 6f 61 64 69 6e 67 20 50 4e 4f 52 20 73 65 63 74 69 6f 6e 20 36 20 28 50 41 59 4c 4f 41 44 29 20 31 30 34 38 35 37 36 20 62 79 74 65 73 20 40 30 78 30 0a 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 0d 55 6e 68 61 6e 64 6c 65 64 20 6d 73 67 20 72 63 20 34 32 39 34 39 36 37 32 39 31 20 28 2d 45 49 4f 29 20 66 6f 72 20 6b 65 79 20 30 78 38 31 30 31 61 30 30 30 20 6f 6e 20 74 61 73 6b 20 34 33 35 20 40 20 30 78 32 36 62 66 30 0a 55 44 00 3c 01 01 01 00 68 6f 73 74 5f 72 75 6e 74 69 6d 65 5f 73 65 74 75 70 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 55 44 00 48 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 06 64 40 00 00 00 00 40 2b 97 10 00 00 00 00 40 2b 9f 10 00 00 00 00 40 2b ae 30 00 00 00 00 40 2b b1 2c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 6, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775609149, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/6/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/7": {
      "AdditionalData": [], 
      "Id": 7, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775615630, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/8": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 09 10 5b ce ad 00 00 00 09 10 5d 0a af 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 37 90 00 00 37 55 48 00 18 01 00 06 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 24 03 00 48 00 00 00 e0 00 00 02 00 00 00 00 00 00 20 00 00 0f ff fe 00 00 00 00 02 00 00 00 00 00 00 02 00 42 43 38 41 32 34 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 70 00 50 55 44 00 90 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 07 1e b4 00 00 00 00 00 07 25 dc 00 00 00 00 00 07 28 24 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 64 54 00 00 00 00 00 07 ad e4 00 00 00 00 00 07 b6 6c 00 00 00 00 00 07 b7 9c 00 00 00 00 00 07 bc 90 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 66 b0 00 00 00 00 00 07 61 14 00 00 00 00 00 07 71 20 00 00 00 00 00 07 81 88 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 ec 01 15 31 00 01 28 00 42 50 4e 4f 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 e4 00 00 00 00 00 00 03 e4 00 00 00 17 00 00 00 00 00 00 00 4b 0f cb 71 87 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 4e 00 00 00 00 00 24 00 00 00 4b 0f cb 7e 85 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 0f cb 8b d5 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f e0 00 00 00 00 00 24 00 00 00 4b 0d f1 bb 07 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4b 0d f1 c8 b5 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 22 20 00 00 00 00 00 01 22 22 00 00 00 00 00 00 00 20 00 00 00 00 3c 00 00 00 4b 0d f1 d8 d6 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4b 0d f2 48 0c 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4b 21 13 ba 2c 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4b 21 14 47 d4 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c6 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4b 21 14 5a d1 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4b 21 14 68 aa 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 22 10 00 00 00 00 24 00 00 00 4b 21 14 75 b6 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 21 14 83 0e 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0c 60 00 00 00 00 00 24 00 00 00 4b 38 43 6d de 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4b 38 43 80 38 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 32 10 00 00 00 00 00 01 32 10 00 00 00 00 00 00 00 10 00 00 00 00 3c 00 00 00 4b 38 43 92 f1 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4b 38 43 fe 76 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4b 38 f3 00 5f 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4b 38 f3 82 87 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 15 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4b 38 f3 95 36 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4b 38 f3 a4 58 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 32 10 00 00 00 00 24 00 00 00 4b 38 f3 b1 bb 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 38 f3 bf de 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f f0 00 00 00 00 00 24"
      ], 
      "Id": 8, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775739829, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/8/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/9": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 09 10 77 4a 9a 00 00 00 09 1b 2c 36 8f 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 38 90 00 00 38 55 48 00 18 01 00 05 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 05 06 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 01 b3 00 00 00 00 00 00 00 01 42 43 38 41 30 35 30 36 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 70 00 50 55 44 01 08 01 07 01 00 20 70 69 31 75 70 20 70 33 72 20 64 34 20 69 6f 20 64 6f 6e 65 0a 32 6e 72 65 31 20 0a 33 32 31 35 33 20 32 64 6f 20 6e 64 65 0a 6f 6e 65 0a 4c 6f 61 64 69 6e 67 20 50 4e 4f 52 20 73 65 63 74 69 6f 6e 20 36 20 28 50 41 59 4c 4f 41 44 29 20 31 30 34 38 35 37 36 20 62 79 74 65 73 20 40 30 78 30 0a 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 0d 55 6e 68 61 6e 64 6c 65 64 20 6d 73 67 20 72 63 20 34 32 39 34 39 36 37 32 39 31 20 28 2d 45 49 4f 29 20 66 6f 72 20 6b 65 79 20 30 78 38 31 30 31 61 30 30 30 20 6f 6e 20 74 61 73 6b 20 34 33 35 20 40 20 30 78 32 36 62 66 30 0a 55 44 00 3c 01 01 01 00 68 6f 73 74 5f 72 75 6e 74 69 6d 65 5f 73 65 74 75 70 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 55 44 00 48 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 06 64 40 00 00 00 00 40 2b 97 10 00 00 00 00 40 2b 9f 10 00 00 00 00 40 2b ae 30 00 00 00 00 40 2b b1 2c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 9, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775741654, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/9/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:58:28.340">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:58:28.341">${content} = {u'data': {u'/xyz/openbmc_project/logging/entry/8/callout': {u'endpoints': [u'/xyz/openbmc_project/inventory/system']}, u'/xyz/openbmc_project/logging/entry/13': {u'Timestamp': 1501775883661, u'Resolv...</msg>
<status endtime="20170810 03:58:28.341" starttime="20170810 03:58:28.338" status="PASS"></status>
</kw>
<kw library="Collections" name="Get Dictionary Keys">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:28.342">${esel_list} = [u'/xyz/openbmc_project/logging/entry/10', u'/xyz/openbmc_project/logging/entry/11', u'/xyz/openbmc_project/logging/entry/11/callout', u'/xyz/openbmc_project/logging/entry/12', u'/xyz/openbmc_project/...</msg>
<status endtime="20170810 03:58:28.342" starttime="20170810 03:58:28.341" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:28.342">${logpath} = /tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_esel</msg>
<status endtime="20170810 03:58:28.342" starttime="20170810 03:58:28.342" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:58:28.343">Created file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_esel"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 03:58:28.343" starttime="20170810 03:58:28.343" status="PASS"></status>
</kw>
<kw name="${entry_path} IN [ @{esel_list} ]" type="for">
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/10" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170810 03:58:28.344" starttime="20170810 03:58:28.344" status="PASS"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:28.348">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:58:28.348" starttime="20170810 03:58:28.347" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:28.349">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:58:28.349" starttime="20170810 03:58:28.348" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:28.349">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:58:28.349" starttime="20170810 03:58:28.349" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:28.350">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:58:28.350" starttime="20170810 03:58:28.349" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:28.716">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:58:28.716" starttime="20170810 03:58:28.351" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:28.716">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:58:28.716">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:28.716" starttime="20170810 03:58:28.350" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:28.717">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:28.717" starttime="20170810 03:58:28.717" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:28.718">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:28.719" starttime="20170810 03:58:28.718" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:28.719" starttime="20170810 03:58:28.347" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:28.719" starttime="20170810 03:58:28.346" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:28.719" starttime="20170810 03:58:28.345" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:28.720">${base_uri} = /xyz/openbmc_project/logging/entry/10/attr/AdditionalData</msg>
<status endtime="20170810 03:58:28.720" starttime="20170810 03:58:28.719" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 03:58:28.721" starttime="20170810 03:58:28.720" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:29.415">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/10/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:58:29.416">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:29.416" starttime="20170810 03:58:28.721" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 03:58:29.416" starttime="20170810 03:58:29.416" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:58:29.417">Delete All Sessions</msg>
<status endtime="20170810 03:58:29.417" starttime="20170810 03:58:29.416" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:29.417">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:29.417" starttime="20170810 03:58:28.345" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:29.418">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:29.418" starttime="20170810 03:58:29.417" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:29.418">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:58:29.418">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:58:29.418">${content} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:58:29.418" starttime="20170810 03:58:29.418" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:29.419">${esel_data} = []</msg>
<status endtime="20170810 03:58:29.419" starttime="20170810 03:58:28.344" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:29.419">Length is 0</msg>
<msg level="INFO" timestamp="20170810 03:58:29.419">${length} = 0</msg>
<status endtime="20170810 03:58:29.419" starttime="20170810 03:58:29.419" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:29.420">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 03:58:29.420" starttime="20170810 03:58:29.420" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:29.420" starttime="20170810 03:58:28.343" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/11" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170810 03:58:29.421" starttime="20170810 03:58:29.420" status="PASS"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:29.426">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:58:29.426" starttime="20170810 03:58:29.426" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:29.427">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:58:29.427" starttime="20170810 03:58:29.427" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:29.428">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:58:29.428" starttime="20170810 03:58:29.428" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:29.429">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:58:29.429" starttime="20170810 03:58:29.429" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:29.603">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:58:29.603" starttime="20170810 03:58:29.430" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:29.603">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:58:29.603">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:29.603" starttime="20170810 03:58:29.429" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:29.603">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:29.604" starttime="20170810 03:58:29.603" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:29.604">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:29.604" starttime="20170810 03:58:29.604" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:29.604" starttime="20170810 03:58:29.425" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:29.604" starttime="20170810 03:58:29.424" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:29.605" starttime="20170810 03:58:29.423" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:29.605">${base_uri} = /xyz/openbmc_project/logging/entry/11/attr/AdditionalData</msg>
<status endtime="20170810 03:58:29.605" starttime="20170810 03:58:29.605" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 03:58:29.606" starttime="20170810 03:58:29.605" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:30.262">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/11/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:58:30.262">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:30.262" starttime="20170810 03:58:29.606" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 03:58:30.263" starttime="20170810 03:58:30.263" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:58:30.263">Delete All Sessions</msg>
<status endtime="20170810 03:58:30.263" starttime="20170810 03:58:30.263" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:30.264">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:30.264" starttime="20170810 03:58:29.422" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:30.264">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:30.264" starttime="20170810 03:58:30.264" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:30.265">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 09 06 89 19 d2 00 00 00 09 06 8a 6b 0a 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 4a 90 00 00 4a 55 48 00 18 01 00 06 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 24 03 00 48 00 00 00 e0 00 00 02 00 00 00 00 00 00 20 00 00 0f ff fe 00 00 00 00 02 00 00 00 00 00 00 02 00 42 43 38 41 32 34 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 00 00 00 55 44 00 90 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 07 1e b4 00 00 00 00 00 07 25 dc 00 00 00 00 00 07 28 24 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 64 54 00 00 00 00 00 07 ad e4 00 00 00 00 00 07 b6 6c 00 00 00 00 00 07 b7 9c 00 00 00 00 00 07 bc 90 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 66 b0 00 00 00 00 00 07 61 14 00 00 00 00 00 07 71 20 00 00 00 00 00 07 81 88 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 ec 01 15 31 00 01 28 00 42 50 4e 4f 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 e4 00 00 00 00 00 00 03 e4 00 00 00 17 00 00 00 00 00 00 00 4b 09 65 cc 4e 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 4e 00 00 00 00 00 24 00 00 00 4b 09 65 d9 16 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 09 65 e5 58 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f e0 00 00 00 00 00 24 00 00 00 4b 09 7f ed fb 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4b 09 7f fc 16 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 22 20 00 00 00 00 00 01 22 22 00 00 00 00 00 00 00 20 00 00 00 00 3c 00 00 00 4b 09 80 0c 20 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4b 09 80 78 65 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4b 09 83 82 f1 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4b 09 84 04 dd 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c6 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4b 09 84 17 6f 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4b 09 84 24 81 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 22 10 00 00 00 00 24 00 00 00 4b 09 84 31 0a 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 09 84 3d cd 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0c 60 00 00 00 00 00 24 00 00 00 4b 0d e5 ae 24 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4b 0d e5 c3 aa 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 32 10 00 00 00 00 00 01 32 10 00 00 00 00 00 00 00 10 00 00 00 00 3c 00 00 00 4b 0d e5 d4 69 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4b 0d e6 4a 72 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4b 12 4e b4 47 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4b 12 4f 41 28 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4b 12 4f 55 06 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4b 12 4f 63 84 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 32 10 00 00 00 00 24 00 00 00 4b 12 4f 70 58 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 12 4f 7d a0 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f f0 00 00 00 00 00 24"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:58:30.265">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:58:30.265">${content} = {u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 09 06 89 19 d2 00 00 00 09 06 8a 6b ...</msg>
<status endtime="20170810 03:58:30.265" starttime="20170810 03:58:30.265" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:30.266">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 09 06 89 19 d2 00 00 00 09 06 8a 6b 0a 42 00 0...</msg>
<status endtime="20170810 03:58:30.266" starttime="20170810 03:58:29.421" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:30.266">Length is 2</msg>
<msg level="INFO" timestamp="20170810 03:58:30.266">${length} = 2</msg>
<status endtime="20170810 03:58:30.266" starttime="20170810 03:58:30.266" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170810 03:58:30.267" starttime="20170810 03:58:30.267" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Esel Index">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:30.267">${index} = 1</msg>
<status endtime="20170810 03:58:30.268" starttime="20170810 03:58:30.267" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:58:30.269">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_esel"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 03:58:30.269" starttime="20170810 03:58:30.269" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:30.269" starttime="20170810 03:58:30.268" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:58:30.270">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_esel"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 03:58:30.271" starttime="20170810 03:58:30.270" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:30.271" starttime="20170810 03:58:30.269" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:30.271" starttime="20170810 03:58:29.420" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/11/callout" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:30.272">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 03:58:30.272" starttime="20170810 03:58:30.271" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:30.272" starttime="20170810 03:58:30.271" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/12" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170810 03:58:30.273" starttime="20170810 03:58:30.272" status="PASS"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:30.276">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:58:30.276" starttime="20170810 03:58:30.276" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:30.277">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:58:30.277" starttime="20170810 03:58:30.276" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:30.277">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:58:30.277" starttime="20170810 03:58:30.277" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:30.278">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:58:30.278" starttime="20170810 03:58:30.278" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:30.900">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:58:30.901" starttime="20170810 03:58:30.279" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:30.901">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:58:30.901">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:30.901" starttime="20170810 03:58:30.278" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:30.901">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:30.901" starttime="20170810 03:58:30.901" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:30.902">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:30.902" starttime="20170810 03:58:30.902" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:30.902" starttime="20170810 03:58:30.275" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:30.902" starttime="20170810 03:58:30.275" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:30.902" starttime="20170810 03:58:30.274" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:30.903">${base_uri} = /xyz/openbmc_project/logging/entry/12/attr/AdditionalData</msg>
<status endtime="20170810 03:58:30.903" starttime="20170810 03:58:30.903" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 03:58:30.904" starttime="20170810 03:58:30.903" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:31.424">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/12/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:58:31.424">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:31.424" starttime="20170810 03:58:30.904" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 03:58:31.425" starttime="20170810 03:58:31.424" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:58:31.425">Delete All Sessions</msg>
<status endtime="20170810 03:58:31.425" starttime="20170810 03:58:31.425" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:31.425">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:31.425" starttime="20170810 03:58:30.273" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:31.426">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:31.426" starttime="20170810 03:58:31.426" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:31.427">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 09 05 af 06 8a 00 00 00 09 07 99 fa 1f 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 4b 90 00 00 4b 55 48 00 18 01 00 05 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 05 06 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 01 b3 00 00 00 00 00 00 00 01 42 43 38 41 30 35 30 36 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 00 00 00 55 44 01 08 01 07 01 00 57 20 32 6b 72 20 75 70 20 32 31 70 33 34 20 64 6f 69 31 64 72 20 6f 6e 32 31 33 6e 65 33 35 32 20 64 6f 6e 20 65 0a 64 0a 65 6f 0a 6e 65 0a 4c 6f 61 64 69 6e 67 20 50 4e 4f 52 20 73 65 63 74 69 6f 6e 20 36 20 28 50 41 59 4c 4f 41 44 29 20 31 30 34 38 35 37 36 20 62 79 74 65 73 20 40 30 78 30 0a 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 0d 55 6e 68 61 6e 64 6c 65 64 20 6d 73 67 20 72 63 20 34 32 39 34 39 36 37 32 39 31 20 28 2d 45 49 4f 29 20 66 6f 72 20 6b 65 79 20 30 78 38 31 30 31 61 30 30 30 20 6f 6e 20 74 61 73 6b 20 34 33 35 20 40 20 30 78 32 36 62 66 30 0a 55 44 00 3c 01 01 01 00 68 6f 73 74 5f 72 75 6e 74 69 6d 65 5f 73 65 74 75 70 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 55 44 00 48 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 06 64 40 00 00 00 00 40 2b 97 10 00 00 00 00 40 2b 9f 10 00 00 00 00 40 2b ae 30 00 00 00 00 40 2b b1 2c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:58:31.427">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:58:31.427">${content} = {u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 09 05 af 06 8a 00 00 00 09 07 99 fa ...</msg>
<status endtime="20170810 03:58:31.427" starttime="20170810 03:58:31.426" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:31.427">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 09 05 af 06 8a 00 00 00 09 07 99 fa 1f 42 00 0...</msg>
<status endtime="20170810 03:58:31.427" starttime="20170810 03:58:30.273" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:31.428">Length is 2</msg>
<msg level="INFO" timestamp="20170810 03:58:31.428">${length} = 2</msg>
<status endtime="20170810 03:58:31.428" starttime="20170810 03:58:31.428" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170810 03:58:31.429" starttime="20170810 03:58:31.428" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Esel Index">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:31.429">${index} = 1</msg>
<status endtime="20170810 03:58:31.429" starttime="20170810 03:58:31.429" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:58:31.430">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_esel"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 03:58:31.431" starttime="20170810 03:58:31.430" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:31.431" starttime="20170810 03:58:31.429" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:58:31.432">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_esel"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 03:58:31.432" starttime="20170810 03:58:31.432" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:31.433" starttime="20170810 03:58:31.431" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:31.433" starttime="20170810 03:58:30.272" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/12/callout" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:31.433">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 03:58:31.433" starttime="20170810 03:58:31.433" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:31.434" starttime="20170810 03:58:31.433" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/13" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170810 03:58:31.434" starttime="20170810 03:58:31.434" status="PASS"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:31.438">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:58:31.438" starttime="20170810 03:58:31.437" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:31.439">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:58:31.439" starttime="20170810 03:58:31.438" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:31.439">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:58:31.439" starttime="20170810 03:58:31.439" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:31.440">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:58:31.440" starttime="20170810 03:58:31.440" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:31.884">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:58:31.884" starttime="20170810 03:58:31.441" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:31.884">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:58:31.884">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:31.884" starttime="20170810 03:58:31.440" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:31.885">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:31.885" starttime="20170810 03:58:31.884" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:31.886">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:31.886" starttime="20170810 03:58:31.885" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:31.886" starttime="20170810 03:58:31.437" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:31.886" starttime="20170810 03:58:31.436" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:31.886" starttime="20170810 03:58:31.436" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:31.887">${base_uri} = /xyz/openbmc_project/logging/entry/13/attr/AdditionalData</msg>
<status endtime="20170810 03:58:31.887" starttime="20170810 03:58:31.886" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 03:58:31.887" starttime="20170810 03:58:31.887" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:32.489">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/13/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:58:32.489">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:32.490" starttime="20170810 03:58:31.888" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 03:58:32.491" starttime="20170810 03:58:32.490" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:58:32.491">Delete All Sessions</msg>
<status endtime="20170810 03:58:32.491" starttime="20170810 03:58:32.491" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:32.492">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:32.492" starttime="20170810 03:58:31.435" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:32.492">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:32.492" starttime="20170810 03:58:32.492" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:32.493">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:58:32.493">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:58:32.493">${content} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:58:32.493" starttime="20170810 03:58:32.493" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:32.493">${esel_data} = []</msg>
<status endtime="20170810 03:58:32.493" starttime="20170810 03:58:31.434" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:32.494">Length is 0</msg>
<msg level="INFO" timestamp="20170810 03:58:32.494">${length} = 0</msg>
<status endtime="20170810 03:58:32.494" starttime="20170810 03:58:32.494" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:32.495">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 03:58:32.495" starttime="20170810 03:58:32.494" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:32.495" starttime="20170810 03:58:31.434" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/2" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170810 03:58:32.496" starttime="20170810 03:58:32.495" status="PASS"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:32.499">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:58:32.499" starttime="20170810 03:58:32.499" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:32.500">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:58:32.500" starttime="20170810 03:58:32.500" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:32.500">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:58:32.501" starttime="20170810 03:58:32.500" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:32.502">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:58:32.502" starttime="20170810 03:58:32.501" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:32.945">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:58:32.946" starttime="20170810 03:58:32.502" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:32.946">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:58:32.946">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:32.946" starttime="20170810 03:58:32.502" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:32.946">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:32.946" starttime="20170810 03:58:32.946" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:32.947">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:32.947" starttime="20170810 03:58:32.947" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:32.947" starttime="20170810 03:58:32.498" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:32.947" starttime="20170810 03:58:32.498" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:32.947" starttime="20170810 03:58:32.497" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:32.948">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status endtime="20170810 03:58:32.948" starttime="20170810 03:58:32.948" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 03:58:32.949" starttime="20170810 03:58:32.948" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:33.584">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:58:33.585">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:33.585" starttime="20170810 03:58:32.949" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 03:58:33.586" starttime="20170810 03:58:33.585" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:58:33.586">Delete All Sessions</msg>
<status endtime="20170810 03:58:33.586" starttime="20170810 03:58:33.586" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:33.587">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:33.587" starttime="20170810 03:58:32.496" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:33.587">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:33.588" starttime="20170810 03:58:33.587" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:33.588">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:58:33.589">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:58:33.589">${content} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:58:33.589" starttime="20170810 03:58:33.588" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:33.589">${esel_data} = []</msg>
<status endtime="20170810 03:58:33.589" starttime="20170810 03:58:32.496" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:33.590">Length is 0</msg>
<msg level="INFO" timestamp="20170810 03:58:33.590">${length} = 0</msg>
<status endtime="20170810 03:58:33.590" starttime="20170810 03:58:33.590" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:33.591">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 03:58:33.591" starttime="20170810 03:58:33.590" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:33.591" starttime="20170810 03:58:32.495" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/3" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170810 03:58:33.592" starttime="20170810 03:58:33.592" status="PASS"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:33.596">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:58:33.597" starttime="20170810 03:58:33.596" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:33.598">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:58:33.598" starttime="20170810 03:58:33.597" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:33.598">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:58:33.598" starttime="20170810 03:58:33.598" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:33.599">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:58:33.599" starttime="20170810 03:58:33.599" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:34.105">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:58:34.106" starttime="20170810 03:58:33.600" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:34.106">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:58:34.106">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:34.106" starttime="20170810 03:58:33.599" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:34.106">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:34.106" starttime="20170810 03:58:34.106" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:34.107">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:34.107" starttime="20170810 03:58:34.107" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:34.107" starttime="20170810 03:58:33.595" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:34.107" starttime="20170810 03:58:33.595" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:34.107" starttime="20170810 03:58:33.594" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:34.108">${base_uri} = /xyz/openbmc_project/logging/entry/3/attr/AdditionalData</msg>
<status endtime="20170810 03:58:34.108" starttime="20170810 03:58:34.108" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 03:58:34.109" starttime="20170810 03:58:34.108" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:34.859">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:58:34.859">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:34.859" starttime="20170810 03:58:34.109" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 03:58:34.860" starttime="20170810 03:58:34.859" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:58:34.860">Delete All Sessions</msg>
<status endtime="20170810 03:58:34.860" starttime="20170810 03:58:34.860" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:34.860">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:34.860" starttime="20170810 03:58:33.593" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:34.861">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:34.861" starttime="20170810 03:58:34.861" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:34.862">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:58:34.862">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:58:34.862">${content} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:58:34.862" starttime="20170810 03:58:34.861" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:34.862">${esel_data} = []</msg>
<status endtime="20170810 03:58:34.862" starttime="20170810 03:58:33.593" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:34.863">Length is 0</msg>
<msg level="INFO" timestamp="20170810 03:58:34.863">${length} = 0</msg>
<status endtime="20170810 03:58:34.863" starttime="20170810 03:58:34.862" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:34.863">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 03:58:34.863" starttime="20170810 03:58:34.863" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:34.864" starttime="20170810 03:58:33.591" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/4" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170810 03:58:34.864" starttime="20170810 03:58:34.864" status="PASS"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:34.868">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:58:34.868" starttime="20170810 03:58:34.867" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:34.869">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:58:34.869" starttime="20170810 03:58:34.869" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:34.870">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:58:34.870" starttime="20170810 03:58:34.869" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:34.870">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:58:34.870" starttime="20170810 03:58:34.870" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:35.247">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:58:35.247" starttime="20170810 03:58:34.871" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:35.247">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:58:35.247">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:35.247" starttime="20170810 03:58:34.871" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:35.248">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:35.248" starttime="20170810 03:58:35.247" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:35.248">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:35.248" starttime="20170810 03:58:35.248" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:35.249" starttime="20170810 03:58:34.867" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:35.249" starttime="20170810 03:58:34.866" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:35.249" starttime="20170810 03:58:34.866" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:35.249">${base_uri} = /xyz/openbmc_project/logging/entry/4/attr/AdditionalData</msg>
<status endtime="20170810 03:58:35.249" starttime="20170810 03:58:35.249" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 03:58:35.250" starttime="20170810 03:58:35.250" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:35.737">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/4/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:58:35.737">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:35.737" starttime="20170810 03:58:35.250" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 03:58:35.738" starttime="20170810 03:58:35.737" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:58:35.738">Delete All Sessions</msg>
<status endtime="20170810 03:58:35.738" starttime="20170810 03:58:35.738" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:35.738">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:35.738" starttime="20170810 03:58:34.865" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:35.739">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:35.739" starttime="20170810 03:58:35.739" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:35.740">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 25 00 00 00 00 10 fc f4 49 26 00 00 00 10 fc f4 fe 4d 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 12 90 00 00 12 55 48 00 18 01 00 22 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 25 07 00 48 00 00 00 e0 00 00 03 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 cb 00 00 00 07 00 00 00 00 42 43 38 41 32 35 30 37 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 40 4e c3 4c 00 00 00 00 40 4e c5 4c 00 00 00 00 40 4e ce d0 00 00 00 00 40 3f 1f 38 00 00 00 00 40 3f 2d 7c 00 00 00 00 40 0b 65 b0 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 e4 01 15 31 00 01 28 00 42 49 50 4d 49 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 11 00 00 00 00 00 00 00 5b 2e 9a 72 9c 00 00 00 84 00 10 43 4f 8d 9a 22 cc 00 00 00 96 00 00 00 00 00 00 00 38 00 00 00 00 00 00 00 a8 00 00 00 2c 00 00 00 5b 2e 9a c2 1b 00 00 00 84 00 10 43 4f 13 70 70 70 00 00 03 de 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 12 00 00 00 2c 00 00 00 5b 2e 9c 7e d3 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 89 00 00 00 00 00 00 00 3b 00 00 00 00 00 00 00 44 00 00 00 5b 34 90 46 28 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 2c 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 89 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 5b 34 90 73 7a 00 00 00 84 00 10 43 4f 8d 9a 22 cc 00 00 00 96 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 e0 00 00 00 2c 00 00 00 5b 34 90 c2 e8 00 00 00 84 00 10 43 4f 13 70 70 70 00 00 03 de 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 12 00 00 00 2c 00 00 00 5b 34 91 e5 73 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 8a 00 00 00 00 00 00 00 23 00 00 00 00 00 00 00 44 00 00 00 5b 3a 86 51 d0 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 2c 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 8a 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 8e 0d 8e d4 95 00 00 00 c7 00 10 43 4f 44 ff d1 f1 00 00 04 1d 00 00 00 00 00 00 00 18 00 00 00 00 00 00 00 22 00 00 00 2c 00 00 00 8e 0d ae 0d 65 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 18 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00 8b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 44 00 00 00 8e 0d d4 ca db 00 00 00 c7 00 10 43 4f 13 70 70 70 00 00 03 de 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 2d 00 00 00 2c 00 00 00 8e 18 3a ad 93 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00 8b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 8e 18 3b 10 a2 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 2d 00 00 00 00 00 00 00 8c 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 44 00 00 00 8e 1e 30 ba 33 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 2d 00 00 00 00 00 00 00 8c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 cb 00 00 00 00 00 00 00 4c 00 00 00 8e 1e 30 e2 fe 00 00 00 c7 00 08 43 4f f8 d7 6e 14 00 00 00 52 00 00 00 00 00 00 00 cb 00 00 00 24 00 00 00 8e 1e 30 f0 56 00 00 00 c7 00 00 43 4f 91 46 a7 43 00 00 00 96 00 00 00 1c 00 00 00 8e 1e 31 01 29 00 00 00 c7 00 10 43 4f 48 93 e8 7c 00 00 00 b2 00 00 00 00 00 00 00 07 00 00 00 00 00 00 00 00 00 00 00 2c 80 00 04 04 07 01 10 3f 00 00 00 00 00 00 c0 c0 80 00 08 04 07 01 10 3f 00 00 00 00 00 00 0f 00 80 00 0c 04 07 01 10 3f 00 00 00 00 00 00 c3 00 80 00 10 04 07 01 10 3f 00 00 00 00 00 00 c0 00 7e 60 00 00 00 7f e4 fb 78 8d eb c2 f8 e0 3d 20 00 8c 1e fb a1 00 70 61 29 0d 84 00 fb a1 00 78 7f c3 f3 78 4a 91 21 56 00 00 00 00 00 00 00 08 00 00 00 00 00 85 09 d0 00 00 00 00 00 00 86 40 80 00 04 05 07 01 10 3f 00 00 00 00 00 00 86 40 80 00 08 05 07 01 10 3f 00 00 00 00 00 00 86 40 80 00 0c 05 07 01 10 3f 00 00 00 00 00 00 86 40 80 00 10 05 07 01 10 3f 00 00 00 00 00 00 86 40 80 00 00 01 07 01 10 3f 00 00 00 00 00 00 00 00 80 00 04 01 07 01 10 3f 00 00 00 00 00 00 00 00 00 28 5c 39 20 00 01 56 00 00 00 00 00 00 00 03 00 00 00 00 00 85 0b a0 00 00 00 00 40 65 94 88 00 00 00 00 00 00 00 00 00 00 00 00 00 85 0b a8 00 00 00 00 00 9d 77 68 00 00 00 00 00 00 86 40 80 00 0c 05 07 01 10 3f 00 00 00 00 00 00 86 40 21 00 87 7a 39 20 00 56 00 00 00 00 00 00 00 06 00 00 00 00 00 85 0d c0 00 00 00 00 07 01 23 59 00 00 00 00 07 01 23 5a 00 00 00 00 07 01 23 5b 00 00 00 00 07 01 23 5c 00 00 00 00 07 01 23 5d 00 00 00 00 07 01 23 5e 00 00 00 00 07 01 23 5f 00 00 00 00 07 01 23 60 00 00 00 00 00 00 ff ff 80 00 00 01 07 01 10 3f 00 00 00 00 00 00 00 00 4b f8 7b 61 e8 41 00 28 6f 2f a3 00 00 41 9e 07 e4 ae 7f e3 fb 78 4b 56 00 00 00 00 00 00 00 03 00 00 00 00 00 85 09 80 00 00 00 00 40 65 94 a0 00 00 00 00 00 00 00 00 00 00 00 00 00 85 09 88 00 00 00 00 00 9d 77 68 3c 82 00 01 7f 87 e3 78 ad 38 c0 00 00 38 84 e6 9c 8f 7f 03 c3 78 38 a0 01 b8 85 4b f8 75 c9 56 00 00 00 00 00 00 00 04 00 00 00 00 00 85 0d 40 80 00 00 a4 07 01 10 3f 80 00 00 a5 07 01 10 3f 80 00 04 a4 07 01 10 3f 80 00 04 a5 07 01 10 3f 80 00 08 a4 07 01 10 3f 80 00 08 a5 07 01 10 3f 80 00 0c a4 07 01 10 3f 80 00 0c a5 07 01 10 3f 80 00 10 a4 07 01 10 3f 90 91 3e 00 20 bf 4b f8 75 f1 e8 41 00 28 d6 48 00 03 6c 60 42 00 00 41 60 00 00 00 e8 79 00 00 7c 7f e9 fb 78 e8 82 56 00 00 00 00 00 00 00 06 00 00 00 00 00 85 0e 90 00 00 00 00 00 00 ff ff 80 00 04 00 07 01 10 3f 00 00 00 00 00 00 ff ff 80 00 08 00 07 01 10 3f 00 00 00 00 00 00 ff ff 80 00 0c 00 07 01 10 3f 00 00 00 00 00 00 ff ff"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:58:35.741">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:58:35.741">${content} = {u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 25 00 00 00 00 10 fc f4 49 26 00 00 00 10 fc f4 fe ...</msg>
<status endtime="20170810 03:58:35.741" starttime="20170810 03:58:35.740" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:35.741">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 25 00 00 00 00 10 fc f4 49 26 00 00 00 10 fc f4 fe 4d 42 00 0...</msg>
<status endtime="20170810 03:58:35.741" starttime="20170810 03:58:34.865" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:35.742">Length is 2</msg>
<msg level="INFO" timestamp="20170810 03:58:35.742">${length} = 2</msg>
<status endtime="20170810 03:58:35.742" starttime="20170810 03:58:35.742" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170810 03:58:35.743" starttime="20170810 03:58:35.742" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Esel Index">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:35.743">${index} = 1</msg>
<status endtime="20170810 03:58:35.743" starttime="20170810 03:58:35.743" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:58:35.745">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_esel"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 03:58:35.745" starttime="20170810 03:58:35.744" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:35.745" starttime="20170810 03:58:35.743" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:58:35.746">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_esel"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 03:58:35.746" starttime="20170810 03:58:35.745" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:35.746" starttime="20170810 03:58:35.745" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:35.746" starttime="20170810 03:58:34.864" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/4/callout" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:35.747">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 03:58:35.747" starttime="20170810 03:58:35.746" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:35.747" starttime="20170810 03:58:35.746" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/5" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170810 03:58:35.748" starttime="20170810 03:58:35.747" status="PASS"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:35.752">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:58:35.752" starttime="20170810 03:58:35.751" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:35.752">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:58:35.753" starttime="20170810 03:58:35.752" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:35.753">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:58:35.753" starttime="20170810 03:58:35.753" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:35.754">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:58:35.754" starttime="20170810 03:58:35.753" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:36.165">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:58:36.166" starttime="20170810 03:58:35.754" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:36.166">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:58:36.166">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:36.166" starttime="20170810 03:58:35.754" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:36.166">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:36.166" starttime="20170810 03:58:36.166" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:36.167">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:36.167" starttime="20170810 03:58:36.167" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:36.167" starttime="20170810 03:58:35.751" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:36.167" starttime="20170810 03:58:35.750" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:36.167" starttime="20170810 03:58:35.749" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:36.168">${base_uri} = /xyz/openbmc_project/logging/entry/5/attr/AdditionalData</msg>
<status endtime="20170810 03:58:36.168" starttime="20170810 03:58:36.168" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 03:58:36.169" starttime="20170810 03:58:36.168" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:36.714">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/5/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:58:36.714">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:36.714" starttime="20170810 03:58:36.169" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 03:58:36.714" starttime="20170810 03:58:36.714" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:58:36.715">Delete All Sessions</msg>
<status endtime="20170810 03:58:36.715" starttime="20170810 03:58:36.715" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:36.715">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:36.715" starttime="20170810 03:58:35.749" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:36.716">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:36.716" starttime="20170810 03:58:36.715" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:36.716">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 09 22 8c b0 48 00 00 00 09 22 8d f8 16 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 24 90 00 00 24 55 48 00 18 01 00 06 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 24 03 00 48 00 00 00 e0 00 00 02 00 00 00 00 00 00 20 00 00 0f ff fe 00 00 00 00 02 00 00 00 00 00 00 02 00 42 43 38 41 32 34 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 00 00 00 55 44 00 90 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 07 1e b4 00 00 00 00 00 07 25 dc 00 00 00 00 00 07 28 24 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 64 54 00 00 00 00 00 07 ad e4 00 00 00 00 00 07 b6 6c 00 00 00 00 00 07 b7 9c 00 00 00 00 00 07 bc 90 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 66 b0 00 00 00 00 00 07 61 14 00 00 00 00 00 07 71 20 00 00 00 00 00 07 81 88 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 ec 01 15 31 00 01 28 00 42 50 4e 4f 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 e4 00 00 00 00 00 00 03 e4 00 00 00 17 00 00 00 00 00 00 00 4b 24 af bb e7 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 4e 00 00 00 00 00 24 00 00 00 4b 24 af c8 6a 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 24 af d5 99 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f e0 00 00 00 00 00 24 00 00 00 4b 24 c9 cc bd 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4b 24 c9 da 27 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 22 20 00 00 00 00 00 01 22 22 00 00 00 00 00 00 00 20 00 00 00 00 3c 00 00 00 4b 24 c9 ea 25 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4b 24 ca 54 54 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4b 24 cd 16 8f 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4b 24 cd 98 58 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 32 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c6 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4b 24 cd ab 34 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4b 24 cd b8 4b 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 22 10 00 00 00 00 24 00 00 00 4b 24 cd c4 cd 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 24 cd d1 da 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0c 60 00 00 00 00 00 24 00 00 00 4c 00 83 7a 24 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4c 00 83 8d 56 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 32 10 00 00 00 00 00 01 32 10 00 00 00 00 00 00 00 10 00 00 00 00 3c 00 00 00 4c 00 83 9d 21 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4c 00 84 09 e7 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4c 0d a7 31 db 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4c 0d a7 b9 8a 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 33 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4c 0d a7 cd a8 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4c 0d a7 dc e9 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 32 10 00 00 00 00 24 00 00 00 4c 0d a7 e9 6a 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4c 0d a7 f6 50 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f f0 00 00 00 00 00 24"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:58:36.717">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:58:36.717">${content} = {u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 09 22 8c b0 48 00 00 00 09 22 8d f8 ...</msg>
<status endtime="20170810 03:58:36.717" starttime="20170810 03:58:36.716" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:36.717">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 09 22 8c b0 48 00 00 00 09 22 8d f8 16 42 00 0...</msg>
<status endtime="20170810 03:58:36.717" starttime="20170810 03:58:35.748" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:36.718">Length is 2</msg>
<msg level="INFO" timestamp="20170810 03:58:36.718">${length} = 2</msg>
<status endtime="20170810 03:58:36.718" starttime="20170810 03:58:36.717" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170810 03:58:36.718" starttime="20170810 03:58:36.718" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Esel Index">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:36.719">${index} = 1</msg>
<status endtime="20170810 03:58:36.719" starttime="20170810 03:58:36.719" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:58:36.720">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_esel"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 03:58:36.720" starttime="20170810 03:58:36.720" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:36.721" starttime="20170810 03:58:36.719" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:58:36.724">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_esel"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 03:58:36.724" starttime="20170810 03:58:36.721" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:36.724" starttime="20170810 03:58:36.721" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:36.724" starttime="20170810 03:58:35.747" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/5/callout" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:36.725">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 03:58:36.725" starttime="20170810 03:58:36.724" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:36.725" starttime="20170810 03:58:36.724" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/6" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170810 03:58:36.726" starttime="20170810 03:58:36.726" status="PASS"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:36.730">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:58:36.730" starttime="20170810 03:58:36.729" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:36.730">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:58:36.730" starttime="20170810 03:58:36.730" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:36.731">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:58:36.731" starttime="20170810 03:58:36.731" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:36.732">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:58:36.732" starttime="20170810 03:58:36.731" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:37.160">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:58:37.160" starttime="20170810 03:58:36.733" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:37.160">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:58:37.160">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:37.160" starttime="20170810 03:58:36.732" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:37.160">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:37.161" starttime="20170810 03:58:37.160" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:37.161">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:37.161" starttime="20170810 03:58:37.161" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:37.161" starttime="20170810 03:58:36.729" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:37.161" starttime="20170810 03:58:36.728" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:37.162" starttime="20170810 03:58:36.727" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:37.162">${base_uri} = /xyz/openbmc_project/logging/entry/6/attr/AdditionalData</msg>
<status endtime="20170810 03:58:37.162" starttime="20170810 03:58:37.162" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 03:58:37.163" starttime="20170810 03:58:37.162" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:37.806">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/6/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:58:37.807">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:37.807" starttime="20170810 03:58:37.163" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 03:58:37.807" starttime="20170810 03:58:37.807" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:58:37.808">Delete All Sessions</msg>
<status endtime="20170810 03:58:37.808" starttime="20170810 03:58:37.807" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:37.808">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:37.808" starttime="20170810 03:58:36.727" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:37.809">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:37.809" starttime="20170810 03:58:37.808" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:37.809">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 09 22 8e 17 4a 00 00 00 09 18 d3 37 ad 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 25 90 00 00 25 55 48 00 18 01 00 05 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 05 06 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 01 b3 00 00 00 00 00 00 00 01 42 43 38 41 30 35 30 36 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 00 00 40 55 44 01 08 01 07 01 00 32 31 6b 33 75 70 34 20 20 70 69 64 57 6f 72 6b 6e 75 20 70 65 20 0a 32 70 31 69 33 72 35 20 20 32 64 31 6f 33 33 6e 20 65 64 0a 6f 6e 65 0a 4c 6f 61 64 69 6e 67 20 50 4e 4f 52 20 73 65 63 74 69 6f 6e 20 36 20 28 50 41 59 4c 4f 41 44 29 20 31 30 34 38 35 37 36 20 62 79 74 65 73 20 40 30 78 30 0a 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 0d 55 6e 68 61 6e 64 6c 65 64 20 6d 73 67 20 72 63 20 34 32 39 34 39 36 37 32 39 31 20 28 2d 45 49 4f 29 20 66 6f 72 20 6b 65 79 20 30 78 38 31 30 31 61 30 30 30 20 6f 6e 20 74 61 73 6b 20 34 33 35 20 40 20 30 78 32 36 62 66 30 0a 55 44 00 3c 01 01 01 00 68 6f 73 74 5f 72 75 6e 74 69 6d 65 5f 73 65 74 75 70 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 55 44 00 48 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 06 64 40 00 00 00 00 40 2b 97 10 00 00 00 00 40 2b 9f 10 00 00 00 00 40 2b ae 30 00 00 00 00 40 2b b1 2c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:58:37.809">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:58:37.809">${content} = {u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 09 22 8e 17 4a 00 00 00 09 18 d3 37 ...</msg>
<status endtime="20170810 03:58:37.810" starttime="20170810 03:58:37.809" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:37.810">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 09 22 8e 17 4a 00 00 00 09 18 d3 37 ad 42 00 0...</msg>
<status endtime="20170810 03:58:37.810" starttime="20170810 03:58:36.726" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:37.810">Length is 2</msg>
<msg level="INFO" timestamp="20170810 03:58:37.811">${length} = 2</msg>
<status endtime="20170810 03:58:37.811" starttime="20170810 03:58:37.810" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170810 03:58:37.811" starttime="20170810 03:58:37.811" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Esel Index">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:37.812">${index} = 1</msg>
<status endtime="20170810 03:58:37.812" starttime="20170810 03:58:37.811" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:58:37.813">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_esel"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 03:58:37.813" starttime="20170810 03:58:37.813" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:37.813" starttime="20170810 03:58:37.812" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:58:37.814">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_esel"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 03:58:37.814" starttime="20170810 03:58:37.814" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:37.814" starttime="20170810 03:58:37.813" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:37.815" starttime="20170810 03:58:36.725" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/6/callout" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:37.815">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 03:58:37.815" starttime="20170810 03:58:37.815" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:37.815" starttime="20170810 03:58:37.815" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/7" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170810 03:58:37.816" starttime="20170810 03:58:37.816" status="PASS"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:37.820">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:58:37.820" starttime="20170810 03:58:37.819" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:37.821">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:58:37.821" starttime="20170810 03:58:37.820" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:37.821">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:58:37.821" starttime="20170810 03:58:37.821" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:37.822">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:58:37.822" starttime="20170810 03:58:37.821" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:38.264">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:58:38.264" starttime="20170810 03:58:37.823" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:38.264">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:58:38.264">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:38.264" starttime="20170810 03:58:37.822" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:38.265">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:38.265" starttime="20170810 03:58:38.264" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:38.265">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:38.266" starttime="20170810 03:58:38.265" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:38.266" starttime="20170810 03:58:37.819" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:38.266" starttime="20170810 03:58:37.818" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:38.266" starttime="20170810 03:58:37.818" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:38.266">${base_uri} = /xyz/openbmc_project/logging/entry/7/attr/AdditionalData</msg>
<status endtime="20170810 03:58:38.267" starttime="20170810 03:58:38.266" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 03:58:38.267" starttime="20170810 03:58:38.267" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:38.969">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/7/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:58:38.969">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:38.969" starttime="20170810 03:58:38.267" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 03:58:38.970" starttime="20170810 03:58:38.970" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:58:38.970">Delete All Sessions</msg>
<status endtime="20170810 03:58:38.970" starttime="20170810 03:58:38.970" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:38.971">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:38.971" starttime="20170810 03:58:37.817" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:38.971">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:38.971" starttime="20170810 03:58:38.971" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:38.972">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:58:38.972">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:58:38.972">${content} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170810 03:58:38.972" starttime="20170810 03:58:38.971" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:38.972">${esel_data} = []</msg>
<status endtime="20170810 03:58:38.972" starttime="20170810 03:58:37.816" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:38.973">Length is 0</msg>
<msg level="INFO" timestamp="20170810 03:58:38.973">${length} = 0</msg>
<status endtime="20170810 03:58:38.973" starttime="20170810 03:58:38.973" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:38.973">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 03:58:38.974" starttime="20170810 03:58:38.973" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:38.974" starttime="20170810 03:58:37.816" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/8" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170810 03:58:38.974" starttime="20170810 03:58:38.974" status="PASS"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:38.978">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:58:38.978" starttime="20170810 03:58:38.977" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:38.979">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:58:38.979" starttime="20170810 03:58:38.978" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:38.979">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:58:38.979" starttime="20170810 03:58:38.979" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:38.980">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:58:38.980" starttime="20170810 03:58:38.980" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:39.445">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:58:39.445" starttime="20170810 03:58:38.981" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:39.445">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:58:39.445">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:39.445" starttime="20170810 03:58:38.980" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:39.447">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:39.447" starttime="20170810 03:58:39.446" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:39.448">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:39.448" starttime="20170810 03:58:39.447" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:39.448" starttime="20170810 03:58:38.977" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:39.448" starttime="20170810 03:58:38.976" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:39.448" starttime="20170810 03:58:38.976" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:39.449">${base_uri} = /xyz/openbmc_project/logging/entry/8/attr/AdditionalData</msg>
<status endtime="20170810 03:58:39.449" starttime="20170810 03:58:39.449" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 03:58:39.450" starttime="20170810 03:58:39.450" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:40.040">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/8/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:58:40.040">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:40.040" starttime="20170810 03:58:39.450" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 03:58:40.040" starttime="20170810 03:58:40.040" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:58:40.041">Delete All Sessions</msg>
<status endtime="20170810 03:58:40.041" starttime="20170810 03:58:40.041" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:40.041">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:40.041" starttime="20170810 03:58:38.975" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:40.042">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:40.042" starttime="20170810 03:58:40.041" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:40.042">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 09 10 5b ce ad 00 00 00 09 10 5d 0a af 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 37 90 00 00 37 55 48 00 18 01 00 06 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 24 03 00 48 00 00 00 e0 00 00 02 00 00 00 00 00 00 20 00 00 0f ff fe 00 00 00 00 02 00 00 00 00 00 00 02 00 42 43 38 41 32 34 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 70 00 50 55 44 00 90 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 07 1e b4 00 00 00 00 00 07 25 dc 00 00 00 00 00 07 28 24 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 64 54 00 00 00 00 00 07 ad e4 00 00 00 00 00 07 b6 6c 00 00 00 00 00 07 b7 9c 00 00 00 00 00 07 bc 90 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 66 b0 00 00 00 00 00 07 61 14 00 00 00 00 00 07 71 20 00 00 00 00 00 07 81 88 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 ec 01 15 31 00 01 28 00 42 50 4e 4f 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 e4 00 00 00 00 00 00 03 e4 00 00 00 17 00 00 00 00 00 00 00 4b 0f cb 71 87 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 4e 00 00 00 00 00 24 00 00 00 4b 0f cb 7e 85 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 0f cb 8b d5 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f e0 00 00 00 00 00 24 00 00 00 4b 0d f1 bb 07 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4b 0d f1 c8 b5 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 22 20 00 00 00 00 00 01 22 22 00 00 00 00 00 00 00 20 00 00 00 00 3c 00 00 00 4b 0d f1 d8 d6 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4b 0d f2 48 0c 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4b 21 13 ba 2c 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4b 21 14 47 d4 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c6 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4b 21 14 5a d1 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4b 21 14 68 aa 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 22 10 00 00 00 00 24 00 00 00 4b 21 14 75 b6 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 21 14 83 0e 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0c 60 00 00 00 00 00 24 00 00 00 4b 38 43 6d de 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4b 38 43 80 38 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 32 10 00 00 00 00 00 01 32 10 00 00 00 00 00 00 00 10 00 00 00 00 3c 00 00 00 4b 38 43 92 f1 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4b 38 43 fe 76 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4b 38 f3 00 5f 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4b 38 f3 82 87 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 15 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4b 38 f3 95 36 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4b 38 f3 a4 58 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 32 10 00 00 00 00 24 00 00 00 4b 38 f3 b1 bb 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 38 f3 bf de 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f f0 00 00 00 00 00 24"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:58:40.043">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:58:40.043">${content} = {u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 09 10 5b ce ad 00 00 00 09 10 5d 0a ...</msg>
<status endtime="20170810 03:58:40.043" starttime="20170810 03:58:40.042" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:40.043">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 09 10 5b ce ad 00 00 00 09 10 5d 0a af 42 00 0...</msg>
<status endtime="20170810 03:58:40.043" starttime="20170810 03:58:38.975" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:40.044">Length is 2</msg>
<msg level="INFO" timestamp="20170810 03:58:40.044">${length} = 2</msg>
<status endtime="20170810 03:58:40.044" starttime="20170810 03:58:40.044" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170810 03:58:40.045" starttime="20170810 03:58:40.044" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Esel Index">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:40.045">${index} = 1</msg>
<status endtime="20170810 03:58:40.045" starttime="20170810 03:58:40.045" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:58:40.046">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_esel"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 03:58:40.046" starttime="20170810 03:58:40.046" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:40.047" starttime="20170810 03:58:40.045" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:58:40.048">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_esel"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 03:58:40.048" starttime="20170810 03:58:40.047" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:40.048" starttime="20170810 03:58:40.047" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:40.048" starttime="20170810 03:58:38.974" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/8/callout" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:40.050">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 03:58:40.050" starttime="20170810 03:58:40.048" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:40.050" starttime="20170810 03:58:40.048" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/9" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170810 03:58:40.051" starttime="20170810 03:58:40.050" status="PASS"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:40.055">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:58:40.056" starttime="20170810 03:58:40.055" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:40.057">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:58:40.057" starttime="20170810 03:58:40.056" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:40.058">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:58:40.058" starttime="20170810 03:58:40.057" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:40.059">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:58:40.059" starttime="20170810 03:58:40.058" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:40.565">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:58:40.566" starttime="20170810 03:58:40.060" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:40.566">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:58:40.566">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:40.566" starttime="20170810 03:58:40.059" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:40.566">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:40.566" starttime="20170810 03:58:40.566" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:40.567">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:40.567" starttime="20170810 03:58:40.567" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:40.567" starttime="20170810 03:58:40.054" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:40.567" starttime="20170810 03:58:40.053" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:40.568" starttime="20170810 03:58:40.052" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:40.568">${base_uri} = /xyz/openbmc_project/logging/entry/9/attr/AdditionalData</msg>
<status endtime="20170810 03:58:40.568" starttime="20170810 03:58:40.568" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 03:58:40.569" starttime="20170810 03:58:40.568" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:41.127">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/9/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:58:41.127">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:41.127" starttime="20170810 03:58:40.569" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 03:58:41.128" starttime="20170810 03:58:41.127" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:58:41.128">Delete All Sessions</msg>
<status endtime="20170810 03:58:41.128" starttime="20170810 03:58:41.128" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:41.128">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:41.128" starttime="20170810 03:58:40.051" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:41.129">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:41.129" starttime="20170810 03:58:41.129" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:41.130">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 09 10 77 4a 9a 00 00 00 09 1b 2c 36 8f 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 38 90 00 00 38 55 48 00 18 01 00 05 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 05 06 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 01 b3 00 00 00 00 00 00 00 01 42 43 38 41 30 35 30 36 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 70 00 50 55 44 01 08 01 07 01 00 20 70 69 31 75 70 20 70 33 72 20 64 34 20 69 6f 20 64 6f 6e 65 0a 32 6e 72 65 31 20 0a 33 32 31 35 33 20 32 64 6f 20 6e 64 65 0a 6f 6e 65 0a 4c 6f 61 64 69 6e 67 20 50 4e 4f 52 20 73 65 63 74 69 6f 6e 20 36 20 28 50 41 59 4c 4f 41 44 29 20 31 30 34 38 35 37 36 20 62 79 74 65 73 20 40 30 78 30 0a 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 0d 55 6e 68 61 6e 64 6c 65 64 20 6d 73 67 20 72 63 20 34 32 39 34 39 36 37 32 39 31 20 28 2d 45 49 4f 29 20 66 6f 72 20 6b 65 79 20 30 78 38 31 30 31 61 30 30 30 20 6f 6e 20 74 61 73 6b 20 34 33 35 20 40 20 30 78 32 36 62 66 30 0a 55 44 00 3c 01 01 01 00 68 6f 73 74 5f 72 75 6e 74 69 6d 65 5f 73 65 74 75 70 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 55 44 00 48 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 06 64 40 00 00 00 00 40 2b 97 10 00 00 00 00 40 2b 9f 10 00 00 00 00 40 2b ae 30 00 00 00 00 40 2b b1 2c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:58:41.130">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170810 03:58:41.130">${content} = {u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 09 10 77 4a 9a 00 00 00 09 1b 2c 36 ...</msg>
<status endtime="20170810 03:58:41.130" starttime="20170810 03:58:41.129" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:41.130">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 09 10 77 4a 9a 00 00 00 09 1b 2c 36 8f 42 00 0...</msg>
<status endtime="20170810 03:58:41.130" starttime="20170810 03:58:40.051" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:41.131">Length is 2</msg>
<msg level="INFO" timestamp="20170810 03:58:41.131">${length} = 2</msg>
<status endtime="20170810 03:58:41.131" starttime="20170810 03:58:41.131" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170810 03:58:41.132" starttime="20170810 03:58:41.131" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Esel Index">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:41.132">${index} = 1</msg>
<status endtime="20170810 03:58:41.132" starttime="20170810 03:58:41.132" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:58:41.134">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_esel"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 03:58:41.134" starttime="20170810 03:58:41.133" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:41.134" starttime="20170810 03:58:41.132" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:58:41.135">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_esel"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 03:58:41.135" starttime="20170810 03:58:41.134" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:41.135" starttime="20170810 03:58:41.134" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:41.135" starttime="20170810 03:58:40.050" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/9/callout" type="foritem">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:41.136">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 03:58:41.136" starttime="20170810 03:58:41.135" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:41.136" starttime="20170810 03:58:41.135" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:41.136" starttime="20170810 03:58:28.343" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:41.151">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170810 03:58:41.171">${out} = </msg>
<status endtime="20170810 03:58:41.171" starttime="20170810 03:58:41.136" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg level="FAIL" timestamp="20170810 03:58:41.188">'' does not contain 'eSEL.pl'</msg>
<status endtime="20170810 03:58:41.188" starttime="20170810 03:58:41.185" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:41.188">${status} = False</msg>
<status endtime="20170810 03:58:41.188" starttime="20170810 03:58:41.182" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:41.189">Returning from the enclosing user keyword.</msg>
<status endtime="20170810 03:58:41.189" starttime="20170810 03:58:41.188" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:41.191" starttime="20170810 03:58:25.359" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:41.193" starttime="20170810 03:58:25.335" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:41.194" starttime="20170810 03:58:25.332" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:41.194" starttime="20170810 03:58:25.332" status="PASS"></status>
</kw>
<kw name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170810 03:58:41.198" starttime="20170810 03:58:41.198" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:41.198">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:58:41.198">${ret_values} = None</msg>
<status endtime="20170810 03:58:41.198" starttime="20170810 03:58:41.197" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170810 03:58:41.200" starttime="20170810 03:58:41.199" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Get Requests">
<doc>Get the command list and iterate</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:41.236">@{entries} = [ GET REQUESTS ]</msg>
<status endtime="20170810 03:58:41.236" starttime="20170810 03:58:41.235" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = GET REQUESTS" type="foritem">
<kw library="openbmc_ffdc_methods" name="Log FFDC Get Requests">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:41.237">@{cmd_list} = [ ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/org/openbmc/records/events/enumerate') | ('BMC_sensor_list', ...</msg>
<status endtime="20170810 03:58:41.237" starttime="20170810 03:58:41.237" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:41.239">${logpath} = /tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_record_log.txt</msg>
<status endtime="20170810 03:58:41.239" starttime="20170810 03:58:41.239" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:41.242">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:58:41.245" starttime="20170810 03:58:41.242" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:41.246">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:58:41.246" starttime="20170810 03:58:41.246" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:41.247">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:58:41.247" starttime="20170810 03:58:41.246" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:41.247">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:58:41.248" starttime="20170810 03:58:41.247" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:41.435">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:58:41.435" starttime="20170810 03:58:41.248" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:41.435">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:58:41.435">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:41.436" starttime="20170810 03:58:41.248" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:41.436">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:41.436" starttime="20170810 03:58:41.436" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:41.437">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:41.437" starttime="20170810 03:58:41.436" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:41.437" starttime="20170810 03:58:41.241" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:41.437" starttime="20170810 03:58:41.241" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:41.437" starttime="20170810 03:58:41.240" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:41.438">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status endtime="20170810 03:58:41.438" starttime="20170810 03:58:41.437" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 03:58:41.438" starttime="20170810 03:58:41.438" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:42.194">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:58:42.194">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170810 03:58:42.194" starttime="20170810 03:58:41.439" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 03:58:42.195" starttime="20170810 03:58:42.195" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:58:42.196">Delete All Sessions</msg>
<status endtime="20170810 03:58:42.196" starttime="20170810 03:58:42.195" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:42.196">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170810 03:58:42.196" starttime="20170810 03:58:41.239" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:42.197">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170810 03:58:42.197">404 != 200</msg>
<status endtime="20170810 03:58:42.197" starttime="20170810 03:58:42.197" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:42.197">${status} = False</msg>
<status endtime="20170810 03:58:42.197" starttime="20170810 03:58:42.196" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170810 03:58:42.198">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 03:58:42.198" starttime="20170810 03:58:42.198" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:42.198" starttime="20170810 03:58:42.198" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:42.198" starttime="20170810 03:58:41.238" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:42.199">${logpath} = /tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_inventory.txt</msg>
<status endtime="20170810 03:58:42.199" starttime="20170810 03:58:42.199" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:42.202">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:58:42.202" starttime="20170810 03:58:42.202" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:42.203">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:58:42.203" starttime="20170810 03:58:42.202" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:42.203">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:58:42.203" starttime="20170810 03:58:42.203" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:42.204">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:58:42.204" starttime="20170810 03:58:42.204" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:42.387">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:58:42.387" starttime="20170810 03:58:42.205" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:42.387">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:58:42.387">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:42.387" starttime="20170810 03:58:42.204" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:42.388">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:42.388" starttime="20170810 03:58:42.388" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:42.389">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:42.389" starttime="20170810 03:58:42.388" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:42.389" starttime="20170810 03:58:42.201" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:42.389" starttime="20170810 03:58:42.201" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:42.389" starttime="20170810 03:58:42.200" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:42.390">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status endtime="20170810 03:58:42.390" starttime="20170810 03:58:42.389" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 03:58:42.391" starttime="20170810 03:58:42.390" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:49.187">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:58:49.188">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:49.188" starttime="20170810 03:58:42.391" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 03:58:49.188" starttime="20170810 03:58:49.188" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:58:49.189">Delete All Sessions</msg>
<status endtime="20170810 03:58:49.189" starttime="20170810 03:58:49.189" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:49.189">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:49.189" starttime="20170810 03:58:42.199" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:49.190">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:49.190" starttime="20170810 03:58:49.190" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:49.190">${status} = True</msg>
<status endtime="20170810 03:58:49.190" starttime="20170810 03:58:49.189" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170810 03:58:49.191" starttime="20170810 03:58:49.191" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:49.194">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "0000000000000000", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "", 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK525         ", 
      "Present": 0, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "Y230UF72R00C    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL982", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933815990", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL982", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933817514", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0d83", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e72", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e9a", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e66", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e88", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0dad", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e8f", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e9d", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0daf", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0dc7", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e95", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0ec3", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0db6", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0ebf", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0da9", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e73", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }, 
    "/xyz/openbmc_project/inventory/system/fault": {
      "endpoints": [
        "/xyz/openbmc_project/logging/entry/12", 
        "/xyz/openbmc_project/logging/entry/11", 
        "/xyz/openbmc_project/logging/entry/9", 
        "/xyz/openbmc_project/logging/entry/8", 
        "/xyz/openbmc_project/logging/entry/6", 
        "/xyz/openbmc_project/logging/entry/5", 
        "/xyz/openbmc_project/logging/entry/4"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:58:49.195">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170810 03:58:49.195">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Manufacturer": "",
            ...</msg>
<status endtime="20170810 03:58:49.195" starttime="20170810 03:58:49.191" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:58:49.197">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_inventory.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:58:49.197" starttime="20170810 03:58:49.196" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:49.197" starttime="20170810 03:58:49.195" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:49.197" starttime="20170810 03:58:42.198" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:49.198">${logpath} = /tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_led.txt</msg>
<status endtime="20170810 03:58:49.198" starttime="20170810 03:58:49.198" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:49.201">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:58:49.201" starttime="20170810 03:58:49.200" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:49.202">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:58:49.202" starttime="20170810 03:58:49.201" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:49.202">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:58:49.202" starttime="20170810 03:58:49.202" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:49.203">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:58:49.203" starttime="20170810 03:58:49.203" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:49.675">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:58:49.675" starttime="20170810 03:58:49.204" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:49.675">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:58:49.675">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:49.675" starttime="20170810 03:58:49.203" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:49.676">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:49.676" starttime="20170810 03:58:49.675" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:49.677">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:49.677" starttime="20170810 03:58:49.676" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:49.677" starttime="20170810 03:58:49.200" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:49.677" starttime="20170810 03:58:49.199" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:49.677" starttime="20170810 03:58:49.199" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:49.677">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status endtime="20170810 03:58:49.678" starttime="20170810 03:58:49.677" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 03:58:49.678" starttime="20170810 03:58:49.678" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:49.977">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:58:49.977">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170810 03:58:49.978" starttime="20170810 03:58:49.678" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 03:58:49.978" starttime="20170810 03:58:49.978" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:58:49.979">Delete All Sessions</msg>
<status endtime="20170810 03:58:49.979" starttime="20170810 03:58:49.978" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:49.979">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170810 03:58:49.979" starttime="20170810 03:58:49.198" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:49.980">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170810 03:58:49.980">404 != 200</msg>
<status endtime="20170810 03:58:49.980" starttime="20170810 03:58:49.980" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:49.980">${status} = False</msg>
<status endtime="20170810 03:58:49.980" starttime="20170810 03:58:49.979" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170810 03:58:49.981">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 03:58:49.981" starttime="20170810 03:58:49.981" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:49.982" starttime="20170810 03:58:49.981" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:49.982" starttime="20170810 03:58:49.197" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:49.982">${logpath} = /tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_sensor_list.txt</msg>
<status endtime="20170810 03:58:49.982" starttime="20170810 03:58:49.982" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:49.985">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:58:49.985" starttime="20170810 03:58:49.985" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:49.986">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:58:49.986" starttime="20170810 03:58:49.986" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:49.986">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:58:49.987" starttime="20170810 03:58:49.986" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:49.987">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:58:49.987" starttime="20170810 03:58:49.987" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:50.273">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:58:50.273" starttime="20170810 03:58:49.988" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:50.273">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:58:50.273">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:50.273" starttime="20170810 03:58:49.987" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:50.274">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:50.274" starttime="20170810 03:58:50.273" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:50.274">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:50.275" starttime="20170810 03:58:50.274" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:50.275" starttime="20170810 03:58:49.984" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:50.275" starttime="20170810 03:58:49.984" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:50.275" starttime="20170810 03:58:49.983" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:50.276">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status endtime="20170810 03:58:50.276" starttime="20170810 03:58:50.275" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 03:58:50.277" starttime="20170810 03:58:50.276" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:52.044">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:58:52.045">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:52.045" starttime="20170810 03:58:50.277" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 03:58:52.045" starttime="20170810 03:58:52.045" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:58:52.046">Delete All Sessions</msg>
<status endtime="20170810 03:58:52.046" starttime="20170810 03:58:52.046" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:52.046">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:52.046" starttime="20170810 03:58:49.982" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:52.047">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:52.047" starttime="20170810 03:58:52.047" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:52.047">${status} = True</msg>
<status endtime="20170810 03:58:52.047" starttime="20170810 03:58:52.046" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170810 03:58:52.048" starttime="20170810 03:58:52.048" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:52.049">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:58:52.049">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170810 03:58:52.049">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status endtime="20170810 03:58:52.049" starttime="20170810 03:58:52.048" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:58:52.050">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_sensor_list.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:58:52.050" starttime="20170810 03:58:52.050" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:52.051" starttime="20170810 03:58:52.049" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:52.051" starttime="20170810 03:58:49.982" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:52.051">${logpath} = /tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_elog.txt</msg>
<status endtime="20170810 03:58:52.051" starttime="20170810 03:58:52.051" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:52.055">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 03:58:52.055" starttime="20170810 03:58:52.054" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:52.056">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 03:58:52.056" starttime="20170810 03:58:52.055" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:52.056">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 03:58:52.056" starttime="20170810 03:58:52.056" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:52.057">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 03:58:52.057" starttime="20170810 03:58:52.057" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:52.391">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 03:58:52.391" starttime="20170810 03:58:52.058" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:52.392">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:58:52.392">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:52.392" starttime="20170810 03:58:52.057" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:52.392">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:52.392" starttime="20170810 03:58:52.392" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:52.393">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:52.393" starttime="20170810 03:58:52.393" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:52.393" starttime="20170810 03:58:52.053" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:52.393" starttime="20170810 03:58:52.053" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:52.393" starttime="20170810 03:58:52.052" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:52.394">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status endtime="20170810 03:58:52.394" starttime="20170810 03:58:52.394" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 03:58:52.395" starttime="20170810 03:58:52.394" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:54.959">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170810 03:58:54.959">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:54.959" starttime="20170810 03:58:52.395" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 03:58:54.960" starttime="20170810 03:58:54.959" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170810 03:58:54.960">Delete All Sessions</msg>
<status endtime="20170810 03:58:54.960" starttime="20170810 03:58:54.960" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:54.960">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 03:58:54.960" starttime="20170810 03:58:52.051" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:54.961">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 03:58:54.962" starttime="20170810 03:58:54.961" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:54.962">${status} = True</msg>
<status endtime="20170810 03:58:54.962" starttime="20170810 03:58:54.961" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170810 03:58:54.962" starttime="20170810 03:58:54.962" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:54.965">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/10": {
      "AdditionalData": [], 
      "Id": 10, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775747880, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/11": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 09 06 89 19 d2 00 00 00 09 06 8a 6b 0a 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 4a 90 00 00 4a 55 48 00 18 01 00 06 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 24 03 00 48 00 00 00 e0 00 00 02 00 00 00 00 00 00 20 00 00 0f ff fe 00 00 00 00 02 00 00 00 00 00 00 02 00 42 43 38 41 32 34 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 00 00 00 55 44 00 90 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 07 1e b4 00 00 00 00 00 07 25 dc 00 00 00 00 00 07 28 24 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 64 54 00 00 00 00 00 07 ad e4 00 00 00 00 00 07 b6 6c 00 00 00 00 00 07 b7 9c 00 00 00 00 00 07 bc 90 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 66 b0 00 00 00 00 00 07 61 14 00 00 00 00 00 07 71 20 00 00 00 00 00 07 81 88 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 ec 01 15 31 00 01 28 00 42 50 4e 4f 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 e4 00 00 00 00 00 00 03 e4 00 00 00 17 00 00 00 00 00 00 00 4b 09 65 cc 4e 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 4e 00 00 00 00 00 24 00 00 00 4b 09 65 d9 16 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 09 65 e5 58 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f e0 00 00 00 00 00 24 00 00 00 4b 09 7f ed fb 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4b 09 7f fc 16 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 22 20 00 00 00 00 00 01 22 22 00 00 00 00 00 00 00 20 00 00 00 00 3c 00 00 00 4b 09 80 0c 20 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4b 09 80 78 65 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4b 09 83 82 f1 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4b 09 84 04 dd 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c6 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4b 09 84 17 6f 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4b 09 84 24 81 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 22 10 00 00 00 00 24 00 00 00 4b 09 84 31 0a 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 09 84 3d cd 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0c 60 00 00 00 00 00 24 00 00 00 4b 0d e5 ae 24 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4b 0d e5 c3 aa 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 32 10 00 00 00 00 00 01 32 10 00 00 00 00 00 00 00 10 00 00 00 00 3c 00 00 00 4b 0d e5 d4 69 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4b 0d e6 4a 72 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4b 12 4e b4 47 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4b 12 4f 41 28 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4b 12 4f 55 06 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4b 12 4f 63 84 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 32 10 00 00 00 00 24 00 00 00 4b 12 4f 70 58 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 12 4f 7d a0 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f f0 00 00 00 00 00 24"
      ], 
      "Id": 11, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775875485, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/11/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/12": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 09 05 af 06 8a 00 00 00 09 07 99 fa 1f 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 4b 90 00 00 4b 55 48 00 18 01 00 05 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 05 06 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 01 b3 00 00 00 00 00 00 00 01 42 43 38 41 30 35 30 36 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 00 00 00 55 44 01 08 01 07 01 00 57 20 32 6b 72 20 75 70 20 32 31 70 33 34 20 64 6f 69 31 64 72 20 6f 6e 32 31 33 6e 65 33 35 32 20 64 6f 6e 20 65 0a 64 0a 65 6f 0a 6e 65 0a 4c 6f 61 64 69 6e 67 20 50 4e 4f 52 20 73 65 63 74 69 6f 6e 20 36 20 28 50 41 59 4c 4f 41 44 29 20 31 30 34 38 35 37 36 20 62 79 74 65 73 20 40 30 78 30 0a 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 0d 55 6e 68 61 6e 64 6c 65 64 20 6d 73 67 20 72 63 20 34 32 39 34 39 36 37 32 39 31 20 28 2d 45 49 4f 29 20 66 6f 72 20 6b 65 79 20 30 78 38 31 30 31 61 30 30 30 20 6f 6e 20 74 61 73 6b 20 34 33 35 20 40 20 30 78 32 36 62 66 30 0a 55 44 00 3c 01 01 01 00 68 6f 73 74 5f 72 75 6e 74 69 6d 65 5f 73 65 74 75 70 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 55 44 00 48 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 06 64 40 00 00 00 00 40 2b 97 10 00 00 00 00 40 2b 9f 10 00 00 00 00 40 2b ae 30 00 00 00 00 40 2b b1 2c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 12, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775877324, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/12/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/13": {
      "AdditionalData": [], 
      "Id": 13, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775883661, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775115423, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775046407, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 25 00 00 00 00 10 fc f4 49 26 00 00 00 10 fc f4 fe 4d 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 12 90 00 00 12 55 48 00 18 01 00 22 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 25 07 00 48 00 00 00 e0 00 00 03 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 00 cb 00 00 00 07 00 00 00 00 42 43 38 41 32 35 30 37 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 40 4e c3 4c 00 00 00 00 40 4e c5 4c 00 00 00 00 40 4e ce d0 00 00 00 00 40 3f 1f 38 00 00 00 00 40 3f 2d 7c 00 00 00 00 40 0b 65 b0 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 e4 01 15 31 00 01 28 00 42 49 50 4d 49 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 11 00 00 00 00 00 00 00 5b 2e 9a 72 9c 00 00 00 84 00 10 43 4f 8d 9a 22 cc 00 00 00 96 00 00 00 00 00 00 00 38 00 00 00 00 00 00 00 a8 00 00 00 2c 00 00 00 5b 2e 9a c2 1b 00 00 00 84 00 10 43 4f 13 70 70 70 00 00 03 de 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 12 00 00 00 2c 00 00 00 5b 2e 9c 7e d3 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 89 00 00 00 00 00 00 00 3b 00 00 00 00 00 00 00 44 00 00 00 5b 34 90 46 28 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 2c 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 89 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 5b 34 90 73 7a 00 00 00 84 00 10 43 4f 8d 9a 22 cc 00 00 00 96 00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 e0 00 00 00 2c 00 00 00 5b 34 90 c2 e8 00 00 00 84 00 10 43 4f 13 70 70 70 00 00 03 de 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 12 00 00 00 2c 00 00 00 5b 34 91 e5 73 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 8a 00 00 00 00 00 00 00 23 00 00 00 00 00 00 00 44 00 00 00 5b 3a 86 51 d0 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 2c 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00 8a 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 8e 0d 8e d4 95 00 00 00 c7 00 10 43 4f 44 ff d1 f1 00 00 04 1d 00 00 00 00 00 00 00 18 00 00 00 00 00 00 00 22 00 00 00 2c 00 00 00 8e 0d ae 0d 65 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 18 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00 8b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 44 00 00 00 8e 0d d4 ca db 00 00 00 c7 00 10 43 4f 13 70 70 70 00 00 03 de 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 2d 00 00 00 2c 00 00 00 8e 18 3a ad 93 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 22 00 00 00 00 00 00 00 8b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c 00 00 00 8e 18 3b 10 a2 00 00 00 45 00 24 43 4f 52 bf 9a e7 00 00 01 58 6f 6b 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 2d 00 00 00 00 00 00 00 8c 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 44 00 00 00 8e 1e 30 ba 33 00 00 00 45 00 2c 43 4f 3c d7 f3 d7 00 00 01 a9 6f 6b 00 00 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 2d 00 00 00 00 00 00 00 8c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 cb 00 00 00 00 00 00 00 4c 00 00 00 8e 1e 30 e2 fe 00 00 00 c7 00 08 43 4f f8 d7 6e 14 00 00 00 52 00 00 00 00 00 00 00 cb 00 00 00 24 00 00 00 8e 1e 30 f0 56 00 00 00 c7 00 00 43 4f 91 46 a7 43 00 00 00 96 00 00 00 1c 00 00 00 8e 1e 31 01 29 00 00 00 c7 00 10 43 4f 48 93 e8 7c 00 00 00 b2 00 00 00 00 00 00 00 07 00 00 00 00 00 00 00 00 00 00 00 2c 80 00 04 04 07 01 10 3f 00 00 00 00 00 00 c0 c0 80 00 08 04 07 01 10 3f 00 00 00 00 00 00 0f 00 80 00 0c 04 07 01 10 3f 00 00 00 00 00 00 c3 00 80 00 10 04 07 01 10 3f 00 00 00 00 00 00 c0 00 7e 60 00 00 00 7f e4 fb 78 8d eb c2 f8 e0 3d 20 00 8c 1e fb a1 00 70 61 29 0d 84 00 fb a1 00 78 7f c3 f3 78 4a 91 21 56 00 00 00 00 00 00 00 08 00 00 00 00 00 85 09 d0 00 00 00 00 00 00 86 40 80 00 04 05 07 01 10 3f 00 00 00 00 00 00 86 40 80 00 08 05 07 01 10 3f 00 00 00 00 00 00 86 40 80 00 0c 05 07 01 10 3f 00 00 00 00 00 00 86 40 80 00 10 05 07 01 10 3f 00 00 00 00 00 00 86 40 80 00 00 01 07 01 10 3f 00 00 00 00 00 00 00 00 80 00 04 01 07 01 10 3f 00 00 00 00 00 00 00 00 00 28 5c 39 20 00 01 56 00 00 00 00 00 00 00 03 00 00 00 00 00 85 0b a0 00 00 00 00 40 65 94 88 00 00 00 00 00 00 00 00 00 00 00 00 00 85 0b a8 00 00 00 00 00 9d 77 68 00 00 00 00 00 00 86 40 80 00 0c 05 07 01 10 3f 00 00 00 00 00 00 86 40 21 00 87 7a 39 20 00 56 00 00 00 00 00 00 00 06 00 00 00 00 00 85 0d c0 00 00 00 00 07 01 23 59 00 00 00 00 07 01 23 5a 00 00 00 00 07 01 23 5b 00 00 00 00 07 01 23 5c 00 00 00 00 07 01 23 5d 00 00 00 00 07 01 23 5e 00 00 00 00 07 01 23 5f 00 00 00 00 07 01 23 60 00 00 00 00 00 00 ff ff 80 00 00 01 07 01 10 3f 00 00 00 00 00 00 00 00 4b f8 7b 61 e8 41 00 28 6f 2f a3 00 00 41 9e 07 e4 ae 7f e3 fb 78 4b 56 00 00 00 00 00 00 00 03 00 00 00 00 00 85 09 80 00 00 00 00 40 65 94 a0 00 00 00 00 00 00 00 00 00 00 00 00 00 85 09 88 00 00 00 00 00 9d 77 68 3c 82 00 01 7f 87 e3 78 ad 38 c0 00 00 38 84 e6 9c 8f 7f 03 c3 78 38 a0 01 b8 85 4b f8 75 c9 56 00 00 00 00 00 00 00 04 00 00 00 00 00 85 0d 40 80 00 00 a4 07 01 10 3f 80 00 00 a5 07 01 10 3f 80 00 04 a4 07 01 10 3f 80 00 04 a5 07 01 10 3f 80 00 08 a4 07 01 10 3f 80 00 08 a5 07 01 10 3f 80 00 0c a4 07 01 10 3f 80 00 0c a5 07 01 10 3f 80 00 10 a4 07 01 10 3f 90 91 3e 00 20 bf 4b f8 75 f1 e8 41 00 28 d6 48 00 03 6c 60 42 00 00 41 60 00 00 00 e8 79 00 00 7c 7f e9 fb 78 e8 82 56 00 00 00 00 00 00 00 06 00 00 00 00 00 85 0e 90 00 00 00 00 00 00 ff ff 80 00 04 00 07 01 10 3f 00 00 00 00 00 00 ff ff 80 00 08 00 07 01 10 3f 00 00 00 00 00 00 ff ff 80 00 0c 00 07 01 10 3f 00 00 00 00 00 00 ff ff"
      ], 
      "Id": 4, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775487835, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/4/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 09 22 8c b0 48 00 00 00 09 22 8d f8 16 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 24 90 00 00 24 55 48 00 18 01 00 06 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 24 03 00 48 00 00 00 e0 00 00 02 00 00 00 00 00 00 20 00 00 0f ff fe 00 00 00 00 02 00 00 00 00 00 00 02 00 42 43 38 41 32 34 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 00 00 00 55 44 00 90 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 07 1e b4 00 00 00 00 00 07 25 dc 00 00 00 00 00 07 28 24 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 64 54 00 00 00 00 00 07 ad e4 00 00 00 00 00 07 b6 6c 00 00 00 00 00 07 b7 9c 00 00 00 00 00 07 bc 90 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 66 b0 00 00 00 00 00 07 61 14 00 00 00 00 00 07 71 20 00 00 00 00 00 07 81 88 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 ec 01 15 31 00 01 28 00 42 50 4e 4f 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 e4 00 00 00 00 00 00 03 e4 00 00 00 17 00 00 00 00 00 00 00 4b 24 af bb e7 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 4e 00 00 00 00 00 24 00 00 00 4b 24 af c8 6a 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 24 af d5 99 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f e0 00 00 00 00 00 24 00 00 00 4b 24 c9 cc bd 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4b 24 c9 da 27 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 22 20 00 00 00 00 00 01 22 22 00 00 00 00 00 00 00 20 00 00 00 00 3c 00 00 00 4b 24 c9 ea 25 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4b 24 ca 54 54 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4b 24 cd 16 8f 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4b 24 cd 98 58 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 32 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c6 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4b 24 cd ab 34 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4b 24 cd b8 4b 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 22 10 00 00 00 00 24 00 00 00 4b 24 cd c4 cd 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 24 cd d1 da 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0c 60 00 00 00 00 00 24 00 00 00 4c 00 83 7a 24 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4c 00 83 8d 56 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 32 10 00 00 00 00 00 01 32 10 00 00 00 00 00 00 00 10 00 00 00 00 3c 00 00 00 4c 00 83 9d 21 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4c 00 84 09 e7 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4c 0d a7 31 db 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4c 0d a7 b9 8a 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 33 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4c 0d a7 cd a8 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4c 0d a7 dc e9 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 32 10 00 00 00 00 24 00 00 00 4c 0d a7 e9 6a 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4c 0d a7 f6 50 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f f0 00 00 00 00 00 24"
      ], 
      "Id": 5, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775607402, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/5/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 09 22 8e 17 4a 00 00 00 09 18 d3 37 ad 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 25 90 00 00 25 55 48 00 18 01 00 05 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 05 06 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 01 b3 00 00 00 00 00 00 00 01 42 43 38 41 30 35 30 36 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 00 00 40 55 44 01 08 01 07 01 00 32 31 6b 33 75 70 34 20 20 70 69 64 57 6f 72 6b 6e 75 20 70 65 20 0a 32 70 31 69 33 72 35 20 20 32 64 31 6f 33 33 6e 20 65 64 0a 6f 6e 65 0a 4c 6f 61 64 69 6e 67 20 50 4e 4f 52 20 73 65 63 74 69 6f 6e 20 36 20 28 50 41 59 4c 4f 41 44 29 20 31 30 34 38 35 37 36 20 62 79 74 65 73 20 40 30 78 30 0a 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 0d 55 6e 68 61 6e 64 6c 65 64 20 6d 73 67 20 72 63 20 34 32 39 34 39 36 37 32 39 31 20 28 2d 45 49 4f 29 20 66 6f 72 20 6b 65 79 20 30 78 38 31 30 31 61 30 30 30 20 6f 6e 20 74 61 73 6b 20 34 33 35 20 40 20 30 78 32 36 62 66 30 0a 55 44 00 3c 01 01 01 00 68 6f 73 74 5f 72 75 6e 74 69 6d 65 5f 73 65 74 75 70 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 55 44 00 48 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 06 64 40 00 00 00 00 40 2b 97 10 00 00 00 00 40 2b 9f 10 00 00 00 00 40 2b ae 30 00 00 00 00 40 2b b1 2c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 6, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775609149, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/6/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/7": {
      "AdditionalData": [], 
      "Id": 7, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775615630, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/8": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 09 10 5b ce ad 00 00 00 09 10 5d 0a af 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 37 90 00 00 37 55 48 00 18 01 00 06 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 24 03 00 48 00 00 00 e0 00 00 02 00 00 00 00 00 00 20 00 00 0f ff fe 00 00 00 00 02 00 00 00 00 00 00 02 00 42 43 38 41 32 34 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 70 00 50 55 44 00 90 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 07 1e b4 00 00 00 00 00 07 25 dc 00 00 00 00 00 07 28 24 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 64 54 00 00 00 00 00 07 ad e4 00 00 00 00 00 07 b6 6c 00 00 00 00 00 07 b7 9c 00 00 00 00 00 07 bc 90 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 66 b0 00 00 00 00 00 07 61 14 00 00 00 00 00 07 71 20 00 00 00 00 00 07 81 88 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 ec 01 15 31 00 01 28 00 42 50 4e 4f 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 e4 00 00 00 00 00 00 03 e4 00 00 00 17 00 00 00 00 00 00 00 4b 0f cb 71 87 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 4e 00 00 00 00 00 24 00 00 00 4b 0f cb 7e 85 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 0f cb 8b d5 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f e0 00 00 00 00 00 24 00 00 00 4b 0d f1 bb 07 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4b 0d f1 c8 b5 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 22 20 00 00 00 00 00 01 22 22 00 00 00 00 00 00 00 20 00 00 00 00 3c 00 00 00 4b 0d f1 d8 d6 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4b 0d f2 48 0c 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4b 21 13 ba 2c 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4b 21 14 47 d4 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c6 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4b 21 14 5a d1 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4b 21 14 68 aa 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 22 10 00 00 00 00 24 00 00 00 4b 21 14 75 b6 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 21 14 83 0e 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0c 60 00 00 00 00 00 24 00 00 00 4b 38 43 6d de 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4b 38 43 80 38 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 32 10 00 00 00 00 00 01 32 10 00 00 00 00 00 00 00 10 00 00 00 00 3c 00 00 00 4b 38 43 92 f1 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4b 38 43 fe 76 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4b 38 f3 00 5f 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4b 38 f3 82 87 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 15 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4b 38 f3 95 36 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4b 38 f3 a4 58 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 32 10 00 00 00 00 24 00 00 00 4b 38 f3 b1 bb 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 38 f3 bf de 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f f0 00 00 00 00 00 24"
      ], 
      "Id": 8, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775739829, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/8/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/9": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 09 10 77 4a 9a 00 00 00 09 1b 2c 36 8f 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 38 90 00 00 38 55 48 00 18 01 00 05 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 05 06 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 01 b3 00 00 00 00 00 00 00 01 42 43 38 41 30 35 30 36 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 70 00 50 55 44 01 08 01 07 01 00 20 70 69 31 75 70 20 70 33 72 20 64 34 20 69 6f 20 64 6f 6e 65 0a 32 6e 72 65 31 20 0a 33 32 31 35 33 20 32 64 6f 20 6e 64 65 0a 6f 6e 65 0a 4c 6f 61 64 69 6e 67 20 50 4e 4f 52 20 73 65 63 74 69 6f 6e 20 36 20 28 50 41 59 4c 4f 41 44 29 20 31 30 34 38 35 37 36 20 62 79 74 65 73 20 40 30 78 30 0a 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 0d 55 6e 68 61 6e 64 6c 65 64 20 6d 73 67 20 72 63 20 34 32 39 34 39 36 37 32 39 31 20 28 2d 45 49 4f 29 20 66 6f 72 20 6b 65 79 20 30 78 38 31 30 31 61 30 30 30 20 6f 6e 20 74 61 73 6b 20 34 33 35 20 40 20 30 78 32 36 62 66 30 0a 55 44 00 3c 01 01 01 00 68 6f 73 74 5f 72 75 6e 74 69 6d 65 5f 73 65 74 75 70 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 55 44 00 48 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 06 64 40 00 00 00 00 40 2b 97 10 00 00 00 00 40 2b 9f 10 00 00 00 00 40 2b ae 30 00 00 00 00 40 2b b1 2c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 9, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775741654, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/9/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170810 03:58:54.965">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170810 03:58:54.966">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/10": {
            "AdditionalData": [],
            "Id": 10,
            "Message": "org.open_power.Host.Error.Checkstop",
            "Re...</msg>
<status endtime="20170810 03:58:54.966" starttime="20170810 03:58:54.962" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:58:54.968">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_elog.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_elog.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:58:54.968" starttime="20170810 03:58:54.968" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:54.969" starttime="20170810 03:58:54.966" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:54.969" starttime="20170810 03:58:52.051" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:54.969" starttime="20170810 03:58:41.238" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:54.969" starttime="20170810 03:58:41.236" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:54.969" starttime="20170810 03:58:41.236" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:54.969" starttime="20170810 03:58:41.236" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:54.969" starttime="20170810 03:58:41.235" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:54.969" starttime="20170810 03:58:41.200" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:54.969" starttime="20170810 03:58:41.195" status="PASS"></status>
</kw>
<status endtime="20170810 03:58:54.969" starttime="20170810 03:58:41.194" status="PASS"></status>
</kw>
<kw name="${method} = ('BMC Specific Files', 'BMC FFDC Files')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170810 03:58:54.971" starttime="20170810 03:58:54.971" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:58:54.971">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:58:54.971">${ret_values} = None</msg>
<status endtime="20170810 03:58:54.971" starttime="20170810 03:58:54.970" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170810 03:58:54.972" starttime="20170810 03:58:54.971" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc File Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:54.997">@{entries} = [ BMC FILES ]</msg>
<status endtime="20170810 03:58:54.997" starttime="20170810 03:58:54.997" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC FILES" type="foritem">
<kw library="openbmc_ffdc_methods" name="Create File and Write Data">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc File">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:54.999">@{cmd_list} = [ ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_dmesg', 'dmesg') | ('BMC_proc_fd...</msg>
<status endtime="20170810 03:58:54.999" starttime="20170810 03:58:54.998" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:55.000">${logpath} = /tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_journalctl.txt</msg>
<status endtime="20170810 03:58:55.000" starttime="20170810 03:58:54.999" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170810 03:58:55.001" starttime="20170810 03:58:55.001" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:58:55.002">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status endtime="20170810 03:58:55.002" starttime="20170810 03:58:55.001" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:58:55.075">encoding=UTF-8
height=24
prompt=# 
port=22
term_type=vt100
index=1
timeout=25 seconds
host=9.41.166.169
alias=bmc_connection
path_separator=/
newline=

width=80</msg>
<msg level="INFO" timestamp="20170810 03:58:55.076">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20170810 03:59:00.610">Command exited with return code 0.</msg>
<status endtime="20170810 03:59:00.615" starttime="20170810 03:58:55.039" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:59:00.615">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:59:00.620">${ret_values} = (u'-- Logs begin at Thu 2017-08-03 15:42:59 UTC, end at Thu 2017-08-03 15:59:48 UTC. --\nAug 03 15:42:59 witherspoon kernel: Booting Linux on physical CPU 0x0\nAug 03 15:42:59 witherspoon kernel: Linu...</msg>
<status endtime="20170810 03:59:00.620" starttime="20170810 03:58:55.002" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:00.624">${stdout} = -- Logs begin at Thu 2017-08-03 15:42:59 UTC, end at Thu 2017-08-03 15:59:48 UTC. --
Aug 03 15:42:59 witherspoon kernel: Booting Linux on physical CPU 0x0
Aug 03 15:42:59 witherspoon kernel: Linux ver...</msg>
<status endtime="20170810 03:59:00.624" starttime="20170810 03:59:00.622" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:00.624">${stderr} = </msg>
<status endtime="20170810 03:59:00.624" starttime="20170810 03:59:00.624" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:59:00.634">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_journalctl.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:59:00.635" starttime="20170810 03:59:00.632" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:00.635" starttime="20170810 03:59:00.630" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:00.635" starttime="20170810 03:59:00.625" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:00.635" starttime="20170810 03:58:55.000" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:00.635" starttime="20170810 03:58:54.999" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:00.636">${logpath} = /tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_procinfo.txt</msg>
<status endtime="20170810 03:59:00.636" starttime="20170810 03:59:00.635" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170810 03:59:00.637" starttime="20170810 03:59:00.637" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:00.638">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status endtime="20170810 03:59:00.638" starttime="20170810 03:59:00.637" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:59:00.707">encoding=UTF-8
height=24
prompt=# 
port=22
term_type=vt100
index=1
timeout=25 seconds
host=9.41.166.169
alias=bmc_connection
path_separator=/
newline=

width=80</msg>
<msg level="INFO" timestamp="20170810 03:59:00.707">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20170810 03:59:00.895">Command exited with return code 0.</msg>
<status endtime="20170810 03:59:00.895" starttime="20170810 03:59:00.668" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:59:00.895">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:59:00.895">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status endtime="20170810 03:59:00.895" starttime="20170810 03:59:00.638" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:00.896">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status endtime="20170810 03:59:00.896" starttime="20170810 03:59:00.895" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:00.896">${stderr} = </msg>
<status endtime="20170810 03:59:00.896" starttime="20170810 03:59:00.896" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:59:00.903">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_procinfo.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:59:00.903" starttime="20170810 03:59:00.902" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:00.903" starttime="20170810 03:59:00.901" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:00.903" starttime="20170810 03:59:00.896" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:00.903" starttime="20170810 03:59:00.636" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:00.903" starttime="20170810 03:59:00.635" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:00.904">${logpath} = /tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_proc_list.txt</msg>
<status endtime="20170810 03:59:00.904" starttime="20170810 03:59:00.903" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170810 03:59:00.905" starttime="20170810 03:59:00.905" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:00.906">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status endtime="20170810 03:59:00.906" starttime="20170810 03:59:00.905" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:59:00.977">encoding=UTF-8
height=24
prompt=# 
port=22
term_type=vt100
index=1
timeout=25 seconds
host=9.41.166.169
alias=bmc_connection
path_separator=/
newline=

width=80</msg>
<msg level="INFO" timestamp="20170810 03:59:00.977">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20170810 03:59:01.507">Command exited with return code 0.</msg>
<status endtime="20170810 03:59:01.507" starttime="20170810 03:59:00.941" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:59:01.507">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:59:01.508">${ret_values} = (u'Mem: 189604K used, 242652K free, 14900K shrd, 16916K buff, 75444K cached\nCPU: 100% usr   0% sys   0% nic   0% idle   0% io   0% irq   0% sirq\nLoad average: 2.03 1.74 1.17 4/162 3266\n  PID  PPID ...</msg>
<status endtime="20170810 03:59:01.508" starttime="20170810 03:59:00.906" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:01.508">${stdout} = Mem: 189604K used, 242652K free, 14900K shrd, 16916K buff, 75444K cached
CPU: 100% usr   0% sys   0% nic   0% idle   0% io   0% irq   0% sirq
Load average: 2.03 1.74 1.17 4/162 3266
  PID  PPID USER  ...</msg>
<status endtime="20170810 03:59:01.508" starttime="20170810 03:59:01.508" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:01.509">${stderr} = </msg>
<status endtime="20170810 03:59:01.509" starttime="20170810 03:59:01.509" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:59:01.515">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_proc_list.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:59:01.516" starttime="20170810 03:59:01.515" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:01.516" starttime="20170810 03:59:01.514" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:01.516" starttime="20170810 03:59:01.509" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:01.516" starttime="20170810 03:59:00.904" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:01.516" starttime="20170810 03:59:00.903" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:01.517">${logpath} = /tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_meminfo.txt</msg>
<status endtime="20170810 03:59:01.517" starttime="20170810 03:59:01.516" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170810 03:59:01.518" starttime="20170810 03:59:01.518" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:01.519">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status endtime="20170810 03:59:01.519" starttime="20170810 03:59:01.518" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:59:01.586">encoding=UTF-8
height=24
prompt=# 
port=22
term_type=vt100
index=1
timeout=25 seconds
host=9.41.166.169
alias=bmc_connection
path_separator=/
newline=

width=80</msg>
<msg level="INFO" timestamp="20170810 03:59:01.587">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20170810 03:59:01.724">Command exited with return code 0.</msg>
<status endtime="20170810 03:59:01.724" starttime="20170810 03:59:01.551" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:59:01.724">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:59:01.724">${ret_values} = (u'MemTotal:         432256 kB\nMemFree:          242528 kB\nMemAvailable:     318332 kB\nBuffers:           16916 kB\nCached:            75444 kB\nSwapCached:            0 kB\nActive:           13036...</msg>
<status endtime="20170810 03:59:01.724" starttime="20170810 03:59:01.519" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:01.725">${stdout} = MemTotal:         432256 kB
MemFree:          242528 kB
MemAvailable:     318332 kB
Buffers:           16916 kB
Cached:            75444 kB
SwapCached:            0 kB
Active:           130368 kB
Inac...</msg>
<status endtime="20170810 03:59:01.725" starttime="20170810 03:59:01.724" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:01.725">${stderr} = </msg>
<status endtime="20170810 03:59:01.725" starttime="20170810 03:59:01.725" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:59:01.732">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_meminfo.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:59:01.732" starttime="20170810 03:59:01.731" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:01.732" starttime="20170810 03:59:01.731" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:01.732" starttime="20170810 03:59:01.726" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:01.732" starttime="20170810 03:59:01.517" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:01.732" starttime="20170810 03:59:01.516" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_dmesg', 'dmesg')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:01.733">${logpath} = /tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_dmesg.txt</msg>
<status endtime="20170810 03:59:01.733" starttime="20170810 03:59:01.733" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170810 03:59:01.735" starttime="20170810 03:59:01.734" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:01.735">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status endtime="20170810 03:59:01.735" starttime="20170810 03:59:01.735" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:59:01.829">encoding=UTF-8
height=24
prompt=# 
port=22
term_type=vt100
index=1
timeout=25 seconds
host=9.41.166.169
alias=bmc_connection
path_separator=/
newline=

width=80</msg>
<msg level="INFO" timestamp="20170810 03:59:01.830">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20170810 03:59:02.178">Command exited with return code 0.</msg>
<status endtime="20170810 03:59:02.179" starttime="20170810 03:59:01.793" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:59:02.179">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:59:02.179">${ret_values} = (u'[    3.950000] rtc-rv8803 11-0032: rtc core: registered rx8900 as rtc0\n[    3.960000] at24 11-0051: 8192 byte 24c64 EEPROM, writable, 1 bytes/write\n[    3.960000] aspeed-i2c-bus 1e78a400.i2c-bus:...</msg>
<status endtime="20170810 03:59:02.179" starttime="20170810 03:59:01.736" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:02.180">${stdout} = [    3.950000] rtc-rv8803 11-0032: rtc core: registered rx8900 as rtc0
[    3.960000] at24 11-0051: 8192 byte 24c64 EEPROM, writable, 1 bytes/write
[    3.960000] aspeed-i2c-bus 1e78a400.i2c-bus: i2c ...</msg>
<status endtime="20170810 03:59:02.180" starttime="20170810 03:59:02.179" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:02.180">${stderr} = </msg>
<status endtime="20170810 03:59:02.180" starttime="20170810 03:59:02.180" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:59:02.187">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_dmesg.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:59:02.187" starttime="20170810 03:59:02.186" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:02.187" starttime="20170810 03:59:02.186" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:02.187" starttime="20170810 03:59:02.181" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:02.187" starttime="20170810 03:59:01.733" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:02.187" starttime="20170810 03:59:01.733" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:02.188">${logpath} = /tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_proc_fd_active_list.txt</msg>
<status endtime="20170810 03:59:02.188" starttime="20170810 03:59:02.188" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170810 03:59:02.189" starttime="20170810 03:59:02.189" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:02.190">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status endtime="20170810 03:59:02.190" starttime="20170810 03:59:02.190" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:59:02.256">encoding=UTF-8
height=24
prompt=# 
port=22
term_type=vt100
index=1
timeout=25 seconds
host=9.41.166.169
alias=bmc_connection
path_separator=/
newline=

width=80</msg>
<msg level="INFO" timestamp="20170810 03:59:02.257">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg level="INFO" timestamp="20170810 03:59:03.148">Command exited with return code 0.</msg>
<status endtime="20170810 03:59:03.148" starttime="20170810 03:59:02.220" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:59:03.148">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:59:03.150">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Aug  3 15:59 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Aug  3 15:59 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status endtime="20170810 03:59:03.150" starttime="20170810 03:59:02.190" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:03.150">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Aug  3 15:59 0 -&gt; /dev/null
lrwx------    1 root     root            64 Aug  3 15:59 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status endtime="20170810 03:59:03.150" starttime="20170810 03:59:03.150" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:03.151">${stderr} = ls: /proc/3269/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status endtime="20170810 03:59:03.151" starttime="20170810 03:59:03.151" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:59:03.158">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_proc_fd_active_list.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:59:03.158" starttime="20170810 03:59:03.157" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:03.158" starttime="20170810 03:59:03.156" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:03.158" starttime="20170810 03:59:03.151" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:03.158" starttime="20170810 03:59:02.188" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:03.158" starttime="20170810 03:59:02.187" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:03.158" starttime="20170810 03:58:54.999" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:03.158" starttime="20170810 03:58:54.998" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:03.158" starttime="20170810 03:58:54.998" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:03.158" starttime="20170810 03:58:54.998" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:03.159" starttime="20170810 03:58:54.997" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:03.159" starttime="20170810 03:58:54.972" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:03.159" starttime="20170810 03:58:54.969" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:03.159" starttime="20170810 03:58:54.969" status="PASS"></status>
</kw>
<kw name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170810 03:59:03.161" starttime="20170810 03:59:03.160" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:59:03.161">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:59:03.161">${ret_values} = None</msg>
<status endtime="20170810 03:59:03.161" starttime="20170810 03:59:03.160" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170810 03:59:03.161" starttime="20170810 03:59:03.161" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Manifest">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:03.187">@{entries} = [ DRIVER INFO | APPLICATION DATA | BMC DATA ]</msg>
<status endtime="20170810 03:59:03.187" starttime="20170810 03:59:03.186" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = DRIVER INFO" type="foritem">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:03.188">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') ]</msg>
<status endtime="20170810 03:59:03.188" starttime="20170810 03:59:03.188" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:59:03.193">${ENTRY_INDEX} = DRIVER INFO</msg>
<status endtime="20170810 03:59:03.193" starttime="20170810 03:59:03.188" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('FW Level', 'cat /etc/os-release')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:59:03.196">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:59:03.197" starttime="20170810 03:59:03.196" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:03.197" starttime="20170810 03:59:03.195" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:59:03.198">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:59:03.198" starttime="20170810 03:59:03.198" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:03.198" starttime="20170810 03:59:03.197" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:59:03.199">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:59:03.199" starttime="20170810 03:59:03.199" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:03.200" starttime="20170810 03:59:03.198" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:59:03.201">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:59:03.201" starttime="20170810 03:59:03.200" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:03.201" starttime="20170810 03:59:03.200" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:03.201" starttime="20170810 03:59:03.195" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:03.201" starttime="20170810 03:59:03.194" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:03.202">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status endtime="20170810 03:59:03.202" starttime="20170810 03:59:03.201" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:59:03.268">encoding=UTF-8
height=24
prompt=# 
port=22
term_type=vt100
index=1
timeout=25 seconds
host=9.41.166.169
alias=bmc_connection
path_separator=/
newline=

width=80</msg>
<msg level="INFO" timestamp="20170810 03:59:03.268">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20170810 03:59:03.395">Command exited with return code 0.</msg>
<status endtime="20170810 03:59:03.395" starttime="20170810 03:59:03.232" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:59:03.395">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:59:03.395">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.8-212"\nVERSION_ID="v1.99.8-212-gd527973"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status endtime="20170810 03:59:03.395" starttime="20170810 03:59:03.202" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:03.396">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.8-212"
VERSION_ID="v1.99.8-212-gd527973"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status endtime="20170810 03:59:03.396" starttime="20170810 03:59:03.396" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:03.396">${stderr} = </msg>
<status endtime="20170810 03:59:03.396" starttime="20170810 03:59:03.396" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:59:03.406">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:59:03.406" starttime="20170810 03:59:03.405" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:03.406" starttime="20170810 03:59:03.404" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:03.406" starttime="20170810 03:59:03.397" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:03.406" starttime="20170810 03:59:03.193" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:03.406" starttime="20170810 03:59:03.193" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:03.406" starttime="20170810 03:59:03.193" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:03.406" starttime="20170810 03:59:03.187" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:03.406" starttime="20170810 03:59:03.187" status="PASS"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:03.407">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status endtime="20170810 03:59:03.407" starttime="20170810 03:59:03.407" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:59:03.408">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status endtime="20170810 03:59:03.408" starttime="20170810 03:59:03.408" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:59:03.412">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:59:03.412" starttime="20170810 03:59:03.411" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:03.412" starttime="20170810 03:59:03.410" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:59:03.413">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:59:03.413" starttime="20170810 03:59:03.413" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:03.413" starttime="20170810 03:59:03.412" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:59:03.414">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:59:03.414" starttime="20170810 03:59:03.414" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:03.414" starttime="20170810 03:59:03.413" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:59:03.415">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:59:03.416" starttime="20170810 03:59:03.415" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:03.416" starttime="20170810 03:59:03.415" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:03.416" starttime="20170810 03:59:03.410" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:03.416" starttime="20170810 03:59:03.409" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:03.417">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status endtime="20170810 03:59:03.417" starttime="20170810 03:59:03.416" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:59:03.488">encoding=UTF-8
height=24
prompt=# 
port=22
term_type=vt100
index=1
timeout=25 seconds
host=9.41.166.169
alias=bmc_connection
path_separator=/
newline=

width=80</msg>
<msg level="INFO" timestamp="20170810 03:59:03.489">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg level="INFO" timestamp="20170810 03:59:06.367">Command exited with return code 0.</msg>
<status endtime="20170810 03:59:06.368" starttime="20170810 03:59:03.447" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:59:06.368">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:59:06.368">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState.R...</msg>
<status endtime="20170810 03:59:06.368" starttime="20170810 03:59:03.417" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:06.368">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Runnin...</msg>
<status endtime="20170810 03:59:06.369" starttime="20170810 03:59:06.368" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:06.369">${stderr} = </msg>
<status endtime="20170810 03:59:06.369" starttime="20170810 03:59:06.369" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:59:06.375">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:59:06.376" starttime="20170810 03:59:06.375" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:06.376" starttime="20170810 03:59:06.374" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:06.376" starttime="20170810 03:59:06.369" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:06.376" starttime="20170810 03:59:03.409" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:06.376" starttime="20170810 03:59:03.408" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:06.376" starttime="20170810 03:59:03.408" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:06.376" starttime="20170810 03:59:03.407" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:06.376" starttime="20170810 03:59:03.406" status="PASS"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:06.377">@{cmd_list} = [ ('BMC OS', 'uname -a') | ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') ]</msg>
<status endtime="20170810 03:59:06.377" starttime="20170810 03:59:06.377" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:59:06.378">${ENTRY_INDEX} = BMC DATA</msg>
<status endtime="20170810 03:59:06.378" starttime="20170810 03:59:06.378" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC OS', 'uname -a')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:59:06.381">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:59:06.381" starttime="20170810 03:59:06.381" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:06.381" starttime="20170810 03:59:06.380" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:59:06.383">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:59:06.383" starttime="20170810 03:59:06.382" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:06.383" starttime="20170810 03:59:06.381" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:59:06.384">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:59:06.384" starttime="20170810 03:59:06.384" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:06.384" starttime="20170810 03:59:06.383" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:59:06.385">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:59:06.385" starttime="20170810 03:59:06.385" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:06.386" starttime="20170810 03:59:06.384" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:06.386" starttime="20170810 03:59:06.380" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:06.386" starttime="20170810 03:59:06.379" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:06.386">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status endtime="20170810 03:59:06.387" starttime="20170810 03:59:06.386" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:59:06.454">encoding=UTF-8
height=24
prompt=# 
port=22
term_type=vt100
index=1
timeout=25 seconds
host=9.41.166.169
alias=bmc_connection
path_separator=/
newline=

width=80</msg>
<msg level="INFO" timestamp="20170810 03:59:06.454">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20170810 03:59:06.811">Command exited with return code 0.</msg>
<status endtime="20170810 03:59:06.811" starttime="20170810 03:59:06.418" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:59:06.811">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:59:06.811">${ret_values} = (u'Linux witherspoon 4.10.17-baeb50beb784ac5993d2bfb5d06d909971b60506 #1 Thu Aug 10 02:56:07 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status endtime="20170810 03:59:06.811" starttime="20170810 03:59:06.387" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:06.812">${stdout} = Linux witherspoon 4.10.17-baeb50beb784ac5993d2bfb5d06d909971b60506 #1 Thu Aug 10 02:56:07 UTC 2017 armv6l GNU/Linux</msg>
<status endtime="20170810 03:59:06.812" starttime="20170810 03:59:06.812" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:06.812">${stderr} = </msg>
<status endtime="20170810 03:59:06.812" starttime="20170810 03:59:06.812" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:59:06.820">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:59:06.820" starttime="20170810 03:59:06.820" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:06.820" starttime="20170810 03:59:06.819" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:06.820" starttime="20170810 03:59:06.813" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:06.820" starttime="20170810 03:59:06.378" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:06.820" starttime="20170810 03:59:06.378" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC Uptime', 'uptime')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:59:06.823">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:59:06.823" starttime="20170810 03:59:06.823" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:06.823" starttime="20170810 03:59:06.822" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:59:06.825">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:59:06.825" starttime="20170810 03:59:06.824" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:06.825" starttime="20170810 03:59:06.824" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:59:06.826">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:59:06.826" starttime="20170810 03:59:06.826" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:06.826" starttime="20170810 03:59:06.825" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:59:06.828">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:59:06.828" starttime="20170810 03:59:06.827" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:06.828" starttime="20170810 03:59:06.826" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:06.828" starttime="20170810 03:59:06.822" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:06.828" starttime="20170810 03:59:06.821" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:06.829">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status endtime="20170810 03:59:06.829" starttime="20170810 03:59:06.828" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:59:06.896">encoding=UTF-8
height=24
prompt=# 
port=22
term_type=vt100
index=1
timeout=25 seconds
host=9.41.166.169
alias=bmc_connection
path_separator=/
newline=

width=80</msg>
<msg level="INFO" timestamp="20170810 03:59:06.897">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20170810 03:59:07.337">Command exited with return code 0.</msg>
<status endtime="20170810 03:59:07.338" starttime="20170810 03:59:06.859" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:59:07.338">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:59:07.338">${ret_values} = (u' 16:00:01 up 17 min,  load average: 2.02, 1.74, 1.17', u'', 0)</msg>
<status endtime="20170810 03:59:07.338" starttime="20170810 03:59:06.829" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:07.338">${stdout} =  16:00:01 up 17 min,  load average: 2.02, 1.74, 1.17</msg>
<status endtime="20170810 03:59:07.338" starttime="20170810 03:59:07.338" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:07.339">${stderr} = </msg>
<status endtime="20170810 03:59:07.339" starttime="20170810 03:59:07.339" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:59:07.345">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:59:07.345" starttime="20170810 03:59:07.345" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:07.346" starttime="20170810 03:59:07.344" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:07.346" starttime="20170810 03:59:07.339" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:07.346" starttime="20170810 03:59:06.821" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:07.346" starttime="20170810 03:59:06.821" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:59:07.349">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:59:07.349" starttime="20170810 03:59:07.348" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:07.349" starttime="20170810 03:59:07.348" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:59:07.350">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:59:07.350" starttime="20170810 03:59:07.350" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:07.350" starttime="20170810 03:59:07.349" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:59:07.351">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:59:07.352" starttime="20170810 03:59:07.351" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:07.352" starttime="20170810 03:59:07.351" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:59:07.353">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:59:07.353" starttime="20170810 03:59:07.352" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:07.353" starttime="20170810 03:59:07.352" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:07.353" starttime="20170810 03:59:07.347" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:07.353" starttime="20170810 03:59:07.347" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:07.354">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status endtime="20170810 03:59:07.354" starttime="20170810 03:59:07.353" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:59:07.421">encoding=UTF-8
height=24
prompt=# 
port=22
term_type=vt100
index=1
timeout=25 seconds
host=9.41.166.169
alias=bmc_connection
path_separator=/
newline=

width=80</msg>
<msg level="INFO" timestamp="20170810 03:59:07.422">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20170810 03:59:07.898">Command exited with return code 0.</msg>
<status endtime="20170810 03:59:07.899" starttime="20170810 03:59:07.385" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:59:07.899">${status} = PASS</msg>
<msg level="INFO" timestamp="20170810 03:59:07.899">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status endtime="20170810 03:59:07.899" starttime="20170810 03:59:07.354" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:07.899">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.1...</msg>
<status endtime="20170810 03:59:07.899" starttime="20170810 03:59:07.899" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:07.900">${stderr} = </msg>
<status endtime="20170810 03:59:07.900" starttime="20170810 03:59:07.900" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:59:07.910">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/20170810035818314042_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:59:07.910" starttime="20170810 03:59:07.909" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:07.910" starttime="20170810 03:59:07.908" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:07.910" starttime="20170810 03:59:07.901" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:07.910" starttime="20170810 03:59:07.346" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:07.910" starttime="20170810 03:59:07.346" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:07.910" starttime="20170810 03:59:06.378" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:07.910" starttime="20170810 03:59:06.376" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:07.910" starttime="20170810 03:59:06.376" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:07.910" starttime="20170810 03:59:03.187" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:07.910" starttime="20170810 03:59:03.186" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:07.910" starttime="20170810 03:59:03.162" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:07.911" starttime="20170810 03:59:03.159" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:07.911" starttime="20170810 03:59:03.159" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:07.911" starttime="20170810 03:58:18.563" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:07.911" starttime="20170810 03:58:18.561" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:07.911" starttime="20170810 03:58:18.561" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:07.911" starttime="20170810 03:58:18.560" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key U">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw library="SSHLibrary" name="Close All Connections">
<doc>Closes all open connections.</doc>
<status endtime="20170810 03:59:07.918" starttime="20170810 03:59:07.918" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:07.918" starttime="20170810 03:59:07.911" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:07.918" starttime="20170810 03:58:18.560" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:07.919" starttime="20170810 03:58:15.225" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:07.919" starttime="20170810 03:58:15.225" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170810 03:59:07.919" starttime="20170810 03:59:07.919" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:07.929">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170810 03:59:07.929" starttime="20170810 03:59:07.920" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:07.929">${FFDC_DIR_PATH} = /tmp/fspcibld/29434/obmc-robot/logs/20170810035818314042_TestsTestBasicPoweron/20170810035818314042_PowerOnTest/</msg>
<status endtime="20170810 03:59:07.930" starttime="20170810 03:59:07.929" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status endtime="20170810 03:59:07.930" starttime="20170810 03:59:07.930" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170810 03:59:07.931" starttime="20170810 03:59:07.930" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:59:07.931">Directory '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs"&gt;/tmp/fspcibld/29434/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20170810 03:59:07.931" starttime="20170810 03:59:07.931" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:59:07.932">File '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20170810 03:59:07.932" starttime="20170810 03:59:07.932" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:59:07.932">${exist} = True</msg>
<status endtime="20170810 03:59:07.933" starttime="20170810 03:59:07.932" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20170810 03:59:07.933" starttime="20170810 03:59:07.933" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170810 03:59:07.934" starttime="20170810 03:59:07.933" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:07.935">${cur_time} = 2017-08-10 03:59:07:934371</msg>
<status endtime="20170810 03:59:07.935" starttime="20170810 03:59:07.934" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:07.935">${cur_time} = 20170810035907934371</msg>
<status endtime="20170810 03:59:07.935" starttime="20170810 03:59:07.935" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:59:07.935">${cur_time} = 20170810035907934371</msg>
<status endtime="20170810 03:59:07.935" starttime="20170810 03:59:07.934" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:59:07.936">Appended to file '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/29434/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 03:59:07.936" starttime="20170810 03:59:07.936" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:07.936" starttime="20170810 03:59:07.919" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:07.936" starttime="20170810 03:58:14.194" status="PASS"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:07.938">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170810 03:59:07.938" starttime="20170810 03:59:07.938" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:07.939">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170810 03:59:07.939" starttime="20170810 03:59:07.938" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:59:07.939">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170810 03:59:07.939" starttime="20170810 03:59:07.937" status="PASS"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:07.940">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170810 03:59:07.940" starttime="20170810 03:59:07.940" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170810 03:59:07.940" starttime="20170810 03:59:07.940" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:07.954">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170810 03:59:07.974">${rc} = 0</msg>
<msg level="INFO" timestamp="20170810 03:59:07.974">${output} = /tmp/fspcibld/29434/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170810 03:59:07.975" starttime="20170810 03:59:07.941" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170810 03:59:07.989" starttime="20170810 03:59:07.986" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170810 03:59:07.995" starttime="20170810 03:59:07.991" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:07.997">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status endtime="20170810 03:59:07.997" starttime="20170810 03:59:07.996" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:59:07.999">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status endtime="20170810 03:59:07.999" starttime="20170810 03:59:07.939" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:08.000">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170810 03:59:08.000" starttime="20170810 03:59:07.999" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170810 03:59:08.001" starttime="20170810 03:59:08.000" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:08.011">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170810 03:59:08.026">${rc} = 0</msg>
<msg level="INFO" timestamp="20170810 03:59:08.027">${os_con_pid} = </msg>
<status endtime="20170810 03:59:08.028" starttime="20170810 03:59:08.001" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170810 03:59:08.039" starttime="20170810 03:59:08.037" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:08.041">${cmd_buf} = kill -9 </msg>
<status endtime="20170810 03:59:08.041" starttime="20170810 03:59:08.040" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170810 03:59:08.056" starttime="20170810 03:59:08.042" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:08.057">${rc} = None</msg>
<msg level="INFO" timestamp="20170810 03:59:08.057">${output} = None</msg>
<status endtime="20170810 03:59:08.057" starttime="20170810 03:59:08.057" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170810 03:59:08.058" starttime="20170810 03:59:08.057" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170810 03:59:08.066">Copied file from '&lt;a href="file:///tmp/9.41.166.169_os_console"&gt;/tmp/9.41.166.169_os_console&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/29434/obmc-robot/logs/9.41.166.169_os_console"&gt;/tmp/fspcibld/29434/obmc-robot/logs/9.41.166.169_os_console&lt;/a&gt;'.</msg>
<status endtime="20170810 03:59:08.066" starttime="20170810 03:59:08.061" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:08.066" starttime="20170810 03:59:08.060" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:08.066" starttime="20170810 03:59:08.058" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:08.067">${output} = </msg>
<status endtime="20170810 03:59:08.067" starttime="20170810 03:59:08.067" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170810 03:59:08.068">${loc_quiet} = 1</msg>
<status endtime="20170810 03:59:08.068" starttime="20170810 03:59:08.068" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170810 03:59:08.129" starttime="20170810 03:59:08.069" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:59:08.130">${rc} = 0</msg>
<msg level="INFO" timestamp="20170810 03:59:08.131">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.41.166.169
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 


--== Welcome t...</msg>
<status endtime="20170810 03:59:08.131" starttime="20170810 03:59:08.068" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170810 03:59:08.132">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.41.166.169
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 


--== Welcome t...</msg>
<status endtime="20170810 03:59:08.132" starttime="20170810 03:59:07.937" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20170810 03:59:08.134">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.41.166.169
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 


--== Welcome to Hostboot hostboot-faac61e/hbicore.bin ==--

  4.09218|secure|Booting in non-secure mode.
  4.09220|secure|SecureROM invalid - skipping functionality
  7.14670|ISTEP  6. 5 - host_init_fsi
  7.23938|ISTEP  6. 6 - host_set_ipl_parms
  7.26251|ISTEP  6. 7 - host_discover_targets
 12.50880|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
 12.50881|HWAS|PRESENT&gt; Proc[05]=C000000000000000
 12.55725|ISTEP  6. 8 - host_update_master_tpm
 12.56700|SECURE|Security Access Bit&gt; 0x0000000000000000
 12.56701|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
 12.56721|ISTEP  6. 9 - host_gard
 12.60816|ISTEP  6.10 - host_revert_sbe_mcs_setup
 12.61900|ISTEP  6.11 - host_start_occ_xstop_handler
 12.62159|ISTEP  6.12 - host_voltage_config
 12.67392|ISTEP  7. 2 - mss_volt
 13.20460|ISTEP  7. 3 - mss_freq
 13.54213|ISTEP  7. 4 - mss_eff_config
 16.81860|ISTEP  7. 5 - mss_attr_update
 16.83090|ISTEP  8. 1 - host_slave_sbe_config
 16.86776|ISTEP  8. 2 - host_setup_sbe
 16.87466|ISTEP  8. 3 - host_cbs_start
 16.88454|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 26.49925|ISTEP  8. 5 - host_attnlisten_proc
 26.50061|ISTEP  8. 6 - host_p9_fbc_eff_config
 26.50736|ISTEP  8. 7 - host_p9_eff_config_links
 26.51708|ISTEP  8. 8 - proc_attr_update
 26.51885|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 26.57268|ISTEP  8.10 - proc_xbus_scominit
 29.82265|ISTEP  8.11 - proc_xbus_enable_ridi
 29.82760|ISTEP  9. 1 - fabric_erepair
 29.83624|ISTEP  9. 2 - fabric_io_dccal
 30.69312|ISTEP  9. 3 - fabric_pre_trainadv
 30.70130|ISTEP  9. 4 - fabric_io_run_training
 30.91619|ISTEP  9. 5 - fabric_post_trainadv
 30.92074|ISTEP  9. 6 - proc_smp_link_layer
 30.92605|ISTEP  9. 7 - proc_fab_iovalid
 30.95258|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 30.96355|ISTEP 10. 1 - proc_build_smp
 31.36179|ISTEP 10. 2 - host_slave_sbe_update
142.50661|sbe|System Rebooting To Perform SBE Update

142.51904|================================================
142.52257|Error reported by ipmi (0x2500) PLID 0x90000012
142.52433|  Requested sensor is not present.
142.52434|  ModuleId   0x03 IPMI::MOD_IPMISENSOR
142.52435|  ReasonCode 0x2507 IPMI::RC_SENSOR_NOT_PRESENT
142.52436|  UserData1  BMC IPMI Completion code. : 0x00000000000000cb
142.52438|  UserData2  bytes [0-3]sensor number bytes [4-7]HUID of target. : 0x0000000700000000
142.52439|------------------------------------------------
142.52439|  Callout type             : Procedure Callout
142.52440|  Procedure                : EPUB_PRC_HB_CODE
142.52441|  Priority                 : SRCI_PRIORITY_HIGH
142.52442|------------------------------------------------
142.52442|  Hostboot Build ID: hostboot-faac61e/hbicore.bin
142.52443|================================================
142.53511|IPMI: Initiate power cycle
142.60464|Stopping istep dispatcher
147.79205|IPMI: shutdown complete



--== Welcome to Hostboot hostboot-faac61e/hbicore.bin ==--

  4.01800|secure|Booting in non-secure mode.
  4.01802|secure|SecureROM invalid - skipping functionality
  4.62839|ERRL|Dumping errors reported prior to registration
  5.27834|ISTEP  6. 5 - host_init_fsi
  5.36687|ISTEP  6. 6 - host_set_ipl_parms
  5.39551|ISTEP  6. 7 - host_discover_targets
  5.87441|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
  5.87442|HWAS|PRESENT&gt; Proc[05]=C000000000000000
  5.90356|ISTEP  6. 8 - host_update_master_tpm
  5.91228|SECURE|Security Access Bit&gt; 0x0000000000000000
  5.91229|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
  5.91249|ISTEP  6. 9 - host_gard
  5.96159|ISTEP  6.10 - host_revert_sbe_mcs_setup
  5.97300|ISTEP  6.11 - host_start_occ_xstop_handler
  5.97454|ISTEP  6.12 - host_voltage_config
  6.01241|ISTEP  7. 2 - mss_volt
  6.38805|ISTEP  7. 3 - mss_freq
  6.53457|ISTEP  7. 4 - mss_eff_config
  9.81229|ISTEP  7. 5 - mss_attr_update
  9.82438|ISTEP  8. 1 - host_slave_sbe_config
  9.86032|ISTEP  8. 2 - host_setup_sbe
  9.86682|ISTEP  8. 3 - host_cbs_start
  9.87527|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 18.29002|ISTEP  8. 5 - host_attnlisten_proc
 18.29088|ISTEP  8. 6 - host_p9_fbc_eff_config
 18.29744|ISTEP  8. 7 - host_p9_eff_config_links
 18.30714|ISTEP  8. 8 - proc_attr_update
 18.30885|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 18.36397|ISTEP  8.10 - proc_xbus_scominit
 21.58927|ISTEP  8.11 - proc_xbus_enable_ridi
 21.59446|ISTEP  9. 1 - fabric_erepair
 21.60265|ISTEP  9. 2 - fabric_io_dccal
 22.46428|ISTEP  9. 3 - fabric_pre_trainadv
 22.47162|ISTEP  9. 4 - fabric_io_run_training
 22.68865|ISTEP  9. 5 - fabric_post_trainadv
 22.69298|ISTEP  9. 6 - proc_smp_link_layer
 22.69848|ISTEP  9. 7 - proc_fab_iovalid
 22.72364|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 22.73431|ISTEP 10. 1 - proc_build_smp
 22.90534|ISTEP 10. 2 - host_slave_sbe_update
 23.41308|ISTEP 10. 3 - host_set_voltages
 23.48923|ISTEP 10. 4 - proc_cen_ref_clk_enable
 23.51045|ISTEP 10. 5 - proc_enable_osclite
 23.51137|ISTEP 10. 6 - proc_chiplet_scominit
 23.63253|ISTEP 10. 7 - proc_abus_scominit
 23.64104|ISTEP 10. 8 - proc_obus_scominit
 23.75028|ISTEP 10. 9 - proc_npu_scominit
 23.77387|ISTEP 10.10 - proc_pcie_scominit
 23.83338|ISTEP 10.11 - proc_scomoverride_chiplets
 23.83582|ISTEP 10.12 - proc_chiplet_enable_ridi
 23.83923|ISTEP 10.13 - host_rng_bist
 23.84421|ISTEP 10.14 - host_update_redundant_tpm
 23.92984|ISTEP 11. 1 - host_prd_hwreconfig
 23.93464|ISTEP 12. 1 - mss_getecid
 23.94053|ISTEP 13. 1 - host_disable_memvolt
 24.03292|ISTEP 13. 2 - mem_pll_reset
 24.04813|ISTEP 13. 3 - mem_pll_initf
 24.08436|ISTEP 13. 4 - mem_pll_setup
 24.11122|ISTEP 13. 6 - mem_startclocks
 24.13274|ISTEP 13. 7 - host_enable_memvolt
 24.13481|ISTEP 13. 8 - mss_scominit
 24.59666|ISTEP 13. 9 - mss_ddr_phy_reset
 24.70843|ISTEP 13.10 - mss_draminit
 24.95011|ISTEP 13.11 - mss_draminit_training
 25.30038|ISTEP 13.12 - mss_draminit_trainadv
 25.30327|ISTEP 13.13 - mss_draminit_mc
 25.34034|ISTEP 14. 1 - mss_memdiag
 68.77028|ISTEP 14. 2 - mss_thermal_init
 68.77931|ISTEP 14. 3 - proc_pcie_config
 68.79674|ISTEP 14. 4 - mss_power_cleanup
 68.79995|ISTEP 14. 5 - proc_setup_bars
 68.83668|ISTEP 14. 6 - proc_htm_setup
 68.84770|ISTEP 14. 7 - proc_exit_cache_contained
 68.87085|ISTEP 15. 1 - host_build_stop_image
 69.24077|ISTEP 15. 2 - proc_set_pba_homer_bar
 69.24591|ISTEP 15. 3 - host_establish_ex_chiplet
 69.25641|ISTEP 15. 4 - host_start_stop_engine
 69.36752|ISTEP 16. 1 - host_activate_master
  0.00836|ISTEP 16. 2 - host_activate_slave_cores
 70.61636|ISTEP 16. 3 - host_secure_rng
 70.62763|ISTEP 16. 4 - mss_scrub
 70.68355|ISTEP 16. 5 - host_ipl_complete
 70.67545|ISTEP 16. 6 - host_load_io_ppe
 70.71104|ISTEP 18.11 - proc_tod_setup
 70.76197|ISTEP 18.12 - proc_tod_init
 70.76741|ISTEP 20. 1 - host_load_payload
 71.09581|ISTEP 20. 2 - host_load_hdat
 74.72426|ISTEP 21. 1 - host_runtime_setup
 76.65280|================================================
 76.65622|Error reported by lpc (0x2400) PLID 0x90000024
 76.65796|  LpcDD::_readLPC&gt; Invalid buffer size requested (&gt;4 bytes)
 76.65796|  ModuleId   0x02 LPC::MOD_LPCDD_READLPC
 76.65797|  ReasonCode 0x2403 LPC::RC_BAD_ARG
 76.65969|  UserData1  LPC Address : 0x0ffffe0000000002
 76.65970|  UserData2  LPC Transaction Type : 0x0000000000000200
 76.65971|------------------------------------------------
 76.65972|  Callout type             : Procedure Callout
 76.65973|  Procedure                : EPUB_PRC_HB_CODE
 76.65974|  Priority                 : SRCI_PRIORITY_HIGH
 76.65975|------------------------------------------------
 76.65975|  Hostboot Build ID: hostboot-faac61e/hbicore.bin
 76.65976|================================================
 76.34372|System shutting down with error status 0x90000025
 76.31097|================================================
 76.31098|Error reported by initservice (0x0500) PLID 0x90000025
 76.31348|  Initialization Service launched a function and the task returned an error.
 76.31348|  ModuleId   0x01 BASE_INITSVC_MOD_ID
 76.31349|  ReasonCode 0x0506 WAIT_FN_FAILED
 76.31350|  UserData1  task id or task return code : 0x00000000000001b3
 76.31351|  UserData2  returned status from task : 0x0000000000000001
 76.31352|------------------------------------------------
 76.31353|  Callout type             : Procedure Callout
 76.31354|  Procedure                : EPUB_PRC_HB_CODE
 76.31355|  Priority                 : SRCI_PRIORITY_HIGH
 76.31355|------------------------------------------------
 76.31356|  host_runtime_setup
 76.31357|------------------------------------------------
 76.31358|  Hostboot Build ID: hostboot-faac61e/hbicore.bin
 76.31359|================================================


--== Welcome to Hostboot hostboot-faac61e/hbicore.bin ==--

  4.01960|secure|Booting in non-secure mode.
  4.01961|secure|SecureROM invalid - skipping functionality
  4.65260|ERRL|Dumping errors reported prior to registration
  5.20098|ISTEP  6. 5 - host_init_fsi
  5.27610|ISTEP  6. 6 - host_set_ipl_parms
  5.33795|ISTEP  6. 7 - host_discover_targets
  5.82030|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
  5.82031|HWAS|PRESENT&gt; Proc[05]=C000000000000000
  5.84850|ISTEP  6. 8 - host_update_master_tpm
  5.85695|SECURE|Security Access Bit&gt; 0x0000000000000000
  5.85696|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
  5.85713|ISTEP  6. 9 - host_gard
  5.88966|ISTEP  6.10 - host_revert_sbe_mcs_setup
  5.89995|ISTEP  6.11 - host_start_occ_xstop_handler
  5.90091|ISTEP  6.12 - host_voltage_config
  5.93541|ISTEP  7. 2 - mss_volt
  6.26313|ISTEP  7. 3 - mss_freq
  6.41017|ISTEP  7. 4 - mss_eff_config
  9.72928|ISTEP  7. 5 - mss_attr_update
  9.74172|ISTEP  8. 1 - host_slave_sbe_config
  9.77802|ISTEP  8. 2 - host_setup_sbe
  9.78863|ISTEP  8. 3 - host_cbs_start
  9.79871|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 18.21425|ISTEP  8. 5 - host_attnlisten_proc
 18.21519|ISTEP  8. 6 - host_p9_fbc_eff_config
 18.22192|ISTEP  8. 7 - host_p9_eff_config_links
 18.23213|ISTEP  8. 8 - proc_attr_update
 18.23425|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 18.28740|ISTEP  8.10 - proc_xbus_scominit
 21.54359|ISTEP  8.11 - proc_xbus_enable_ridi
 21.54812|ISTEP  9. 1 - fabric_erepair
 21.55632|ISTEP  9. 2 - fabric_io_dccal
 22.41223|ISTEP  9. 3 - fabric_pre_trainadv
 22.42001|ISTEP  9. 4 - fabric_io_run_training
 22.63407|ISTEP  9. 5 - fabric_post_trainadv
 22.63889|ISTEP  9. 6 - proc_smp_link_layer
 22.64464|ISTEP  9. 7 - proc_fab_iovalid
 22.67005|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 22.68026|ISTEP 10. 1 - proc_build_smp
 22.85296|ISTEP 10. 2 - host_slave_sbe_update
 23.20903|ISTEP 10. 3 - host_set_voltages
 23.24790|ISTEP 10. 4 - proc_cen_ref_clk_enable
 23.25407|ISTEP 10. 5 - proc_enable_osclite
 23.25509|ISTEP 10. 6 - proc_chiplet_scominit
 23.29977|ISTEP 10. 7 - proc_abus_scominit
 23.30754|ISTEP 10. 8 - proc_obus_scominit
 23.59269|ISTEP 10. 9 - proc_npu_scominit
 23.61568|ISTEP 10.10 - proc_pcie_scominit
 23.68894|ISTEP 10.11 - proc_scomoverride_chiplets
 23.69161|ISTEP 10.12 - proc_chiplet_enable_ridi
 23.69556|ISTEP 10.13 - host_rng_bist
 23.70100|ISTEP 10.14 - host_update_redundant_tpm
 23.77177|ISTEP 11. 1 - host_prd_hwreconfig
 23.77724|ISTEP 12. 1 - mss_getecid
 23.78419|ISTEP 13. 1 - host_disable_memvolt
 23.87664|ISTEP 13. 2 - mem_pll_reset
 23.89757|ISTEP 13. 3 - mem_pll_initf
 23.92887|ISTEP 13. 4 - mem_pll_setup
 23.95569|ISTEP 13. 6 - mem_startclocks
 23.97628|ISTEP 13. 7 - host_enable_memvolt
 23.97829|ISTEP 13. 8 - mss_scominit
 24.44307|ISTEP 13. 9 - mss_ddr_phy_reset
 24.76828|ISTEP 13.10 - mss_draminit
 24.99382|ISTEP 13.11 - mss_draminit_training
 25.34118|ISTEP 13.12 - mss_draminit_trainadv
 25.34463|ISTEP 13.13 - mss_draminit_mc
 25.38063|ISTEP 14. 1 - mss_memdiag
 68.81087|ISTEP 14. 2 - mss_thermal_init
 68.82016|ISTEP 14. 3 - proc_pcie_config
 68.83385|ISTEP 14. 4 - mss_power_cleanup
 68.83723|ISTEP 14. 5 - proc_setup_bars
 68.87699|ISTEP 14. 6 - proc_htm_setup
 68.88800|ISTEP 14. 7 - proc_exit_cache_contained
 68.90831|ISTEP 15. 1 - host_build_stop_image
 69.27727|ISTEP 15. 2 - proc_set_pba_homer_bar
 69.28766|ISTEP 15. 3 - host_establish_ex_chiplet
 69.29788|ISTEP 15. 4 - host_start_stop_engine
 69.40439|ISTEP 16. 1 - host_activate_master
  0.00838|ISTEP 16. 2 - host_activate_slave_cores
 70.65219|ISTEP 16. 3 - host_secure_rng
 70.66452|ISTEP 16. 4 - mss_scrub
 70.69524|ISTEP 16. 5 - host_ipl_complete
 70.71835|ISTEP 16. 6 - host_load_io_ppe
 70.73211|ISTEP 18.11 - proc_tod_setup
 70.78935|ISTEP 18.12 - proc_tod_init
 70.79115|ISTEP 20. 1 - host_load_payload
 71.10093|ISTEP 20. 2 - host_load_hdat
 74.76558|ISTEP 21. 1 - host_runtime_setup
 76.04252|================================================
 76.04596|Error reported by lpc (0x2400) PLID 0x90000037
 76.05103|  LpcDD::_readLPC&gt; Invalid buffer size requested (&gt;4 bytes)
 76.05104|  ModuleId   0x02 LPC::MOD_LPCDD_READLPC
 76.05105|  ReasonCode 0x2403 LPC::RC_BAD_ARG
 76.36769|  UserData1  LPC Address : 0x0ffffe0000000002
 76.36770|  UserData2  LPC Transaction Type : 0x0000000000000200
 76.36771|------------------------------------------------
 76.36772|  Callout type             : Procedure Callout
 76.36773|  Procedure                : EPUB_PRC_HB_CODE
 76.36774|  Priority                 : SRCI_PRIORITY_HIGH
 76.36774|------------------------------------------------
 76.36775|  Hostboot Build ID: hostboot-faac61e/hbicore.bin
 76.36776|================================================
 76.06843|System shutting down with error status 0x90000038
 76.38789|================================================
 76.38790|Error reported by initservice (0x0500) PLID 0x90000038
 76.39484|  Initialization Service launched a function and the task returned an error.
 76.39485|  ModuleId   0x01 BASE_INITSVC_MOD_ID
 76.39485|  ReasonCode 0x0506 WAIT_FN_FAILED
 76.39486|  UserData1  task id or task return code : 0x00000000000001b3
 76.39487|  UserData2  returned status from task : 0x0000000000000001
 76.39488|------------------------------------------------
 76.39489|  Callout type             : Procedure Callout
 76.39490|  Procedure                : EPUB_PRC_HB_CODE
 76.39491|  Priority                 : SRCI_PRIORITY_HIGH
 76.39491|------------------------------------------------
 76.39492|  host_runtime_setup
 76.39493|------------------------------------------------
 76.39494|  Hostboot Build ID: hostboot-faac61e/hbicore.bin
 76.39495|================================================


--== Welcome to Hostboot hostboot-faac61e/hbicore.bin ==--

  4.01832|secure|Booting in non-secure mode.
  4.01833|secure|SecureROM invalid - skipping functionality
  4.83333|ERRL|Dumping errors reported prior to registration
  5.38829|ISTEP  6. 5 - host_init_fsi
  5.47425|ISTEP  6. 6 - host_set_ipl_parms
  5.49397|ISTEP  6. 7 - host_discover_targets
  5.96125|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
  5.96127|HWAS|PRESENT&gt; Proc[05]=C000000000000000
  5.98888|ISTEP  6. 8 - host_update_master_tpm
  5.99742|SECURE|Security Access Bit&gt; 0x0000000000000000
  5.99743|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
  5.99763|ISTEP  6. 9 - host_gard
  6.03420|ISTEP  6.10 - host_revert_sbe_mcs_setup
  6.04373|ISTEP  6.11 - host_start_occ_xstop_handler
  6.04472|ISTEP  6.12 - host_voltage_config
  6.08003|ISTEP  7. 2 - mss_volt
  6.30921|ISTEP  7. 3 - mss_freq
  6.45696|ISTEP  7. 4 - mss_eff_config
  9.77387|ISTEP  7. 5 - mss_attr_update
  9.78594|ISTEP  8. 1 - host_slave_sbe_config
  9.82225|ISTEP  8. 2 - host_setup_sbe
  9.82917|ISTEP  8. 3 - host_cbs_start
  9.83888|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 18.25374|ISTEP  8. 5 - host_attnlisten_proc
 18.25626|ISTEP  8. 6 - host_p9_fbc_eff_config
 18.26280|ISTEP  8. 7 - host_p9_eff_config_links
 18.27289|ISTEP  8. 8 - proc_attr_update
 18.27494|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 18.32850|ISTEP  8.10 - proc_xbus_scominit
 21.56237|ISTEP  8.11 - proc_xbus_enable_ridi
 21.56786|ISTEP  9. 1 - fabric_erepair
 21.57609|ISTEP  9. 2 - fabric_io_dccal
 22.43233|ISTEP  9. 3 - fabric_pre_trainadv
 22.43880|ISTEP  9. 4 - fabric_io_run_training
 22.65617|ISTEP  9. 5 - fabric_post_trainadv
 22.66038|ISTEP  9. 6 - proc_smp_link_layer
 22.66677|ISTEP  9. 7 - proc_fab_iovalid
 22.69214|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 22.70282|ISTEP 10. 1 - proc_build_smp
 22.97438|ISTEP 10. 2 - host_slave_sbe_update
 23.28335|ISTEP 10. 3 - host_set_voltages
 23.32325|ISTEP 10. 4 - proc_cen_ref_clk_enable
 23.32917|ISTEP 10. 5 - proc_enable_osclite
 23.33071|ISTEP 10. 6 - proc_chiplet_scominit
 23.37785|ISTEP 10. 7 - proc_abus_scominit
 23.38412|ISTEP 10. 8 - proc_obus_scominit
 23.49130|ISTEP 10. 9 - proc_npu_scominit
 23.51699|ISTEP 10.10 - proc_pcie_scominit
 23.57287|ISTEP 10.11 - proc_scomoverride_chiplets
 23.57576|ISTEP 10.12 - proc_chiplet_enable_ridi
 23.57960|ISTEP 10.13 - host_rng_bist
 23.58461|ISTEP 10.14 - host_update_redundant_tpm
 23.64400|ISTEP 11. 1 - host_prd_hwreconfig
 23.64902|ISTEP 12. 1 - mss_getecid
 23.65444|ISTEP 13. 1 - host_disable_memvolt
 23.74738|ISTEP 13. 2 - mem_pll_reset
 23.76065|ISTEP 13. 3 - mem_pll_initf
 23.79602|ISTEP 13. 4 - mem_pll_setup
 23.82297|ISTEP 13. 6 - mem_startclocks
 23.84346|ISTEP 13. 7 - host_enable_memvolt
 23.84537|ISTEP 13. 8 - mss_scominit
 24.30943|ISTEP 13. 9 - mss_ddr_phy_reset
 24.42343|ISTEP 13.10 - mss_draminit
 24.63478|ISTEP 13.11 - mss_draminit_training
 24.98319|ISTEP 13.12 - mss_draminit_trainadv
 24.98615|ISTEP 13.13 - mss_draminit_mc
 25.02190|ISTEP 14. 1 - mss_memdiag
 68.45016|ISTEP 14. 2 - mss_thermal_init
 68.45916|ISTEP 14. 3 - proc_pcie_config
 68.47613|ISTEP 14. 4 - mss_power_cleanup
 68.47894|ISTEP 14. 5 - proc_setup_bars
 68.51529|ISTEP 14. 6 - proc_htm_setup
 68.52608|ISTEP 14. 7 - proc_exit_cache_contained
 68.54662|ISTEP 15. 1 - host_build_stop_image
 68.91167|ISTEP 15. 2 - proc_set_pba_homer_bar
 68.91680|ISTEP 15. 3 - host_establish_ex_chiplet
 68.92747|ISTEP 15. 4 - host_start_stop_engine
 69.03383|ISTEP 16. 1 - host_activate_master
  0.00636|ISTEP 16. 2 - host_activate_slave_cores
 70.25669|ISTEP 16. 3 - host_secure_rng
 70.24894|ISTEP 16. 4 - mss_scrub
 70.26919|ISTEP 16. 5 - host_ipl_complete
 70.28447|ISTEP 16. 6 - host_load_io_ppe
 70.32542|ISTEP 18.11 - proc_tod_setup
 70.35248|ISTEP 18.12 - proc_tod_init
 70.38299|ISTEP 20. 1 - host_load_payload
 70.71059|ISTEP 20. 2 - host_load_hdat
 74.66201|ISTEP 21. 1 - host_runtime_setup
 75.72065|================================================
 75.69579|Error reported by lpc (0x2400) PLID 0x9000004A
 75.69754|  LpcDD::_readLPC&gt; Invalid buffer size requested (&gt;4 bytes)
 75.69755|  ModuleId   0x02 LPC::MOD_LPCDD_READLPC
 75.69755|  ReasonCode 0x2403 LPC::RC_BAD_ARG
 75.69929|  UserData1  LPC Address : 0x0ffffe0000000002
 75.69930|  UserData2  LPC Transaction Type : 0x0000000000000200
 75.69931|------------------------------------------------
 75.69932|  Callout type             : Procedure Callout
 75.69933|  Procedure                : EPUB_PRC_HB_CODE
 75.69934|  Priority                 : SRCI_PRIORITY_HIGH
 75.69935|------------------------------------------------
 75.69936|  Hostboot Build ID: hostboot-faac61e/hbicore.bin
 75.69937|================================================
 75.74654|System shutting down with error status 0x9000004B
 75.74657|================================================
 75.74658|Error reported by initservice (0x0500) PLID 0x9000004B
 75.74883|  Initialization Service launched a function and the task returned an error.
 75.74884|  ModuleId   0x01 BASE_INITSVC_MOD_ID
 75.74884|  ReasonCode 0x0506 WAIT_FN_FAILED
 75.74885|  UserData1  task id or task return code : 0x00000000000001b3
 75.74886|  UserData2  returned status from task : 0x0000000000000001
 75.74887|------------------------------------------------
 75.74888|  Callout type             : Procedure Callout
 75.74889|  Procedure                : EPUB_PRC_HB_CODE
 75.74889|  Priority                 : SRCI_PRIORITY_HIGH
 75.74890|------------------------------------------------
 75.74891|  host_runtime_setup
 75.74892|------------------------------------------------
 75.74893|  Hostboot Build ID: hostboot-faac61e/hbicore.bin
 75.74893|================================================


--== Welcome to Hostboot hostboot-faac61e/hbicore.bin ==--

  4.01831|secure|Booting in non-secure mode.
  4.01832|secure|SecureROM invalid - skipping functionality
  4.62910|ERRL|Dumping errors reported prior to registration
  5.29714|ISTEP  6. 5 - host_init_fsi
  5.38935|ISTEP  6. 6 - host_set_ipl_parms
  5.40905|ISTEP  6. 7 - host_discover_targets
  5.87903|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
  5.87904|HWAS|PRESENT&gt; Proc[05]=C000000000000000
  5.90745|ISTEP  6. 8 - host_update_master_tpm
  5.91597|SECURE|Security Access Bit&gt; 0x0000000000000000
  5.91598|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
  5.91619|ISTEP  6. 9 - host_gard
  5.94928|ISTEP  6.10 - host_revert_sbe_mcs_setup
  5.95847|ISTEP  6.11 - host_start_occ_xstop_handler
  5.95938|ISTEP  6.12 - host_voltage_config
  6.07920|ISTEP  7. 2 - mss_volt
  6.53522|ISTEP  7. 3 - mss_freq
  6.73820|ISTEP  7. 4 - mss_eff_config
 10.02294|ISTEP  7. 5 - mss_attr_update
 10.03574|ISTEP  8. 1 - host_slave_sbe_config
 10.27448|ISTEP  8. 2 - host_setup_sbe
 10.28137|ISTEP  8. 3 - host_cbs_start
 10.29029|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 18.70455|ISTEP  8. 5 - host_attnlisten_proc
 18.70608|ISTEP  8. 6 - host_p9_fbc_eff_config
 18.71313|ISTEP  8. 7 - host_p9_eff_config_links
 18.72332|ISTEP  8. 8 - proc_attr_update
 18.72735|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 18.78218|ISTEP  8.10 - proc_xbus_scominit
 22.02896|ISTEP  8.11 - proc_xbus_enable_ridi
 22.03493|ISTEP  9. 1 - fabric_erepair
 22.04309|ISTEP  9. 2 - fabric_io_dccal
 22.90092|ISTEP  9. 3 - fabric_pre_trainadv
 22.90699|ISTEP  9. 4 - fabric_io_run_training
 23.12208|ISTEP  9. 5 - fabric_post_trainadv
 23.12686|ISTEP  9. 6 - proc_smp_link_layer
 23.13205|ISTEP  9. 7 - proc_fab_iovalid
 23.15766|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 23.16792|ISTEP 10. 1 - proc_build_smp
 23.43600|ISTEP 10. 2 - host_slave_sbe_update
 23.79311|ISTEP 10. 3 - host_set_voltages
 23.95866|ISTEP 10. 4 - proc_cen_ref_clk_enable
 23.96592|ISTEP 10. 5 - proc_enable_osclite
 23.96885|ISTEP 10. 6 - proc_chiplet_scominit
 24.01959|ISTEP 10. 7 - proc_abus_scominit
 24.02832|ISTEP 10. 8 - proc_obus_scominit
 24.13769|ISTEP 10. 9 - proc_npu_scominit
 24.16067|ISTEP 10.10 - proc_pcie_scominit
 24.22779|ISTEP 10.11 - proc_scomoverride_chiplets
 24.23017|ISTEP 10.12 - proc_chiplet_enable_ridi
 24.23375|ISTEP 10.13 - host_rng_bist
 24.23905|ISTEP 10.14 - host_update_redundant_tpm
 24.31081|ISTEP 11. 1 - host_prd_hwreconfig
 24.31672|ISTEP 12. 1 - mss_getecid
 24.32260|ISTEP 13. 1 - host_disable_memvolt
 24.41527|ISTEP 13. 2 - mem_pll_reset
 24.42892|ISTEP 13. 3 - mem_pll_initf
 24.46383|ISTEP 13. 4 - mem_pll_setup
 24.50435|ISTEP 13. 6 - mem_startclocks
 24.52515|ISTEP 13. 7 - host_enable_memvolt
 24.52716|ISTEP 13. 8 - mss_scominit
 24.99391|ISTEP 13. 9 - mss_ddr_phy_reset
 25.10376|ISTEP 13.10 - mss_draminit
 25.31593|ISTEP 13.11 - mss_draminit_training
 25.67266|ISTEP 13.12 - mss_draminit_trainadv
 25.67563|ISTEP 13.13 - mss_draminit_mc
 25.72214|ISTEP 14. 1 - mss_memdiag
 69.18145|ISTEP 14. 2 - mss_thermal_init
 69.19141|ISTEP 14. 3 - proc_pcie_config
 69.20579|ISTEP 14. 4 - mss_power_cleanup
 69.20873|ISTEP 14. 5 - proc_setup_bars
 69.24557|ISTEP 14. 6 - proc_htm_setup
 69.25861|ISTEP 14. 7 - proc_exit_cache_contained
 69.36241|ISTEP 15. 1 - host_build_stop_image
 69.92936|ISTEP 15. 2 - proc_set_pba_homer_bar
 69.93526|ISTEP 15. 3 - host_establish_ex_chiplet
 69.94566|ISTEP 15. 4 - host_start_stop_engine
 70.05683|ISTEP 16. 1 - host_activate_master
  0.00637|ISTEP 16. 2 - host_activate_slave_cores
 71.27141|ISTEP 16. 3 - host_secure_rng
 71.26015|ISTEP 16. 4 - mss_scrub
 71.30361|ISTEP 16. 5 - host_ipl_complete
 71.31487|ISTEP 16. 6 - host_load_io_ppe
 71.33956|ISTEP 18.11 - proc_tod_setup
 71.37383|ISTEP 18.12 - proc_tod_init
 71.40470|ISTEP 20. 1 - host_load_payload
 71.72277|ISTEP 20. 2 - host_load_hdat
 75.38707|ISTEP 21. 1 - host_runtime_setup
 76.95223|================================================
 76.96197|Error reported by lpc (0x2400) PLID 0x9000005D
 76.96368|  LpcDD::_readLPC&gt; Invalid buffer size requested (&gt;4 bytes)
 76.96369|  ModuleId   0x02 LPC::MOD_LPCDD_READLPC
 76.96370|  ReasonCode 0x2403 LPC::RC_BAD_ARG
 76.96542|  UserData1  LPC Address : 0x0ffffe0000000002
 76.96543|  UserData2  LPC Transaction Type : 0x0000000000000200
 76.96543|------------------------------------------------
 76.96544|  Callout type             : Procedure Callout
 76.96545|  Procedure                : EPUB_PRC_HB_CODE
 76.96546|  Priority                 : SRCI_PRIORITY_HIGH
 76.96547|------------------------------------------------
 76.96547|  Hostboot Build ID: hostboot-faac61e/hbicore.bin
 76.96548|================================================
 76.98132|System shutting down with error status 0x9000005E
 76.66352|================================================
 76.66353|Error reported by initservice (0x0500) PLID 0x9000005E
 76.66602|  Initialization Service launched a function and the task returned an error.
 76.66603|  ModuleId   0x01 BASE_INITSVC_MOD_ID
 76.66604|  ReasonCode 0x0506 WAIT_FN_FAILED
 76.66605|  UserData1  task id or task return code : 0x00000000000001b3
 76.66606|  UserData2  returned status from task : 0x0000000000000001
 76.66607|------------------------------------------------
 76.66608|  Callout type             : Procedure Callout
 76.66609|  Procedure                : EPUB_PRC_HB_CODE
 76.66609|  Priority                 : SRCI_PRIORITY_HIGH
 76.66610|------------------------------------------------
 76.66611|  host_runtime_setup
 76.66612|------------------------------------------------
 76.66612|  Hostboot Build ID: hostboot-faac61e/hbicore.bin
 76.66613|================================================
</msg>
<status endtime="20170810 03:59:08.135" starttime="20170810 03:59:08.133" status="PASS"></status>
</kw>
<status endtime="20170810 03:59:08.135" starttime="20170810 03:58:14.194" status="PASS"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status critical="yes" endtime="20170810 03:59:08.135" starttime="20170810 03:47:54.894" status="FAIL">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: Off != FW Progress, Starting OS</status>
</test>
<doc>Test power on for HW CI.</doc>
<status endtime="20170810 03:59:08.136" starttime="20170810 03:47:54.860" status="FAIL"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status endtime="20170810 03:59:08.140" starttime="20170810 03:47:48.962" status="FAIL"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="1">Critical Tests</stat>
<stat pass="1" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="0" fail="1">Power_On_Test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
</tag>
<suite>
<stat pass="1" name="Tests" fail="1" id="s1">Tests</stat>
<stat pass="1" name="Security" fail="0" id="s1-s1">Tests.Security</stat>
<stat pass="1" name="Test Ssl" fail="0" id="s1-s1-s1">Tests.Security.Test Ssl</stat>
<stat pass="0" name="Test Basic Poweron" fail="1" id="s1-s2">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
